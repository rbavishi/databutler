2022-08-05 22:46:22.778 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval1
2022-08-05 22:46:22.779 | DEBUG    | __main__:run:495 - Found 68 benchmarks in PandasEval1
2022-08-05 22:46:22.779 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-05 22:46:22.779 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-05 22:46:22.779 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-05 22:46:22.779 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-05 22:46:22.779 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-05 22:46:22.779 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-05 22:46:22.780 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-05 22:46:22.780 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-05 22:46:22.780 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-05 22:46:22.780 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-05 22:46:22.780 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-05 22:46:22.780 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-05 22:46:28.905 | DEBUG    | __main__:run:543 - Failed to run benchmark 3 A Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-05 22:46:28.905 | ERROR    | __main__:run:545 - CUDA out of memory. Tried to allocate 1.13 GiB (GPU 0; 10.73 GiB total capacity; 1.60 GiB already allocated; 967.25 MiB free; 1.65 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f2c26bc27a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f2c26d418c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f2b91d6c810>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f2b91d6c810>>

> File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with ...
    │               └ {'queries': [{'query': "Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with ...
    └ {'query': "Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and ass...

  File "experiments/jigsaw_experiments.py", line 423, in run_benchmark
    db_matches = self.searcher.process_query(query, num_results=20)
                 │    │        │             └ "Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to ...
                 │    │        └ <function EmbeddingBasedSearcher.process_query at 0x7f2b91de7f80>
                 │    └ <databutler.mining.static_pandas_mining.autodoc_search.EmbeddingBasedSearcher object at 0x7f2b91bd2f90>
                 └ <__main__.Algorithm1 object at 0x7f2b91d6c810>

  File "/public/databutler/databutler/mining/static_pandas_mining/autodoc_search.py", line 703, in process_query
    distances = util.cos_sim(query_embedding, embeddings)[0]
                │    │       │                └ tensor([[ 0.3258, -0.9557, -0.1629,  ...,  0.3255, -0.4413, -1.2893],
                │    │       │                          [ 0.3475, -0.9356, -0.1474,  ...,  0.3515, -0.4...
                │    │       └ tensor([ 6.7618e-01,  1.8413e-02, -3.7618e-01, -2.0263e-02, -3.5215e-01,
                │    │                  1.2377e-01,  3.3586e-01,  1.0409e-01,  1.29...
                │    └ <function cos_sim at 0x7f2b91f5cc20>
                └ <module 'sentence_transformers.util' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/sentence_transf...

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/sentence_transformers/util.py", line 41, in cos_sim
    b_norm = torch.nn.functional.normalize(b, p=2, dim=1)
             │     │  │          │         └ tensor([[ 0.3258, -0.9557, -0.1629,  ...,  0.3255, -0.4413, -1.2893],
             │     │  │          │                   [ 0.3475, -0.9356, -0.1474,  ...,  0.3515, -0.4...
             │     │  │          └ <function normalize at 0x7f2baa69ca70>
             │     │  └ <module 'torch.nn.functional' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/torch/nn/functional.py'>
             │     └ <module 'torch.nn' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/torch/nn/__init__.py'>
             └ <module 'torch' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/torch/__init__.py'>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/torch/nn/functional.py", line 4638, in normalize
    return input / denom
           │       └ tensor([[18.9189, 18.9189, 18.9189,  ..., 18.9189, 18.9189, 18.9189],
           │                 [18.9013, 18.9013, 18.9013,  ..., 18.9013, 18.9...
           └ tensor([[ 0.3258, -0.9557, -0.1629,  ...,  0.3255, -0.4413, -1.2893],
                     [ 0.3475, -0.9356, -0.1474,  ...,  0.3515, -0.4...

RuntimeError: CUDA out of memory. Tried to allocate 1.13 GiB (GPU 0; 10.73 GiB total capacity; 1.60 GiB already allocated; 967.25 MiB free; 1.65 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
2022-08-05 22:46:30.903 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval1
2022-08-05 22:46:30.903 | DEBUG    | __main__:run:495 - Found 68 benchmarks in PandasEval1
2022-08-05 22:46:30.903 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-05 22:46:30.904 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-05 22:46:30.904 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-05 22:46:30.904 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-05 22:46:30.904 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-05 22:46:30.904 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-05 22:46:30.904 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-05 22:46:30.904 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-05 22:46:30.904 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-05 22:46:30.904 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-05 22:46:30.904 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-05 22:46:30.905 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-05 22:46:37.159 | DEBUG    | __main__:run:543 - Failed to run benchmark 3 A Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-05 22:46:37.159 | ERROR    | __main__:run:545 - CUDA out of memory. Tried to allocate 1.13 GiB (GPU 0; 10.73 GiB total capacity; 1.60 GiB already allocated; 967.25 MiB free; 1.65 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f5bf9c357a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f5bf9db48c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f5b64e359d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f5b64e359d0>>

> File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with ...
    │               └ {'queries': [{'query': "Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with ...
    └ {'query': "Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and ass...

  File "experiments/jigsaw_experiments.py", line 423, in run_benchmark
    db_matches = self.searcher.process_query(query, num_results=20)
                 │    │        │             └ "Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to ...
                 │    │        └ <function EmbeddingBasedSearcher.process_query at 0x7f5b64e41f80>
                 │    └ <databutler.mining.static_pandas_mining.autodoc_search.EmbeddingBasedSearcher object at 0x7f5b64c2e990>
                 └ <__main__.Algorithm1 object at 0x7f5b64e359d0>

  File "/public/databutler/databutler/mining/static_pandas_mining/autodoc_search.py", line 703, in process_query
    distances = util.cos_sim(query_embedding, embeddings)[0]
                │    │       │                └ tensor([[ 0.3258, -0.9557, -0.1629,  ...,  0.3255, -0.4413, -1.2893],
                │    │       │                          [ 0.3475, -0.9356, -0.1474,  ...,  0.3515, -0.4...
                │    │       └ tensor([ 6.7618e-01,  1.8413e-02, -3.7618e-01, -2.0263e-02, -3.5215e-01,
                │    │                  1.2377e-01,  3.3586e-01,  1.0409e-01,  1.29...
                │    └ <function cos_sim at 0x7f5b64fb6c20>
                └ <module 'sentence_transformers.util' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/sentence_transf...

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/sentence_transformers/util.py", line 41, in cos_sim
    b_norm = torch.nn.functional.normalize(b, p=2, dim=1)
             │     │  │          │         └ tensor([[ 0.3258, -0.9557, -0.1629,  ...,  0.3255, -0.4413, -1.2893],
             │     │  │          │                   [ 0.3475, -0.9356, -0.1474,  ...,  0.3515, -0.4...
             │     │  │          └ <function normalize at 0x7f5b7d70fa70>
             │     │  └ <module 'torch.nn.functional' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/torch/nn/functional.py'>
             │     └ <module 'torch.nn' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/torch/nn/__init__.py'>
             └ <module 'torch' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/torch/__init__.py'>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/torch/nn/functional.py", line 4638, in normalize
    return input / denom
           │       └ tensor([[18.9189, 18.9189, 18.9189,  ..., 18.9189, 18.9189, 18.9189],
           │                 [18.9013, 18.9013, 18.9013,  ..., 18.9013, 18.9...
           └ tensor([[ 0.3258, -0.9557, -0.1629,  ...,  0.3255, -0.4413, -1.2893],
                     [ 0.3475, -0.9356, -0.1474,  ...,  0.3515, -0.4...

RuntimeError: CUDA out of memory. Tried to allocate 1.13 GiB (GPU 0; 10.73 GiB total capacity; 1.60 GiB already allocated; 967.25 MiB free; 1.65 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
2022-08-06 05:05:11.136 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval1
2022-08-06 05:05:11.136 | DEBUG    | __main__:run:495 - Found 68 benchmarks in PandasEval1
2022-08-06 05:05:11.136 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 05:05:11.136 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:11.137 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:11.137 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 05:05:11.137 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:11.137 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:11.137 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 05:05:11.137 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:11.138 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:11.138 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 05:05:11.138 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:11.138 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:19.093 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.093 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.assign(id=lambda x: x['id'].replace(5, 1005), idnew=lambda x: x['idnew'].replace(-45, -1005))
2022-08-06 05:05:19.107 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.107 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.107 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, 1005)
2022-08-06 05:05:19.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.120 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.120 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, 1005)
2022-08-06 05:05:19.133 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.133 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.134 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, {'id': 1005, 'idnew': -1005})
2022-08-06 05:05:19.146 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.147 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.147 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.assign(id=df1['id'].replace(5, 1005), idnew=df1['idnew'].replace(-45, -1005))
2022-08-06 05:05:19.159 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.159 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.160 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, {'id': 1005, 'idnew': -1005})
2022-08-06 05:05:19.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.172 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.172 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, 1005)
2022-08-06 05:05:19.185 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.185 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.185 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.copy()
2022-08-06 05:05:19.197 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.197 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.197 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, 1005)
2022-08-06 05:05:19.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.210 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.210 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -5}, {'id': 1005, 'idnew': -1005})
2022-08-06 05:05:19.223 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.223 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.223 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.assign(id=lambda x: x['id'].replace(5, 1005), idnew=lambda x: x['idnew'].replace(-45, -1005))
2022-08-06 05:05:19.236 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.236 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.236 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, 1005)
2022-08-06 05:05:19.248 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.249 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.249 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, {'id': 1005, 'idnew': -1005})
2022-08-06 05:05:19.261 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.261 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.262 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, {'id': 1005, 'idnew': -1005})
2022-08-06 05:05:19.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.274 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.274 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.copy()
2022-08-06 05:05:19.286 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.286 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.286 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, {'id': 1005, 'idnew': -1005})
2022-08-06 05:05:19.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.299 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.299 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, 1005)
2022-08-06 05:05:19.311 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.311 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.311 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, 1005)
2022-08-06 05:05:19.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.324 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.324 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, {'id': 1005, 'idnew': -1005})
2022-08-06 05:05:19.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.337 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 05:05:19.337 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, 1005)
2022-08-06 05:05:19.349 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:19.350 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 05:05:19.350 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:19.350 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:19.350 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 05:05:19.350 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:19.350 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:19.350 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 05:05:19.351 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:19.351 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:19.351 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 05:05:19.351 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:19.351 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:19.351 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 05:05:19.351 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:19.352 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:19.352 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 05:05:19.352 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:19.352 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:19.352 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 05:05:19.352 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:19.352 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:19.353 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 05:05:19.353 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:19.353 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:21.656 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 05:05:21.657 | DEBUG    | __main__:run_benchmark:432 - df1['score'].mean()
2022-08-06 05:05:21.659 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:21.659 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 05:05:21.659 | DEBUG    | __main__:run_benchmark:432 - df1['score'].notna().mean()
2022-08-06 05:05:21.660 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:21.660 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 05:05:21.661 | DEBUG    | __main__:run_benchmark:432 - (df1.score.astype(float) / df1.score.astype(float).count())
2022-08-06 05:05:21.662 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:21.662 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 05:05:21.662 | DEBUG    | __main__:run_benchmark:432 - #  Save the result in a variable named "fraction"
2022-08-06 05:05:21.662 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:21.662 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 05:05:21.663 | DEBUG    | __main__:run_benchmark:432 - df1['score'].count() / len(df1)
2022-08-06 05:05:21.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:21.664 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 05:05:21.664 | DEBUG    | __main__:run_benchmark:432 - df1['score'].astype(bool).sum(axis=0) / df1['score'].shape[0]
2022-08-06 05:05:21.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:05:21.665 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 05:05:21.665 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:21.666 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:21.666 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 05:05:21.666 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:21.666 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:23.281 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.282 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max().reset_index()
2022-08-06 05:05:23.293 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.293 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.293 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 05:05:23.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.301 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.301 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 05:05:23.308 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.308 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.308 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').Earnings.max()
2022-08-06 05:05:23.316 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.316 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.316 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x.nlargest(1, 'Earnings'))
2022-08-06 05:05:23.328 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.328 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.328 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x.nlargest(1, 'Earnings'))
2022-08-06 05:05:23.340 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.340 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.340 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 05:05:23.347 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.348 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.348 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').Earnings.max()
2022-08-06 05:05:23.355 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.355 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.355 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 05:05:23.362 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.362 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.362 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].transform(np.max)
2022-08-06 05:05:23.369 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.369 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.369 | DEBUG    | __main__:run_benchmark:432 - df1.groupby(['Quarter'])['Earnings'].max()
2022-08-06 05:05:23.376 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.376 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.376 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].transform('max') == df1['Earnings']
2022-08-06 05:05:23.383 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.383 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.383 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 05:05:23.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.390 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.390 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 05:05:23.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.397 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.397 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter', as_index=False)['Earnings'].max()
2022-08-06 05:05:23.406 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.407 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.407 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').Earnings.max()
2022-08-06 05:05:23.413 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.414 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.414 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x.nlargest(1, 'Earnings'))
2022-08-06 05:05:23.425 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.425 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.425 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 05:05:23.432 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.432 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.432 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x.nlargest(1, 'Earnings'))
2022-08-06 05:05:23.444 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.444 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 05:05:23.444 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 05:05:23.451 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:23.451 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 05:05:23.451 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:23.452 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:23.452 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 05:05:23.452 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:23.452 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:23.452 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 05:05:23.452 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:23.452 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:23.453 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 05:05:23.453 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:23.453 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:23.453 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 05:05:23.453 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:23.453 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:25.148 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.148 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 05:05:25.155 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.155 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.156 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.loc[2]
2022-08-06 05:05:25.157 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.157 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.157 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame({'STID': {'a': None, 'b': None, 'c': None, 'd': None}, 'key': {'a': None, 'b': None, 'c': None, 'd': None}})
2022-08-06 05:05:25.165 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.165 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.166 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 05:05:25.171 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.172 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.172 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.loc[2]
2022-08-06 05:05:25.173 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.173 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.173 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 05:05:25.179 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.179 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.180 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 05:05:25.185 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.186 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.186 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 05:05:25.192 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.192 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.192 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 05:05:25.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.198 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.199 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 05:05:25.204 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.205 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.205 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 05:05:25.212 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.212 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.212 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 05:05:25.218 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.218 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.219 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 05:05:25.224 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.224 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.225 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 05:05:25.230 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.230 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.231 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 05:05:25.236 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.237 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.237 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 05:05:25.242 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.243 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.243 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 05:05:25.248 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.249 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.249 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 05:05:25.254 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.254 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.254 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 05:05:25.260 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.260 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 05:05:25.260 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 05:05:25.265 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:25.266 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 05:05:25.266 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:25.266 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:25.266 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 05:05:25.266 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:25.266 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:25.267 | DEBUG    | __main__:run:508 - Running benchmark 21
2022-08-06 05:05:25.267 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:25.267 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:25.267 | DEBUG    | __main__:run:508 - Running benchmark 22
2022-08-06 05:05:25.267 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:25.267 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:27.235 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.236 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 05:05:27.238 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.238 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.238 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum().to_frame('nulls')
2022-08-06 05:05:27.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.240 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.240 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum(axis=1).reset_index()
2022-08-06 05:05:27.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.242 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.242 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum()
2022-08-06 05:05:27.243 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.243 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.243 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 05:05:27.244 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.244 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.244 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum()
2022-08-06 05:05:27.245 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.245 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.245 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 05:05:27.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.247 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.247 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.isna(df1).sum()
2022-08-06 05:05:27.248 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.248 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.248 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum()
2022-08-06 05:05:27.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.249 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.249 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 05:05:27.250 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.250 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.250 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum()
2022-08-06 05:05:27.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.252 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.252 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 05:05:27.253 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.253 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.253 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 05:05:27.254 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.254 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.254 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum()
2022-08-06 05:05:27.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.255 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.255 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum(0)
2022-08-06 05:05:27.256 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.257 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.257 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum(axis=0).reset_index()
2022-08-06 05:05:27.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.258 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.258 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().count()
2022-08-06 05:05:27.260 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.260 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.260 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.apply((lambda x: x.isnull().sum()))
2022-08-06 05:05:27.261 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.261 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.261 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum()
2022-08-06 05:05:27.262 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.262 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 05:05:27.263 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum(1)
2022-08-06 05:05:27.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:27.264 | DEBUG    | __main__:run:508 - Running benchmark 23
2022-08-06 05:05:27.265 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:27.265 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:27.265 | DEBUG    | __main__:run:508 - Running benchmark 24
2022-08-06 05:05:27.265 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:27.265 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:27.265 | DEBUG    | __main__:run:508 - Running benchmark 25
2022-08-06 05:05:27.265 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:27.265 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:27.266 | DEBUG    | __main__:run:508 - Running benchmark 26
2022-08-06 05:05:27.266 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:27.266 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:29.304 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.305 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 05:05:29.315 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.315 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.316 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 05:05:29.325 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.325 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.325 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.groupby('A').agg(['mean', 'median'])
2022-08-06 05:05:29.335 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.335 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.335 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 05:05:29.344 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.344 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.344 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 05:05:29.353 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.353 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.353 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 05:05:29.362 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.362 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.362 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg([np.mean, np.median])
2022-08-06 05:05:29.370 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.371 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.371 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame({'mean': {0: df1['A'].mean(), 1: df1['B'].mean()}, 'median': {0: df1['A'].median(), 1: df1['B'].median()}})
2022-08-06 05:05:29.379 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.379 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.379 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 05:05:29.384 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.385 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.385 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 05:05:29.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.390 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.390 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 05:05:29.399 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.399 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.399 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 05:05:29.404 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.404 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.404 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 05:05:29.410 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.410 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.410 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 05:05:29.415 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.415 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.415 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg({'A': ['mean', 'median'], 'B': ['mean', 'median']})
2022-08-06 05:05:29.424 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.424 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.424 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 05:05:29.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.430 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.430 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.describe()
2022-08-06 05:05:29.440 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.440 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.440 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 05:05:29.445 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.446 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.446 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 05:05:29.454 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.454 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 05:05:29.454 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 05:05:29.460 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:29.461 | DEBUG    | __main__:run:508 - Running benchmark 27
2022-08-06 05:05:29.461 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:29.461 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:29.461 | DEBUG    | __main__:run:508 - Running benchmark 28
2022-08-06 05:05:29.461 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:29.461 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:31.200 | DEBUG    | __main__:run_benchmark:431 - Query: Set 'A' as 5 in 6th row of df1
2022-08-06 05:05:31.200 | DEBUG    | __main__:run_benchmark:432 - df1.loc[5, 'A'] = 5
2022-08-06 05:05:31.208 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:05:31.209 | DEBUG    | __main__:run:508 - Running benchmark 29
2022-08-06 05:05:31.209 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:31.209 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:31.210 | DEBUG    | __main__:run:508 - Running benchmark 30
2022-08-06 05:05:31.210 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:31.210 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:32.700 | DEBUG    | __main__:run_benchmark:431 - Query: Concatenate two data frames and drop duplicates
2022-08-06 05:05:32.701 | DEBUG    | __main__:run_benchmark:432 - pd.concat([df1, df2]).drop_duplicates()
2022-08-06 05:05:32.712 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:32.712 | DEBUG    | __main__:run_benchmark:431 - Query: Concatenate two data frames and drop duplicates
2022-08-06 05:05:32.712 | DEBUG    | __main__:run_benchmark:432 - pd.concat([df1, df2], axis=0, ignore_index=True).drop_duplicates()
2022-08-06 05:05:32.722 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:05:32.723 | DEBUG    | __main__:run:508 - Running benchmark 31
2022-08-06 05:05:32.723 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:32.723 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:32.723 | DEBUG    | __main__:run:508 - Running benchmark 32
2022-08-06 05:05:32.723 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:32.724 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:32.724 | DEBUG    | __main__:run:508 - Running benchmark 33
2022-08-06 05:05:32.724 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:32.724 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:32.724 | DEBUG    | __main__:run:508 - Running benchmark 34
2022-08-06 05:05:32.724 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:32.724 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:33.830 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:33.830 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 05:05:33.851 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:33.851 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:33.851 | DEBUG    | __main__:run_benchmark:432 - df1.loc[:, (df1.dtypes == 'float64')]
2022-08-06 05:05:33.871 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:33.871 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:33.871 | DEBUG    | __main__:run_benchmark:432 - df1.loc[:, (df1.dtypes == float)]
2022-08-06 05:05:33.891 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:33.891 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:33.892 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(np.float64)
2022-08-06 05:05:33.912 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:33.912 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:33.912 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=np.float64)
2022-08-06 05:05:33.932 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:33.933 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:33.933 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 05:05:33.953 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:33.953 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:33.953 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(float)
2022-08-06 05:05:33.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:33.973 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:33.973 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(np.float64)
2022-08-06 05:05:33.993 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:33.993 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:33.993 | DEBUG    | __main__:run_benchmark:432 - df1.dtypes[(df1.dtypes == 'float64')]
2022-08-06 05:05:34.008 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:34.008 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:34.008 | DEBUG    | __main__:run_benchmark:432 - df1.columns[(df1.dtypes == np.float64)]
2022-08-06 05:05:34.022 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:34.023 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:34.023 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 05:05:34.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:34.043 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:34.043 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(float)
2022-08-06 05:05:34.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:34.063 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:34.063 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(np.float64)
2022-08-06 05:05:34.083 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:34.083 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:34.083 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 05:05:34.103 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:34.103 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:34.103 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 05:05:34.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:34.123 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:34.123 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(td)
2022-08-06 05:05:34.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:34.125 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:34.125 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(i)
2022-08-06 05:05:34.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:34.127 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:34.127 | DEBUG    | __main__:run_benchmark:432 - df1.dtypes[(df1.dtypes == np.float64)]
2022-08-06 05:05:34.142 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:34.142 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:34.142 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=np.float64)
2022-08-06 05:05:34.162 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:34.162 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 05:05:34.163 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=np.float64)
2022-08-06 05:05:34.182 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:34.183 | DEBUG    | __main__:run:508 - Running benchmark 35
2022-08-06 05:05:34.184 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:34.184 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:36.113 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 05:05:36.113 | DEBUG    | __main__:run_benchmark:432 - df1['C1'].isin([1, 2, 3])
2022-08-06 05:05:36.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:05:36.117 | DEBUG    | __main__:run:508 - Running benchmark 36
2022-08-06 05:05:36.117 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:36.117 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:37.550 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 05:05:37.551 | DEBUG    | __main__:run_benchmark:432 - df1['foo'].apply((lambda x: pd.to_numeric(x, errors='ignore')))
2022-08-06 05:05:37.558 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:37.558 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 05:05:37.558 | DEBUG    | __main__:run_benchmark:432 - pd.to_numeric(df1['foo'], errors='ignore')
2022-08-06 05:05:37.563 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:37.563 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 05:05:37.564 | DEBUG    | __main__:run_benchmark:432 - df1['foo'].apply(pd.to_numeric, errors='ignore')
2022-08-06 05:05:37.569 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:37.569 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 05:05:37.569 | DEBUG    | __main__:run_benchmark:432 - df1['foo'].apply(pd.to_numeric, errors='coerce')
2022-08-06 05:05:37.575 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:37.575 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 05:05:37.575 | DEBUG    | __main__:run_benchmark:432 - df1['foo'].apply(pd.to_numeric, errors='ignore')
2022-08-06 05:05:37.580 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:37.581 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 05:05:37.581 | DEBUG    | __main__:run_benchmark:432 - df1['foo'].apply(pd.to_numeric, errors='ignore')
2022-08-06 05:05:37.587 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:37.587 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 05:05:37.587 | DEBUG    | __main__:run_benchmark:432 - pd.to_numeric(df1['foo'], errors='ignore')
2022-08-06 05:05:37.593 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:37.593 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 05:05:37.593 | DEBUG    | __main__:run_benchmark:432 - pd.to_numeric(df1['foo'], errors='ignore')
2022-08-06 05:05:37.599 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:37.599 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 05:05:37.599 | DEBUG    | __main__:run_benchmark:432 - pd.to_numeric(df1['foo'], errors='ignore')
2022-08-06 05:05:37.605 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:37.605 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 05:05:37.605 | DEBUG    | __main__:run_benchmark:432 - df1['foo'] = pd.to_numeric(df1['foo'], errors='coerce')
2022-08-06 05:05:37.611 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:05:37.613 | DEBUG    | __main__:run:508 - Running benchmark 37
2022-08-06 05:05:37.613 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:37.613 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:38.888 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric
2022-08-06 05:05:38.888 | DEBUG    | __main__:run_benchmark:432 - pd.to_numeric(df1['foo'].values)
2022-08-06 05:05:38.889 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:38.889 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric
2022-08-06 05:05:38.889 | DEBUG    | __main__:run_benchmark:432 - df1['foo'] = pd.to_numeric(df1['foo'], errors='coerce')
2022-08-06 05:05:38.895 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:05:38.897 | DEBUG    | __main__:run:508 - Running benchmark 38
2022-08-06 05:05:38.897 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:38.897 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:38.897 | DEBUG    | __main__:run:508 - Running benchmark 39
2022-08-06 05:05:38.897 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:38.898 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:38.898 | DEBUG    | __main__:run:508 - Running benchmark 40
2022-08-06 05:05:38.898 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:38.898 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:40.921 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 05:05:40.921 | DEBUG    | __main__:run_benchmark:432 - df = df.drop_duplicates(subset='time', keep='first')
2022-08-06 05:05:40.929 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:40.929 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 05:05:40.929 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first')
2022-08-06 05:05:40.938 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:40.938 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 05:05:40.938 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 05:05:40.946 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:40.947 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 05:05:40.947 | DEBUG    | __main__:run_benchmark:432 - df = df.loc[df.index.drop_duplicates(keep='first')]
2022-08-06 05:05:40.952 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:40.953 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 05:05:40.953 | DEBUG    | __main__:run_benchmark:432 - df = df.drop_duplicates(subset='time', keep='last')
2022-08-06 05:05:40.959 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:40.959 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 05:05:40.959 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 05:05:40.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:40.968 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 05:05:40.968 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first')
2022-08-06 05:05:40.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:40.978 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 05:05:40.978 | DEBUG    | __main__:run_benchmark:432 - df = df.loc[df.time.shift() != df.time]
2022-08-06 05:05:40.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:05:40.986 | DEBUG    | __main__:run:508 - Running benchmark 41
2022-08-06 05:05:40.987 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:40.987 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:43.135 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.136 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 05:05:43.137 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.137 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.137 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset=['time'], keep='first', inplace=True)
2022-08-06 05:05:43.151 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.151 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.151 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last', inplace=True)
2022-08-06 05:05:43.164 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.164 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.164 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 05:05:43.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.177 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.177 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last', inplace=True)
2022-08-06 05:05:43.190 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.190 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.190 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last', inplace=True)
2022-08-06 05:05:43.203 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.203 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.203 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 05:05:43.215 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.216 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.216 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last', inplace=True)
2022-08-06 05:05:43.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.229 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.229 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 05:05:43.242 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.242 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.242 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 05:05:43.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.255 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.255 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 05:05:43.267 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.268 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.268 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 05:05:43.280 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.280 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.280 | DEBUG    | __main__:run_benchmark:432 - df.drop(df[(df['time'] < 10)].index)
2022-08-06 05:05:43.283 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.283 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.283 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 05:05:43.295 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.296 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.296 | DEBUG    | __main__:run_benchmark:432 - df.drop(df[df['time'].diff() < pd.Timedelta('10 minute')].index)
2022-08-06 05:05:43.312 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.313 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.313 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 05:05:43.325 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.325 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.325 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 05:05:43.338 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.338 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.338 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 05:05:43.350 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.350 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.350 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 05:05:43.363 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.363 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 05:05:43.363 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset=['time'], keep='first', inplace=True)
2022-08-06 05:05:43.375 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:43.377 | DEBUG    | __main__:run:508 - Running benchmark 42
2022-08-06 05:05:43.377 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:43.377 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:45.021 | DEBUG    | __main__:run_benchmark:431 - Query: Group df1 on column 'b' and keep half of the elements at random
2022-08-06 05:05:45.022 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('b').apply(lambda x: x.sample(frac=0.5))
2022-08-06 05:05:45.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:45.034 | DEBUG    | __main__:run_benchmark:431 - Query: Group df1 on column 'b' and keep half of the elements at random
2022-08-06 05:05:45.034 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('b').apply(lambda x: x.sample(frac=0.5))
2022-08-06 05:05:45.045 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:45.045 | DEBUG    | __main__:run_benchmark:431 - Query: Group df1 on column 'b' and keep half of the elements at random
2022-08-06 05:05:45.045 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('b').apply(lambda x: x.sample(frac=0.5))
2022-08-06 05:05:45.055 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:45.056 | DEBUG    | __main__:run_benchmark:431 - Query: Group df1 on column 'b' and keep half of the elements at random
2022-08-06 05:05:45.056 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('b').apply(lambda x: x.sample(frac=0.5))
2022-08-06 05:05:45.066 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:05:45.068 | DEBUG    | __main__:run:508 - Running benchmark 43
2022-08-06 05:05:45.068 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:45.068 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:46.732 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 05:05:46.733 | DEBUG    | __main__:run_benchmark:432 - df['X'].replace({15: 1015, -15: -1015})
2022-08-06 05:05:46.740 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:46.741 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 05:05:46.741 | DEBUG    | __main__:run_benchmark:432 - df['X'].replace({15: 1015, -15: -1015})
2022-08-06 05:05:46.747 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:46.747 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 05:05:46.747 | DEBUG    | __main__:run_benchmark:432 - df['X'].replace(15, 1015).replace(-15, -1015)
2022-08-06 05:05:46.753 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:46.753 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 05:05:46.753 | DEBUG    | __main__:run_benchmark:432 - df.replace({'X': {15: 1015, -15: -1015}})
2022-08-06 05:05:46.761 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:05:46.762 | DEBUG    | __main__:run:508 - Running benchmark 44
2022-08-06 05:05:46.763 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:46.763 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:46.763 | DEBUG    | __main__:run:508 - Running benchmark 45
2022-08-06 05:05:46.763 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:46.763 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:48.563 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 05:05:48.564 | DEBUG    | __main__:run_benchmark:432 - df['First Name'], df['Last Name'] = df['Name'].str.split(' ', 1).str
2022-08-06 05:05:48.577 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:05:48.578 | DEBUG    | __main__:run:508 - Running benchmark 46
2022-08-06 05:05:48.578 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:48.579 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:48.579 | DEBUG    | __main__:run:508 - Running benchmark 47
2022-08-06 05:05:48.579 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:48.579 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:48.579 | DEBUG    | __main__:run:508 - Running benchmark 48
2022-08-06 05:05:48.579 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:48.579 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:49.710 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:49.711 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:49.728 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:49.728 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:49.728 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:49.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:49.744 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:49.745 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:49.760 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:49.761 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:49.761 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:49.776 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:49.776 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:49.777 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:49.792 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:49.792 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:49.792 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:49.808 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:49.808 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:49.808 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:49.824 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:49.824 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:49.825 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:49.840 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:49.841 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:49.841 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:49.856 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:49.857 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:49.857 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:49.872 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:49.873 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:49.873 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:49.889 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:49.889 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:49.889 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:49.905 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:49.905 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:49.905 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:49.921 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:49.921 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:49.921 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:49.936 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:49.937 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:49.937 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:49.953 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:49.953 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:49.953 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:49.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:49.969 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:49.969 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:49.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:49.985 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:49.985 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:50.001 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:50.001 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:50.001 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:50.017 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:50.017 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 05:05:50.017 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 05:05:50.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:50.034 | DEBUG    | __main__:run:508 - Running benchmark 49
2022-08-06 05:05:50.035 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:50.035 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:51.736 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:05:51.737 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 05:05:51.740 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:05:51.741 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:05:51.741 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg('score')
2022-08-06 05:05:51.742 | DEBUG    | __main__:run:543 - Failed to run benchmark 49 A for each student, get a list of scores obtained
2022-08-06 05:05:51.742 | ERROR    | __main__:run:545 - type object 'Checker' has no attribute 'check_groupby'
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fc6e979f7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7fc6e991e8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7fc6549bca50>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7fc6549bca50>>

> File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'for each student, get a list of scores obtained', 'user': 'u0'}], 'ios': [{'inputs': ["pd.DataFrame({...
    │               └ {'queries': [{'query': 'for each student, get a list of scores obtained', 'user': 'u0'}], 'ios': [{'inputs': ["pd.DataFrame({...
    └ {'query': 'for each student, get a list of scores obtained', 'user': 'u0'}

  File "experiments/jigsaw_experiments.py", line 433, in run_benchmark
    eval_result = self.evaluate_result(resp.completions[0].text, ios)
                  │    │               │    │                    └ [{'inputs': ["pd.DataFrame({'student': {0: 'alpha', 1: 'beta', 2: 'alpha', 3: 'beta', 4: 'omega', 5: 'alpha'}, 'score': {0: 1...
                  │    │               │    └ <member 'completions' of 'OpenAICompletionResponse' objects>
                  │    │               └ OpenAICompletionResponse(completions=[OpenAICompletion(text="df.groupby('student').agg('score')", top_logprobs=None, finish_r...
                  │    └ <function CodexBaseline.evaluate_result at 0x7fc654952950>
                  └ <__main__.Algorithm1 object at 0x7fc6549bca50>

  File "experiments/jigsaw_experiments.py", line 275, in evaluate_result
    return any(self.evaluate_result_on_io_ex(codex_resp, io) for io in ios)
               │    │                        │                         └ [{'inputs': ["pd.DataFrame({'student': {0: 'alpha', 1: 'beta', 2: 'alpha', 3: 'beta', 4: 'omega', 5: 'alpha'}, 'score': {0: 1...
               │    │                        └ "df.groupby('student').agg('score')"
               │    └ <function CodexBaseline.evaluate_result_on_io_ex at 0x7fc6549528c0>
               └ <__main__.Algorithm1 object at 0x7fc6549bca50>

  File "experiments/jigsaw_experiments.py", line 275, in <genexpr>
    return any(self.evaluate_result_on_io_ex(codex_resp, io) for io in ios)
               │    │                        │           │       └ {'inputs': ["pd.DataFrame({'student': {0: 'alpha', 1: 'beta', 2: 'alpha', 3: 'beta', 4: 'omega', 5: 'alpha'}, 'score': {0: 12...
               │    │                        │           └ {'inputs': ["pd.DataFrame({'student': {0: 'alpha', 1: 'beta', 2: 'alpha', 3: 'beta', 4: 'omega', 5: 'alpha'}, 'score': {0: 12...
               │    │                        └ "df.groupby('student').agg('score')"
               │    └ <function CodexBaseline.evaluate_result_on_io_ex at 0x7fc6549528c0>
               └ <__main__.Algorithm1 object at 0x7fc6549bca50>

  File "experiments/jigsaw_experiments.py", line 271, in evaluate_result_on_io_ex
    if any(Checker.check(res, expected_output) for res in res_cands):
           │       │          │                           └ [<pandas.core.groupby.generic.SeriesGroupBy object at 0x7fc642a345d0>]
           │       │          └ 0    [12, 9, 19]
           │       │            1        [16, 7]
           │       │            2           [14]
           │       │            dtype: object
           │       └ <staticmethod object at 0x7fc6ea05e990>
           └ <class '__main__.Checker'>

  File "experiments/jigsaw_experiments.py", line 271, in <genexpr>
    if any(Checker.check(res, expected_output) for res in res_cands):
           │       │     │    │                    └ <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fc642a345d0>
           │       │     │    └ 0    [12, 9, 19]
           │       │     │      1        [16, 7]
           │       │     │      2           [14]
           │       │     │      dtype: object
           │       │     └ <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fc642a345d0>
           │       └ <staticmethod object at 0x7fc6ea05e990>
           └ <class '__main__.Checker'>

  File "experiments/jigsaw_experiments.py", line 30, in check
    return Checker.get_checker(v1)(v1, v2)
           │       │           │   │   └ 0    [12, 9, 19]
           │       │           │   │     1        [16, 7]
           │       │           │   │     2           [14]
           │       │           │   │     dtype: object
           │       │           │   └ <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fc642a345d0>
           │       │           └ <pandas.core.groupby.generic.SeriesGroupBy object at 0x7fc642a345d0>
           │       └ <staticmethod object at 0x7fc6eb1e3d10>
           └ <class '__main__.Checker'>

  File "experiments/jigsaw_experiments.py", line 39, in get_checker
    return Checker.check_groupby
           └ <class '__main__.Checker'>

AttributeError: type object 'Checker' has no attribute 'check_groupby'
2022-08-06 05:05:53.394 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval1
2022-08-06 05:05:53.394 | DEBUG    | __main__:run:495 - Found 68 benchmarks in PandasEval1
2022-08-06 05:05:53.395 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 05:05:53.395 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.395 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.395 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 05:05:53.395 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.395 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.396 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 05:05:53.396 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.396 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.396 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 05:05:53.396 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.396 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.397 | DEBUG    | __main__:run:525 - Skipping benchmark 3 as result already exists
2022-08-06 05:05:53.397 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 05:05:53.397 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.397 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.397 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 05:05:53.397 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.397 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.398 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 05:05:53.398 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.398 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.398 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 05:05:53.398 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.398 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.398 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 05:05:53.398 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.398 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.398 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 05:05:53.399 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.399 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.399 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 05:05:53.399 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.399 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.399 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 05:05:53.399 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.399 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.400 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:05:53.400 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 05:05:53.400 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.400 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.400 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 05:05:53.400 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.400 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.400 | DEBUG    | __main__:run:525 - Skipping benchmark 13 as result already exists
2022-08-06 05:05:53.400 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 05:05:53.401 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.401 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.401 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 05:05:53.401 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.401 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.401 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 05:05:53.401 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.401 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.401 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 05:05:53.402 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.402 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.402 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 05:05:53.402 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.402 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.402 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 05:05:53.402 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.402 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.402 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 05:05:53.402 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.403 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.403 | DEBUG    | __main__:run:508 - Running benchmark 21
2022-08-06 05:05:53.403 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.403 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.403 | DEBUG    | __main__:run:508 - Running benchmark 22
2022-08-06 05:05:53.403 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.403 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.403 | DEBUG    | __main__:run:525 - Skipping benchmark 22 as result already exists
2022-08-06 05:05:53.403 | DEBUG    | __main__:run:508 - Running benchmark 23
2022-08-06 05:05:53.403 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.404 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.404 | DEBUG    | __main__:run:508 - Running benchmark 24
2022-08-06 05:05:53.404 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.404 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.404 | DEBUG    | __main__:run:508 - Running benchmark 25
2022-08-06 05:05:53.404 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.404 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.404 | DEBUG    | __main__:run:508 - Running benchmark 26
2022-08-06 05:05:53.404 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.404 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.405 | DEBUG    | __main__:run:525 - Skipping benchmark 26 as result already exists
2022-08-06 05:05:53.405 | DEBUG    | __main__:run:508 - Running benchmark 27
2022-08-06 05:05:53.405 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.405 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.405 | DEBUG    | __main__:run:508 - Running benchmark 28
2022-08-06 05:05:53.405 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.405 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.405 | DEBUG    | __main__:run:525 - Skipping benchmark 28 as result already exists
2022-08-06 05:05:53.405 | DEBUG    | __main__:run:508 - Running benchmark 29
2022-08-06 05:05:53.405 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.406 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.406 | DEBUG    | __main__:run:508 - Running benchmark 30
2022-08-06 05:05:53.406 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.406 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.406 | DEBUG    | __main__:run:525 - Skipping benchmark 30 as result already exists
2022-08-06 05:05:53.406 | DEBUG    | __main__:run:508 - Running benchmark 31
2022-08-06 05:05:53.406 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.406 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.406 | DEBUG    | __main__:run:508 - Running benchmark 32
2022-08-06 05:05:53.406 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.407 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.407 | DEBUG    | __main__:run:508 - Running benchmark 33
2022-08-06 05:05:53.407 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.407 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.407 | DEBUG    | __main__:run:508 - Running benchmark 34
2022-08-06 05:05:53.407 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.407 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.407 | DEBUG    | __main__:run:525 - Skipping benchmark 34 as result already exists
2022-08-06 05:05:53.407 | DEBUG    | __main__:run:508 - Running benchmark 35
2022-08-06 05:05:53.407 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.408 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.408 | DEBUG    | __main__:run:525 - Skipping benchmark 35 as result already exists
2022-08-06 05:05:53.408 | DEBUG    | __main__:run:508 - Running benchmark 36
2022-08-06 05:05:53.408 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.408 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.408 | DEBUG    | __main__:run:508 - Running benchmark 37
2022-08-06 05:05:53.408 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.408 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.408 | DEBUG    | __main__:run:508 - Running benchmark 38
2022-08-06 05:05:53.408 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.409 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.409 | DEBUG    | __main__:run:508 - Running benchmark 39
2022-08-06 05:05:53.409 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.409 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.409 | DEBUG    | __main__:run:508 - Running benchmark 40
2022-08-06 05:05:53.409 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.409 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.409 | DEBUG    | __main__:run:508 - Running benchmark 41
2022-08-06 05:05:53.409 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.410 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.410 | DEBUG    | __main__:run:525 - Skipping benchmark 41 as result already exists
2022-08-06 05:05:53.410 | DEBUG    | __main__:run:508 - Running benchmark 42
2022-08-06 05:05:53.410 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.410 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.410 | DEBUG    | __main__:run:525 - Skipping benchmark 42 as result already exists
2022-08-06 05:05:53.410 | DEBUG    | __main__:run:508 - Running benchmark 43
2022-08-06 05:05:53.410 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.410 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:05:53.410 | DEBUG    | __main__:run:525 - Skipping benchmark 43 as result already exists
2022-08-06 05:05:53.411 | DEBUG    | __main__:run:508 - Running benchmark 44
2022-08-06 05:05:53.411 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:05:53.411 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:02.395 | DEBUG    | __main__:run_benchmark:431 - Query: Make columns of df1 same as that of df2
2022-08-06 05:06:02.395 | DEBUG    | __main__:run_benchmark:432 - df1 = df1.reindex(columns=df2.columns, fill_value=0)
2022-08-06 05:06:02.405 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:02.405 | DEBUG    | __main__:run_benchmark:431 - Query: Make columns of df1 same as that of df2
2022-08-06 05:06:02.406 | DEBUG    | __main__:run_benchmark:432 - df1[df2.columns]
2022-08-06 05:06:02.407 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:02.407 | DEBUG    | __main__:run_benchmark:431 - Query: Make columns of df1 same as that of df2
2022-08-06 05:06:02.407 | DEBUG    | __main__:run_benchmark:432 - df1 = df1[list(df2.columns)]
2022-08-06 05:06:02.409 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:02.409 | DEBUG    | __main__:run_benchmark:431 - Query: Make columns of df1 same as that of df2
2022-08-06 05:06:02.409 | DEBUG    | __main__:run_benchmark:432 - df1 = df1[['A', 'B', 'C']]
2022-08-06 05:06:02.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:02.418 | DEBUG    | __main__:run_benchmark:431 - Query: Make columns of df1 same as that of df2
2022-08-06 05:06:02.418 | DEBUG    | __main__:run_benchmark:432 - df1.columns = df2.columns
2022-08-06 05:06:02.427 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:06:02.429 | DEBUG    | __main__:run:508 - Running benchmark 45
2022-08-06 05:06:02.429 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:02.429 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:02.430 | DEBUG    | __main__:run:508 - Running benchmark 46
2022-08-06 05:06:02.430 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:02.430 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:02.430 | DEBUG    | __main__:run:508 - Running benchmark 47
2022-08-06 05:06:02.430 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:02.430 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:02.430 | DEBUG    | __main__:run:508 - Running benchmark 48
2022-08-06 05:06:02.430 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:02.431 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:02.431 | DEBUG    | __main__:run:508 - Running benchmark 49
2022-08-06 05:06:02.431 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:02.431 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:03.916 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.916 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 05:06:03.919 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.919 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.919 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg(lambda x: list(x))
2022-08-06 05:06:03.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.927 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.927 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 05:06:03.929 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.930 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.930 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').score.apply(list)
2022-08-06 05:06:03.932 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.932 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.932 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 05:06:03.935 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.935 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.935 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 05:06:03.937 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.938 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.938 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg({'score': list})
2022-08-06 05:06:03.942 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.942 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.942 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg({'score': lambda x: list(x)})
2022-08-06 05:06:03.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.947 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.947 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg({'score': lambda x: list(x)})
2022-08-06 05:06:03.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.952 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.952 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg(lambda x: list(x))
2022-08-06 05:06:03.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.958 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.958 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg(lambda x: list(x))
2022-08-06 05:06:03.965 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.965 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.965 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').groups
2022-08-06 05:06:03.967 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.967 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.967 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg({'score': list})
2022-08-06 05:06:03.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.971 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.971 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 05:06:03.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.974 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.974 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').score.apply(list)
2022-08-06 05:06:03.976 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.976 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.976 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').score.apply(list)
2022-08-06 05:06:03.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.979 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.979 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg(lambda x: list(x))
2022-08-06 05:06:03.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.985 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.985 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg(lambda x: list(x))
2022-08-06 05:06:03.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.992 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.992 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').score.apply(list)
2022-08-06 05:06:03.994 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:03.994 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 05:06:03.994 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg({'score': lambda x: list(x)})
2022-08-06 05:06:03.999 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:04.001 | DEBUG    | __main__:run:508 - Running benchmark 50
2022-08-06 05:06:04.001 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:04.001 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:06.811 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.812 | DEBUG    | __main__:run_benchmark:432 - df.pivot_table(index='student', aggfunc='max')
2022-08-06 05:06:06.820 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.820 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.820 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 05:06:06.822 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.822 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.822 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 05:06:06.824 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.824 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.824 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max().reset_index()
2022-08-06 05:06:06.827 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.828 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.828 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform(np.max)
2022-08-06 05:06:06.829 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.829 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.829 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:06:06.830 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.830 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.830 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').apply(lambda x: x['score'].max())
2022-08-06 05:06:06.832 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.832 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.832 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform('max')
2022-08-06 05:06:06.833 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.834 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.834 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform('max')
2022-08-06 05:06:06.835 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.835 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.836 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform('max')
2022-08-06 05:06:06.837 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.837 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.837 | DEBUG    | __main__:run_benchmark:432 - df.groupby(by='student')['score'].transform(max)
2022-08-06 05:06:06.839 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.839 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.839 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 05:06:06.840 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.841 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.841 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform('max')
2022-08-06 05:06:06.842 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.842 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.842 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 05:06:06.844 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.844 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.844 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 05:06:06.846 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.846 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.846 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg({'score': 'max'})
2022-08-06 05:06:06.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.850 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.850 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg({'score': 'max'})
2022-08-06 05:06:06.853 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.853 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.853 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform('max')
2022-08-06 05:06:06.854 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.855 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.855 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform(np.max)
2022-08-06 05:06:06.856 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.856 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 05:06:06.856 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 05:06:06.858 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:06.860 | DEBUG    | __main__:run:508 - Running benchmark 51
2022-08-06 05:06:06.860 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:06.860 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:06.860 | DEBUG    | __main__:run:508 - Running benchmark 52
2022-08-06 05:06:06.860 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:06.861 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:06.861 | DEBUG    | __main__:run:508 - Running benchmark 53
2022-08-06 05:06:06.861 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:06.861 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:06.861 | DEBUG    | __main__:run:508 - Running benchmark 54
2022-08-06 05:06:06.861 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:06.861 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:06.861 | DEBUG    | __main__:run:508 - Running benchmark 55
2022-08-06 05:06:06.861 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:06.861 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:06.862 | DEBUG    | __main__:run:508 - Running benchmark 56
2022-08-06 05:06:06.862 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:06.862 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:06.862 | DEBUG    | __main__:run:508 - Running benchmark 57
2022-08-06 05:06:06.862 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:06.862 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:06.862 | DEBUG    | __main__:run:508 - Running benchmark 58
2022-08-06 05:06:06.862 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:06.862 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:06.862 | DEBUG    | __main__:run:508 - Running benchmark 59
2022-08-06 05:06:06.863 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:06.863 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:06.863 | DEBUG    | __main__:run:508 - Running benchmark 60
2022-08-06 05:06:06.863 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:06.863 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:09.875 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.876 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['col_name'])
2022-08-06 05:06:09.881 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.881 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.881 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data)
2022-08-06 05:06:09.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.885 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.886 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['A'])
2022-08-06 05:06:09.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.890 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.890 | DEBUG    | __main__:run_benchmark:432 - df = data.unstack()
2022-08-06 05:06:09.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.891 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.891 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]])
2022-08-06 05:06:09.896 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.896 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.897 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['A'])
2022-08-06 05:06:09.901 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.901 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.901 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['x'])
2022-08-06 05:06:09.905 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.905 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.906 | DEBUG    | __main__:run_benchmark:432 - #  and rows as the innermost level of index
2022-08-06 05:06:09.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.906 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.906 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]])
2022-08-06 05:06:09.912 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.912 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.912 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['col_name'])
2022-08-06 05:06:09.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.917 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.917 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]])
2022-08-06 05:06:09.922 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.923 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.923 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['col1'])
2022-08-06 05:06:09.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.927 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.927 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=pd.MultiIndex.from_product([['a', 'b'], [1, 2]]))
2022-08-06 05:06:09.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.933 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.933 | DEBUG    | __main__:run_benchmark:432 - #  and index as the innermost level of index
2022-08-06 05:06:09.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.934 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.934 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['x', 'y', 'z', 'w'])
2022-08-06 05:06:09.935 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.935 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.935 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]])
2022-08-06 05:06:09.940 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.941 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.941 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]])
2022-08-06 05:06:09.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.947 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.947 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['A'])
2022-08-06 05:06:09.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.951 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.951 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[['a', 'a', 'b', 'b'], ['c', 'd', 'c', 'd']])
2022-08-06 05:06:09.957 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.957 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 05:06:09.957 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[['a', 'a', 'b', 'b'], ['c', 'd', 'c', 'd']])
2022-08-06 05:06:09.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:09.965 | DEBUG    | __main__:run:508 - Running benchmark 62
2022-08-06 05:06:09.965 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:09.965 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:09.965 | DEBUG    | __main__:run:508 - Running benchmark 63
2022-08-06 05:06:09.965 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:09.965 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:11.982 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 05:06:11.982 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 05:06:11.983 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:11.983 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 05:06:11.983 | DEBUG    | __main__:run_benchmark:432 - len(df[df['pet1'].isin(['mouse'])])
2022-08-06 05:06:11.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:11.985 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 05:06:11.985 | DEBUG    | __main__:run_benchmark:432 - df[df.isin(['mouse'])].count(axis=1).sum()
2022-08-06 05:06:11.987 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:11.987 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 05:06:11.987 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].isin(['mouse']).sum()
2022-08-06 05:06:11.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:11.988 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 05:06:11.988 | DEBUG    | __main__:run_benchmark:432 - df[df['pet1'].str.contains(pat='mouse')].shape[0]
2022-08-06 05:06:11.989 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:11.989 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 05:06:11.989 | DEBUG    | __main__:run_benchmark:432 - df.where(df == 'mouse').count()
2022-08-06 05:06:11.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:11.991 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 05:06:11.991 | DEBUG    | __main__:run_benchmark:432 - len(df[(df['pet1'] == 'mouse') | (df['pet2'] == 'mouse')])
2022-08-06 05:06:11.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:06:11.995 | DEBUG    | __main__:run:508 - Running benchmark 64
2022-08-06 05:06:11.995 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:11.995 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:11.995 | DEBUG    | __main__:run:508 - Running benchmark 65
2022-08-06 05:06:11.995 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:11.995 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:14.465 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.466 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 05:06:14.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.483 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.483 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 05:06:14.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.499 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.499 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 05:06:14.516 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.516 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.516 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 05:06:14.532 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.532 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.532 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 05:06:14.547 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.548 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.548 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 05:06:14.563 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.563 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.563 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 05:06:14.579 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.579 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.579 | DEBUG    | __main__:run_benchmark:432 - df[df['X'].between(4, 10, inclusive=True)]
2022-08-06 05:06:14.594 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.594 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.594 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 05:06:14.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.610 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.610 | DEBUG    | __main__:run_benchmark:432 - df[df['X'].between(4, 10)]
2022-08-06 05:06:14.625 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.625 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.625 | DEBUG    | __main__:run_benchmark:432 - df[df['X'].between(4, 10, inclusive=True)]
2022-08-06 05:06:14.641 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.641 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.641 | DEBUG    | __main__:run_benchmark:432 - df.loc[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 05:06:14.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.656 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.656 | DEBUG    | __main__:run_benchmark:432 - df[df['X'].between(4, 10)]
2022-08-06 05:06:14.672 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.672 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.672 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 05:06:14.687 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.687 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.687 | DEBUG    | __main__:run_benchmark:432 - df[df['X'].between(4, 10)]
2022-08-06 05:06:14.703 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.703 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.703 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 05:06:14.718 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.718 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.719 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 05:06:14.734 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.734 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.734 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 05:06:14.749 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.750 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.750 | DEBUG    | __main__:run_benchmark:432 - df.loc[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 05:06:14.765 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.765 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 05:06:14.765 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 05:06:14.781 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:14.783 | DEBUG    | __main__:run:508 - Running benchmark 66
2022-08-06 05:06:14.783 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:14.783 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:17.560 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.561 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 05:06:17.579 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.579 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.579 | DEBUG    | __main__:run_benchmark:432 - df[(df['Y'] >= 4) & (df['Y'] <= 10) | (df['Y'] >= 14) & (df['Y'] <= 20)]
2022-08-06 05:06:17.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.596 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.596 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 05:06:17.613 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.613 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.613 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 05:06:17.630 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.630 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.631 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 05:06:17.647 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.647 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.647 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 05:06:17.664 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.664 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.664 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 05:06:17.680 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.680 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.680 | DEBUG    | __main__:run_benchmark:432 - df.loc[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 05:06:17.696 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.696 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.697 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 05:06:17.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.713 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.713 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 05:06:17.729 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.729 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.729 | DEBUG    | __main__:run_benchmark:432 - df[df['Y'].between(4, 10, inclusive=True) | df['Y'].between(14, 20, inclusive=True)]
2022-08-06 05:06:17.746 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.746 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.746 | DEBUG    | __main__:run_benchmark:432 - df[df['Y'].between(4, 10, inclusive=True) | df['Y'].between(14, 20, inclusive=True)]
2022-08-06 05:06:17.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.762 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.762 | DEBUG    | __main__:run_benchmark:432 - df[(df['Y'] >= 4) & (df['Y'] <= 10) | (df['Y'] >= 14) & (df['Y'] <= 20)]
2022-08-06 05:06:17.778 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.779 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.779 | DEBUG    | __main__:run_benchmark:432 - df[df['Y'].between(4, 10, inclusive=True) | df['Y'].between(14, 20, inclusive=True)]
2022-08-06 05:06:17.795 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.795 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.795 | DEBUG    | __main__:run_benchmark:432 - df[np.logical_or(np.logical_and(df['Y'] > 4, df['Y'] < 11), np.logical_and(df['Y'] > 14, df['Y'] < 21))]
2022-08-06 05:06:17.812 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.812 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.812 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 05:06:17.828 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.828 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.828 | DEBUG    | __main__:run_benchmark:432 - df.loc[(((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20)))]
2022-08-06 05:06:17.845 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.845 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.845 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 05:06:17.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.861 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.861 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 05:06:17.877 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.878 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 05:06:17.878 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 05:06:17.894 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:17.896 | DEBUG    | __main__:run:508 - Running benchmark 67
2022-08-06 05:06:17.896 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:06:17.897 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:17.897 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval2
2022-08-06 05:06:17.897 | DEBUG    | __main__:run:495 - Found 21 benchmarks in PandasEval2
2022-08-06 05:06:17.897 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 05:06:17.897 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:06:17.897 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:06:19.921 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, rename the column 'a' to 'Person Name' and 'b' to 'Credit'
2022-08-06 05:06:19.922 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name', 'b': 'Credit'})
2022-08-06 05:06:19.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:06:19.934 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:06:19.934 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:06:19.934 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:06:19.935 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:06:21.825 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:21.825 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, index=str)
2022-08-06 05:06:21.845 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:21.845 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:21.845 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 05:06:21.864 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:21.864 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:21.864 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, index=str, inplace=True)
2022-08-06 05:06:21.878 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:21.878 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:21.878 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 05:06:21.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:21.897 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:21.897 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 05:06:21.911 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:21.911 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:21.911 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 05:06:21.930 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:21.931 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:21.931 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 05:06:21.950 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:21.950 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:21.950 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 05:06:21.969 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:21.969 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:21.969 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 05:06:21.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:21.982 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:21.982 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 05:06:21.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:21.995 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:21.996 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 05:06:22.009 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:22.009 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:22.009 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 05:06:22.027 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:22.028 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:22.028 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 05:06:22.041 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:22.041 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:22.041 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 05:06:22.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:22.060 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:22.060 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 05:06:22.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:22.073 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:22.073 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 05:06:22.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:22.092 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:22.092 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 05:06:22.111 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:22.111 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:22.111 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 05:06:22.129 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:22.129 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:22.130 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 05:06:22.149 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:22.149 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 05:06:22.149 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 05:06:22.162 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:22.165 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 05:06:22.165 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:06:22.165 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:06:23.568 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where 'value1' is divisible by 3
2022-08-06 05:06:23.569 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['value1'] % 3) == 0]
2022-08-06 05:06:23.578 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:06:23.581 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:06:23.581 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:06:23.581 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:06:25.243 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.243 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 05:06:25.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.258 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.258 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 05:06:25.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.272 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.272 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin[(dfin['colA'] % 5) != 0]
2022-08-06 05:06:25.286 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.286 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.286 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['colA'] % 5) != 0]
2022-08-06 05:06:25.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.301 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.301 | DEBUG    | __main__:run_benchmark:432 - mask = dfin['colA'] % 5 == 0
2022-08-06 05:06:25.311 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.311 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.311 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 05:06:25.325 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.326 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.326 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['colA'] % 5) != 0]
2022-08-06 05:06:25.340 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.340 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.340 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 05:06:25.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.354 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.354 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 05:06:25.368 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.368 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.368 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin.colA % 5) != 0]
2022-08-06 05:06:25.382 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.382 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.382 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 05:06:25.395 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.395 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.395 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['colA'] % 5) != 0]
2022-08-06 05:06:25.409 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.409 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.409 | DEBUG    | __main__:run_benchmark:432 - dfin[~ dfin['colA'].isin([5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100])]
2022-08-06 05:06:25.422 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.423 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.423 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 05:06:25.436 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.436 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.437 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 05:06:25.450 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.450 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.450 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 05:06:25.464 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.464 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.464 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['colA'] % 5) != 0]
2022-08-06 05:06:25.478 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.478 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.478 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 05:06:25.491 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.491 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.492 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['colA'] % 5) != 0]
2022-08-06 05:06:25.505 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.505 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 05:06:25.505 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 05:06:25.519 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:25.522 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:06:29.961 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows from dfin such that column A mod 4 = 1
2022-08-06 05:06:29.962 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['A'] % 4 == 1]
2022-08-06 05:06:29.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:06:29.974 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 05:06:29.974 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:06:29.974 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:06:31.541 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.542 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:06:31.558 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.558 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.558 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:06:31.574 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.574 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.574 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:06:31.590 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.590 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.590 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(3))
2022-08-06 05:06:31.606 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.606 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.606 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:06:31.622 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.622 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.622 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:06:31.638 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.638 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.638 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:06:31.654 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.654 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.654 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:06:31.670 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.670 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.670 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:06:31.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.685 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.685 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:06:31.696 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.696 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.696 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:06:31.711 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.711 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.711 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:06:31.727 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.727 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.727 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:06:31.737 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.738 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.738 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:06:31.753 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.753 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.753 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:06:31.768 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.768 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.769 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:06:31.784 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.784 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.784 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:06:31.799 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.799 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.799 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:06:31.814 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.815 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.815 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:06:31.830 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:31.830 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 05:06:31.830 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:06:31.845 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:33.202 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 05:06:33.203 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 05:06:33.219 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:33.220 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 05:06:33.220 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 05:06:33.235 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:33.235 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 05:06:33.235 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3)
2022-08-06 05:06:33.242 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:06:35.320 | DEBUG    | __main__:run_benchmark:431 - Query: Concatenate the rows of dfin thrice
2022-08-06 05:06:35.321 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3)
2022-08-06 05:06:35.330 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:06:35.333 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 05:06:38.163 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.164 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:38.181 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.181 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.181 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:38.197 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.197 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.197 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:38.213 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.213 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.213 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4), axis=0)
2022-08-06 05:06:38.215 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.215 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.216 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:38.231 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.231 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.231 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:38.247 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.247 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.248 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:38.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.263 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.263 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:06:38.278 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.278 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.279 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:38.294 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.294 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.294 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:38.309 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.310 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.310 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:06:38.325 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.325 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.325 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:38.340 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.340 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.341 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:38.356 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.356 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.356 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:38.371 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.371 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.372 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:38.387 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.387 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.387 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3,ignore_index=True)
2022-08-06 05:06:38.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.402 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.403 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:38.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.418 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.418 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:38.433 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.434 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.434 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:38.449 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:38.449 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 05:06:38.449 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:38.465 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.461 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.462 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 05:06:40.465 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.465 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.465 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4), axis=0)
2022-08-06 05:06:40.467 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.467 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.467 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:40.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.484 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.484 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:40.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.500 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.500 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:40.516 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.516 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.516 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:40.532 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.532 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.532 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin] * 4, ignore_index=True)
2022-08-06 05:06:40.548 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.548 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.548 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:40.564 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.564 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.564 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:40.579 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.580 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.580 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:40.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.595 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.595 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 05:06:40.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.610 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.610 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:40.625 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.625 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.625 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:40.641 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.641 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.641 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:40.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.656 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.656 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:40.672 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.672 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.672 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:06:40.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.684 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.684 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:40.699 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.699 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.699 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:40.714 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.715 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.715 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:06:40.730 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:40.730 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 05:06:40.730 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 05:06:40.742 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:42.654 | DEBUG    | __main__:run_benchmark:431 - Query: concatenate the input dataframe 'dfin' 4 times
2022-08-06 05:06:42.655 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 05:06:42.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:06:45.466 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.466 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:45.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.483 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.483 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:45.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.499 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.499 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:45.515 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.515 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.515 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:45.532 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.532 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.532 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3, ignore_index=True)
2022-08-06 05:06:45.548 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.548 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.548 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:45.563 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.564 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.564 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:45.579 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.579 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.579 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:45.594 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.595 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.595 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:06:45.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.610 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.610 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:45.625 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.625 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.626 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:45.641 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.641 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.641 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:45.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.657 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.657 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:45.672 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.672 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.672 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:45.687 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.687 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.687 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:45.703 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.703 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.703 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:45.718 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.718 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.719 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:45.734 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.734 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.734 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:45.749 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.750 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.750 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:45.765 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:45.765 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 05:06:45.765 | DEBUG    | __main__:run_benchmark:432 - dfin.repeat(4)
2022-08-06 05:06:45.767 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:47.428 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 05:06:47.429 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:06:47.445 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:47.445 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 05:06:47.445 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:06:47.460 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:47.461 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 05:06:47.461 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:06:47.476 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:47.476 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 05:06:47.476 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:06:47.491 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:47.491 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 05:06:47.492 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:06:47.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:47.507 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 05:06:47.507 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:06:47.522 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:47.522 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 05:06:47.522 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:06:47.538 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:47.538 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 05:06:47.538 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, axis=1)
2022-08-06 05:06:47.558 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:47.558 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 05:06:47.558 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append([dfin, dfin, dfin])
2022-08-06 05:06:47.566 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:06:49.497 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 05:06:49.497 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 05:06:49.513 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:49.513 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 05:06:49.513 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4)
2022-08-06 05:06:49.521 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:06:51.221 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate 4 times
2022-08-06 05:06:51.222 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 05:06:51.231 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:06:53.633 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.633 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.sum(), axis=1)
2022-08-06 05:06:53.645 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.646 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.646 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, 0] = dfin.iloc[:, 0] * 4
2022-08-06 05:06:53.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.656 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.657 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x * 4)
2022-08-06 05:06:53.671 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.672 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.672 | DEBUG    | __main__:run_benchmark:432 - dfin.repeat(4)
2022-08-06 05:06:53.673 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.674 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.674 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x**2)
2022-08-06 05:06:53.689 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.689 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.689 | DEBUG    | __main__:run_benchmark:432 - dfin.repeat(4)
2022-08-06 05:06:53.691 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.691 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.691 | DEBUG    | __main__:run_benchmark:432 - dfin.repeat(4)
2022-08-06 05:06:53.693 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.693 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.693 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.sum(), axis=1)
2022-08-06 05:06:53.704 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.704 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.704 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 05:06:53.705 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.705 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.705 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:53.720 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.720 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.721 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x**2, axis=1)
2022-08-06 05:06:53.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.736 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.736 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x**2, axis=1)
2022-08-06 05:06:53.751 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.751 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.751 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x * 4)
2022-08-06 05:06:53.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.766 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.766 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x**2, axis=1)
2022-08-06 05:06:53.781 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.781 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.782 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, 0] *= 4
2022-08-06 05:06:53.792 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.792 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.792 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(4).mean()
2022-08-06 05:06:53.807 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.808 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.808 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:53.823 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.823 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.823 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:53.839 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.839 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.839 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x**2, axis=1)
2022-08-06 05:06:53.854 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:53.854 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 05:06:53.854 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:53.869 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:57.149 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe 4 times
2022-08-06 05:06:57.150 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:06:57.167 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:57.167 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe 4 times
2022-08-06 05:06:57.167 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 05:06:57.174 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:06:58.669 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.669 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 3))
2022-08-06 05:06:58.671 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.672 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.672 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3)
2022-08-06 05:06:58.687 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.687 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.687 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 3), axis=0)
2022-08-06 05:06:58.689 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.689 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.689 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(3))
2022-08-06 05:06:58.703 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.703 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.704 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 05:06:58.718 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.718 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.718 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 05:06:58.729 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.729 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.730 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(3))
2022-08-06 05:06:58.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.745 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.745 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*2, ignore_index=True)
2022-08-06 05:06:58.759 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.759 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.759 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 05:06:58.774 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.774 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.774 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 05:06:58.788 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.788 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.788 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3)
2022-08-06 05:06:58.802 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.802 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.803 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin] * 3, ignore_index=True)
2022-08-06 05:06:58.813 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.813 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.813 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*2, ignore_index=True)
2022-08-06 05:06:58.827 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.827 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.827 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(range(3), method='ffill')
2022-08-06 05:06:58.841 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.841 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.842 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 05:06:58.856 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.856 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.856 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3)
2022-08-06 05:06:58.870 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.870 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.871 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(3))
2022-08-06 05:06:58.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.885 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.885 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*2, ignore_index=True)
2022-08-06 05:06:58.899 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.899 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.899 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(range(3))
2022-08-06 05:06:58.914 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:06:58.914 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 05:06:58.914 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat((dfin * 3), ignore_index=True)
2022-08-06 05:06:58.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.156 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.157 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 3), axis=0)
2022-08-06 05:07:03.159 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.160 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.160 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:07:03.174 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.174 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.174 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat((dfin, dfin, dfin), ignore_index=True)
2022-08-06 05:07:03.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.189 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.189 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:07:03.204 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.204 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.204 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:07:03.219 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.219 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.219 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:07:03.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.234 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.234 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:07:03.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.249 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.250 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:07:03.264 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.264 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.264 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 05:07:03.278 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.278 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.278 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:07:03.292 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.292 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.293 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:07:03.307 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.307 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.307 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 05:07:03.321 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.321 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.321 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:07:03.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.336 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.336 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 05:07:03.350 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.350 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.350 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:07:03.364 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.364 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.365 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 05:07:03.379 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.379 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.379 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.reindex(dfin.index.repeat(3))
2022-08-06 05:07:03.389 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.389 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.390 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:07:03.404 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.404 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.404 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:07:03.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:03.418 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 05:07:03.418 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 05:07:03.432 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:05.907 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 05:07:05.908 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:07:05.925 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:05.925 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 05:07:05.925 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:07:05.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:05.941 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 05:07:05.941 | DEBUG    | __main__:run_benchmark:432 - dfin.repeat(4)
2022-08-06 05:07:05.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:05.943 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 05:07:05.943 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 05:07:05.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:07:05.955 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 05:07:07.570 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate rows of dfin once
2022-08-06 05:07:07.571 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 05:07:07.587 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:07.587 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate rows of dfin once
2022-08-06 05:07:07.588 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin)
2022-08-06 05:07:07.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:07:10.012 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin once
2022-08-06 05:07:10.013 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*2, axis=0, sort=False)
2022-08-06 05:07:10.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:07:14.034 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 05:07:14.035 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:07:14.047 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:14.047 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 05:07:14.048 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:07:14.058 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:14.058 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 05:07:14.058 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:07:14.069 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:14.070 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 05:07:14.070 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin)
2022-08-06 05:07:14.077 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:07:17.268 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe dfin
2022-08-06 05:07:17.269 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 05:07:17.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:17.285 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe dfin
2022-08-06 05:07:17.285 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3)
2022-08-06 05:07:17.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:17.299 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe dfin
2022-08-06 05:07:17.299 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(2))
2022-08-06 05:07:17.315 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:17.315 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe dfin
2022-08-06 05:07:17.316 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(2))
2022-08-06 05:07:17.332 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:17.332 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe dfin
2022-08-06 05:07:17.332 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin)
2022-08-06 05:07:17.339 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:07:19.051 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 05:07:19.052 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin)
2022-08-06 05:07:19.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:07:23.225 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 05:07:23.226 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:07:23.237 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:23.238 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 05:07:23.238 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0:2, :].copy()
2022-08-06 05:07:23.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:23.252 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 05:07:23.252 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:07:23.265 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:23.265 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 05:07:23.265 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:07:23.279 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:23.279 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 05:07:23.280 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:07:23.293 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:23.294 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 05:07:23.294 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:07:23.307 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:23.308 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 05:07:23.308 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0:2, :].copy()
2022-08-06 05:07:23.322 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:23.322 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 05:07:23.322 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 0:]
2022-08-06 05:07:23.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:23.324 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 05:07:23.324 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:07:23.338 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:23.338 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 05:07:23.338 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:07:23.352 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:23.352 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 05:07:23.352 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:07:23.363 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:23.363 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 05:07:23.363 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin)
2022-08-06 05:07:23.370 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:07:25.172 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows
2022-08-06 05:07:25.173 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin)
2022-08-06 05:07:25.211 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:07:27.427 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.427 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin.iloc[0]).reset_index(drop=True)
2022-08-06 05:07:27.444 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.444 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.444 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:07:27.459 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.459 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.459 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin, ignore_index=True)
2022-08-06 05:07:27.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.474 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.474 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin.iloc[0]).reset_index(drop=True)
2022-08-06 05:07:27.489 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.489 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.489 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:07:27.504 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.504 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.505 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin).reset_index(drop=True)
2022-08-06 05:07:27.519 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.520 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.520 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin.iloc[0]).reset_index(drop=True)
2022-08-06 05:07:27.535 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.535 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.535 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin).reset_index(drop=True)
2022-08-06 05:07:27.550 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.550 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.550 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin.iloc[0]).reset_index(drop=True)
2022-08-06 05:07:27.565 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.565 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.565 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin, ignore_index=True)
2022-08-06 05:07:27.579 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.580 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.580 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin).reset_index(drop=True)
2022-08-06 05:07:27.594 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.594 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.595 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin).reset_index(drop=True)
2022-08-06 05:07:27.609 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.609 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.609 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin, ignore_index=True)
2022-08-06 05:07:27.624 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.624 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.624 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin).reset_index(drop=True)
2022-08-06 05:07:27.639 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.639 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.639 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin).reset_index(drop=True)
2022-08-06 05:07:27.654 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.654 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.654 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0]).reset_index(drop=True)
2022-08-06 05:07:27.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.665 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.665 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin).reset_index(drop=True)
2022-08-06 05:07:27.680 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.680 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.680 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin).reset_index(drop=True)
2022-08-06 05:07:27.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.695 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.695 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin.iloc[0]).reset_index(drop=True)
2022-08-06 05:07:27.710 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.710 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 05:07:27.710 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin).reset_index(drop=True)
2022-08-06 05:07:27.725 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:27.729 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 05:07:31.418 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 05:07:31.419 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(columns=dfin.columns.tolist() * 3)
2022-08-06 05:07:31.438 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:31.438 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 05:07:31.438 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, axis=1)
2022-08-06 05:07:31.456 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:31.456 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 05:07:31.456 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: [x] * 3)
2022-08-06 05:07:31.468 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:07:31.468 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 05:07:31.468 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3)
2022-08-06 05:07:31.475 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:07:31.626 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f53fbf707a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f53fc0ef8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f53693c1b90>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f53693c1b90>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'replicate the columns thrice', 'user': 'u4'}, {'query': 'Replicate the columns thrice', 'user': 'u4'}...
    │               └ {'queries': [{'query': 'replicate the columns thrice', 'user': 'u4'}, {'query': 'Replicate the columns thrice', 'user': 'u4'}...
    └ {'query': 'Replicate the columns thrice', 'user': 'u4'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f53693c1b90>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Melt the "df" dataframe with "num_co...
    │    └ 'code-davinci-002'
    └ <__main__.Algorithm1 object at 0x7f53693c1b90>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-002', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f5367233e60>
                       └ <openai.api_requestor.APIRequestor object at 0x7f53551d0910>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 12:07:31 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f53efa93f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 12:07:31 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on reques...
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f5355196ad0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeie...

openai.error.RateLimitError: Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 05:07:31.652 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 05:08:07.787 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.788 | DEBUG    | __main__:run_benchmark:432 - dfin.assign(**{c: dfin[c] for c in dfin.columns})
2022-08-06 05:08:07.803 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:07.804 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.804 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].values.repeat(3)
2022-08-06 05:08:07.806 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:07.806 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.806 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: [x] * 3)
2022-08-06 05:08:07.818 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:07.818 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.818 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(3)
2022-08-06 05:08:07.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:07.821 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.821 | DEBUG    | __main__:run_benchmark:432 - dfin.T.reindex(dfin.T.index.repeat(3)).T
2022-08-06 05:08:07.839 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:07.839 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.839 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: [x] * 3)
2022-08-06 05:08:07.850 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:07.851 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.851 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A':'B'] = dfin.loc[:, 'A':'B'].apply(lambda x: x.repeat(3))
2022-08-06 05:08:07.854 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:07.854 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.854 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].values[:, None].repeat(3, axis=1)
2022-08-06 05:08:07.864 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:07.864 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.864 | DEBUG    | __main__:run_benchmark:432 - dfin.columns = pd.MultiIndex.from_product([dfin.columns, ['a', 'b', 'c']])
2022-08-06 05:08:07.867 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:07.867 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.867 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, :]
2022-08-06 05:08:07.881 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:07.881 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.881 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, axis=1)
2022-08-06 05:08:07.898 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:07.898 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.899 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3, axis=1)
2022-08-06 05:08:07.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:07.916 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.916 | DEBUG    | __main__:run_benchmark:432 - dfin.assign(**{c: dfin[c] for c in dfin.columns})
2022-08-06 05:08:07.930 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:07.930 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.930 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, 0:2].apply(lambda x: pd.Series(x.values), axis=1).join(dfin.iloc[:, 0:2].apply(lambda x: pd.Series(x.values), axis=1), lsuffix
2022-08-06 05:08:07.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:07.931 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.931 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ['A', 'B', 'A', 'B', 'A', 'B']]
2022-08-06 05:08:07.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:07.947 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.948 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 05:08:07.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:07.962 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.962 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: [x] * 3)
2022-08-06 05:08:07.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:07.974 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.974 | DEBUG    | __main__:run_benchmark:432 - dfin.stack().unstack(0).unstack(0)
2022-08-06 05:08:07.986 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:07.986 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:07.986 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, axis=1)
2022-08-06 05:08:08.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:08.004 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 05:08:08.004 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, axis=1)
2022-08-06 05:08:08.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.011 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.012 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(2))
2022-08-06 05:08:12.027 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.027 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.027 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:12.037 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.038 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.038 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:].append(dfin.iloc[:])
2022-08-06 05:08:12.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.052 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.052 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(2))
2022-08-06 05:08:12.066 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.066 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.066 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(2))
2022-08-06 05:08:12.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.080 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.080 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:12.091 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.091 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.091 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:12.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.102 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.102 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:12.113 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.113 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.113 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:12.124 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.124 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.124 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(2))
2022-08-06 05:08:12.138 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.138 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.138 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:12.149 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.149 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.149 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*2)
2022-08-06 05:08:12.163 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.163 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.163 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:12.174 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.174 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.174 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:12.184 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.185 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.185 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 05:08:12.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.199 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.199 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.loc[dfin.index.repeat(2)].reset_index(drop=True)
2022-08-06 05:08:12.213 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.213 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.213 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin, dfin], ignore_index=True)
2022-08-06 05:08:12.226 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.227 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.227 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(2))
2022-08-06 05:08:12.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.241 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.241 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:12.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:12.251 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 05:08:12.252 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:12.262 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:14.773 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:14.773 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*2)
2022-08-06 05:08:14.788 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:14.788 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:14.789 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:14.800 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:14.800 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:14.800 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:14.812 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:14.812 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:14.812 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:14.824 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:14.824 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:14.824 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*2, ignore_index=True)
2022-08-06 05:08:14.839 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:14.839 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:14.839 | DEBUG    | __main__:run_benchmark:432 - dfin.melt(id_vars=['A'], value_vars=['B'], value_name='C')
2022-08-06 05:08:14.856 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:14.856 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:14.857 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:14.868 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:14.868 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:14.868 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*2)
2022-08-06 05:08:14.882 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:14.882 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:14.883 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:14.893 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:14.894 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:14.894 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:14.905 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:14.905 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:14.905 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:14.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:14.917 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:14.917 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.loc[dfin.index.repeat(2)].reset_index(drop=True)
2022-08-06 05:08:14.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:14.931 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:14.931 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:14.942 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:14.942 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:14.942 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:14.953 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:14.953 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:14.953 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:14.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:14.964 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:14.964 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*2)
2022-08-06 05:08:14.979 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:14.979 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:14.979 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*2, ignore_index=True)
2022-08-06 05:08:14.993 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:14.993 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:14.993 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:15.004 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:15.004 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:15.004 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.loc[dfin.index.repeat(2)].reset_index(drop=True)
2022-08-06 05:08:15.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:15.018 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 05:08:15.019 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*2, ignore_index=True)
2022-08-06 05:08:15.032 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.594 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.595 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:18.606 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.606 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.607 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:18.617 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.617 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.617 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:18.628 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.628 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.628 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(2))
2022-08-06 05:08:18.642 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.642 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.642 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 2))
2022-08-06 05:08:18.644 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.644 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.644 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:18.654 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.655 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.655 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:18.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.665 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.665 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 05:08:18.679 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.679 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.680 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:18.690 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.690 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.690 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:18.701 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.701 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.701 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 05:08:18.712 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.712 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.713 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:18.723 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.723 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.723 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 05:08:18.734 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.735 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.735 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:18.745 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.745 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.746 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 05:08:18.759 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.759 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.760 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 05:08:18.771 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.771 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.771 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:18.781 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.782 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.782 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 05:08:18.793 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.793 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.793 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[pd.Index(range(len(dfin))).repeat(2)]
2022-08-06 05:08:18.807 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:18.807 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 05:08:18.807 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:18.818 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.190 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.191 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:20.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.202 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.203 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:08:20.217 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.217 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.217 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:08:20.232 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.232 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.232 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:08:20.247 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.247 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.247 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:08:20.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.258 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.258 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:08:20.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.269 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.269 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:08:20.280 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.280 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.280 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:08:20.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.291 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.292 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:08:20.306 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.306 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.306 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:08:20.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.317 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.318 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:08:20.328 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.328 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.329 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:08:20.343 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.343 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.344 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:20.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.354 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.354 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:08:20.365 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.365 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.365 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:08:20.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.380 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.380 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:08:20.391 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.391 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.391 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:08:20.406 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.406 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.406 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:08:20.421 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.421 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.421 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:08:20.435 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:20.436 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 05:08:20.436 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 05:08:20.447 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:22.242 | DEBUG    | __main__:run_benchmark:431 - Query: concatenate dfin vertically to itself thrice
2022-08-06 05:08:22.243 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin], ignore_index=True)
2022-08-06 05:08:22.259 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:22.259 | DEBUG    | __main__:run_benchmark:431 - Query: concatenate dfin vertically to itself thrice
2022-08-06 05:08:22.259 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin], axis=0)
2022-08-06 05:08:22.266 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:08:25.270 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 05:08:25.271 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin, dfin, dfin])
2022-08-06 05:08:25.286 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:25.286 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 05:08:25.286 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin, dfin, dfin])
2022-08-06 05:08:25.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:25.300 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 05:08:25.300 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin, dfin, dfin])
2022-08-06 05:08:25.314 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:25.314 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 05:08:25.314 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin, dfin, dfin])
2022-08-06 05:08:25.328 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:25.328 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 05:08:25.329 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin).append(dfin)
2022-08-06 05:08:25.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:08:25.341 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 05:08:27.106 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.107 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:27.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.123 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.123 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 05:08:27.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.125 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.125 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:27.136 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.136 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.136 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:27.147 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.147 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.147 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:27.157 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.158 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.158 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin] * 4, ignore_index=True)
2022-08-06 05:08:27.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.173 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.173 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:27.188 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.188 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.188 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:27.203 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.203 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.203 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:27.218 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.218 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.219 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:08:27.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.234 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.234 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:08:27.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.249 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.249 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 05:08:27.260 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.260 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.260 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:27.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.271 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.271 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:27.282 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.282 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.282 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 05:08:27.293 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.293 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.294 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:08:27.309 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.309 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.309 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:08:27.319 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.320 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.320 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 05:08:27.331 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.331 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.331 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:08:27.346 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:27.346 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 05:08:27.346 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:08:27.361 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:29.926 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:29.927 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:29.944 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:29.945 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:29.945 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:29.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:29.960 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:29.960 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 05:08:29.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:29.962 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:29.962 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:29.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:29.977 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:29.977 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:29.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:29.992 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:29.993 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4), axis=0)
2022-08-06 05:08:29.994 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:29.994 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:29.995 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:30.010 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:30.010 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:30.010 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:30.025 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:30.025 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:30.025 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:30.040 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:30.040 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:30.040 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:08:30.055 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:30.055 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:30.056 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin] * 4, ignore_index=True)
2022-08-06 05:08:30.070 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:30.071 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:30.071 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)].reset_index(drop=True)
2022-08-06 05:08:30.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:30.086 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:30.086 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:30.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:30.101 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:30.101 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:30.116 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:30.116 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:30.116 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame(np.repeat(dfin.values, 4, axis=0), columns=dfin.columns)
2022-08-06 05:08:30.131 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:30.131 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:30.131 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 05:08:30.142 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:30.143 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:30.143 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)].reset_index(drop=True)
2022-08-06 05:08:30.158 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:30.158 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:30.158 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:30.173 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:30.173 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:30.173 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:30.188 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:30.188 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 05:08:30.189 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:08:30.203 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:34.045 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 05:08:34.046 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 05:08:34.049 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:34.049 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 05:08:34.050 | DEBUG    | __main__:run_benchmark:432 - dfin.repeat(4)
2022-08-06 05:08:34.051 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:34.051 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 05:08:34.052 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:08:34.067 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:34.067 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 05:08:34.067 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:08:34.082 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:34.082 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 05:08:34.082 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:08:34.097 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:34.097 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 05:08:34.097 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:08:34.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:34.113 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 05:08:34.113 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:08:34.128 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:34.128 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 05:08:34.128 | DEBUG    | __main__:run_benchmark:432 - dfin.repeat(4)
2022-08-06 05:08:34.129 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:34.130 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 05:08:34.130 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 05:08:34.144 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:34.144 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 05:08:34.144 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 05:08:34.151 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:08:36.924 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:36.925 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:36.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:36.941 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:36.941 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:36.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:36.956 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:36.956 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 05:08:36.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:36.958 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:36.958 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:36.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:36.974 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:36.974 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:08:36.989 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:36.989 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:36.989 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:37.004 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:37.004 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:37.004 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:37.019 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:37.019 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:37.019 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:37.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:37.035 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:37.035 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:37.050 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:37.050 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:37.050 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:37.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:37.065 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:37.065 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:37.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:37.081 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:37.081 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:37.096 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:37.096 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:37.096 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:37.111 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:37.111 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:37.111 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:37.126 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:37.126 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:37.127 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:37.142 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:37.142 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:37.142 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:37.157 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:37.157 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:37.157 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 05:08:37.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:37.172 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:37.172 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:37.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:37.188 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:37.188 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:37.203 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:37.203 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 05:08:37.203 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:37.218 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:40.682 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 05:08:40.683 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:40.699 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:40.699 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 05:08:40.699 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:40.714 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:40.714 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 05:08:40.714 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:08:40.729 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:40.729 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 05:08:40.729 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0, sort=False)
2022-08-06 05:08:40.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:08:42.922 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 05:08:42.922 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:42.938 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:42.939 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 05:08:42.939 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 05:08:42.950 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:42.950 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 05:08:42.950 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4), axis=0)
2022-08-06 05:08:42.952 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:42.952 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 05:08:42.952 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:08:42.967 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:42.968 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 05:08:42.968 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 05:08:42.969 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:42.970 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 05:08:42.970 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 05:08:42.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:08:45.922 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 05:08:45.923 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:08:45.935 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:45.935 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 05:08:45.935 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(np.arange(4), method='ffill')
2022-08-06 05:08:45.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:45.949 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 05:08:45.949 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:08:45.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:45.964 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 05:08:45.964 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:08:45.975 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:45.976 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 05:08:45.976 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:08:45.987 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:45.987 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 05:08:45.987 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3, ignore_index=True)
2022-08-06 05:08:46.002 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:46.002 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 05:08:46.002 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:08:46.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:46.013 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 05:08:46.013 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3, ignore_index=True)
2022-08-06 05:08:46.028 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:46.028 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 05:08:46.028 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3, ignore_index=True)
2022-08-06 05:08:46.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:46.043 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 05:08:46.043 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, sort=True)
2022-08-06 05:08:46.050 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:08:49.716 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 05:08:49.716 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 05:08:49.732 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:49.732 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 05:08:49.732 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = [44, -4]
2022-08-06 05:08:49.738 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:49.738 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 05:08:49.739 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = [44, -4]
2022-08-06 05:08:49.745 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:49.745 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 05:08:49.745 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin, dfin, dfin, dfin))
2022-08-06 05:08:49.752 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:08:51.717 | DEBUG    | __main__:run_benchmark:431 - Query: concat rows 4 times
2022-08-06 05:08:51.718 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 05:08:51.726 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:08:54.618 | DEBUG    | __main__:run_benchmark:431 - Query: concat dfin*4
2022-08-06 05:08:54.619 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:08:54.636 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:54.636 | DEBUG    | __main__:run_benchmark:431 - Query: concat dfin*4
2022-08-06 05:08:54.636 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin*4, dfin*5])
2022-08-06 05:08:54.650 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:54.650 | DEBUG    | __main__:run_benchmark:431 - Query: concat dfin*4
2022-08-06 05:08:54.650 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0, sort=False)
2022-08-06 05:08:54.657 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:08:59.961 | DEBUG    | __main__:run_benchmark:431 - Query: concat row 0, row 1 4 times
2022-08-06 05:08:59.962 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:08:59.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:59.978 | DEBUG    | __main__:run_benchmark:431 - Query: concat row 0, row 1 4 times
2022-08-06 05:08:59.978 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:08:59.993 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:08:59.993 | DEBUG    | __main__:run_benchmark:431 - Query: concat row 0, row 1 4 times
2022-08-06 05:08:59.993 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:09:00.008 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:00.008 | DEBUG    | __main__:run_benchmark:431 - Query: concat row 0, row 1 4 times
2022-08-06 05:09:00.008 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 05:09:00.023 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:00.023 | DEBUG    | __main__:run_benchmark:431 - Query: concat row 0, row 1 4 times
2022-08-06 05:09:00.023 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin, dfin], axis=0, sort=False)
2022-08-06 05:09:00.030 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:09:02.267 | DEBUG    | __main__:run_benchmark:431 - Query: concat rows of dfin 4 times
2022-08-06 05:09:02.268 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0)
2022-08-06 05:09:02.277 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:09:05.419 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.420 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:09:05.436 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.436 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.436 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:09:05.451 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.451 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.451 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:09:05.466 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.466 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.467 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:09:05.481 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.482 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.482 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:09:05.492 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.493 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.493 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 05:09:05.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.507 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.507 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 05:09:05.521 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.521 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.521 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:09:05.536 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.536 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.536 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:09:05.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.552 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.552 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 05:09:05.554 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.554 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.554 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:09:05.569 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.569 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.569 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:09:05.580 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.580 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.580 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:09:05.591 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.591 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.591 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:09:05.606 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.606 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.607 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:09:05.622 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.622 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.622 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4), axis=0)
2022-08-06 05:09:05.624 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.624 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.624 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:09:05.639 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.639 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.639 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 05:09:05.654 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.654 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.654 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 05:09:05.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:05.666 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 05:09:05.666 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 05:09:05.676 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.667 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.668 | DEBUG    | __main__:run_benchmark:432 - dfin.multiply(4)
2022-08-06 05:09:09.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.683 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.683 | DEBUG    | __main__:run_benchmark:432 - np.matmul(dfin, np.ones((2, 4)))
2022-08-06 05:09:09.692 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.692 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.692 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 05:09:09.702 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.702 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.702 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 05:09:09.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.713 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.713 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 05:09:09.723 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.723 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.723 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 05:09:09.733 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.734 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.734 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 05:09:09.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.744 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.744 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 05:09:09.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.755 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.755 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x * 4, axis=1)
2022-08-06 05:09:09.769 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.769 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.770 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 05:09:09.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.780 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.780 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 05:09:09.790 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.790 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.791 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x*4, axis=1)
2022-08-06 05:09:09.805 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.805 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.805 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x * 4, axis=1)
2022-08-06 05:09:09.820 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.820 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.820 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x * 4, axis=1)
2022-08-06 05:09:09.835 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.835 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.835 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0:2, 0:2] * 4
2022-08-06 05:09:09.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.849 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.849 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, :] * 4
2022-08-06 05:09:09.863 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.863 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.863 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x * 4, axis=1)
2022-08-06 05:09:09.878 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.878 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.878 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 05:09:09.888 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.888 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.888 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 05:09:09.899 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:09.899 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 05:09:09.899 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 05:09:09.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:12.439 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate table 4 times
2022-08-06 05:09:12.440 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, axis=0, sort=False)
2022-08-06 05:09:12.448 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:09:12.454 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 05:09:12.454 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:09:12.455 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:09:12.455 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 05:09:13.418 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 05:09:13.419 | DEBUG    | __main__:run_benchmark:432 - dfin.values[(1, 2)]
2022-08-06 05:09:13.420 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:09:16.681 | DEBUG    | __main__:run_benchmark:431 - Query: return value from ColC's 1st row
2022-08-06 05:09:16.682 | DEBUG    | __main__:run_benchmark:432 - dfin['colC'][1]
2022-08-06 05:09:16.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:09:18.476 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.476 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 05:09:18.479 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.479 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.479 | DEBUG    | __main__:run_benchmark:432 - dfin.at[2, 'colC']
2022-08-06 05:09:18.481 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.481 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.481 | DEBUG    | __main__:run_benchmark:432 - dfin.at[2, 'colC']
2022-08-06 05:09:18.482 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.482 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.482 | DEBUG    | __main__:run_benchmark:432 - dfin.at[2, 'colC']
2022-08-06 05:09:18.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.484 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.484 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 05:09:18.485 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.485 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.485 | DEBUG    | __main__:run_benchmark:432 - dfin['colC'][2]
2022-08-06 05:09:18.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.487 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.487 | DEBUG    | __main__:run_benchmark:432 - dfin['colC'][2]
2022-08-06 05:09:18.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.488 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.488 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[2, dfin.columns.get_loc('colC')]
2022-08-06 05:09:18.490 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.490 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.490 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 05:09:18.491 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.491 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.491 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 05:09:18.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.493 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.493 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 05:09:18.494 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.494 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.494 | DEBUG    | __main__:run_benchmark:432 - dfin.values[(2, 'colC')]
2022-08-06 05:09:18.495 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.495 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.496 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 05:09:18.497 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.497 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.497 | DEBUG    | __main__:run_benchmark:432 - dfin.at[2, 'colC']
2022-08-06 05:09:18.498 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.498 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.499 | DEBUG    | __main__:run_benchmark:432 - dfin['colC'].ix[2]
2022-08-06 05:09:18.500 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.500 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.500 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 05:09:18.501 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.501 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.501 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[2]['colC']
2022-08-06 05:09:18.503 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.503 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.503 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 05:09:18.504 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.504 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.504 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 05:09:18.506 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.506 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 05:09:18.506 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 05:09:18.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:18.514 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:09:18.514 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 05:09:21.359 | DEBUG    | __main__:run_benchmark:431 - Query: from column colC, select index 3
2022-08-06 05:09:21.360 | DEBUG    | __main__:run_benchmark:432 - dfin['colC'][3]
2022-08-06 05:09:21.362 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:09:21.369 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:09:21.369 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 05:09:21.369 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:09:21.369 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:09:24.368 | DEBUG    | __main__:run_benchmark:431 - Query: Filter all rows with alpha less than 40 or greater than 59 from dfin
2022-08-06 05:09:24.369 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] < 40) | (dfin['alpha'] > 59)]
2022-08-06 05:09:24.379 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:09:27.052 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.053 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['alpha'].between(40, 59)]
2022-08-06 05:09:27.071 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.071 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.071 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] > 40) & (dfin['alpha'] < 59)]
2022-08-06 05:09:27.088 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.088 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.088 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] > 40) & (dfin['alpha'] < 59)]
2022-08-06 05:09:27.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.105 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.105 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 05:09:27.122 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.122 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.122 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 05:09:27.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.139 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.139 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['alpha'].between(40, 59)]
2022-08-06 05:09:27.156 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.156 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.156 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] > 40) & (dfin['alpha'] < 59)]
2022-08-06 05:09:27.173 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.173 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.173 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] > 40) & (dfin['alpha'] < 59)]
2022-08-06 05:09:27.190 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.190 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.190 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 05:09:27.207 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.207 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.207 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] > 40) & (dfin['alpha'] < 59)]
2022-08-06 05:09:27.224 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.224 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.224 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 05:09:27.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.241 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.241 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 05:09:27.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.258 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.258 | DEBUG    | __main__:run_benchmark:432 - dfin[np.logical_and((dfin['alpha'] > 40), (dfin['alpha'] < 60))]
2022-08-06 05:09:27.275 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.275 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.275 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] > 40) & (dfin['alpha'] < 59)]
2022-08-06 05:09:27.292 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.292 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.293 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 05:09:27.309 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.309 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.310 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 05:09:27.326 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.326 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.327 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 05:09:27.343 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.343 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.343 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] > 40) & (dfin['alpha'] < 59)]
2022-08-06 05:09:27.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.361 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.361 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] > 40) & (dfin['alpha'] < 59)]
2022-08-06 05:09:27.377 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:27.378 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 05:09:27.378 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['alpha'].between(40, 59)]
2022-08-06 05:09:27.395 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:28.941 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 05:09:28.942 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] < 40) | (dfin['alpha'] > 59)]
2022-08-06 05:09:28.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:09:31.288 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is less than '40' or greater than '59'
2022-08-06 05:09:31.289 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59))]
2022-08-06 05:09:31.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:09:31.305 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:09:31.305 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:09:31.306 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:09:34.560 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where 'gamma' is less than 40 or greater than 53
2022-08-06 05:09:34.561 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) | (dfin['gamma'] > 53))]
2022-08-06 05:09:34.571 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:09:34.577 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:09:36.525 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 05:09:36.526 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 05:09:36.540 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:36.540 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 05:09:36.540 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 05:09:36.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:36.553 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 05:09:36.553 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 05:09:36.565 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:36.566 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 05:09:36.566 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 05:09:36.578 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:36.579 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 05:09:36.579 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 05:09:36.591 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:36.592 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 05:09:36.592 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 05:09:36.604 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:36.605 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 05:09:36.605 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] < 38) & (dfin['bar'] > 60))]
2022-08-06 05:09:36.617 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:36.618 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 05:09:36.618 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 05:09:36.630 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:36.630 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 05:09:36.631 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 05:09:36.643 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:36.643 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 05:09:36.643 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 05:09:36.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:36.656 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 05:09:36.656 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar']<38) & (dfin['bar']>60)]
2022-08-06 05:09:36.669 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:36.669 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 05:09:36.669 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 05:09:36.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:36.682 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 05:09:36.682 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 05:09:36.694 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:36.695 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 05:09:36.695 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar']<38) & (dfin['bar']>60)]
2022-08-06 05:09:36.707 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:09:36.707 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 05:09:36.707 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60)]
2022-08-06 05:09:36.716 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:09:40.001 | DEBUG    | __main__:run_benchmark:431 - Query: select rows from dfin such that column 'bar' is less than 38 or greater than 60
2022-08-06 05:09:40.002 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60))]
2022-08-06 05:09:40.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:09:40.018 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 05:09:40.019 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:09:40.019 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:09:44.572 | DEBUG    | __main__:run_benchmark:431 - Query: Filter all rows with alpha less than 40 or greater than 59 and filter all rows with beta equal to 3 from dfin
2022-08-06 05:09:44.573 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3)]
2022-08-06 05:09:44.583 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:09:47.986 | DEBUG    | __main__:run_benchmark:431 - Query: Filter all rows with alpha less than 40 or greater than 59 and beta equal to 3 from dfin
2022-08-06 05:09:47.987 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3)]
2022-08-06 05:09:47.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:09:50.597 | DEBUG    | __main__:run_benchmark:431 - Query: Filter all rows with alpha less than 40 or greater than 59 with beta equal to 3
2022-08-06 05:09:50.598 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3)]
2022-08-06 05:09:50.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:09:55.276 | DEBUG    | __main__:run_benchmark:431 - Query: Select all rows with alpha less than 40 or greater than 59 with beta equal to 3
2022-08-06 05:09:55.277 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3)]
2022-08-06 05:09:55.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:09:55.294 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 05:10:00.323 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 34 or greater than 70 and value in column 'bar' is 8
2022-08-06 05:10:00.324 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:10:00.334 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:10:05.734 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.735 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.749 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.749 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.749 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.762 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.762 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.775 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.775 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.776 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.788 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.788 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.788 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.801 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.801 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.802 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.814 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.815 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.815 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.827 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.827 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.828 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.840 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.841 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.841 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.853 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.854 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.854 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.866 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.867 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.867 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.880 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.880 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.880 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.893 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.893 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.893 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.906 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.906 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.919 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.919 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.919 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.932 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.932 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.932 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.945 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.945 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.958 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.958 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.971 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.971 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:05.984 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 05:10:05.984 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 05:10:05.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:09.283 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 8 of table dfin
2022-08-06 05:10:09.284 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:10:09.294 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:10:13.825 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 05:10:13.826 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:10:13.836 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:10:18.518 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 05:10:18.518 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:10:18.529 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:10:22.420 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 05:10:22.421 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:10:22.432 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:10:24.616 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 05:10:24.617 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:10:24.627 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:10:27.382 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.383 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) & (dfin['foo'] < 34)]
2022-08-06 05:10:27.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.397 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.397 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:27.410 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.410 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.410 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) & (dfin['foo'] < 34)]
2022-08-06 05:10:27.423 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.423 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.423 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:27.436 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.436 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.436 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:27.449 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.449 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.449 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:27.462 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.462 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.462 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:27.475 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.475 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.475 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:27.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.488 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.488 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:27.501 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.501 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.501 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:27.514 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.514 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.514 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:27.527 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.527 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.527 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:27.540 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.540 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.540 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 05:10:27.553 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.553 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.553 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:27.566 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.566 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.566 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:27.579 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.579 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.579 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:27.592 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.592 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.592 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:27.605 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.605 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.605 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 05:10:27.618 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.618 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.618 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) | (dfin['foo'] < 34)]
2022-08-06 05:10:27.635 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:27.635 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:27.636 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 05:10:27.649 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.104 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.105 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:31.119 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.119 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.119 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:31.132 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.132 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.132 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) & (dfin['foo'] < 34)]
2022-08-06 05:10:31.144 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.144 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.144 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:31.157 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.157 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.157 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:31.170 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.170 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.170 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:31.183 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.183 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.183 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:31.196 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.196 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.196 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) & (dfin['foo'] < 34)]
2022-08-06 05:10:31.208 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.208 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.209 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:31.221 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.221 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.221 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:31.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.234 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.234 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:31.247 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.247 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.247 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:31.259 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.260 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.260 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:31.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.272 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.273 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) | (dfin['foo'] < 34)]
2022-08-06 05:10:31.289 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.289 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.289 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:31.302 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.302 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.302 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:31.315 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.315 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.315 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) & (dfin['foo'] < 34)]
2022-08-06 05:10:31.328 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.328 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.328 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 05:10:31.340 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.340 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.341 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 05:10:31.353 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:31.353 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 05:10:31.353 | DEBUG    | __main__:run_benchmark:432 - dfin[np.logical_and(dfin['bar'] == 8, np.logical_and(dfin['foo'] > 70, dfin['foo'] < 34))]
2022-08-06 05:10:31.366 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:34.578 | DEBUG    | __main__:run_benchmark:431 - Query: Choose rows such that in column 'foo' it is less than 34 or greater than 70, in column 'bar' equals 8
2022-08-06 05:10:34.579 | DEBUG    | __main__:run_benchmark:432 - #  and in column 'yah' it is less than 0
2022-08-06 05:10:34.579 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:34.580 | DEBUG    | __main__:run_benchmark:431 - Query: Choose rows such that in column 'foo' it is less than 34 or greater than 70, in column 'bar' equals 8
2022-08-06 05:10:34.580 | DEBUG    | __main__:run_benchmark:432 - #  and in column 'yah' it is less than 0
2022-08-06 05:10:34.580 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:34.581 | DEBUG    | __main__:run_benchmark:431 - Query: Choose rows such that in column 'foo' it is less than 34 or greater than 70, in column 'bar' equals 8
2022-08-06 05:10:34.581 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:10:34.590 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:10:39.923 | DEBUG    | __main__:run_benchmark:431 - Query: Choose rows such that in column 'foo' it is less than 34 or greater than 70 and in column 'bar' equals 8
2022-08-06 05:10:39.924 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:10:39.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:10:43.967 | DEBUG    | __main__:run_benchmark:431 - Query: Get rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:10:43.968 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:10:43.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:10:46.043 | DEBUG    | __main__:run_benchmark:431 - Query: retain rows where 'foo' greater than 70 or 'foo' less than 34 and 'bar' is 8
2022-08-06 05:10:46.044 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | ((dfin['foo'] < 34) & (dfin['bar'] == 8)))]
2022-08-06 05:10:46.062 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:46.062 | DEBUG    | __main__:run_benchmark:431 - Query: retain rows where 'foo' greater than 70 or 'foo' less than 34 and 'bar' is 8
2022-08-06 05:10:46.062 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | ((dfin['foo'] < 34) & (dfin['bar'] == 8)))]
2022-08-06 05:10:46.079 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:46.079 | DEBUG    | __main__:run_benchmark:431 - Query: retain rows where 'foo' greater than 70 or 'foo' less than 34 and 'bar' is 8
2022-08-06 05:10:46.080 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | ((dfin['foo'] < 34) & (dfin['bar'] == 8)))]
2022-08-06 05:10:46.096 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:46.097 | DEBUG    | __main__:run_benchmark:431 - Query: retain rows where 'foo' greater than 70 or 'foo' less than 34 and 'bar' is 8
2022-08-06 05:10:46.097 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | ((dfin['foo'] < 34) & (dfin['bar'] == 8)))]
2022-08-06 05:10:46.113 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:10:46.114 | DEBUG    | __main__:run_benchmark:431 - Query: retain rows where 'foo' greater than 70 or 'foo' less than 34 and 'bar' is 8
2022-08-06 05:10:46.114 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 05:10:46.122 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:10:49.004 | DEBUG    | __main__:run_benchmark:431 - Query: retain rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 05:10:49.004 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 05:10:49.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:10:52.492 | DEBUG    | __main__:run_benchmark:431 - Query: select entries in column 'foo' which are greater than 70 or less than 34 and select entries in column 'bar' which are equal to 8
2022-08-06 05:10:52.493 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 05:10:52.502 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:10:56.297 | DEBUG    | __main__:run_benchmark:431 - Query: select entries where column 'foo' is greater than 70 or less than 34 and column 'bar' is equal to 8
2022-08-06 05:10:56.298 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 05:10:56.307 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:10:56.315 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:11:01.537 | DEBUG    | __main__:run_benchmark:431 - Query: get rows with beta greater than 53 or less than 40 and gamma equal to 9
2022-08-06 05:11:01.538 | DEBUG    | __main__:run_benchmark:432 - dfin[np.logical_or(dfin['beta'] > 53, dfin['beta'] < 40) & (dfin['gamma'] == 9)]
2022-08-06 05:11:01.548 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:11:05.117 | DEBUG    | __main__:run_benchmark:431 - Query: get rows with beta greater than 53 or less than 40 AND gamma equal to 9
2022-08-06 05:11:05.118 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['beta'] > 53) | (dfin['beta'] < 40)) & (dfin['gamma'] == 9)]
2022-08-06 05:11:05.128 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:11:07.748 | DEBUG    | __main__:run_benchmark:431 - Query: get rows with beta greater than 53 or less than 40, filter rows with gamma equal to 9
2022-08-06 05:11:07.749 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['beta'] > 53) | (dfin['beta'] < 40)) & (dfin['gamma'] == 9)]
2022-08-06 05:11:07.758 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:11:07.766 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:11:09.993 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where 'alpha' is equal to 4 and 'gamma' is not between 40 and 53
2022-08-06 05:11:09.993 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] == 4) & ~((dfin['gamma'] >= 40) & (dfin['gamma'] <= 53))]
2022-08-06 05:11:10.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:11:14.063 | DEBUG    | __main__:run_benchmark:431 - Query: From dfin, filter rows with column gamma less than 40 or more than 53, and column alpha equal to 4
2022-08-06 05:11:14.064 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) | (dfin['gamma'] > 53)) & (dfin['alpha'] == 4)]
2022-08-06 05:11:14.074 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:11:14.082 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 05:11:19.387 | DEBUG    | __main__:run_benchmark:431 - Query: retain those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is equal to 11
2022-08-06 05:11:19.388 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] > 37) & (dfin['bar'] < 61))) & (dfin['foo'] == 11)]
2022-08-06 05:11:19.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:11:22.911 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:22.912 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))].index)
2022-08-06 05:11:22.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:22.931 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:22.931 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 05:11:22.948 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:22.948 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:22.948 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 05:11:22.965 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:22.966 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:22.966 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 05:11:22.983 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:22.983 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:22.983 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)]
2022-08-06 05:11:23.000 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:23.000 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:23.000 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 05:11:23.017 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:23.017 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:23.017 | DEBUG    | __main__:run_benchmark:432 - dfin[~(((dfin['bar'] >= 37) & (dfin['bar'] <= 61)) & (dfin['foo'] != 11))]
2022-08-06 05:11:23.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:23.035 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:23.035 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 05:11:23.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:23.052 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:23.052 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)]
2022-08-06 05:11:23.069 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:23.070 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:23.070 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 05:11:23.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:23.087 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:23.087 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 05:11:23.104 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:23.105 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:23.105 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)]
2022-08-06 05:11:23.122 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:23.122 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:23.122 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 05:11:23.140 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:23.140 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:23.140 | DEBUG    | __main__:run_benchmark:432 - dfin[(~ dfin['bar'].between(left=37, right=61)) | (dfin['foo'] != 11)]
2022-08-06 05:11:23.158 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:23.158 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:23.158 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 05:11:23.175 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:23.175 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:23.176 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 37) | (dfin['bar'] > 61)) | (dfin['foo'] != 11)]
2022-08-06 05:11:23.193 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:23.193 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:23.193 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 05:11:23.211 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:23.211 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:23.211 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] > 37) & (dfin['bar'] < 61)) & (dfin['foo'] != 11)]
2022-08-06 05:11:23.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:23.228 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:23.228 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 05:11:23.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:23.246 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 05:11:23.246 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 05:11:23.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:27.867 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where (bar < 38 or bar > 60) and foo = 11
2022-08-06 05:11:27.868 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 05:11:27.878 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:11:30.238 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where bar < 38 or bar > 60 and foo = 11
2022-08-06 05:11:30.239 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 05:11:30.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:11:32.373 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where (bar<38 || bar>60) && foo==11
2022-08-06 05:11:32.374 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 05:11:32.383 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:11:37.733 | DEBUG    | __main__:run_benchmark:431 - Query: select rows from dfin such that column 'bar' is less than 38 or greater than 60 and column 'foo' equals 11
2022-08-06 05:11:37.734 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 05:11:37.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:11:37.752 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 05:11:37.753 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 05:11:37.753 | DEBUG    | __main__:run:515 - Number of queries: 27
2022-08-06 05:11:40.658 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:40.659 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:40.681 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:40.681 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:40.681 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'].unique())]
2022-08-06 05:11:40.701 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:40.701 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:40.701 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:40.722 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:40.722 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:40.722 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:40.742 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:40.743 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:40.743 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:40.763 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:40.763 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:40.763 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'] == dfin2['alpha'])]
2022-08-06 05:11:40.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:40.766 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:40.767 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:40.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:40.787 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:40.787 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:40.807 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:40.808 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:40.808 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:40.828 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:40.828 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:40.828 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:40.848 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:40.849 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:40.849 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:40.869 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:40.869 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:40.869 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:40.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:40.890 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:40.890 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:40.910 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:40.910 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:40.911 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:40.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:40.931 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:40.931 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:40.952 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:40.952 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:40.952 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:40.972 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:40.972 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:40.973 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:40.993 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:40.993 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:40.993 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:41.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:41.014 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:41.014 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:41.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:41.034 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:11:41.034 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:41.055 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.349 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.350 | DEBUG    | __main__:run_benchmark:432 - (dfin1 - dfin2['alpha'])
2022-08-06 05:11:44.379 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.379 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.379 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:44.396 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.396 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.396 | DEBUG    | __main__:run_benchmark:432 - dfin1.sub(dfin2, axis=0, level=None, fill_value=None)
2022-08-06 05:11:44.419 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.419 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.420 | DEBUG    | __main__:run_benchmark:432 - dfin1.alpha - dfin2.alpha
2022-08-06 05:11:44.436 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.436 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.437 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:44.453 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.453 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.454 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2
2022-08-06 05:11:44.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.485 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.485 | DEBUG    | __main__:run_benchmark:432 - dfin1.sub(dfin2, axis=0)
2022-08-06 05:11:44.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.508 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.508 | DEBUG    | __main__:run_benchmark:432 - dfin1.sub(dfin2, axis=0)
2022-08-06 05:11:44.530 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.530 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.531 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:44.547 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.547 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.548 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on='alpha', how='left', suffixes=('_x', '_y')).fillna(0).sub(dfin2, fill_value=0)
2022-08-06 05:11:44.580 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.580 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.580 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:44.597 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.597 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.597 | DEBUG    | __main__:run_benchmark:432 - dfin1.sub(dfin2, axis=0)
2022-08-06 05:11:44.620 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.620 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.620 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:44.637 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.637 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.638 | DEBUG    | __main__:run_benchmark:432 - dfin1.sub(dfin2, axis=0)
2022-08-06 05:11:44.660 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.660 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.661 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:44.677 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.677 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.678 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:44.694 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.695 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.695 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:11:44.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.695 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.695 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:44.712 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.712 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.712 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[:, 'alpha'] - dfin2.loc[:, 'alpha']
2022-08-06 05:11:44.729 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:44.729 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 05:11:44.730 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:44.746 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.591 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.592 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:46.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.611 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.611 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:46.627 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.628 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.628 | DEBUG    | __main__:run_benchmark:432 - np.setdiff1d(dfin1['alpha'], dfin2['alpha'])
2022-08-06 05:11:46.644 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.644 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.644 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:46.661 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.661 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.661 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:46.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.678 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.678 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:46.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.695 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.695 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:46.712 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.713 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.713 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'].diff()
2022-08-06 05:11:46.729 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.729 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.729 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:46.746 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.746 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.746 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:46.763 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.764 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.764 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:46.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.781 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.781 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:46.798 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.798 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.798 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:11:46.798 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.798 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.798 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:46.815 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.815 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.815 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:46.832 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.832 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.832 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:46.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.849 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.849 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:46.866 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.866 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.867 | DEBUG    | __main__:run_benchmark:432 - pd.Series(dfin1['alpha'] - dfin2['alpha'])
2022-08-06 05:11:46.883 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.883 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.884 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:46.900 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:46.900 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 05:11:46.901 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 05:11:46.917 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.459 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.460 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:50.482 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.482 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.482 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:50.502 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.502 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.502 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:50.523 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.523 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.523 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:50.543 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.543 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.543 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 05:11:50.546 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.546 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.547 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] != dfin2['alpha'])]['alpha']
2022-08-06 05:11:50.549 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.549 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.550 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2[dfin1['alpha'] != dfin2['alpha']]['alpha'])]
2022-08-06 05:11:50.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.553 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.553 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:50.573 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.573 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.573 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:50.593 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.594 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.594 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:50.614 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.614 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.614 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:50.635 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.635 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.635 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:50.655 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.655 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.656 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:50.676 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.676 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.676 | DEBUG    | __main__:run_benchmark:432 - df1[(df1['alpha'].isin(dfin2['alpha'])) & (df1['alpha'].isin(dfin1['alpha'])) & (dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 05:11:50.679 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.679 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.679 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:50.699 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.700 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.700 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:50.720 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.720 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.721 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha']) & (dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 05:11:50.723 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.724 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.724 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:50.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.744 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.744 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:50.765 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:50.765 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:11:50.765 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:11:50.785 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:11:51.002 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f53fbf707a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f53fc0ef8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f53693c1b90>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f53693c1b90>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'"...
    │               └ {'queries': [{'query': "filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'"...
    └ {'query': "select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal", 'user': 'u8'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f53693c1b90>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a DataFrame containing all ro...
    │    └ 'code-davinci-002'
    └ <__main__.Algorithm1 object at 0x7f53693c1b90>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-002', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f5367233e60>
                       └ <openai.api_requestor.APIRequestor object at 0x7f53551a7210>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 12:11:50 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f53efa93f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 12:11:50 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on reques...
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f5355186a50>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeie...

openai.error.RateLimitError: Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 05:11:51.028 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 05:12:22.906 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:12:22.907 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 05:12:22.910 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:22.910 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:12:22.910 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:12:22.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:22.931 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:12:22.931 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:12:22.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:22.952 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:12:22.952 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:12:22.972 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:22.972 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:12:22.973 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 05:12:22.975 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:22.975 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:12:22.976 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] != dfin2['alpha'])]['alpha']
2022-08-06 05:12:22.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:22.978 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:12:22.979 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'] != dfin2['alpha']), :]
2022-08-06 05:12:22.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:22.981 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:12:22.982 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:12:23.002 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:23.002 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:12:23.002 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 05:12:23.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:23.005 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 05:12:23.005 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:12:23.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:12:25.917 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 05:12:25.918 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha'])) & (dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 05:12:25.921 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:25.922 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 05:12:25.922 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'].isin(dfin2['alpha'])) & (dfin1['alpha'] != dfin2['alpha']), :]
2022-08-06 05:12:25.925 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:25.925 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 05:12:25.925 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 05:12:25.928 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:25.928 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 05:12:25.928 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:12:25.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:25.949 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 05:12:25.949 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha'].unique())) & (dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 05:12:25.952 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:25.952 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 05:12:25.952 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha']) & (dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 05:12:25.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:25.955 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 05:12:25.956 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 05:12:25.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:25.959 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 05:12:25.959 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:12:25.979 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:25.979 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 05:12:25.979 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha'])) & (dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 05:12:25.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:25.982 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 05:12:25.983 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:12:26.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:26.003 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 05:12:26.003 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:12:26.023 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:26.024 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 05:12:26.024 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:12:26.044 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:26.044 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 05:12:26.044 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:12:26.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:26.065 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 05:12:26.065 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:12:26.085 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:26.085 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 05:12:26.086 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:12:26.097 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:12:26.105 | DEBUG    | __main__:run:515 - Number of queries: 26
2022-08-06 05:12:30.316 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.317 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:12:30.340 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.341 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.341 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'].unique())]
2022-08-06 05:12:30.361 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.361 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.361 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:12:30.382 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.382 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.382 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'].to_list())]
2022-08-06 05:12:30.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.402 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.402 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:12:30.422 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.423 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.423 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:12:30.443 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.443 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.443 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:12:30.464 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.464 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.464 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:12:30.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.484 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.485 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:12:30.505 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.505 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.505 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:12:30.525 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.525 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.526 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:12:30.546 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.546 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.546 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:12:30.566 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.566 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.567 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:12:30.587 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.587 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.587 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:12:30.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.608 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.608 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:12:30.628 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.628 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.628 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:12:30.649 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.649 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.649 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:12:30.669 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.669 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.670 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:12:30.690 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.690 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.690 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:12:30.710 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.711 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 05:12:30.711 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:12:30.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:30.741 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:12:30.741 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:12:33.826 | DEBUG    | __main__:run_benchmark:431 - Query: From dfin, filter rows with dfin1.yah values not in column dfin2.yah
2022-08-06 05:12:33.826 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1.yah.isin(dfin2.yah)].reset_index(drop=True)
2022-08-06 05:12:33.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:33.849 | DEBUG    | __main__:run_benchmark:431 - Query: From dfin, filter rows with dfin1.yah values not in column dfin2.yah
2022-08-06 05:12:33.849 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[~dfin1['yah'].isin(dfin2['yah'])]
2022-08-06 05:12:33.860 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:12:33.869 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 05:12:33.870 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 05:12:33.870 | DEBUG    | __main__:run:515 - Number of queries: 21
2022-08-06 05:12:38.044 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.045 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.064 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.064 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.081 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.082 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.082 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.099 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.099 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.099 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.116 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.116 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.117 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.134 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.134 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.151 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.151 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.152 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.169 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.169 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.169 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.186 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.186 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.186 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.204 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.204 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.204 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.221 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.221 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.221 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.238 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.239 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.239 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.256 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.256 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.256 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.273 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.273 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.274 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.291 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.291 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.308 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.309 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.309 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.326 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.326 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.326 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.344 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.344 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.344 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.361 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.361 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.361 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.378 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:38.379 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 05:12:38.379 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:38.396 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.046 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.047 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))
2022-08-06 05:12:44.048 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.049 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.049 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 05:12:44.068 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.068 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.068 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 05:12:44.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.087 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.087 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 05:12:44.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.105 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.105 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 05:12:44.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.123 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.124 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 05:12:44.124 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.124 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.124 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 05:12:44.142 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.142 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.142 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 05:12:44.160 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.160 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.161 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 05:12:44.179 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.179 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.179 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 05:12:44.197 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.197 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.198 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))
2022-08-06 05:12:44.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.198 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.198 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 05:12:44.216 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.217 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.217 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 05:12:44.235 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.235 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.235 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 05:12:44.253 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.253 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.253 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 05:12:44.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.272 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.272 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8
2022-08-06 05:12:44.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.272 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.273 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 05:12:44.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.291 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.291 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 05:12:44.309 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.309 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.309 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 05:12:44.327 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:44.327 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 05:12:44.328 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 05:12:44.346 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.954 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.954 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'yah' is less than 5)
2022-08-06 05:12:47.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.956 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.956 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 05:12:47.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.956 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.956 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'yah' is less than or equal to 5)
2022-08-06 05:12:47.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.957 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.957 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 05:12:47.957 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.957 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.957 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'yah' is less than 5)
2022-08-06 05:12:47.957 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.957 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.957 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'yah' is greater than 10)
2022-08-06 05:12:47.957 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.958 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.958 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 05:12:47.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.958 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.958 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 05:12:47.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.958 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.958 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'yah' is less than 5)
2022-08-06 05:12:47.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.958 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.959 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'yah' is less than or equal to 5)
2022-08-06 05:12:47.959 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.959 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.959 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 05:12:47.959 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.959 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.959 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 05:12:47.959 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.959 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.959 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'yah' is less than 5)
2022-08-06 05:12:47.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.960 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.960 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 05:12:47.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.960 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.960 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 05:12:47.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.960 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.960 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 05:12:47.961 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.961 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.961 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'yah' is less than 5)
2022-08-06 05:12:47.961 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.961 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.961 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'yah' is greater than 10)
2022-08-06 05:12:47.961 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.961 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.961 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 05:12:47.961 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:47.962 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 05:12:47.962 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 05:12:47.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:50.768 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:50.769 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 05:12:50.788 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:50.788 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:50.788 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 05:12:50.805 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:50.805 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:50.805 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)]
2022-08-06 05:12:50.822 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:50.823 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:50.823 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 05:12:50.840 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:50.840 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:50.840 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 05:12:50.857 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:50.857 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:50.857 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:50.875 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:50.875 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:50.875 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:50.892 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:50.892 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:50.892 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 05:12:50.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:50.910 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:50.910 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:12:50.910 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:50.910 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:50.910 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 05:12:50.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:50.928 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:50.928 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 05:12:50.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:50.945 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:50.945 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 05:12:50.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:50.962 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:50.963 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 05:12:50.980 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:50.980 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:50.980 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 05:12:50.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:50.997 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:50.998 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:12:50.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:50.998 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:50.998 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 05:12:51.015 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:51.015 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:51.016 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 05:12:51.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:51.033 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:51.033 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 05:12:51.050 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:51.050 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:51.050 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 05:12:51.068 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:51.068 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 05:12:51.068 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 05:12:51.085 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:54.796 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:54.797 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:54.815 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:54.815 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:54.815 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:54.832 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:54.833 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:54.833 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 05:12:54.850 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:54.850 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:54.850 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:54.868 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:54.868 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:54.868 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:54.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:54.885 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:54.886 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:54.903 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:54.903 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:54.903 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:54.920 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:54.920 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:54.920 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:54.938 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:54.938 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:54.938 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:54.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:54.955 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:54.955 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:54.972 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:54.973 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:54.973 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:54.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:54.990 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:54.991 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:55.008 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:55.008 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:55.008 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:55.026 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:55.026 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:55.026 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:55.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:55.043 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:55.043 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 05:12:55.061 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:55.061 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:55.061 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:55.078 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:55.078 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:55.078 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:55.095 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:55.096 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:55.096 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:55.113 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:55.113 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:55.113 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:55.130 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:55.130 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:55.130 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:55.148 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.126 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.127 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:12:58.145 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.145 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.145 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:12:58.162 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.162 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.163 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:12:58.180 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.180 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.180 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:12:58.197 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.197 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.198 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 05:12:58.215 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.215 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.215 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:12:58.232 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.232 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.232 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:12:58.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.249 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.250 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:58.267 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.267 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.267 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:12:58.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.284 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.285 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:12:58.302 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.302 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.302 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:12:58.319 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.319 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.320 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:12:58.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.337 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.337 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:12:58.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.354 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.354 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:12:58.355 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.355 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.355 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:12:58.372 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.372 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.373 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:12:58.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.390 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.390 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:12:58.407 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.407 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.407 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:12:58.424 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.425 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.425 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:12:58.442 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:12:58.442 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 05:12:58.442 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:12:58.459 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:00.964 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:00.965 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:13:00.983 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:00.983 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:00.983 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:13:01.001 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:01.001 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:01.001 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:13:01.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:01.018 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:01.018 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:13:01.035 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:01.036 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:01.036 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 05:13:01.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:01.053 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:01.053 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:13:01.070 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:01.070 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:01.071 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:13:01.071 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:01.071 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:01.071 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:13:01.071 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:01.071 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:01.071 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 05:13:01.089 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:01.089 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:01.089 | DEBUG    | __main__:run_benchmark:432 - #  Return the 'foo' and 'bar' columns
2022-08-06 05:13:01.089 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:01.090 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:01.090 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:13:01.107 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:01.107 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:01.107 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:13:01.108 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:01.108 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:01.108 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:13:01.108 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:01.108 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:01.108 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:13:01.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:01.126 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:01.126 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:13:01.143 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:01.143 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:01.143 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:13:01.160 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:01.160 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:01.161 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:13:01.161 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:01.161 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:01.161 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:13:01.161 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:01.161 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:01.161 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:13:01.178 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:01.178 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 05:13:01.179 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 05:13:01.196 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.167 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.168 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40)) & (dfin['foo'] < 50)]
2022-08-06 05:13:05.186 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.186 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.186 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 05:13:05.203 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.203 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.203 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 05:13:05.220 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.220 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.220 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 05:13:05.237 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.237 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.238 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40)) & (dfin['foo'] < 50)]
2022-08-06 05:13:05.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.255 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.255 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 05:13:05.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.272 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.272 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 05:13:05.289 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.289 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.290 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 05:13:05.307 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.307 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.307 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 05:13:05.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.324 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.324 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 05:13:05.341 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.341 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.341 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 05:13:05.358 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.358 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.359 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 05:13:05.376 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.376 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.376 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 05:13:05.393 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.393 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.393 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 05:13:05.410 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.410 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.410 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 05:13:05.427 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.428 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.428 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 05:13:05.445 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.445 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.445 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 05:13:05.462 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.462 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.462 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 05:13:05.479 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.479 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.479 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 05:13:05.496 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:05.496 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 05:13:05.497 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 05:13:05.514 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:09.352 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:09.353 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:13:09.410 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:09.410 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:09.411 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:13:09.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:09.431 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:09.431 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:13:09.448 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:09.448 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:09.448 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] != 8))]
2022-08-06 05:13:09.465 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:09.466 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:09.466 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] == 8))]
2022-08-06 05:13:09.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:09.483 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:09.483 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 05:13:09.500 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:09.500 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:09.500 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70) & (dfin['bar'] == 8))]
2022-08-06 05:13:09.517 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:09.518 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:09.518 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] != 8))]
2022-08-06 05:13:09.535 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:09.535 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:09.535 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70) & (dfin['bar'] == 8))]
2022-08-06 05:13:09.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:09.552 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:09.552 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] != 8)]
2022-08-06 05:13:09.569 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:09.569 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:09.570 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)].index)
2022-08-06 05:13:09.578 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:13:13.222 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:13.223 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:13:13.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:13.241 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:13.241 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:13:13.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:13.258 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:13.258 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:13:13.275 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:13.276 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:13.276 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] != 8))]
2022-08-06 05:13:13.293 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:13.293 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:13.293 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70) & (dfin['bar'] != 8))]
2022-08-06 05:13:13.310 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:13.310 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:13.311 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] != 8))]
2022-08-06 05:13:13.328 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:13.328 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:13.328 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)].index)
2022-08-06 05:13:13.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:13:16.109 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.110 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:13:16.128 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.128 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.128 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70) & (dfin['bar'] != 8))]
2022-08-06 05:13:16.145 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.145 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.146 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:13:16.163 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.163 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.163 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:13:16.181 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.181 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.181 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 05:13:16.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.198 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.198 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] != 8))]
2022-08-06 05:13:16.215 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.215 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.216 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] != 8))]
2022-08-06 05:13:16.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.233 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.233 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] != 8))]
2022-08-06 05:13:16.250 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.250 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.250 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] != 8)]
2022-08-06 05:13:16.267 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.267 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.268 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70) & (dfin['bar'] == 8))]
2022-08-06 05:13:16.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.285 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.285 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70) & (dfin['bar'] != 8))]
2022-08-06 05:13:16.302 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.302 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.302 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 05:13:16.319 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.320 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.320 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] != 8)]
2022-08-06 05:13:16.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.337 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.337 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] != 8)]
2022-08-06 05:13:16.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.355 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.355 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 05:13:16.372 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.372 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.372 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] != 8)]
2022-08-06 05:13:16.389 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.389 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.389 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70) & (dfin['bar'] == 8))]
2022-08-06 05:13:16.406 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.407 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.407 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] != 8)]
2022-08-06 05:13:16.424 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.424 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.424 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] != 8)]
2022-08-06 05:13:16.441 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:16.441 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 05:13:16.442 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 05:13:16.459 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:20.157 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 05:13:20.158 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)].index)
2022-08-06 05:13:20.168 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:13:24.482 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 05:13:24.483 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)].index)
2022-08-06 05:13:24.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:13:26.941 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:26.942 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 05:13:26.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:26.960 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:26.960 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 05:13:26.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:26.977 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:26.978 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8))]
2022-08-06 05:13:26.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:26.995 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:26.995 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8))]
2022-08-06 05:13:27.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:27.012 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:27.013 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 05:13:27.030 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:27.030 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:27.030 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 05:13:27.047 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:27.047 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:27.047 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 05:13:27.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:27.064 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:27.065 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 05:13:27.082 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:27.082 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:27.082 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 05:13:27.099 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:27.099 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:27.100 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 05:13:27.117 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:27.117 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:27.117 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 05:13:27.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:27.134 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:27.134 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 05:13:27.151 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:27.152 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:27.152 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8))]
2022-08-06 05:13:27.169 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:27.169 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:27.169 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8))]
2022-08-06 05:13:27.186 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:27.186 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:27.187 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 05:13:27.204 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:27.204 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:27.204 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8))]
2022-08-06 05:13:27.221 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:27.221 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:27.222 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) | (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 05:13:27.239 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:27.239 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:27.239 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 05:13:27.256 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:27.256 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:27.256 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 05:13:27.273 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:27.274 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 05:13:27.274 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 05:13:27.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:29.988 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 05:13:29.989 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)].index)
2022-08-06 05:13:29.999 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:13:32.909 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 05:13:32.909 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)].index)
2022-08-06 05:13:32.920 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:13:36.068 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 05:13:36.069 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)].index)
2022-08-06 05:13:36.079 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:13:40.215 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:13:40.216 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) | ((dfin['bar'] == 8) & (dfin['foo'] < 34))].index)
2022-08-06 05:13:40.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:13:44.792 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:13:44.793 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) | ((dfin['bar'] == 8) & (dfin['foo'] < 34))].index)
2022-08-06 05:13:44.803 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:13:44.813 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:13:49.184 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.185 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.203 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.203 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.204 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.221 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.221 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.221 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.238 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.238 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.239 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.256 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.256 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.256 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.273 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.273 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.274 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.291 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.291 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.308 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.308 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.308 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.326 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.326 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.326 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.343 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.343 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.343 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.361 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.361 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.361 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.378 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.378 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.379 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.396 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.396 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.396 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.413 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.413 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.414 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.431 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.431 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.448 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.448 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.449 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.466 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.466 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.466 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.483 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.483 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.501 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.501 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.501 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.518 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:49.518 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:49.518 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:49.536 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.054 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.055 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.074 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.074 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.091 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.091 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.091 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.108 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.108 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.108 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.126 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.126 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.126 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.143 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.143 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.143 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.160 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.160 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.161 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.178 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.178 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.178 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.195 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.195 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.195 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.212 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.213 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.213 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.230 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.230 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.230 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.247 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.247 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.247 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.264 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.264 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.265 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.282 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.282 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.282 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.299 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.299 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.316 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.317 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.317 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.334 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.334 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.334 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.351 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.351 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.351 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.368 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.369 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.369 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.386 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:52.386 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:52.386 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:52.403 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:55.968 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:55.969 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:55.987 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:55.987 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:55.987 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.005 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:56.005 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.022 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.022 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:56.023 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.040 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.040 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:56.040 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.057 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.057 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:56.058 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.075 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.075 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:56.075 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.092 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:56.092 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.110 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.110 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:56.110 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.128 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:56.128 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.145 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.145 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:56.145 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.162 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.162 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:56.162 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.179 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.179 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:56.179 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.196 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.196 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:56.196 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.213 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.214 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:56.214 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.231 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.231 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:56.231 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.248 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.248 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:56.248 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.265 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.265 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:56.265 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.282 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.282 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:56.282 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.300 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 05:13:56.300 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 05:13:56.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:56.327 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:13:59.210 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 05:13:59.211 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] >= 37) & (dfin['bar'] <= 61)) & (dfin['foo'] != 11)]
2022-08-06 05:13:59.230 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:59.230 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 05:13:59.230 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] > 37) & (dfin['bar'] < 61)) & (dfin['foo'] == 11)]
2022-08-06 05:13:59.247 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:59.247 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 05:13:59.247 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] >= 37) & (dfin['bar'] <= 61)) & (dfin['foo'] != 11)]
2022-08-06 05:13:59.264 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:13:59.265 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 05:13:59.265 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] < 37) | (dfin['bar'] > 61)) & (dfin['foo'] == 11)].index)
2022-08-06 05:13:59.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:14:03.743 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 05:14:03.744 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 05:14:03.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:03.762 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 05:14:03.762 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 05:14:03.779 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:03.780 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 05:14:03.780 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 05:14:03.797 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:03.797 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 05:14:03.797 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 05:14:03.814 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:03.815 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 05:14:03.815 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 05:14:03.832 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:03.832 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 05:14:03.832 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 05:14:03.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:03.849 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 05:14:03.850 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 05:14:03.867 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:03.867 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 05:14:03.867 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.loc[((dfin['bar'] >= 38) & (dfin['bar'] <= 60)) | (dfin['foo'] != 11)].index)
2022-08-06 05:14:03.884 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:03.884 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 05:14:03.885 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 05:14:03.902 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:03.902 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 05:14:03.902 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 05:14:03.919 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:03.919 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 05:14:03.920 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] >= 38) & (dfin['bar'] <= 60)) | (dfin['foo'] != 11)].index)
2022-08-06 05:14:03.937 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:03.937 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 05:14:03.937 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 05:14:03.954 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:03.955 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 05:14:03.955 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 05:14:03.972 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:03.972 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 05:14:03.972 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 05:14:03.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:03.990 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 05:14:03.990 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 05:14:04.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:04.007 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 05:14:04.007 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] >= 38) & (dfin['bar'] <= 60)) | (dfin['foo'] != 11)]
2022-08-06 05:14:04.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:14:06.839 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:06.840 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 05:14:06.858 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:06.858 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:06.859 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 05:14:06.876 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:06.876 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:06.876 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]
2022-08-06 05:14:06.893 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:06.893 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:06.894 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(~((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]
2022-08-06 05:14:06.911 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:06.911 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:06.911 | DEBUG    | __main__:run_benchmark:432 - print(dfin[(~(dfin['bar'] < 38) | ~(dfin['bar'] > 60)) & (dfin['foo'] == 11)])
2022-08-06 05:14:06.911 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((~ (dfin['bar'] < 38)) | (~ (dfin['bar'] > 60))) & (dfin['foo'] == 11))]

2022-08-06 05:14:06.919 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((~ (dfin['bar'] < 38)) | (~ (dfin['bar'] > 60))) & (dfin['foo'] == 11))]

2022-08-06 05:14:06.929 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:06.929 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:06.929 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]
2022-08-06 05:14:06.946 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:06.946 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:06.946 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 05:14:06.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:06.964 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:06.964 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 05:14:06.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:06.981 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:06.981 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 05:14:06.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:06.999 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:06.999 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 05:14:07.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:07.016 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:07.016 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 05:14:07.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:07.034 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:07.034 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]
2022-08-06 05:14:07.051 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:07.051 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:07.051 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 05:14:07.068 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:07.068 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:07.069 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 05:14:07.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:07.086 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:07.086 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 05:14:07.103 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:07.103 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:07.103 | DEBUG    | __main__:run_benchmark:432 - print(dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)])
2022-08-06 05:14:07.104 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((~ ((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11))]

2022-08-06 05:14:07.112 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((~ ((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11))]

2022-08-06 05:14:07.121 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:07.121 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:07.121 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 05:14:07.138 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:07.138 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:07.139 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 05:14:07.156 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:07.156 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:07.156 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]
2022-08-06 05:14:07.173 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:07.173 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 05:14:07.173 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)]
2022-08-06 05:14:07.190 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.553 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.554 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 05:14:10.572 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.572 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.573 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 05:14:10.590 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.590 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.590 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 05:14:10.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.608 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.608 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 05:14:10.625 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.625 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.625 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 05:14:10.643 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.643 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.643 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 05:14:10.660 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.660 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.661 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 05:14:10.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.678 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.678 | DEBUG    | __main__:run_benchmark:432 - print(dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))])
2022-08-06 05:14:10.678 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(~ ((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11))))]

2022-08-06 05:14:10.686 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(~ ((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11))))]

2022-08-06 05:14:10.696 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.696 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.696 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 05:14:10.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.713 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.714 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 05:14:10.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.731 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.731 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 05:14:10.748 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.749 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.749 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 05:14:10.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.766 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.766 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11))]
2022-08-06 05:14:10.783 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.784 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.784 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 05:14:10.801 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.801 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.801 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 05:14:10.819 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.819 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.819 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 05:14:10.836 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.836 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.836 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 05:14:10.854 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.854 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.854 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 05:14:10.871 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.871 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.872 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 05:14:10.889 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.889 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 05:14:10.889 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 05:14:10.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:10.917 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 05:14:10.918 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 05:14:10.918 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:14:13.004 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 05:14:13.005 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 05:14:13.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:13.012 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 05:14:13.013 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(min_periods=1, window=3).mean()
2022-08-06 05:14:13.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:13.019 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 05:14:13.019 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(window=3, min_periods=1).mean()
2022-08-06 05:14:13.025 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:13.025 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 05:14:13.025 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean().shift(1).fillna(0)
2022-08-06 05:14:13.031 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:13.032 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 05:14:13.032 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean()
2022-08-06 05:14:13.038 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:14:14.874 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 05:14:14.875 | DEBUG    | __main__:run_benchmark:432 - dfin['a_avg'] = dfin['a'].rolling(3).mean()
2022-08-06 05:14:14.882 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:14.882 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 05:14:14.882 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 05:14:14.888 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:14.889 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 05:14:14.889 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 05:14:14.895 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:14.895 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 05:14:14.895 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 05:14:14.901 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:14.901 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 05:14:14.902 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 05:14:14.908 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:14.908 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 05:14:14.908 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean()
2022-08-06 05:14:14.914 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:14:17.862 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 05:14:17.863 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 05:14:17.870 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:17.870 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 05:14:17.871 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 05:14:17.877 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:17.877 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 05:14:17.877 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 05:14:17.883 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:17.883 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 05:14:17.884 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2).fillna(0)
2022-08-06 05:14:17.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:17.890 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 05:14:17.890 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 05:14:17.896 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:17.896 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 05:14:17.896 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 05:14:17.903 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:17.903 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 05:14:17.903 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(1).fillna(0)
2022-08-06 05:14:17.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:17.909 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 05:14:17.909 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 05:14:17.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:17.916 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 05:14:17.916 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean()
2022-08-06 05:14:17.922 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:14:19.247 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.248 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(min_periods=1, window=3).mean()
2022-08-06 05:14:19.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.255 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.256 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 05:14:19.262 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.262 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.262 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 05:14:19.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.268 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.268 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 05:14:19.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.275 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.275 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).mean()
2022-08-06 05:14:19.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.284 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.284 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 05:14:19.290 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.290 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.290 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 05:14:19.297 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.297 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.297 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(window=3).mean()
2022-08-06 05:14:19.303 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.303 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.303 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'a'].rolling(window=3).mean()
2022-08-06 05:14:19.309 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.310 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.310 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 05:14:19.316 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.316 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.316 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 05:14:19.322 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.322 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.322 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(window=3).mean()
2022-08-06 05:14:19.329 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.329 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.329 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 05:14:19.335 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.335 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.336 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).mean()
2022-08-06 05:14:19.345 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.345 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.345 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 05:14:19.351 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.351 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.352 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(window=3).mean()
2022-08-06 05:14:19.357 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.358 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.358 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 05:14:19.364 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.364 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.364 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(window=3).mean()
2022-08-06 05:14:19.370 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.370 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.370 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 05:14:19.376 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.376 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 05:14:19.377 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(center=False, window=3).mean()
2022-08-06 05:14:19.383 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:19.394 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:14:21.364 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.364 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 05:14:21.371 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.371 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.371 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(window=3, on='colA').mean()
2022-08-06 05:14:21.381 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.381 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.381 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'colA'].rolling(window=3).mean()
2022-08-06 05:14:21.388 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.388 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.388 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:21.394 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.394 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.394 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:21.401 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.401 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.401 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:21.407 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.407 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.407 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).mean()
2022-08-06 05:14:21.416 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.417 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.417 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:21.423 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.423 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.423 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 05:14:21.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.429 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.430 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 05:14:21.436 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.436 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.436 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:21.442 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.442 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.442 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 05:14:21.448 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.449 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.449 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:21.455 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.455 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.455 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:21.461 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.461 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.461 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:21.467 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.468 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.468 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:21.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.474 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.474 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(window=3).mean()
2022-08-06 05:14:21.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.483 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.483 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 05:14:21.489 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.489 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.490 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(window=3).mean()
2022-08-06 05:14:21.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:21.499 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 05:14:21.499 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 05:14:21.505 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.703 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.704 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 05:14:24.711 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.711 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.712 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:24.718 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.718 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.718 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, min_periods=1, window=3).mean()
2022-08-06 05:14:24.724 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.724 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.724 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 05:14:24.730 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.730 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.731 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:24.737 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.737 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.737 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:24.743 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.743 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.743 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'colA'].rolling(window=3).mean()
2022-08-06 05:14:24.749 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.750 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.750 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:24.756 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.756 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.756 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 05:14:24.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.762 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.762 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 05:14:24.769 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.769 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.769 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:24.775 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.775 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.775 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:24.781 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.782 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.782 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, window=3).mean()
2022-08-06 05:14:24.788 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.788 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.788 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).mean()
2022-08-06 05:14:24.797 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.797 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.797 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:24.804 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.804 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.804 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(window=3)['colA'].mean()
2022-08-06 05:14:24.810 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.810 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.810 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 05:14:24.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.817 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.817 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:24.823 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.823 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.823 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:24.829 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:24.830 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 05:14:24.830 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:24.836 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.078 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.079 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 05:14:27.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.086 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.087 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 05:14:27.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.093 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.093 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:27.099 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.099 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.099 | DEBUG    | __main__:run_benchmark:432 - dfin.colA.rolling(window=3).mean()
2022-08-06 05:14:27.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.106 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.106 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:27.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.112 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.112 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, min_periods=1, window=3).mean()
2022-08-06 05:14:27.118 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.118 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.119 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 05:14:27.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.125 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.125 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:14:27.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.125 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.126 | DEBUG    | __main__:run_benchmark:432 - dfin.colA.rolling(3).mean()
2022-08-06 05:14:27.132 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.132 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.132 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 05:14:27.138 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.138 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.138 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, window=3).mean()
2022-08-06 05:14:27.144 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.145 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.145 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:27.151 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.151 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.151 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:27.157 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.157 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.157 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:27.163 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.164 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.164 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'colA'].rolling(window=3).mean()
2022-08-06 05:14:27.170 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.170 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.170 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:27.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.176 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.176 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:27.182 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.182 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.183 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(min_periods=1, window=3).mean()
2022-08-06 05:14:27.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.189 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.189 | DEBUG    | __main__:run_benchmark:432 - dfin.colA.rolling(window=3).mean()
2022-08-06 05:14:27.195 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:27.195 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 05:14:27.195 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:27.201 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.116 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.117 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 05:14:29.124 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.124 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.124 | DEBUG    | __main__:run_benchmark:432 - dfin.colA.rolling(window=3).mean()
2022-08-06 05:14:29.131 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.131 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.131 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:29.137 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.137 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.137 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:29.143 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.144 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.144 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:14:29.144 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.144 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.144 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:29.150 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.150 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.151 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'colA'].rolling(window=3).mean()
2022-08-06 05:14:29.157 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.157 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.157 | DEBUG    | __main__:run_benchmark:432 - dfin.colA.rolling(3).mean()
2022-08-06 05:14:29.163 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.163 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.163 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:29.170 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.170 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.170 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:29.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.176 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.176 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, min_periods=1, window=3).mean()
2022-08-06 05:14:29.182 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.183 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.183 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 05:14:29.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.189 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.189 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, window=3).mean()
2022-08-06 05:14:29.195 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.195 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.196 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:14:29.196 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.196 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.196 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(min_periods=1, window=3).mean()
2022-08-06 05:14:29.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.202 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.203 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 05:14:29.209 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.209 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.209 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 05:14:29.215 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.215 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.216 | DEBUG    | __main__:run_benchmark:432 - dfin.colA.rolling(window=3).mean()
2022-08-06 05:14:29.222 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.222 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.222 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:14:29.222 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.222 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 05:14:29.222 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(min_periods=1, window=3).mean()
2022-08-06 05:14:29.229 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:29.241 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 05:14:32.975 | DEBUG    | __main__:run_benchmark:431 - Query: in column two choose median of previous 3 rows and assign back
2022-08-06 05:14:32.975 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = pd.rolling_median(dfin['column2'], 3, min_periods=1)
2022-08-06 05:14:32.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:32.978 | DEBUG    | __main__:run_benchmark:431 - Query: in column two choose median of previous 3 rows and assign back
2022-08-06 05:14:32.978 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-1)
2022-08-06 05:14:32.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:32.985 | DEBUG    | __main__:run_benchmark:431 - Query: in column two choose median of previous 3 rows and assign back
2022-08-06 05:14:32.985 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(window=3).quantile(0.5)
2022-08-06 05:14:32.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:32.992 | DEBUG    | __main__:run_benchmark:431 - Query: in column two choose median of previous 3 rows and assign back
2022-08-06 05:14:32.992 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].rolling(3).median()
2022-08-06 05:14:32.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:14:36.812 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-06 05:14:36.813 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(window=3).quantile(0.5)
2022-08-06 05:14:36.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:36.821 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-06 05:14:36.821 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = pd.rolling_median(dfin['column2'], 3, min_periods=1)
2022-08-06 05:14:36.822 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:36.822 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-06 05:14:36.822 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-1)
2022-08-06 05:14:36.829 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:36.829 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-06 05:14:36.829 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].fillna(dfin['column2'].rolling(3, min_periods=1).median())
2022-08-06 05:14:36.835 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:36.836 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-06 05:14:36.836 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 05:14:36.842 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:36.842 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-06 05:14:36.842 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 05:14:36.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:36.849 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-06 05:14:36.849 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 05:14:36.856 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:36.856 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-06 05:14:36.856 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].rolling(3).median().shift(1)
2022-08-06 05:14:36.863 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:36.863 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-06 05:14:36.863 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].rolling(3).median()
2022-08-06 05:14:36.869 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:14:39.526 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back to 'column2'
2022-08-06 05:14:39.526 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].rolling(window=3).quantile(0.5)
2022-08-06 05:14:39.534 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:14:43.246 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.247 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(window=3).median()
2022-08-06 05:14:43.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.258 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.258 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 05:14:43.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.268 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.268 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 05:14:43.277 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.277 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.278 | DEBUG    | __main__:run_benchmark:432 - dfin['column1'].fillna(dfin['column1'].rolling(3, min_periods=1).median())
2022-08-06 05:14:43.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.284 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.284 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 05:14:43.294 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.294 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.294 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 05:14:43.304 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.304 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.304 | DEBUG    | __main__:run_benchmark:432 - dfin['column1'].rolling(3).median()
2022-08-06 05:14:43.310 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.311 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.311 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 05:14:43.320 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.321 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.321 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 05:14:43.330 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.330 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.330 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 05:14:43.340 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.340 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.340 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 05:14:43.350 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.350 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.350 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 05:14:43.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.360 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.360 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 05:14:43.369 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.369 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.370 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 05:14:43.379 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.379 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.379 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 05:14:43.389 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.389 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.389 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 05:14:43.399 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.399 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.399 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 05:14:43.408 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.408 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.409 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 05:14:43.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.418 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.418 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 05:14:43.428 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:43.428 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 05:14:43.428 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 05:14:43.438 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.331 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.332 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(window=3).median()
2022-08-06 05:14:47.340 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.340 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.340 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 05:14:47.346 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.347 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.347 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].fillna(dfin['column2'].rolling(3).median())
2022-08-06 05:14:47.353 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.353 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.353 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 05:14:47.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.360 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.360 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 05:14:47.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.361 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.361 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(1)
2022-08-06 05:14:47.367 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.367 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.368 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 05:14:47.368 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.368 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.368 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 05:14:47.375 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.375 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.375 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 05:14:47.381 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.381 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.382 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(1)
2022-08-06 05:14:47.388 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.388 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.388 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:14:47.389 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.389 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.389 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace(dfin['column2'].values, dfin['column2'].rolling(3).median().shift(1).values)
2022-08-06 05:14:47.396 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.396 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.396 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 05:14:47.403 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.403 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.403 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 05:14:47.410 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.410 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.410 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(1)
2022-08-06 05:14:47.416 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.417 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.417 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:14:47.417 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.417 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.417 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 05:14:47.424 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.424 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.424 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 05:14:47.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.431 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.431 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].shift(1).rolling(3).median()
2022-08-06 05:14:47.437 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:47.438 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 05:14:47.438 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(1)
2022-08-06 05:14:47.444 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.276 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.277 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 05:14:52.277 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.277 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.277 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(1)
2022-08-06 05:14:52.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.285 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.285 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace(np.nan, dfin['column2'].median())
2022-08-06 05:14:52.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.291 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.292 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].shift(1).rolling(3).median()
2022-08-06 05:14:52.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.298 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.298 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(window=3).median()
2022-08-06 05:14:52.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.305 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.305 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace({-1: dfin['column2'].iloc[0:3].median(), -2: dfin['column2'].iloc[0:3].median(), 2: dfin['column2'].iloc[0:
2022-08-06 05:14:52.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.305 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.306 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace(np.nan, dfin['column2'].median())
2022-08-06 05:14:52.312 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.312 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.312 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].fillna(np.median(dfin['column2'].shift(1).rolling(3).mean()))
2022-08-06 05:14:52.319 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.319 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.319 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median()
2022-08-06 05:14:52.325 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.326 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.326 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace(0, dfin['column2'].median())
2022-08-06 05:14:52.332 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.332 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.332 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 05:14:52.333 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.333 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.333 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].mask((dfin['column2'] == -1), dfin['column2'].shift(1).rolling(3).median())
2022-08-06 05:14:52.340 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.340 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.340 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 05:14:52.347 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.347 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.347 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace(dfin['column2'], dfin['column2'].rolling(3).median())
2022-08-06 05:14:52.348 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.349 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.349 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 05:14:52.355 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.355 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.355 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace((-1, -2, 2), (np.median(dfin['column2'][0:3]), np.median(dfin['column2'][0:3]), np.median(dfin['column2'][0
2022-08-06 05:14:52.356 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.356 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.356 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace(dfin['column2'], dfin['column2'].rolling(3).median())
2022-08-06 05:14:52.357 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.357 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.357 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 05:14:52.364 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.364 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.364 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 05:14:52.364 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:52.364 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:52.364 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 05:14:52.365 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:54.993 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:54.994 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.004 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.004 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.004 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.013 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.013 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.022 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.022 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.022 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.031 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.031 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.032 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.040 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.040 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.041 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.050 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.050 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.050 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.059 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.059 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.059 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.068 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.068 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.069 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.077 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.077 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.078 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.087 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.087 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.095 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.096 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.096 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.105 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.105 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.114 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.114 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.123 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.123 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.132 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.132 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.132 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.141 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.141 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.141 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.150 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.150 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.150 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.159 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.159 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.159 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.168 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:55.168 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 05:14:55.168 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:14:55.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:58.155 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 05:14:58.156 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3, min_periods=1).median()
2022-08-06 05:14:58.164 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:14:58.164 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 05:14:58.164 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].rolling(3).median()
2022-08-06 05:14:58.170 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:14:58.183 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 05:14:58.183 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:14:58.183 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 05:15:02.978 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:02.979 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:02.994 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:02.994 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:02.994 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.008 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.008 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:03.008 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.022 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:03.022 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.035 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.036 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:03.036 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.049 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.050 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:03.050 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.064 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:03.064 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.077 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.078 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:03.078 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.091 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.091 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:03.092 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.105 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:03.105 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.119 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.119 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:03.119 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.133 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.133 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:03.133 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.147 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.147 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:03.147 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.161 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.161 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:03.161 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.175 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.175 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:03.175 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.188 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.189 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:03.189 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.203 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:03.203 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.216 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.217 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:03.217 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.230 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.231 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:03.231 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.244 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.244 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 05:15:03.245 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:15:03.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:03.271 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:15:03.271 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:15:03.271 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:15:07.090 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 05:15:07.091 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:15:07.091 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:07.092 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 05:15:07.092 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:15:07.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:07.093 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 05:15:07.093 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:15:07.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:07.093 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 05:15:07.093 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:15:07.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:07.094 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 05:15:07.094 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:15:07.094 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:07.094 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 05:15:07.094 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:15:07.094 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:07.094 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 05:15:07.094 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:15:07.094 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:07.095 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 05:15:07.095 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', left_on='left_key', right_on='right_key')
2022-08-06 05:15:07.108 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:15:07.122 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:15:12.059 | DEBUG    | __main__:run_benchmark:431 - Query: join dfin1 and dfin2 on column 'Type1'=='Type2' && 'Date1'=='Date2'
2022-08-06 05:15:12.060 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:15:12.061 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:12.061 | DEBUG    | __main__:run_benchmark:431 - Query: join dfin1 and dfin2 on column 'Type1'=='Type2' && 'Date1'=='Date2'
2022-08-06 05:15:12.061 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-06 05:15:12.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:15:12.314 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f53fbf707a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f53fc0ef8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f53693c1b90>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f53693c1b90>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "join dfin1 and dfin2 on column 'Type1'=='Type2' && 'Date1'=='Date2'", 'user': 'u16'}, {'query': "comb...
    │               └ {'queries': [{'query': "join dfin1 and dfin2 on column 'Type1'=='Type2' && 'Date1'=='Date2'", 'user': 'u16'}, {'query': "comb...
    └ {'query': "combine rows from dfin1 and dfin2 such that column 'Type1' and column 'Date1' in dfin1 are equal to column 'Type2'...

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f53693c1b90>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a concatenation of "df1" and ...
    │    └ 'code-davinci-002'
    └ <__main__.Algorithm1 object at 0x7f53693c1b90>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-002', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f5367233e60>
                       └ <openai.api_requestor.APIRequestor object at 0x7f5355197490>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 12:15:12 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f53efa93f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 12:15:12 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on reques...
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f53550dbf50>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeie...

openai.error.RateLimitError: Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 05:15:12.341 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 05:15:45.851 | DEBUG    | __main__:run_benchmark:431 - Query: combine rows from dfin1 and dfin2 such that column 'Type1' and column 'Date1' in dfin1 are equal to column 'Type2' and column 'Date2' in dfin2
2022-08-06 05:15:45.852 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:15:45.852 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:45.852 | DEBUG    | __main__:run_benchmark:431 - Query: combine rows from dfin1 and dfin2 such that column 'Type1' and column 'Date1' in dfin1 are equal to column 'Type2' and column 'Date2' in dfin2
2022-08-06 05:15:45.853 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-06 05:15:45.870 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:15:45.884 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 05:15:45.884 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:15:45.884 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:15:49.028 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.028 | DEBUG    | __main__:run_benchmark:432 - dfin[(pd.isnull(dfin['delta']) == False) & (pd.isnull(dfin['phi']) == False)]
2022-08-06 05:15:49.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.043 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.043 | DEBUG    | __main__:run_benchmark:432 - dfin['delta'].dropna(inplace=True)
2022-08-06 05:15:49.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.052 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.052 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 05:15:49.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.064 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.064 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 05:15:49.077 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.077 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.077 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 05:15:49.089 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.089 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.090 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 05:15:49.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.102 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.102 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 05:15:49.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.114 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.114 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 05:15:49.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.127 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.127 | DEBUG    | __main__:run_benchmark:432 - dfin[(~ pd.isnull(dfin['delta'])) & (~ pd.isnull(dfin['phi']))]
2022-08-06 05:15:49.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.139 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.139 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 05:15:49.151 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.152 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.152 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 05:15:49.164 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.164 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.164 | DEBUG    | __main__:run_benchmark:432 - dfin[['delta', 'phi']][(~ dfin['delta'].isna()) & (~ dfin['phi'].isna())]
2022-08-06 05:15:49.175 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.176 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.176 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'], inplace=True)
2022-08-06 05:15:49.184 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.184 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.184 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 05:15:49.196 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.197 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.197 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 05:15:49.209 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.209 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.209 | DEBUG    | __main__:run_benchmark:432 - dfin['delta'][(dfin['delta'].isnull() == False)]
2022-08-06 05:15:49.218 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.218 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.218 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 05:15:49.231 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.231 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.231 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['delta'].isna() == False) & (dfin['phi'].isna() == False)]
2022-08-06 05:15:49.243 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.243 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.243 | DEBUG    | __main__:run_benchmark:432 - dfin[(~ dfin['delta'].isnull()) & (~ dfin['phi'].isnull())]
2022-08-06 05:15:49.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.255 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 05:15:49.255 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 05:15:49.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:49.281 | DEBUG    | __main__:run:515 - Number of queries: 23
2022-08-06 05:15:54.061 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.062 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:54.076 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.076 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.076 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:54.089 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.090 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.090 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:54.103 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.103 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.103 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:54.116 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.117 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.117 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:54.130 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.130 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.130 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:54.143 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.143 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.144 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:54.157 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.157 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.157 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:54.170 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.170 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.171 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:54.184 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.184 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.184 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:54.197 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.197 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.197 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:54.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.211 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.211 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].replace(np.nan, 11.0)
2022-08-06 05:15:54.220 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.220 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.220 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:54.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.233 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.233 | DEBUG    | __main__:run_benchmark:432 - dfin.apply((lambda x: (x['phi'] if pd.isnull(x['phi']) else 11.0) if pd.isnull(x['omega']) else 13.0), axis=1)
2022-08-06 05:15:54.242 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.243 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.243 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:54.256 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.256 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.256 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:54.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.270 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.270 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:54.283 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.283 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.283 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 05:15:54.297 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.297 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.297 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:54.310 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:54.310 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 05:15:54.310 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:54.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.402 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.402 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:59.417 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.417 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.417 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:59.430 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.430 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.430 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:59.443 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.443 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.444 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:59.457 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.457 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.457 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:59.470 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.470 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.471 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:59.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.484 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.484 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:59.497 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.497 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.497 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 05:15:59.506 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.506 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.507 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:59.520 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.520 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.520 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:59.533 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.533 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.534 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:59.547 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.547 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.547 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 05:15:59.560 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.561 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.561 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:59.574 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.574 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.574 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:59.587 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.588 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.588 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:59.601 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.601 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.601 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:59.614 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.615 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.615 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:59.628 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.628 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.628 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:59.641 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.641 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.642 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:15:59.655 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:15:59.655 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 05:15:59.655 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 05:15:59.668 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.280 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.281 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:16:04.296 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.296 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.296 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:16:04.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.305 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.305 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isnull(), 11.0, dfin['phi'])
2022-08-06 05:16:04.314 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.315 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.315 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isna(), 11.0, dfin['phi'])
2022-08-06 05:16:04.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.324 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.324 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:16:04.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.338 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.338 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:16:04.347 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.347 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.347 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:16:04.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.360 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.361 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin['phi'].isnull(), other=11.0).where(dfin['omega'].isnull(), other=13.0)
2022-08-06 05:16:04.375 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.375 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.375 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 05:16:04.384 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.384 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.385 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isna(), 11.0, dfin['phi'])
2022-08-06 05:16:04.394 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.394 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.394 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].map((lambda x: (x if (x != np.nan) else 11.0)))
2022-08-06 05:16:04.403 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.403 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.403 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 05:16:04.412 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.412 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.412 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].apply((lambda x: (11.0 if (x == np.nan) else x)))
2022-08-06 05:16:04.422 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.422 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.422 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:16:04.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.431 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.431 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 05:16:04.441 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.441 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.441 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].transform((lambda x: (11.0 if pd.isnull(x) else x)))
2022-08-06 05:16:04.450 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.450 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.450 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:16:04.464 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.464 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.464 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].fillna(11.0)
2022-08-06 05:16:04.473 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.473 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.473 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'phi': {np.nan: 11.0}, 'omega': {np.nan: 13.0}})
2022-08-06 05:16:04.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:04.487 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 05:16:04.487 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:16:04.500 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.059 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.060 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].apply((lambda x: (11.0 if (x == np.nan) else x)))
2022-08-06 05:16:07.070 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.071 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.071 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:16:07.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.080 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.080 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 05:16:07.089 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.090 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.090 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:16:07.103 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.103 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.103 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:16:07.116 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.116 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.117 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:16:07.130 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.130 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.130 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].replace({np.nan: 11.0})
2022-08-06 05:16:07.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.139 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.139 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].map((lambda x: (x if (x != np.nan) else 11.0)))
2022-08-06 05:16:07.148 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.149 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.149 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].apply((lambda x: (11.0 if (x == np.nan) else x)))
2022-08-06 05:16:07.158 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.158 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.158 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:16:07.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.172 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.172 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].apply((lambda x: (11.0 if (np.isnan(x)) else x)))
2022-08-06 05:16:07.182 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.182 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.183 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].fillna(11.0)
2022-08-06 05:16:07.192 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.193 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.193 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:16:07.207 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.207 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.207 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].where((~ (dfin['phi'] == np.nan)), other=11.0)
2022-08-06 05:16:07.216 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.216 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.217 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isnull(), 11.0, dfin['phi'])
2022-08-06 05:16:07.226 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.226 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.226 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:16:07.235 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.235 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.235 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:16:07.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.249 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.249 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:16:07.262 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.263 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.263 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isnull(), 11.0, dfin['phi'])
2022-08-06 05:16:07.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:07.272 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 05:16:07.272 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isnull(), 11.0, dfin['phi'])
2022-08-06 05:16:07.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:11.831 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:11.832 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 05:16:11.847 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:11.847 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:11.847 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 05:16:11.860 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:11.861 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:11.861 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13) if x.name == 'omega' else x)
2022-08-06 05:16:11.874 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:11.874 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:11.874 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.nan)), axis=0)
2022-08-06 05:16:11.876 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:11.876 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:11.876 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: np.where(x.isnull(), 11.0 if x.name == 'phi' else 13, x))
2022-08-06 05:16:11.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:11.890 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:11.890 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'phi': {np.NaN: 11.0}, 'omega': {np.NaN: 13.0}})
2022-08-06 05:16:11.904 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:11.904 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:11.904 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'phi': {np.nan: 11.0}, 'omega': {np.nan: 13.0}})
2022-08-06 05:16:11.918 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:11.918 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:11.918 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.nan)))
2022-08-06 05:16:11.920 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:11.920 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:11.920 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.nan)), axis=0)
2022-08-06 05:16:11.921 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:11.922 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:11.922 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 05:16:11.935 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:11.936 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:11.936 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.isnull(), other=np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, dfin)))
2022-08-06 05:16:11.950 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:11.950 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:11.950 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.nan)))
2022-08-06 05:16:11.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:11.951 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:11.952 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 05:16:11.965 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:11.965 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:11.965 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.nan)), axis=0)
2022-08-06 05:16:11.967 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:11.967 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:11.967 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: np.where(x.name == 'phi', 11.0, np.where(x.name == 'omega', 13.0, x)), axis=0)
2022-08-06 05:16:11.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:11.981 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:11.981 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin['phi'].isnull(), 11.0, inplace=True)
2022-08-06 05:16:11.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:11.991 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:11.991 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin['phi'].isnull(), 11.0)
2022-08-06 05:16:12.004 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:12.004 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:12.004 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), {'phi': 11.0, 'omega': 13.0})
2022-08-06 05:16:12.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:12.018 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:12.018 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.nan)), axis=0)
2022-08-06 05:16:12.020 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:12.020 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 05:16:12.020 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.NaN)))
2022-08-06 05:16:12.022 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.381 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.382 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.nan)))
2022-08-06 05:16:15.386 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.386 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.386 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 05:16:15.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.402 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.402 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 05:16:15.416 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.416 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.416 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.isna(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, dfin)), axis=1)
2022-08-06 05:16:15.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.430 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.430 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), {'phi': 11.0, 'omega': 13.0})
2022-08-06 05:16:15.443 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.443 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.444 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 05:16:15.457 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.457 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.457 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.isnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, dfin)), axis=1)
2022-08-06 05:16:15.471 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.471 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.471 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0) if x.name == 'omega' else x)
2022-08-06 05:16:15.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.484 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.484 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13})
2022-08-06 05:16:15.497 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.498 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.498 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.isnull(), other=np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, dfin)))
2022-08-06 05:16:15.511 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.511 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.512 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notna(), np.where(dfin.columns == 'phi', 11.0, 13.0), axis=0)
2022-08-06 05:16:15.513 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.513 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.513 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 05:16:15.527 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.527 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.527 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 05:16:15.540 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.541 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.541 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), {'phi': 11.0, 'omega': 13.0})
2022-08-06 05:16:15.554 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.554 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.554 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13) if x.name == 'omega' else x)
2022-08-06 05:16:15.568 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.568 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.568 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), {'phi': 11.0, 'omega': 13.0})
2022-08-06 05:16:15.582 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.582 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.582 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 05:16:15.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.595 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.596 | DEBUG    | __main__:run_benchmark:432 - dfin.transform(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 05:16:15.609 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.609 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.609 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0), axis=0)
2022-08-06 05:16:15.623 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:15.623 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 05:16:15.623 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.nan)), axis=0)
2022-08-06 05:16:15.624 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:18.963 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:18.964 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')] = dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 05:16:18.967 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:18.967 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:18.967 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 05:16:18.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:18.969 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:18.969 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(np.nan, (11.0, 13.0), inplace=True, subset=['phi', 'omega'])
2022-08-06 05:16:18.970 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:18.970 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:18.970 | DEBUG    | __main__:run_benchmark:432 - dfin[['phi', 'omega']].replace(np.nan, (11.0, 13.0))
2022-08-06 05:16:18.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:18.971 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:18.972 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 05:16:18.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:18.973 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:18.973 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 05:16:18.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:18.975 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:18.975 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')] = dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 05:16:18.976 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:18.976 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:18.976 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ['phi', 'omega']].fillna((11.0, 13.0))
2022-08-06 05:16:18.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:18.978 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:18.978 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 05:16:18.979 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:18.979 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:18.979 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].replace(np.nan, (11.0, 13.0), inplace=True)
2022-08-06 05:16:18.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:18.981 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:18.981 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 05:16:18.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:18.982 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:18.982 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 05:16:18.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:18.984 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:18.984 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 05:16:18.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:18.985 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:18.986 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ('phi', 'omega')] = (11.0, 13.0)
2022-08-06 05:16:18.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:18.996 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:18.996 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ('phi', 'omega')] = (11.0, 13.0)
2022-08-06 05:16:19.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:19.005 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:19.005 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')] = dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 05:16:19.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:19.007 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:19.007 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ['phi', 'omega']] = (11.0, 13.0)
2022-08-06 05:16:19.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:19.017 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:19.017 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')] = dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 05:16:19.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:19.018 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:19.019 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notna(), {'phi': 11.0, 'omega': 13.0})
2022-08-06 05:16:19.032 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:19.032 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 05:16:19.032 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'phi': {np.nan: (11.0, 13.0)}, 'omega': {np.nan: (11.0, 13.0)}})
2022-08-06 05:16:19.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:21.148 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' with '11.0' and column 'omega' with value '33.0'
2022-08-06 05:16:21.149 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(inplace=True, value={'phi': 11.0, 'omega': 33.0})
2022-08-06 05:16:21.159 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:16:23.611 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of dfin with value '33.0'
2022-08-06 05:16:23.612 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(inplace=True, value={'phi': 11.0, 'omega': 33.0})
2022-08-06 05:16:23.623 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:16:25.702 | DEBUG    | __main__:run_benchmark:431 - Query: Fill missing values of column 'phi' with '11.0' and column 'omega' with value '33.0' in dataframe dfin
2022-08-06 05:16:25.703 | DEBUG    | __main__:run_benchmark:432 - dfin[['phi', 'omega']].fillna(value=[11.0, 33.0])
2022-08-06 05:16:25.706 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:25.706 | DEBUG    | __main__:run_benchmark:431 - Query: Fill missing values of column 'phi' with '11.0' and column 'omega' with value '33.0' in dataframe dfin
2022-08-06 05:16:25.707 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 33.0})
2022-08-06 05:16:25.720 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:16:27.453 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in phi by 11 and nan in omega by 33
2022-08-06 05:16:27.454 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11, 'omega': 33})
2022-08-06 05:16:27.468 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:16:29.532 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.533 | DEBUG    | __main__:run_benchmark:432 - dfin.where(pd.notnull(dfin), {'phi': 11, 'omega': 33})
2022-08-06 05:16:29.547 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.548 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.548 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isna(), 11, dfin['phi'])
2022-08-06 05:16:29.557 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.557 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.557 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isna(), 11, dfin['phi'])
2022-08-06 05:16:29.566 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.566 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.566 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].apply((lambda x: (11 if pd.isnull(x) else x)))
2022-08-06 05:16:29.575 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.575 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.576 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isna(), 11, dfin['phi'])
2022-08-06 05:16:29.585 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.585 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.585 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isnull(), 11, dfin['phi'])
2022-08-06 05:16:29.594 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.594 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.594 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isnull(), 11, dfin['phi'])
2022-08-06 05:16:29.603 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.604 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.604 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isnull(), 11, dfin['phi'])
2022-08-06 05:16:29.613 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.613 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.613 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11)
2022-08-06 05:16:29.622 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.622 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.622 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isnull(), 11, dfin['phi'])
2022-08-06 05:16:29.631 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.631 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.632 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].apply((lambda x: (11 if pd.isnull(x) else x)))
2022-08-06 05:16:29.641 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.641 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.641 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].fillna(11)
2022-08-06 05:16:29.650 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.650 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.650 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].fillna(11)
2022-08-06 05:16:29.659 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.659 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.659 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isna(), 11, dfin['phi'])
2022-08-06 05:16:29.668 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.669 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.669 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].mask(dfin['phi'].isnull(), 11)
2022-08-06 05:16:29.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.678 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.678 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].apply((lambda x: (11 if pd.isna(x) else x)))
2022-08-06 05:16:29.687 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.687 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.688 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isna(), 11, dfin['phi'])
2022-08-06 05:16:29.697 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.697 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.697 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].apply(lambda x: 11 if pd.isnull(x) else x)
2022-08-06 05:16:29.706 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.706 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.706 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isnull(), 11, dfin['phi'])
2022-08-06 05:16:29.715 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:29.715 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 05:16:29.715 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11, 'omega': 33})
2022-08-06 05:16:29.727 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:16:29.741 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:16:31.770 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaNs in column 'mu' with 24 and NaNs in column 'delta' with 45
2022-08-06 05:16:31.770 | DEBUG    | __main__:run_benchmark:432 - dfin['mu'].fillna(24)
2022-08-06 05:16:31.782 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:31.782 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaNs in column 'mu' with 24 and NaNs in column 'delta' with 45
2022-08-06 05:16:31.782 | DEBUG    | __main__:run_benchmark:432 - dfin['mu'].replace(np.nan, float(24))
2022-08-06 05:16:31.791 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:31.791 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaNs in column 'mu' with 24 and NaNs in column 'delta' with 45
2022-08-06 05:16:31.792 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'mu': 24, 'delta': 45})
2022-08-06 05:16:31.804 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:16:31.820 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 05:16:36.690 | DEBUG    | __main__:run_benchmark:431 - Query: replace all 'Nan' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17.0
2022-08-06 05:16:36.691 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-06 05:16:36.704 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:16:36.720 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:16:39.461 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.462 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 05:16:39.476 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.477 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.477 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 05:16:39.490 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.490 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.490 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(to_replace={'phi': np.nan, 'mu': np.nan}, value={'phi': 10, 'mu': 20})
2022-08-06 05:16:39.503 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.503 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.503 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 05:16:39.516 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.516 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.516 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 05:16:39.529 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.529 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.530 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 05:16:39.542 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.543 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.543 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].replace(np.nan, float(10))
2022-08-06 05:16:39.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.552 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.552 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 05:16:39.565 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.565 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.565 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 05:16:39.578 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.578 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.579 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 05:16:39.592 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.592 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.592 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 05:16:39.605 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.605 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.605 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(10, inplace=True)
2022-08-06 05:16:39.614 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.614 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.614 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 05:16:39.627 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.627 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.628 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].apply((lambda x: (10 if pd.isnull(x) else x)))
2022-08-06 05:16:39.637 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.637 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.637 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 05:16:39.650 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.650 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.650 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 05:16:39.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.664 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.664 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 05:16:39.677 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.677 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.677 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 05:16:39.690 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.690 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.690 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 05:16:39.703 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.703 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 05:16:39.703 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 05:16:39.716 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:39.730 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 05:16:39.730 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:16:39.730 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:16:43.382 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 05:16:43.383 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', ['location', 'zip']] = ['UK', '4343']
2022-08-06 05:16:43.392 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:43.392 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 05:16:43.393 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'location': {'United States': 'US'}, 'zip': {3434: 4343}}, inplace=True)
2022-08-06 05:16:43.400 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:16:46.103 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.104 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].str.replace('United States', 'US', regex=True)
2022-08-06 05:16:46.113 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.113 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.113 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US', inplace=True)
2022-08-06 05:16:46.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.121 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.121 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 05:16:46.128 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.128 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.128 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 05:16:46.135 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.135 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.135 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US', inplace=True)
2022-08-06 05:16:46.142 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.143 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.143 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace({'United States': 'US'})
2022-08-06 05:16:46.150 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.150 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.150 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 05:16:46.157 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.157 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.157 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('United States', 'US')
2022-08-06 05:16:46.168 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.168 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.168 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(inplace=True, to_replace='United States', value='US', subset='location')
2022-08-06 05:16:46.169 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.169 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.169 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 05:16:46.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.176 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.177 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 05:16:46.184 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.184 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.184 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 05:16:46.191 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.191 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.191 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 05:16:46.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.198 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.198 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(inplace=True, to_replace='United States', value='US')
2022-08-06 05:16:46.205 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.206 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.206 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 05:16:46.213 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.213 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.213 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].str.replace('United States', 'US')
2022-08-06 05:16:46.220 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.220 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.220 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].str.replace('United States', 'US')
2022-08-06 05:16:46.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.227 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.227 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 05:16:46.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.235 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.235 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 05:16:46.242 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:46.242 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 05:16:46.242 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 05:16:46.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:16:50.634 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 05:16:50.634 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'location': 'United States', 'zip': 3434}, {'location': 'US', 'zip': 4343}, inplace=True)
2022-08-06 05:16:50.643 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:16:50.658 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:16:50.658 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:16:54.328 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'London' in column 'city' with 'LON' and 'India' in column 'country' with 'IN'
2022-08-06 05:16:54.328 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'city': 'London', 'country': 'India'}, {'city': 'LON', 'country': 'IN'})
2022-08-06 05:16:54.340 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:16:58.824 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'London' in column 'city' with 'LON', and 'India' in column 'country' with 'IN'
2022-08-06 05:16:58.825 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'city': 'London', 'country': 'India'}, {'city': 'LON', 'country': 'IN'})
2022-08-06 05:16:58.837 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:17:03.016 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values 'London' in column 'city' with 'LON', and values 'India' in column 'country' with 'IN'
2022-08-06 05:17:03.016 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'city': 'London', 'country': 'India'}, {'city': 'LON', 'country': 'IN'})
2022-08-06 05:17:03.028 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:17:03.044 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:17:03.045 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:17:05.286 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.287 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:05.295 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.295 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.296 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': {'France': 'FR'}})
2022-08-06 05:17:05.306 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.306 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.307 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 05:17:05.314 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.314 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.314 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:05.321 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.322 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.322 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 05:17:05.329 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.329 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.329 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(inplace=True, to_replace='France', value='FR')
2022-08-06 05:17:05.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.337 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.337 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:05.344 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.344 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.345 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:05.352 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.352 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.352 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:05.359 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.359 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.359 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:05.367 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.367 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.367 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:05.374 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.374 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.374 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 05:17:05.381 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.382 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.382 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:05.389 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.389 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.389 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:05.396 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.396 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.396 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 05:17:05.404 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.404 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.404 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 05:17:05.411 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.411 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.411 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:05.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.418 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.419 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 05:17:05.426 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.426 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.426 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 05:17:05.433 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:05.433 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 05:17:05.433 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 05:17:05.441 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.290 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.291 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:09.301 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.301 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.301 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(inplace=True, to_replace='France', value='FR')
2022-08-06 05:17:09.308 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.308 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.309 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:09.316 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.316 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.316 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 05:17:09.323 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.324 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.324 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 05:17:09.331 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.331 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.331 | DEBUG    | __main__:run_benchmark:432 - dfin.country.replace('France', 'FR')
2022-08-06 05:17:09.338 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.339 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.339 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': {'France': 'FR'}})
2022-08-06 05:17:09.350 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.350 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.350 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:09.357 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.357 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.357 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:09.365 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.365 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.365 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(inplace=True, to_replace='France', value='FR')
2022-08-06 05:17:09.372 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.372 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.372 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].map({'France': 'FR'})
2022-08-06 05:17:09.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.380 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.380 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:09.387 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.387 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.387 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 05:17:09.394 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.395 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.395 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:09.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.402 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.402 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:09.409 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.409 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.410 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 05:17:09.417 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.417 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.417 | DEBUG    | __main__:run_benchmark:432 - #  for column city, replace 'Paris' with 'PAR'
2022-08-06 05:17:09.417 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.417 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.417 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': {'France': 'FR'}})
2022-08-06 05:17:09.428 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.428 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.428 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:09.435 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:09.436 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 05:17:09.436 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:09.443 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.688 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.689 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 05:17:11.701 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.701 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.701 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 05:17:11.712 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.712 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.712 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 05:17:11.719 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.720 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.720 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR'})
2022-08-06 05:17:11.730 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.730 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.731 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(inplace=True, to_replace='France', value='FR')
2022-08-06 05:17:11.738 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.738 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.738 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 05:17:11.749 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.749 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.749 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR', inplace=True)
2022-08-06 05:17:11.756 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.757 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.757 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:11.764 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.764 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.764 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 05:17:11.771 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.772 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.772 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 05:17:11.779 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.779 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.779 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 05:17:11.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.787 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.787 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 05:17:11.794 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.795 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.795 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].apply((lambda x: (x.replace('France', 'FR') if ('France' in str(x)) else x)))
2022-08-06 05:17:11.802 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.802 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.802 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR', inplace=True)
2022-08-06 05:17:11.809 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.810 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.810 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(inplace=True, to_replace='France', value='FR')
2022-08-06 05:17:11.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.817 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.817 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 05:17:11.825 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.825 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.825 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:11.832 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.832 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.833 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:11.840 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.840 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.840 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 05:17:11.847 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:11.848 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 05:17:11.848 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:11.855 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.563 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.564 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 05:17:15.572 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.572 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.572 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:15.580 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.580 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.580 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:15.587 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.587 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.587 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 05:17:15.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.595 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.595 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:15.602 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.602 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.603 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:15.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.610 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.610 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(inplace=True, to_replace='France', value='FR')
2022-08-06 05:17:15.618 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.618 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.618 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:15.625 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.625 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.626 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 05:17:15.633 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.633 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.633 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 05:17:15.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.641 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.641 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 05:17:15.648 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.648 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.648 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace({'France': 'FR'})
2022-08-06 05:17:15.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.656 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.656 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].map((lambda x: x.replace('France', 'FR')))
2022-08-06 05:17:15.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.663 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.663 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:17:15.670 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.670 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.671 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 05:17:15.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.678 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.678 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 05:17:15.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.685 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.685 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 05:17:15.693 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.693 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.693 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].apply((lambda x: (x.replace('France', 'FR') if ('France' in str(x)) else x)))
2022-08-06 05:17:15.700 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.700 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.700 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 05:17:15.707 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:15.708 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 05:17:15.708 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, 'FR')
2022-08-06 05:17:15.718 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.552 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.553 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:20.565 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.565 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.565 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:20.576 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.576 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.576 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'})
2022-08-06 05:17:20.586 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.587 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.587 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'}, regex=True)
2022-08-06 05:17:20.598 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.598 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.598 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'}, regex=True)
2022-08-06 05:17:20.609 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.609 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.609 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'], inplace=True)
2022-08-06 05:17:20.616 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.617 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.617 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:20.627 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.628 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.628 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'}, inplace=True)
2022-08-06 05:17:20.635 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.635 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.636 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'}, regex=True)
2022-08-06 05:17:20.647 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.647 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.647 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:20.658 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.658 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.658 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'], inplace=True, limit=1)
2022-08-06 05:17:20.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.665 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.666 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(to_replace=['France', 'Paris'], value=['FR', 'PAR'], inplace=True, limit=None, regex=False, method='pad', axis=None)
2022-08-06 05:17:20.667 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.667 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.667 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:20.677 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.678 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.678 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'}, inplace=True)
2022-08-06 05:17:20.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.685 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.685 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:20.696 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.696 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.696 | DEBUG    | __main__:run_benchmark:432 - dfin['city'].str.replace('France', 'FR').str.replace('Paris', 'PAR')
2022-08-06 05:17:20.704 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.704 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.704 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:20.715 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.715 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.715 | DEBUG    | __main__:run_benchmark:432 - dfin['city'].str.replace('France', 'FR').replace('Paris', 'PAR')
2022-08-06 05:17:20.722 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.722 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.722 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:20.733 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:20.733 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 05:17:20.733 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:20.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:24.844 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:24.845 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:24.857 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:24.858 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:24.858 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:24.869 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:24.869 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:24.869 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:24.881 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:24.881 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:24.881 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'})
2022-08-06 05:17:24.892 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:24.892 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:24.892 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'}, regex=True)
2022-08-06 05:17:24.903 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:24.903 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:24.903 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'}, inplace=True, regex=True)
2022-08-06 05:17:24.911 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:24.911 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:24.911 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:24.922 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:24.922 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:24.923 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:24.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:24.934 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:24.934 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:24.944 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:24.945 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:24.945 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'}, regex=True)
2022-08-06 05:17:24.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:24.956 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:24.956 | DEBUG    | __main__:run_benchmark:432 - dfin['city'].str.replace('France', 'FR').str.replace('Paris', 'PAR')
2022-08-06 05:17:24.965 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:24.965 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:24.965 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'}, inplace=True)
2022-08-06 05:17:24.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:24.973 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:24.973 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:24.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:24.985 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:24.985 | DEBUG    | __main__:run_benchmark:432 - dfin['city'].replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:24.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:24.992 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:24.992 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:25.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:25.003 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:25.003 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:25.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:25.014 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:25.015 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(to_replace=['France', 'Paris'], value=['FR', 'PAR'])
2022-08-06 05:17:25.025 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:25.025 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:25.026 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:25.036 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:25.037 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:25.037 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:25.048 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:25.048 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 05:17:25.048 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 05:17:25.059 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:25.074 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 05:17:25.074 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:17:25.075 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:17:25.075 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:17:25.075 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:17:25.075 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:17:25.075 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:17:26.889 | DEBUG    | __main__:run_benchmark:431 - Query: sort rows of dfin1
2022-08-06 05:17:26.890 | DEBUG    | __main__:run_benchmark:432 - dfin.sort_index(axis=0)
2022-08-06 05:17:26.898 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:17:26.915 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 05:17:26.915 | DEBUG    | __main__:run:509 - Number of Sets: 2
2022-08-06 05:17:26.916 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:17:26.916 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:17:28.778 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 05:17:28.779 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='date', columns='name', values='value')
2022-08-06 05:17:28.788 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:28.789 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 05:17:28.789 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='date', columns='name', values='value')
2022-08-06 05:17:28.797 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:28.797 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 05:17:28.797 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='date', columns='name', values='value')
2022-08-06 05:17:28.806 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:28.806 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 05:17:28.806 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='date', columns='name', values='value')
2022-08-06 05:17:28.815 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:28.815 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 05:17:28.815 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='date', columns='name', values='value')
2022-08-06 05:17:28.823 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:28.824 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 05:17:28.824 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='date', columns='name', values='value')
2022-08-06 05:17:28.832 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:28.832 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 05:17:28.833 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(columns='date')
2022-08-06 05:17:28.847 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:28.847 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 05:17:28.847 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='date', columns='name', values='value')
2022-08-06 05:17:28.856 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:28.857 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 05:17:28.857 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='name', columns='date', values='value')
2022-08-06 05:17:28.866 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:17:28.883 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 05:17:28.883 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:17:28.883 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 05:17:31.950 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 05:17:31.951 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '').astype('category')
2022-08-06 05:17:31.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:31.960 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 05:17:31.960 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '')
2022-08-06 05:17:31.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:31.968 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 05:17:31.968 | DEBUG    | __main__:run_benchmark:432 - dfin['target'].replace({'classA': 1, 'classB': 2, 'classC': 3})
2022-08-06 05:17:31.976 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:31.976 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 05:17:31.976 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '')
2022-08-06 05:17:31.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:31.984 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 05:17:31.984 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '')
2022-08-06 05:17:31.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:31.992 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 05:17:31.992 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].apply(lambda x: x.replace('class', ''))
2022-08-06 05:17:32.000 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:32.000 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 05:17:32.000 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '')
2022-08-06 05:17:32.008 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:32.008 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 05:17:32.008 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].map(lambda x: x.replace('class', ''))
2022-08-06 05:17:32.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:32.016 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 05:17:32.016 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '')
2022-08-06 05:17:32.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:32.024 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 05:17:32.024 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '').astype('category')
2022-08-06 05:17:32.032 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:32.032 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 05:17:32.033 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '')
2022-08-06 05:17:32.040 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:17:32.040 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 05:17:32.041 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].replace(['classA', 'classB', 'classC'], [0, 1, 2])
2022-08-06 05:17:32.048 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:17:32.230 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f53fbf707a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f53fc0ef8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f53693c1b90>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f53693c1b90>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "convert unique values in column 'target' to numeric encoding", 'user': 'u12'}, {'query': "convert uni...
    │               └ {'queries': [{'query': "convert unique values in column 'target' to numeric encoding", 'user': 'u12'}, {'query': "convert uni...
    └ {'query': "remove 'class' from values in 'target' column in 'dfin'; replace values in 'target' column by enums", 'user': 'u0'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f53693c1b90>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a series containing the "Type...
    │    └ 'code-davinci-002'
    └ <__main__.Algorithm1 object at 0x7f53693c1b90>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-002', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f5367233e60>
                       └ <openai.api_requestor.APIRequestor object at 0x7f5355084110>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 12:17:32 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f53efa93f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 12:17:32 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on reques...
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f5355081310>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeie...

openai.error.RateLimitError: Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 05:17:32.255 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 05:18:06.464 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column in 'dfin'; replace values in 'target' column by enums
2022-08-06 05:18:06.465 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '').astype('category')
2022-08-06 05:18:06.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:06.474 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column in 'dfin'; replace values in 'target' column by enums
2022-08-06 05:18:06.475 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '')
2022-08-06 05:18:06.482 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:06.482 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column in 'dfin'; replace values in 'target' column by enums
2022-08-06 05:18:06.483 | DEBUG    | __main__:run_benchmark:432 - dfin['target'].replace({'classA': 1, 'classB': 2, 'classC': 3})
2022-08-06 05:18:06.490 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:06.491 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column in 'dfin'; replace values in 'target' column by enums
2022-08-06 05:18:06.491 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].map(lambda x: x.replace('class', ''))
2022-08-06 05:18:06.498 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:06.499 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column in 'dfin'; replace values in 'target' column by enums
2022-08-06 05:18:06.499 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'target': {'classA': 1, 'classB': 2, 'classC': 3}})
2022-08-06 05:18:06.511 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:06.511 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column in 'dfin'; replace values in 'target' column by enums
2022-08-06 05:18:06.511 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '').astype('category')
2022-08-06 05:18:06.519 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:06.519 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column in 'dfin'; replace values in 'target' column by enums
2022-08-06 05:18:06.520 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '').replace('A', 0).replace('B', 1).replace('C', 2)
2022-08-06 05:18:06.527 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:18:06.545 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 05:18:11.819 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.820 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'])
2022-08-06 05:18:11.830 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.830 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.830 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:11.838 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.838 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.839 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=unique_cat)
2022-08-06 05:18:11.840 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.840 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.840 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'], ordered=True)
2022-08-06 05:18:11.848 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.848 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.848 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical.from_array(dfin['goldLabel'])
2022-08-06 05:18:11.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.849 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.850 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'], ordered=True)
2022-08-06 05:18:11.858 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.858 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.858 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:11.866 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.866 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.866 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:11.874 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.874 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.874 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:11.883 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.883 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.883 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:11.891 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.891 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.891 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=dfin['goldLabel'].unique())
2022-08-06 05:18:11.899 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.899 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.900 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:11.908 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.908 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.908 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:11.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.916 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.916 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], ordered=False)
2022-08-06 05:18:11.925 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.925 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.925 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:11.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.933 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.933 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:11.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.942 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.942 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'])
2022-08-06 05:18:11.950 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.950 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.950 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:11.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.958 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.958 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype(pd.api.types.CategoricalDtype(categories=['class1', 'class2', 'class3']))
2022-08-06 05:18:11.967 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:11.967 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 05:18:11.967 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:11.975 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:16.911 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:16.912 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:16.921 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:16.921 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:16.922 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:16.930 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:16.930 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:16.930 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:16.938 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:16.938 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:16.938 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:16.946 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:16.947 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:16.947 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:16.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:16.955 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:16.955 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:16.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:16.963 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:16.964 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:16.972 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:16.972 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:16.972 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=unique_cat)
2022-08-06 05:18:16.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:16.973 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:16.973 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'].values)
2022-08-06 05:18:16.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:16.982 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:16.982 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], ordered=False)
2022-08-06 05:18:16.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:16.990 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:16.990 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical.from_array(dfin['goldLabel'])
2022-08-06 05:18:16.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:16.991 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:16.992 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:16.999 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:17.000 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:17.000 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:17.008 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:17.008 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:17.008 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:17.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:17.016 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:17.016 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:17.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:17.024 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:17.025 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:17.032 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:17.033 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:17.033 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:17.041 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:17.041 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:17.041 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:17.049 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:17.049 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:17.050 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:17.058 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:17.058 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 05:18:17.058 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=dfin['goldLabel'].unique())
2022-08-06 05:18:17.066 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:19.600 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 05:18:19.601 | DEBUG    | __main__:run_benchmark:432 - pd.DataFrame(LabelEncoder().fit_transform(dfin['goldLabel']))
2022-08-06 05:18:19.603 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:19.603 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 05:18:19.603 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 05:18:19.604 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:19.604 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 05:18:19.605 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 05:18:19.606 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:19.606 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 05:18:19.606 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = preprocessing.LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 05:18:19.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:19.607 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 05:18:19.607 | DEBUG    | __main__:run_benchmark:432 - labelEnc[0].fit_transform(dfin['goldLabel'])
2022-08-06 05:18:19.608 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:19.608 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 05:18:19.609 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 05:18:19.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:19.610 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 05:18:19.610 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 05:18:19.611 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:19.611 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 05:18:19.611 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 05:18:19.612 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:19.612 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 05:18:19.613 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].apply(preprocessing.LabelEncoder().fit_transform)
2022-08-06 05:18:19.614 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:19.614 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 05:18:19.614 | DEBUG    | __main__:run_benchmark:432 - enc_y = preprocessing.LabelEncoder()
2022-08-06 05:18:19.615 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:19.615 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 05:18:19.615 | DEBUG    | __main__:run_benchmark:432 - LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 05:18:19.616 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:19.617 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 05:18:19.617 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:19.625 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:19.626 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 05:18:19.626 | DEBUG    | __main__:run_benchmark:432 - label.transform(dfin['goldLabel'])
2022-08-06 05:18:19.627 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:19.627 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 05:18:19.627 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:19.635 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:19.635 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 05:18:19.636 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 05:18:19.637 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:19.637 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 05:18:19.637 | DEBUG    | __main__:run_benchmark:432 - LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 05:18:19.638 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:19.638 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 05:18:19.639 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].factorize(sort=True)[0]
2022-08-06 05:18:19.646 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:18:21.743 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.744 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 05:18:21.746 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:21.746 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.746 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 05:18:21.747 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:21.747 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.748 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 05:18:21.749 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:21.749 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.749 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = preprocessing.LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 05:18:21.750 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:21.750 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.750 | DEBUG    | __main__:run_benchmark:432 - le = preprocessing.LabelEncoder()
2022-08-06 05:18:21.751 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:21.751 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.751 | DEBUG    | __main__:run_benchmark:432 - le = preprocessing.LabelEncoder()
2022-08-06 05:18:21.753 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:21.753 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.753 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 05:18:21.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:21.754 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.754 | DEBUG    | __main__:run_benchmark:432 - encoders = {}
2022-08-06 05:18:21.763 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:21.763 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.763 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = preprocessing.LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 05:18:21.764 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:21.764 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.765 | DEBUG    | __main__:run_benchmark:432 - enc_y = LabelEncoder()
2022-08-06 05:18:21.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:21.766 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.766 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 05:18:21.767 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:21.767 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.767 | DEBUG    | __main__:run_benchmark:432 - le = preprocessing.LabelEncoder()
2022-08-06 05:18:21.768 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:21.768 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.768 | DEBUG    | __main__:run_benchmark:432 - le = preprocessing.LabelEncoder()
2022-08-06 05:18:21.770 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:21.770 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.770 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 05:18:21.771 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:21.771 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.771 | DEBUG    | __main__:run_benchmark:432 - LE().fit_transform(dfin['goldLabel'])
2022-08-06 05:18:21.772 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:21.772 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.772 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 05:18:21.773 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:21.774 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.774 | DEBUG    | __main__:run_benchmark:432 - le = preprocessing.LabelEncoder()
2022-08-06 05:18:21.775 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:21.775 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.775 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 05:18:21.776 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:21.776 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 05:18:21.776 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].factorize(sort=True)[0]
2022-08-06 05:18:21.785 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:18:25.593 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.594 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:25.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.595 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.595 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:25.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.596 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.596 | DEBUG    | __main__:run_benchmark:432 - LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 05:18:25.597 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.597 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.597 | DEBUG    | __main__:run_benchmark:432 - #  use the following code as a guide
2022-08-06 05:18:25.597 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.598 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.598 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:25.598 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.598 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.598 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:25.598 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.598 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.598 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:25.598 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.599 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.599 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:25.599 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.599 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.599 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:25.599 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.599 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.599 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:25.599 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.599 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.600 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:25.600 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.600 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.600 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:25.600 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.600 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.600 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:25.600 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.600 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.601 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:25.601 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.601 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.601 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:25.601 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.601 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.601 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:25.601 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.601 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.602 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:25.602 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.602 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.602 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:25.602 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.602 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.602 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:25.602 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:25.602 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 05:18:25.602 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:25.603 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:30.033 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 05:18:30.033 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:30.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:30.043 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 05:18:30.044 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:30.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:30.052 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 05:18:30.052 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.factorize(dfin['goldLabel'])[0]
2022-08-06 05:18:30.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:18:34.699 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.700 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype(pd.api.types.CategoricalDtype(categories=['class1', 'class2', 'class3']))
2022-08-06 05:18:34.710 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.710 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.711 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:34.719 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.719 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.719 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:34.728 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.728 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.728 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:34.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.736 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.736 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:34.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.744 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.745 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:34.753 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.753 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.753 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:34.761 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.761 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.761 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype(CategoricalDtype(categories=['class1', 'class2', 'class3'], ordered=True))
2022-08-06 05:18:34.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.762 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.763 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:34.771 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.771 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.771 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:34.779 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.779 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.779 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:34.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.787 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.788 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:34.796 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.796 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.796 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:34.804 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.804 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.804 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'], ordered=True)
2022-08-06 05:18:34.812 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.812 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.813 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:34.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.821 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.821 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:34.829 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.829 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.829 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:34.837 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.838 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.838 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype(pd.api.types.CategoricalDtype(categories=['class1', 'class2', 'class3']))
2022-08-06 05:18:34.846 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.846 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.846 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=('class1', 'class2', 'class3'), ordered=True)
2022-08-06 05:18:34.854 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:34.854 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 05:18:34.854 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:34.862 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.200 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.200 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:38.209 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.209 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.210 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=dfin['goldLabel'].unique())
2022-08-06 05:18:38.218 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.218 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.218 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:38.226 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.226 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.226 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:38.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.235 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.235 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:38.243 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.243 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.243 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:38.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.251 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.252 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'].values)
2022-08-06 05:18:38.260 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.260 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.260 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:38.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.268 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.268 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:38.276 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.276 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.276 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:38.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.284 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.285 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:38.293 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.293 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.293 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:38.301 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.301 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.301 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:38.309 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.309 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.309 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:38.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.317 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.318 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:38.325 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.326 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.326 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:38.334 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.334 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.334 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:38.342 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.342 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.342 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical.from_array(dfin['goldLabel'])
2022-08-06 05:18:38.343 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.343 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.343 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:38.351 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:38.351 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 05:18:38.352 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=unique_cat)
2022-08-06 05:18:38.353 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.447 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.447 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:40.457 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.457 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.458 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:40.466 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.466 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.466 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:40.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.474 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.474 | DEBUG    | __main__:run_benchmark:432 - pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:40.482 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.482 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.482 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:40.491 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.491 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.491 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:40.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.499 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.499 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=unique_cat)
2022-08-06 05:18:40.500 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.501 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.501 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:40.509 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.509 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.509 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:40.517 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.517 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.518 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:40.526 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.526 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.526 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:40.534 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.534 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.534 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], ordered=False)
2022-08-06 05:18:40.543 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.543 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.543 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:40.551 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.551 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.551 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:40.560 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.560 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.560 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:40.568 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.568 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.568 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:40.576 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.577 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.577 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 05:18:40.585 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.585 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.585 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:40.593 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.593 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.593 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:40.601 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.601 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 05:18:40.601 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 05:18:40.609 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:40.626 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:18:44.519 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 05:18:44.520 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].asfactor()
2022-08-06 05:18:44.522 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:44.522 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 05:18:44.523 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:44.523 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:44.523 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 05:18:44.523 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:44.523 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:44.523 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 05:18:44.523 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 05:18:44.532 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:44.532 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 05:18:44.532 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 05:18:44.540 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:44.540 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 05:18:44.541 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 05:18:44.549 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:44.549 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 05:18:44.549 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:44.549 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:44.549 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 05:18:44.550 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 05:18:44.558 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:44.558 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 05:18:44.558 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = pd.Categorical(dfin['labels'])
2022-08-06 05:18:44.566 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:44.566 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 05:18:44.566 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 05:18:44.575 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:44.575 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 05:18:44.575 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:44.575 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:44.575 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 05:18:44.576 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 05:18:44.584 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:44.584 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 05:18:44.584 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = pd.factorize(dfin['labels'])[0]
2022-08-06 05:18:44.591 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:18:47.239 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 05:18:47.240 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = preprocessing.LabelEncoder().fit_transform(dfin['labels'])
2022-08-06 05:18:47.242 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:47.242 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 05:18:47.242 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 05:18:47.242 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:47.243 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 05:18:47.243 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame({'feat1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, 'feat2': {0: 12, 1: -5, 2: 7, 3: 14, 4: 1}, 'feat3
2022-08-06 05:18:47.243 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:47.243 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 05:18:47.243 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 05:18:47.243 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:47.243 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 05:18:47.244 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category').apply((lambda x: x.cat.codes))
2022-08-06 05:18:47.245 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:47.245 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 05:18:47.245 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:47.245 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:47.246 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 05:18:47.246 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:47.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:47.246 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 05:18:47.246 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category').cat.codes
2022-08-06 05:18:47.254 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:18:50.025 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.026 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:50.026 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.027 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.027 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 05:18:50.027 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.028 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.028 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:18:50.040 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.040 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.040 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:50.041 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.041 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.041 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:50.041 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.041 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.041 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 05:18:50.041 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.041 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.041 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:50.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.042 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.042 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 05:18:50.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.042 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.042 | DEBUG    | __main__:run_benchmark:432 - LabelEncoder().fit_transform(dfin['labels'])
2022-08-06 05:18:50.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.043 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.043 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:50.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.044 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.044 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:50.044 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.044 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.044 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:50.044 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.044 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.044 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 05:18:50.045 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.045 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.045 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:50.045 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.045 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.045 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:50.045 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.045 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.045 | DEBUG    | __main__:run_benchmark:432 - LabelEncoder().fit_transform(dfin['labels'])
2022-08-06 05:18:50.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.047 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.047 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:50.047 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.047 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.047 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:50.047 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.047 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.047 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = LabelEncoder().fit_transform(dfin['labels'])
2022-08-06 05:18:50.048 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:50.049 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 05:18:50.049 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:50.049 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.512 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.513 | DEBUG    | __main__:run_benchmark:432 - labels = dfin['labels']
2022-08-06 05:18:52.522 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.522 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.522 | DEBUG    | __main__:run_benchmark:432 - for i, label in enumerate(dfin['labels']):
2022-08-06 05:18:52.522 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.522 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.522 | DEBUG    | __main__:run_benchmark:432 - for i, label in enumerate(dfin['labels']):
2022-08-06 05:18:52.523 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.523 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.523 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 05:18:52.531 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.531 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.531 | DEBUG    | __main__:run_benchmark:432 - labels = dfin['labels'].unique()
2022-08-06 05:18:52.539 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.539 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.539 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 05:18:52.547 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.547 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.547 | DEBUG    | __main__:run_benchmark:432 - labels = dfin['labels']
2022-08-06 05:18:52.555 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.555 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.555 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:52.555 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.555 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.556 | DEBUG    | __main__:run_benchmark:432 - for i, label in enumerate(dfin['labels']):
2022-08-06 05:18:52.556 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.556 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.556 | DEBUG    | __main__:run_benchmark:432 - labels = dfin['labels'].unique()
2022-08-06 05:18:52.564 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.564 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.564 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 05:18:52.572 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.572 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.572 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 05:18:52.581 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.581 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.581 | DEBUG    | __main__:run_benchmark:432 - for i, label in enumerate(dfin['labels']):
2022-08-06 05:18:52.581 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.581 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.582 | DEBUG    | __main__:run_benchmark:432 - for index, value in dfin['labels'].items():
2022-08-06 05:18:52.582 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.582 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.582 | DEBUG    | __main__:run_benchmark:432 - for i, label in enumerate(dfin['labels']):
2022-08-06 05:18:52.582 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.582 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.582 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].items()
2022-08-06 05:18:52.590 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.590 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.590 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 05:18:52.598 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.598 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.599 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 05:18:52.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.607 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.607 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 05:18:52.615 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.615 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 05:18:52.615 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].apply(lambda x: x)
2022-08-06 05:18:52.623 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:52.642 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 05:18:55.615 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.616 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 05:18:55.625 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.625 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.625 | DEBUG    | __main__:run_benchmark:432 - enc_x = OneHotEncoder(sparse=False)
2022-08-06 05:18:55.626 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.627 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.627 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'], drop_first=True)
2022-08-06 05:18:55.634 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.634 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.635 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 05:18:55.642 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.643 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.643 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'], drop_first=True)
2022-08-06 05:18:55.650 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.650 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.651 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 05:18:55.658 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.659 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.659 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'], drop_first=True)
2022-08-06 05:18:55.666 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.667 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.667 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 05:18:55.675 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.675 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.675 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 05:18:55.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.683 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.683 | DEBUG    | __main__:run_benchmark:432 - pd.get_dummies(dfin['GoldTarget'])
2022-08-06 05:18:55.693 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.693 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.693 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 05:18:55.701 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.702 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.702 | DEBUG    | __main__:run_benchmark:432 - pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 05:18:55.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.714 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.714 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:55.714 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.714 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.714 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 05:18:55.722 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.723 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.723 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 05:18:55.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.731 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.731 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:55.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.731 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.732 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:55.732 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.732 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.732 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'], prefix='GoldTarget')
2022-08-06 05:18:55.740 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.740 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.740 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:18:55.741 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:55.741 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 05:18:55.741 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin, pd.get_dummies(dfin['GoldTarget'], drop_first=True)], axis=1)
2022-08-06 05:18:55.749 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.318 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.319 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Series(dfin['GoldTarget'], dtype='category')
2022-08-06 05:18:59.329 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.329 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.330 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'])
2022-08-06 05:18:59.338 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.338 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.338 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'], ordered=False)
2022-08-06 05:18:59.346 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.346 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.346 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'])
2022-08-06 05:18:59.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.354 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.354 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical.from_array(dfin['GoldTarget'])
2022-08-06 05:18:59.356 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.356 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.356 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:18:59.364 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.364 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.364 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:18:59.373 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.373 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.373 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'], categories=dfin['GoldTarget'].unique())
2022-08-06 05:18:59.382 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.382 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.382 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype(dtype='category')
2022-08-06 05:18:59.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.390 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.390 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:18:59.398 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.398 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.399 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:18:59.407 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.407 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.407 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:18:59.415 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.415 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.415 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:18:59.424 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.424 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.424 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:18:59.432 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.432 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.432 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:18:59.440 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.441 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.441 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'])
2022-08-06 05:18:59.449 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.449 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.449 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:18:59.457 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.457 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.457 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'], categories=unique_cat)
2022-08-06 05:18:59.458 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.459 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.459 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'].values)
2022-08-06 05:18:59.467 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:18:59.467 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 05:18:59.467 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:18:59.475 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:03.092 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 05:19:03.093 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype(np.number)
2022-08-06 05:19:03.095 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:03.095 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 05:19:03.095 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:19:03.104 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:03.104 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 05:19:03.104 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].apply(pd.to_numeric, errors='coerce')
2022-08-06 05:19:03.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:03.112 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 05:19:03.113 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 05:19:03.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:03.114 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 05:19:03.114 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 05:19:03.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:03.115 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 05:19:03.115 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 05:19:03.116 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:03.117 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 05:19:03.117 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:19:03.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:03.125 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 05:19:03.125 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:19:03.133 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:03.133 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 05:19:03.133 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:19:03.141 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:03.142 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 05:19:03.142 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:19:03.150 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:03.150 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 05:19:03.150 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:19:03.158 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:03.158 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 05:19:03.159 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 05:19:03.160 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:03.160 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 05:19:03.160 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:19:03.168 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:03.168 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 05:19:03.168 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:19:03.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:03.176 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 05:19:03.176 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:19:03.185 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:03.185 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 05:19:03.185 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category').cat.codes
2022-08-06 05:19:03.192 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:05.528 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to category and encode to numeric
2022-08-06 05:19:05.529 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:19:05.538 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:05.538 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to category and encode to numeric
2022-08-06 05:19:05.538 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:19:05.547 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:05.547 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to category and encode to numeric
2022-08-06 05:19:05.547 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 05:19:05.555 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:05.555 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to category and encode to numeric
2022-08-06 05:19:05.555 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category').cat.codes
2022-08-06 05:19:05.563 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:05.582 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:19:07.899 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 05:19:07.900 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 05:19:07.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:07.909 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 05:19:07.910 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 05:19:07.918 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:07.918 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 05:19:07.918 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'].replace({'class1': 0, 'class2': 1, 'class3': 2}).astype('category')
2022-08-06 05:19:07.926 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:07.926 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 05:19:07.927 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'].replace(list(dfin['Label'].unique()), range(0, len(list(dfin['Label'].unique()))))
2022-08-06 05:19:07.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:07.935 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 05:19:07.935 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category').cat.codes
2022-08-06 05:19:07.942 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:11.111 | DEBUG    | __main__:run_benchmark:431 - Query: Replace strings in 'Label' with categorical numbers
2022-08-06 05:19:11.111 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].map({'class1': 0, 'class2': 1, 'class3': 2})
2022-08-06 05:19:11.144 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:15.106 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 05:19:15.107 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 05:19:15.116 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:15.116 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 05:19:15.117 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 05:19:15.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:15.125 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 05:19:15.125 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 05:19:15.133 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:15.133 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 05:19:15.133 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 05:19:15.141 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:15.141 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 05:19:15.141 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 05:19:15.149 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:15.150 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 05:19:15.150 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 05:19:15.158 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:15.158 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 05:19:15.158 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 05:19:15.166 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:15.166 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 05:19:15.166 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category').cat.rename_categories(range(len(dfin['Label'].unique())))
2022-08-06 05:19:15.174 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:15.174 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 05:19:15.175 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = preprocessing.LabelEncoder().fit_transform(dfin['Label'])
2022-08-06 05:19:15.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:15.176 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 05:19:15.176 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = pd.factorize(dfin['Label'])[0]
2022-08-06 05:19:15.183 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:15.203 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 05:19:15.203 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:19:15.203 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 05:19:16.746 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.747 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 05:19:16.750 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.750 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.751 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:19:16.753 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.753 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.753 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 05:19:16.755 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.755 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.755 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated(keep=False).sum()
2022-08-06 05:19:16.757 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.758 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.758 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=0)
2022-08-06 05:19:16.760 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.760 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.760 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 05:19:16.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.762 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.762 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:19:16.765 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.765 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.765 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:19:16.767 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.767 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.767 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=1)
2022-08-06 05:19:16.770 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.770 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.770 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 05:19:16.772 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.772 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.773 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=1).sum()
2022-08-06 05:19:16.775 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.775 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.775 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:19:16.777 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.778 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.778 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=1)
2022-08-06 05:19:16.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.781 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.781 | DEBUG    | __main__:run_benchmark:432 - dfin.index.value_counts()
2022-08-06 05:19:16.782 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.783 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.783 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:19:16.785 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.785 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.785 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=0)
2022-08-06 05:19:16.788 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.788 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.788 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 05:19:16.790 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.790 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.790 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:19:16.793 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.793 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.793 | DEBUG    | __main__:run_benchmark:432 - len(dfin.groupby(dfin.columns.tolist()).size())
2022-08-06 05:19:16.795 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:16.796 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 05:19:16.796 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:19:16.798 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:20.875 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 05:19:20.876 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 05:19:20.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:20.880 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 05:19:20.880 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.drop_duplicates().shape[0]
2022-08-06 05:19:20.881 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:26.040 | DEBUG    | __main__:run_benchmark:431 - Query: Count duplicate rows in dfin
2022-08-06 05:19:26.041 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:19:26.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:29.924 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 05:19:29.925 | DEBUG    | __main__:run_benchmark:432 - dfin.index.value_counts()
2022-08-06 05:19:29.928 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:29.928 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 05:19:29.928 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.columns.tolist()).size()
2022-08-06 05:19:29.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:29.931 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 05:19:29.931 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:19:29.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:31.743 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 05:19:31.743 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).cumcount()
2022-08-06 05:19:31.746 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:31.747 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 05:19:31.747 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:19:31.748 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:33.860 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 05:19:33.860 | DEBUG    | __main__:run_benchmark:432 - dfin['duplicates'] = dfin.duplicated().sum()
2022-08-06 05:19:33.864 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:33.864 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 05:19:33.865 | DEBUG    | __main__:run_benchmark:432 - dfin.columns.duplicated().sum()
2022-08-06 05:19:33.866 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:33.866 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 05:19:33.866 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated(keep=False).sum()
2022-08-06 05:19:33.869 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:33.869 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 05:19:33.869 | DEBUG    | __main__:run_benchmark:432 - dfin['duplicates'] = dfin.duplicated().sum()
2022-08-06 05:19:33.871 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:33.871 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 05:19:33.872 | DEBUG    | __main__:run_benchmark:432 - dfin['dup_count'] = dfin.duplicated(subset=['inp1', 'inp2', 'inp3'], keep=False).sum(axis=1)
2022-08-06 05:19:33.874 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:33.874 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 05:19:33.874 | DEBUG    | __main__:run_benchmark:432 - dfin['duplicates'] = dfin.duplicated(subset=['inp1', 'inp2', 'inp3']).sum()
2022-08-06 05:19:33.876 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:33.876 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 05:19:33.876 | DEBUG    | __main__:run_benchmark:432 - dfin['duplicates'] = dfin.duplicated(subset=['inp1', 'inp2', 'inp3'], keep=False).sum(axis=1)
2022-08-06 05:19:33.878 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:33.878 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 05:19:33.878 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:19:33.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:37.463 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of duplicates in dataframe dfin and add them
2022-08-06 05:19:37.464 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:19:37.466 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:38.996 | DEBUG    | __main__:run_benchmark:431 - Query: count number of duplicate rows in 'dfin'
2022-08-06 05:19:38.997 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:19:39.000 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:39.022 | DEBUG    | __main__:run:515 - Number of queries: 22
2022-08-06 05:19:41.817 | DEBUG    | __main__:run_benchmark:431 - Query: Find the number of duplicate rows in dataframe 'dfin'
2022-08-06 05:19:41.818 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:19:41.820 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:45.426 | DEBUG    | __main__:run_benchmark:431 - Query: Number of duplicate rows in dataframe 'dfin'
2022-08-06 05:19:45.427 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:19:45.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:47.199 | DEBUG    | __main__:run_benchmark:431 - Query: Count of repeated rows in dataframe 'dfin'
2022-08-06 05:19:47.200 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:19:47.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:49.201 | DEBUG    | __main__:run_benchmark:431 - Query: count number of repeated rows
2022-08-06 05:19:49.201 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.columns.tolist()).size()
2022-08-06 05:19:49.206 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:49.206 | DEBUG    | __main__:run_benchmark:431 - Query: count number of repeated rows
2022-08-06 05:19:49.207 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:19:49.208 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:51.453 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 05:19:51.454 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:19:51.457 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:51.457 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 05:19:51.458 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 05:19:51.460 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:51.460 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 05:19:51.460 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0]
2022-08-06 05:19:51.461 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:51.461 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 05:19:51.462 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(list(dfin.columns)).size()
2022-08-06 05:19:51.465 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:51.465 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 05:19:51.465 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:19:51.467 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:51.467 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 05:19:51.467 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 05:19:51.469 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:51.470 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 05:19:51.470 | DEBUG    | __main__:run_benchmark:432 - dfin.index.value_counts()
2022-08-06 05:19:51.471 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:51.472 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 05:19:51.472 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.duplicated().sum()
2022-08-06 05:19:51.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:51.474 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 05:19:51.474 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated(keep=False).sum()
2022-08-06 05:19:51.476 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:51.476 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 05:19:51.476 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 05:19:51.478 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:51.479 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 05:19:51.479 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.drop_duplicates().shape[0]
2022-08-06 05:19:51.480 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:56.018 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 05:19:56.019 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates()) - len(dfin)
2022-08-06 05:19:56.022 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:56.023 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 05:19:56.023 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 05:19:56.025 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:19:56.025 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 05:19:56.025 | DEBUG    | __main__:run_benchmark:432 - len(dfin) - len(dfin.drop_duplicates())
2022-08-06 05:19:56.026 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:56.046 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:19:59.259 | DEBUG    | __main__:run_benchmark:431 - Query: find number of duplicate rows in dfin
2022-08-06 05:19:59.259 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:19:59.261 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:19:59.693 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f53fbf707a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f53fc0ef8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f53693c1b90>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f53693c1b90>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'find number of duplicate rows in dfin', 'user': 'u11'}, {'query': 'find count of duplicate rows in df...
    │               └ {'queries': [{'query': 'find number of duplicate rows in dfin', 'user': 'u11'}, {'query': 'find count of duplicate rows in df...
    └ {'query': 'find number of duplicate rows', 'user': 'u10'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f53693c1b90>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return the number of duplicate rows ...
    │    └ 'code-davinci-002'
    └ <__main__.Algorithm1 object at 0x7f53693c1b90>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-002', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f5367233e60>
                       └ <openai.api_requestor.APIRequestor object at 0x7f53550e38d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 12:19:59 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f53efa93f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 12:19:59 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on reques...
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f5355084e50>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeie...

openai.error.RateLimitError: Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 05:19:59.718 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 05:20:33.598 | DEBUG    | __main__:run_benchmark:431 - Query: find number of duplicate rows
2022-08-06 05:20:33.599 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:20:33.602 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:20:33.621 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:20:35.953 | DEBUG    | __main__:run_benchmark:431 - Query: Count the number of repeated rows
2022-08-06 05:20:35.954 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.columns.tolist()).size()
2022-08-06 05:20:35.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:35.959 | DEBUG    | __main__:run_benchmark:431 - Query: Count the number of repeated rows
2022-08-06 05:20:35.959 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:20:35.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:20:38.534 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.535 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 05:20:38.543 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.543 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.543 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:38.546 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.546 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.546 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 05:20:38.553 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.553 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.553 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 05:20:38.560 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.560 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.560 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, keep='first')
2022-08-06 05:20:38.562 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.562 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.563 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, subset=['feat1', 'feat2'])
2022-08-06 05:20:38.565 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.565 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.565 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 05:20:38.572 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.572 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.572 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 05:20:38.578 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.579 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.579 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 05:20:38.585 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.585 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.586 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 05:20:38.592 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.592 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.593 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 05:20:38.599 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.599 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.599 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False)
2022-08-06 05:20:38.606 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.606 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.606 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False, subset=dfin.columns[1:])
2022-08-06 05:20:38.613 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.613 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.613 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 05:20:38.620 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.620 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.620 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 05:20:38.627 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.627 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.627 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False)
2022-08-06 05:20:38.633 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.634 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.634 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 05:20:38.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.641 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.641 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=dfin.columns[0:(- 1)])
2022-08-06 05:20:38.647 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.648 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.648 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 05:20:38.654 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:38.654 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 05:20:38.655 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:38.657 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.522 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.522 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape
2022-08-06 05:20:40.526 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.526 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.526 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False, subset=dfin.columns[1:]).shape
2022-08-06 05:20:40.528 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.529 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.529 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=dfin.columns[1:]).shape
2022-08-06 05:20:40.531 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.531 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.531 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 05:20:40.534 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.534 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.534 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:40.536 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.536 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.536 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:40.539 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.539 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.539 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:40.541 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.541 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.541 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:40.544 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.544 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.544 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:40.546 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.546 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.546 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:40.549 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.549 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.549 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:40.551 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.551 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.551 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:40.554 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.554 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.554 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:40.556 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.556 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.556 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:40.559 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.559 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.559 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:40.561 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.561 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.561 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:40.564 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.564 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.564 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False)
2022-08-06 05:20:40.570 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.571 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.571 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:40.573 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.573 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.573 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(dfin.columns, inplace=True)
2022-08-06 05:20:40.576 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:40.576 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 05:20:40.576 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False)
2022-08-06 05:20:40.582 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:46.143 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows
2022-08-06 05:20:46.144 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:20:46.145 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:46.145 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows
2022-08-06 05:20:46.146 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:20:46.146 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:46.146 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows
2022-08-06 05:20:46.146 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:20:46.148 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:20:49.088 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 05:20:49.088 | DEBUG    | __main__:run_benchmark:432 - #  of all duplicated rows in "df"
2022-08-06 05:20:49.088 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:49.089 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 05:20:49.089 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:20:49.089 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:49.090 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 05:20:49.090 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:20:49.090 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:49.090 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 05:20:49.091 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 05:20:49.091 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:49.091 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 05:20:49.092 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:20:49.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:49.092 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 05:20:49.092 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:20:49.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:49.092 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 05:20:49.092 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 05:20:49.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:49.093 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 05:20:49.093 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:20:49.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:49.093 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 05:20:49.093 | DEBUG    | __main__:run_benchmark:432 - def count_duplicate_rows(df):
2022-08-06 05:20:49.094 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:49.094 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 05:20:49.094 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:20:49.094 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:49.094 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 05:20:49.094 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:20:49.096 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:20:51.087 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 05:20:51.088 | DEBUG    | __main__:run_benchmark:432 - #  of all duplicated rows in "dfin"
2022-08-06 05:20:51.089 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:51.089 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 05:20:51.089 | DEBUG    | __main__:run_benchmark:432 - #  of the sums of all duplicated rows in "dfin"
2022-08-06 05:20:51.089 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:51.089 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 05:20:51.089 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:20:51.089 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:51.090 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 05:20:51.090 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(dfin):
2022-08-06 05:20:51.090 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:51.090 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 05:20:51.090 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(dfin):
2022-08-06 05:20:51.090 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:51.091 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 05:20:51.091 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:20:51.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:20:55.059 | DEBUG    | __main__:run_benchmark:431 - Query: Get total number of duplicate rows
2022-08-06 05:20:55.060 | DEBUG    | __main__:run_benchmark:432 - len(dfin[dfin.duplicated()])
2022-08-06 05:20:55.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:20:55.087 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 05:20:56.880 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.881 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, keep='first')
2022-08-06 05:20:56.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.885 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.885 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 05:20:56.892 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.892 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.893 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:56.895 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.895 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.895 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 05:20:56.902 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.902 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.903 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 05:20:56.910 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.910 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.910 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 05:20:56.917 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.917 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.917 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 05:20:56.924 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.924 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.924 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:56.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.927 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.927 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:56.930 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.930 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.930 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 05:20:56.932 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.933 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.933 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 05:20:56.940 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.940 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.940 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 05:20:56.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.947 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.948 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 05:20:56.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.955 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.955 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 05:20:56.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.962 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.962 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False)
2022-08-06 05:20:56.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.969 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.969 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 05:20:56.975 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.976 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.976 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 05:20:56.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.982 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.982 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 05:20:56.989 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.989 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.989 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.DataFrame.drop_duplicates(dfin)
2022-08-06 05:20:56.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:56.992 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 05:20:56.992 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 05:20:56.999 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:20:59.431 | DEBUG    | __main__:run_benchmark:431 - Query: return the number of duplicate rows
2022-08-06 05:20:59.432 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.duplicated()].shape[0]
2022-08-06 05:20:59.435 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:21:02.494 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - duplicate rows
2022-08-06 05:21:02.495 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.duplicated().sum()
2022-08-06 05:21:02.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:02.499 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - duplicate rows
2022-08-06 05:21:02.499 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.duplicated().sum()
2022-08-06 05:21:02.501 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:02.501 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - duplicate rows
2022-08-06 05:21:02.501 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.drop_duplicates().shape[0]
2022-08-06 05:21:02.503 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:21:06.982 | DEBUG    | __main__:run_benchmark:431 - Query: return number of nonunique rows
2022-08-06 05:21:06.983 | DEBUG    | __main__:run_benchmark:432 - len(dfin) - len(dfin.drop_duplicates())
2022-08-06 05:21:06.986 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:21:10.664 | DEBUG    | __main__:run_benchmark:431 - Query: return length of din - length of drop duplicates of dfin
2022-08-06 05:21:10.665 | DEBUG    | __main__:run_benchmark:432 - len(dfin) - len(dfin.drop_duplicates())
2022-08-06 05:21:10.668 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:21:13.391 | DEBUG    | __main__:run_benchmark:431 - Query: find the number of repeated columns in 'dfin'
2022-08-06 05:21:13.392 | DEBUG    | __main__:run_benchmark:432 - dfin.columns.duplicated().sum()
2022-08-06 05:21:13.395 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:13.395 | DEBUG    | __main__:run_benchmark:431 - Query: find the number of repeated columns in 'dfin'
2022-08-06 05:21:13.395 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated(subset=['inputA', 'inputB', 'inputC']).sum()
2022-08-06 05:21:13.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:21:13.418 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 05:21:13.418 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 05:21:13.418 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:21:15.136 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.136 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.158 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.158 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.158 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.178 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.178 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.178 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.197 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.198 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.198 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.218 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.218 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.218 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.239 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.239 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.239 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2', keep='first', inplace=True)
2022-08-06 05:21:15.254 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.254 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.254 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.274 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.274 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.294 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.294 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.294 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.313 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.313 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.313 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.333 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.333 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.333 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.352 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.352 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.352 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.372 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.372 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.372 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.391 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.391 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.391 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.411 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.411 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.411 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.431 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.431 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.450 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.450 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.450 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.469 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.470 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.470 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.489 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.489 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.489 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.509 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.509 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 05:21:15.509 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 05:21:15.528 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:15.548 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:21:15.548 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:21:18.734 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 05:21:18.735 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 05:21:18.755 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:18.756 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 05:21:18.756 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inputB'].duplicated()]
2022-08-06 05:21:18.775 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:18.775 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 05:21:18.775 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inputB'].duplicated(keep=False)]
2022-08-06 05:21:18.794 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:18.794 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 05:21:18.794 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 05:21:18.813 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:18.813 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 05:21:18.814 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inputB'].duplicated()]
2022-08-06 05:21:18.832 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:18.832 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 05:21:18.833 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 05:21:18.852 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:18.852 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 05:21:18.852 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB', keep=False)
2022-08-06 05:21:18.862 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:21:21.216 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 05:21:21.216 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 05:21:21.236 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:21.237 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 05:21:21.237 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 05:21:21.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:21.255 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 05:21:21.256 | DEBUG    | __main__:run_benchmark:432 - dfin[~dfin['inputB'].duplicated()]
2022-08-06 05:21:21.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:21.274 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 05:21:21.274 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 05:21:21.292 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:21.293 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 05:21:21.293 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB', inplace=True)
2022-08-06 05:21:21.306 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:21.306 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 05:21:21.307 | DEBUG    | __main__:run_benchmark:432 - dfin[~dfin.duplicated(keep=False, subset='inputB')]
2022-08-06 05:21:21.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:21:23.804 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:23.805 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 05:21:23.826 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:23.826 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:23.826 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'].drop_duplicates()
2022-08-06 05:21:23.840 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:23.840 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:23.840 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 05:21:23.859 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:23.859 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:23.860 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'].drop_duplicates(keep='first')
2022-08-06 05:21:23.873 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:23.874 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:23.874 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 05:21:23.892 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:23.892 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:23.893 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 05:21:23.911 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:23.911 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:23.911 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'].drop_duplicates()
2022-08-06 05:21:23.924 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:23.924 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:23.924 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'].drop_duplicates(keep='first')
2022-08-06 05:21:23.937 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:23.937 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:23.937 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep='first', inplace=True)
2022-08-06 05:21:23.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:23.951 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:23.951 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 05:21:23.970 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:23.970 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:23.970 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, subset='inputB')
2022-08-06 05:21:23.983 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:23.984 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:23.984 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 05:21:24.002 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:24.002 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:24.002 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 05:21:24.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:24.021 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:24.022 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 05:21:24.040 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:24.041 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:24.041 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 05:21:24.059 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:24.060 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:24.060 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 05:21:24.078 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:24.079 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:24.079 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB', inplace=True)
2022-08-06 05:21:24.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:24.092 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:24.093 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 05:21:24.111 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:24.111 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:24.111 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 05:21:24.130 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:24.130 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 05:21:24.130 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 05:21:24.149 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:28.551 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB' without keeping first
2022-08-06 05:21:28.551 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB', keep='first', inplace=True)
2022-08-06 05:21:28.567 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:28.567 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB' without keeping first
2022-08-06 05:21:28.567 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'].drop_duplicates(keep=False)
2022-08-06 05:21:28.582 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:28.582 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB' without keeping first
2022-08-06 05:21:28.582 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB', keep=False)
2022-08-06 05:21:28.592 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:21:28.615 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:21:31.361 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.362 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:31.383 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.383 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.383 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:31.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.402 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.402 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:31.421 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.422 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.422 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:31.441 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.441 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.441 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, subset='inp2')
2022-08-06 05:21:31.455 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.455 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.455 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', inplace=True)
2022-08-06 05:21:31.469 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.469 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.469 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:31.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.487 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.487 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:31.506 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.506 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.506 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 05:21:31.525 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.525 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.525 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 05:21:31.543 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.544 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.544 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:31.562 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.562 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.563 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 05:21:31.581 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.581 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.581 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 05:21:31.600 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.600 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.600 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:31.619 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.619 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.619 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', inplace=True)
2022-08-06 05:21:31.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.633 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.633 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:31.651 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.651 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.651 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:31.670 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.670 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.670 | DEBUG    | __main__:run_benchmark:432 - pd.DataFrame.drop_duplicates(dfin, subset='inp2')
2022-08-06 05:21:31.689 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.689 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.689 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:31.707 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:31.707 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 05:21:31.708 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:31.726 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:33.793 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:33.794 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'] != dfin['inp2'].shift()]
2022-08-06 05:21:33.813 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:33.813 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:33.813 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:33.832 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:33.833 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:33.833 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'] != dfin['inp2'].shift()]
2022-08-06 05:21:33.851 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:33.852 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:33.852 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'].duplicated()]
2022-08-06 05:21:33.870 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:33.870 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:33.870 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:33.889 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:33.889 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:33.889 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:33.907 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:33.908 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:33.908 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:33.926 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:33.926 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:33.926 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:33.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:33.945 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:33.945 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:33.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:33.964 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:33.964 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', inplace=True)
2022-08-06 05:21:33.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:33.978 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:33.978 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:33.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:33.996 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:33.996 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:34.015 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:34.015 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:34.015 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'].duplicated()]
2022-08-06 05:21:34.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:34.034 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:34.034 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:34.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:34.053 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:34.053 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first', inplace=True)
2022-08-06 05:21:34.066 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:34.067 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:34.067 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:34.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:34.086 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:34.086 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'].duplicated(keep=False)].reset_index(drop=True)
2022-08-06 05:21:34.104 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:34.104 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:34.104 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'].duplicated()]
2022-08-06 05:21:34.122 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:34.122 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:34.122 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'].duplicated()]
2022-08-06 05:21:34.140 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:34.140 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 05:21:34.141 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:34.159 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:37.847 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:37.848 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:37.868 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:37.868 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:37.868 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'].duplicated()]
2022-08-06 05:21:37.886 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:37.886 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:37.886 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'] != dfin['inp2'].shift()]
2022-08-06 05:21:37.904 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:37.904 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:37.904 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset='inp2', keep='first')
2022-08-06 05:21:37.917 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:37.917 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:37.918 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first')
2022-08-06 05:21:37.936 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:37.936 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:37.936 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:37.954 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:37.954 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:37.954 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:37.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:37.973 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:37.973 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'].shift() != dfin['inp2']]
2022-08-06 05:21:37.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:37.991 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:37.991 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:38.009 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:38.010 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:38.010 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first')
2022-08-06 05:21:38.028 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:38.028 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:38.028 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset='inp2', keep='first')
2022-08-06 05:21:38.041 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:38.041 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:38.042 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first', inplace=True)
2022-08-06 05:21:38.055 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:38.055 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:38.055 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:38.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:38.073 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:38.073 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first')
2022-08-06 05:21:38.091 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:38.092 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:38.092 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['inp2'] != dfin['inp2'].shift()]
2022-08-06 05:21:38.104 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:38.104 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:38.105 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.loc[(dfin['inp2'] != 12)]
2022-08-06 05:21:38.117 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:38.117 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:38.117 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 05:21:38.135 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:38.136 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:38.136 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:38.149 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:38.149 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:38.149 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first', inplace=True)
2022-08-06 05:21:38.162 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:38.162 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 05:21:38.162 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first')
2022-08-06 05:21:38.180 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:39.856 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:39.857 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:39.876 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:39.876 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:39.876 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:39.894 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:39.894 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:39.895 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:39.913 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:39.913 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:39.913 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', inplace=True)
2022-08-06 05:21:39.926 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:39.926 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:39.927 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:39.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:39.945 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:39.945 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, subset='inp2')
2022-08-06 05:21:39.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:39.958 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:39.959 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:39.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:39.978 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:39.978 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:39.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:39.997 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:39.997 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', inplace=True)
2022-08-06 05:21:40.010 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:40.010 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:40.010 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 05:21:40.029 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:40.029 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:40.029 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 05:21:40.047 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:40.047 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:40.048 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:40.066 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:40.066 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:40.066 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:40.084 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:40.084 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:40.084 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:40.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:40.103 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:40.103 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:40.121 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:40.121 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:40.121 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:40.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:40.139 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:40.140 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:40.158 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:40.158 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:40.158 | DEBUG    | __main__:run_benchmark:432 - pd.DataFrame.drop_duplicates(dfin, subset='inp2')
2022-08-06 05:21:40.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:40.177 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:40.177 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:40.195 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:40.195 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 05:21:40.195 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 05:21:40.213 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:40.235 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 05:21:40.235 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:21:40.236 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:21:41.829 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:41.829 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 05:21:41.841 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:41.842 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:41.842 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 05:21:41.852 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:41.853 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:41.853 | DEBUG    | __main__:run_benchmark:432 - dfin.mask(dfin < 10, 10)
2022-08-06 05:21:41.863 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:41.864 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:41.864 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: (x if (x >= 10) else 10))
2022-08-06 05:21:41.875 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:41.875 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:41.875 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 05:21:41.886 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:41.886 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:41.886 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 05:21:41.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:41.897 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:41.897 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 05:21:41.904 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:41.905 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:41.905 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 05:21:41.915 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:41.916 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:41.916 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if (x < 10) else x)
2022-08-06 05:21:41.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:41.927 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:41.927 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 05:21:41.938 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:41.938 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:41.938 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if (x < 10) else x)
2022-08-06 05:21:41.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:41.949 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:41.949 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 05:21:41.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:41.960 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:41.960 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 05:21:41.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:41.971 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:41.972 | DEBUG    | __main__:run_benchmark:432 - dfin['f1'] = np.where((dfin['f1'] < 10), 10, dfin['f1'])
2022-08-06 05:21:41.979 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:41.979 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:41.979 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 05:21:41.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:41.990 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:41.990 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if (x < 10) else x)
2022-08-06 05:21:42.001 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:42.002 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:42.002 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: (10 if (x < 10) else x))
2022-08-06 05:21:42.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:42.013 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:42.013 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if (x < 10) else x)
2022-08-06 05:21:42.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:42.024 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:42.024 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 05:21:42.035 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:42.035 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 05:21:42.035 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin > 10, 10)
2022-08-06 05:21:42.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:44.932 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:44.933 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 05:21:44.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:44.946 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:44.946 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 05:21:44.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:44.957 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:44.957 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin > 10, 10)
2022-08-06 05:21:44.967 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:44.968 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:44.968 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin > 10, 10)
2022-08-06 05:21:44.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:44.979 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:44.979 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if (x < 10) else x)
2022-08-06 05:21:44.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:44.990 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:44.990 | DEBUG    | __main__:run_benchmark:432 - dfin.mask(dfin < 10, 10)
2022-08-06 05:21:45.001 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:45.001 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:45.001 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 05:21:45.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:45.012 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:45.012 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 05:21:45.023 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:45.023 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:45.023 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin > 10, 10)
2022-08-06 05:21:45.035 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:45.035 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:45.035 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 05:21:45.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:45.046 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:45.046 | DEBUG    | __main__:run_benchmark:432 - dfin['f1'] = np.where((dfin['f1'] < 10), 10, dfin['f1'])
2022-08-06 05:21:45.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:45.054 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:45.054 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 05:21:45.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:45.065 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:45.065 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 05:21:45.076 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:45.076 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:45.076 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: (x if (x >= 10) else 10))
2022-08-06 05:21:45.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:45.087 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:45.087 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 05:21:45.098 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:45.098 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:45.098 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 05:21:45.109 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:45.109 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:45.109 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 05:21:45.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:45.120 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:45.120 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 05:21:45.128 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:45.128 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:45.128 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin > 10, 10)
2022-08-06 05:21:45.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:45.139 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 05:21:45.139 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 05:21:45.150 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:47.933 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:47.934 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 05:21:47.942 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:47.942 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:47.943 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 05:21:47.953 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:47.953 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:47.954 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 05:21:47.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:47.964 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:47.965 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 05:21:47.972 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:47.972 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:47.972 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 05:21:47.983 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:47.983 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:47.983 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 05:21:47.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:47.991 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:47.991 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 05:21:47.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:47.999 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:47.999 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 05:21:48.006 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:48.006 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:48.006 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin < 10)] = 10
2022-08-06 05:21:48.008 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:48.008 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:48.009 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 05:21:48.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:48.016 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:48.016 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 05:21:48.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:48.024 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:48.024 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin < 10, 10)
2022-08-06 05:21:48.035 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:48.035 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:48.035 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 05:21:48.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:48.043 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:48.043 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 05:21:48.050 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:48.051 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:48.051 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 05:21:48.058 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:48.058 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:48.059 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 05:21:48.066 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:48.066 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:48.066 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 05:21:48.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:48.073 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:48.074 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 05:21:48.081 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:48.081 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:48.081 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: (x if (x >= 10) else 10))
2022-08-06 05:21:48.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:48.092 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 05:21:48.092 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 05:21:48.099 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:48.120 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 05:21:51.047 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.047 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (5 if (x < 5) else x)))
2022-08-06 05:21:51.056 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.056 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.056 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (5 if (x < 5) else x)))
2022-08-06 05:21:51.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.064 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.064 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (x if (x < 5) else 5)))
2022-08-06 05:21:51.071 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.072 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.072 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].mask((dfin['ftr2'] < 5), 5)
2022-08-06 05:21:51.079 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.080 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.080 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (5 if (x < 5) else x)))
2022-08-06 05:21:51.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.088 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.088 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].where((dfin['ftr2'] < 5), 5)
2022-08-06 05:21:51.095 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.095 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.095 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.096 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.096 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.096 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft3" val=10 if val<10
2022-08-06 05:21:51.096 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.096 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.096 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=10 if val>10
2022-08-06 05:21:51.097 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.097 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.097 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=10 if val>10
2022-08-06 05:21:51.097 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.097 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.097 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:21:51.097 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.098 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.098 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (5 if (x < 5) else x)))
2022-08-06 05:21:51.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.105 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.105 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=10 if val>10
2022-08-06 05:21:51.106 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.106 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.106 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft3" val=5 if val<5
2022-08-06 05:21:51.106 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.106 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.106 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=10 if val>10
2022-08-06 05:21:51.107 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.107 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.107 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (5 if (x < 5) else x)))
2022-08-06 05:21:51.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.114 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.115 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=val if val>=5
2022-08-06 05:21:51.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.115 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.115 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].map((lambda x: (5 if (x < 5) else x)))
2022-08-06 05:21:51.122 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.122 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.123 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.123 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 05:21:51.123 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=10 if val>10
2022-08-06 05:21:51.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:51.145 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:21:51.145 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 05:21:52.789 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.790 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.801 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.801 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.802 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.812 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.812 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.812 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.823 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.823 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.823 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.833 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.834 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.834 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.844 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.844 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.845 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.855 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.855 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.855 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.866 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.866 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.866 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.876 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.877 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.877 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.887 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.887 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.888 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.898 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.898 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.898 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.909 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.909 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.919 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.919 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.920 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.930 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.930 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.930 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.941 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.941 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.952 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.952 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.952 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.963 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.963 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.973 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.973 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.984 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.984 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:52.994 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:52.994 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 05:21:52.994 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 05:21:53.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:53.025 | DEBUG    | __main__:run:515 - Number of queries: 25
2022-08-06 05:21:56.559 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.560 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].mask(dfin['inputB'] < 0, 0)
2022-08-06 05:21:56.569 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.570 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.570 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] < 0, 0, dfin['inputB'])
2022-08-06 05:21:56.577 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.577 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.577 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply((lambda x: (0 if (x < 0) else x)))
2022-08-06 05:21:56.585 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.585 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.585 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply((lambda x: (0 if (x < 0) else x)))
2022-08-06 05:21:56.592 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.592 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.593 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where((dfin['inputB'] < 0), 0, dfin['inputB'])
2022-08-06 05:21:56.600 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.600 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.600 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply((lambda x: (0 if (x < 0) else x)))
2022-08-06 05:21:56.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.607 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.608 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where((dfin['inputB'] < 0), 0, dfin['inputB'])
2022-08-06 05:21:56.615 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.615 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.615 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where((dfin['inputB'] < 0), 0, dfin['inputB'])
2022-08-06 05:21:56.623 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.623 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.623 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].map((lambda x: (0 if (x < 0) else x)))
2022-08-06 05:21:56.630 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.630 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.631 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where((dfin['inputB'] < 0), 0, dfin['inputB'])
2022-08-06 05:21:56.638 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.638 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.638 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] < 0, 0, dfin['inputB'])
2022-08-06 05:21:56.646 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.646 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.646 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply((lambda x: (0 if (x < 0) else x)))
2022-08-06 05:21:56.653 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.653 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.654 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply(lambda x: 0 if x < 0 else x)
2022-08-06 05:21:56.661 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.661 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.661 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] < 0, 0, dfin['inputB'])
2022-08-06 05:21:56.668 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.668 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.668 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply((lambda x: (x if (x > 0) else 0)))
2022-08-06 05:21:56.676 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.676 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.676 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['inputB'] < 0, 'inputB'] = 0
2022-08-06 05:21:56.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.683 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.683 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].where((dfin['inputB'] > 0), 0)
2022-08-06 05:21:56.691 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.691 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.691 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where((dfin['inputB'] < 0), 0, dfin['inputB'])
2022-08-06 05:21:56.698 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.698 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.698 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] < 0, 0, dfin['inputB'])
2022-08-06 05:21:56.706 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:21:56.706 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 05:21:56.706 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply((lambda x: 0 if (x < 0) else x))
2022-08-06 05:21:56.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:01.603 | DEBUG    | __main__:run_benchmark:431 - Query: if inputB>0 set inputB=0
2022-08-06 05:22:01.604 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['inputB'] > 0, 'inputB'] = 0
2022-08-06 05:22:01.612 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:22:03.700 | DEBUG    | __main__:run_benchmark:431 - Query: 'inputB' = 0 if 'inputB' > 0 in dfin
2022-08-06 05:22:03.700 | DEBUG    | __main__:run_benchmark:432 - #  'inputB' = 1 if 'inputB' < 0 in dfin
2022-08-06 05:22:03.701 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:03.702 | DEBUG    | __main__:run_benchmark:431 - Query: 'inputB' = 0 if 'inputB' > 0 in dfin
2022-08-06 05:22:03.702 | DEBUG    | __main__:run_benchmark:432 - #  'inputC' = 0 if 'inputC' > 0 in dfin
2022-08-06 05:22:03.702 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:03.702 | DEBUG    | __main__:run_benchmark:431 - Query: 'inputB' = 0 if 'inputB' > 0 in dfin
2022-08-06 05:22:03.702 | DEBUG    | __main__:run_benchmark:432 - #  'inputB' = 1 otherwise
2022-08-06 05:22:03.702 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:03.703 | DEBUG    | __main__:run_benchmark:431 - Query: 'inputB' = 0 if 'inputB' > 0 in dfin
2022-08-06 05:22:03.703 | DEBUG    | __main__:run_benchmark:432 - #  'inputB' = 1 if 'inputB' < 0 in dfin
2022-08-06 05:22:03.703 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:03.703 | DEBUG    | __main__:run_benchmark:431 - Query: 'inputB' = 0 if 'inputB' > 0 in dfin
2022-08-06 05:22:03.703 | DEBUG    | __main__:run_benchmark:432 - np.where(dfin['inputB'] > 0, 0, dfin['inputB'])
2022-08-06 05:22:03.711 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:03.711 | DEBUG    | __main__:run_benchmark:431 - Query: 'inputB' = 0 if 'inputB' > 0 in dfin
2022-08-06 05:22:03.711 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] > 0, 0, dfin['inputB'])
2022-08-06 05:22:03.719 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:22:03.741 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 05:22:03.741 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 05:22:03.742 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:22:08.678 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.678 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin == '-']
2022-08-06 05:22:08.701 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:08.701 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.702 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])]
2022-08-06 05:22:08.724 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:08.725 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.725 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.astype(str) == '-']
2022-08-06 05:22:08.747 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:08.748 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.748 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])]
2022-08-06 05:22:08.771 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:08.771 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.771 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] == '-']
2022-08-06 05:22:08.793 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:08.793 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.793 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin == '-']
2022-08-06 05:22:08.816 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:08.816 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.816 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-').any(axis=1)]
2022-08-06 05:22:08.838 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:08.838 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.839 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['B'] == '-')]
2022-08-06 05:22:08.860 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:08.861 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.861 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-')]
2022-08-06 05:22:08.884 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:08.884 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.884 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-').any(axis=1)]
2022-08-06 05:22:08.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:08.906 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.906 | DEBUG    | __main__:run_benchmark:432 - #  in any column and return the count of the number of rows
2022-08-06 05:22:08.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:08.907 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.907 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-')]
2022-08-06 05:22:08.929 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:08.930 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.930 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:22:08.930 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:08.930 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.930 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] == '-']
2022-08-06 05:22:08.952 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:08.952 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.952 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:22:08.953 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:08.953 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.953 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin == '-']
2022-08-06 05:22:08.976 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:08.976 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.976 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-').any(axis=1)]
2022-08-06 05:22:08.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:08.998 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.998 | DEBUG    | __main__:run_benchmark:432 - #  in the column named "B"
2022-08-06 05:22:08.999 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:08.999 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:08.999 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])]
2022-08-06 05:22:09.022 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:09.022 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 05:22:09.022 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'].isin(['-'])]
2022-08-06 05:22:09.044 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.013 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.014 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-').any(axis=1)]
2022-08-06 05:22:11.079 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.079 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.079 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])].dropna(how='all')
2022-08-06 05:22:11.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.105 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.105 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])].dropna(how='all')
2022-08-06 05:22:11.129 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.129 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.129 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])]
2022-08-06 05:22:11.153 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.153 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.153 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-').any(axis=1)]
2022-08-06 05:22:11.175 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.175 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.175 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])].dropna(how='all')
2022-08-06 05:22:11.199 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.199 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.199 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-').any(axis=1)]
2022-08-06 05:22:11.221 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.221 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.222 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])].dropna(how='all')
2022-08-06 05:22:11.245 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.246 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.246 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:22:11.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.246 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.246 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-').any(axis=1)]
2022-08-06 05:22:11.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.268 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.269 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-').any(axis=1)]
2022-08-06 05:22:11.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.291 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.291 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])].dropna(how='all')
2022-08-06 05:22:11.315 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.315 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.315 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])]
2022-08-06 05:22:11.338 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.338 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.339 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.isin(['-'])]
2022-08-06 05:22:11.341 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.341 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.341 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])]
2022-08-06 05:22:11.364 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.364 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.364 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])]
2022-08-06 05:22:11.387 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.387 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.388 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:22:11.388 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.388 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.388 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])].dropna(how='all')
2022-08-06 05:22:11.412 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.412 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.412 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])].dropna(how='all')
2022-08-06 05:22:11.436 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:11.436 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 05:22:11.436 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])].dropna(how='all')
2022-08-06 05:22:11.460 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:16.275 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 05:22:16.276 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('-', np.nan).dropna()
2022-08-06 05:22:16.290 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:22:16.313 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 05:22:16.481 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f53fbf707a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f53fc0ef8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f53693c1b90>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f53693c1b90>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Remove rows with '?' in any column", 'user': 'u13'}, {'query': "Remove rows with '?'", 'user': 'u13'}...
    │               └ {'queries': [{'query': "Remove rows with '?' in any column", 'user': 'u13'}, {'query': "Remove rows with '?'", 'user': 'u13'}...
    └ {'query': "Remove rows with '?' in any column", 'user': 'u13'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f53693c1b90>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return rows from "df" where "Name" c...
    │    └ 'code-davinci-002'
    └ <__main__.Algorithm1 object at 0x7f53693c1b90>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-002', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f5367233e60>
                       └ <openai.api_requestor.APIRequestor object at 0x7f5354599a90>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 12:22:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f53efa93f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 12:22:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on reques...
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f535458c2d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeie...

openai.error.RateLimitError: Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 05:22:16.506 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 05:22:52.195 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?' in any column
2022-08-06 05:22:52.196 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin != '?']
2022-08-06 05:22:52.220 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:52.220 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?' in any column
2022-08-06 05:22:52.220 | DEBUG    | __main__:run_benchmark:432 - dfin[(~ (dfin == '?').any(axis=1))]
2022-08-06 05:22:52.232 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:22:54.832 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 05:22:54.833 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 05:22:54.851 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:54.851 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 05:22:54.851 | DEBUG    | __main__:run_benchmark:432 - dfin[(~ (dfin['B'] == '?'))]
2022-08-06 05:22:54.873 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:54.873 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 05:22:54.874 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 05:22:54.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:54.890 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 05:22:54.890 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?') | (dfin['C'] == '?')].index)
2022-08-06 05:22:54.902 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:22:58.924 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 05:22:58.925 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 05:22:58.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:58.944 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 05:22:58.944 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?')].index)
2022-08-06 05:22:58.961 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:58.961 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 05:22:58.961 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 05:22:58.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:58.978 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 05:22:58.978 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 05:22:58.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:22:58.995 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 05:22:58.995 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin[(dfin != '?').all(axis=1)]
2022-08-06 05:22:59.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:23:00.747 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with numpy NaN in dfin and then drop rows which has any column value missing
2022-08-06 05:23:00.748 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 05:23:00.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:23:03.808 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with numpy NaN in dfin and then drop rows which has any missing value
2022-08-06 05:23:03.809 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 05:23:03.823 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:23:07.051 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 05:23:07.052 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?') | (dfin['C'] == '?') | (dfin['D'] == '?')].index)
2022-08-06 05:23:07.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:23:11.198 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 05:23:11.199 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B', 'C', 'D'])
2022-08-06 05:23:11.223 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:11.224 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 05:23:11.224 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop(dfin[dfin.isin(['?'])].dropna(how='all').index)
2022-08-06 05:23:11.237 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:23:13.517 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 05:23:13.518 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 05:23:13.542 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:13.542 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 05:23:13.543 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin.isin(['?'])].dropna(how='all').index)
2022-08-06 05:23:13.557 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:23:15.582 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 05:23:15.583 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 05:23:15.602 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:15.602 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 05:23:15.603 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 05:23:15.620 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:15.621 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 05:23:15.621 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 05:23:15.639 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:15.639 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 05:23:15.639 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 05:23:15.657 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:15.657 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 05:23:15.657 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 05:23:15.676 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:15.676 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 05:23:15.676 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 05:23:15.694 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:15.694 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 05:23:15.694 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 05:23:15.707 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:23:15.731 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:23:17.553 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 05:23:17.554 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?') | (dfin['C'] == '?')].index)
2022-08-06 05:23:17.567 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:23:20.939 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 05:23:20.940 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?') | (dfin['C'] == '?') | (dfin['D'] == '?')].index)
2022-08-06 05:23:20.953 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:23:23.295 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 05:23:23.296 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?').any(axis=1)].index)
2022-08-06 05:23:23.309 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:23:27.088 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 05:23:27.088 | DEBUG    | __main__:run_benchmark:432 - dfin[~dfin.isin(['?']).any(axis=1)]
2022-08-06 05:23:27.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:23:31.920 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 05:23:31.921 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin != '?']
2022-08-06 05:23:31.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:31.945 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 05:23:31.945 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?') | (dfin['C'] == '?') | (dfin['D'] == '?')].index)
2022-08-06 05:23:31.957 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:23:35.988 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 05:23:35.989 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?') | (dfin['C'] == '?') | (dfin['D'] == '?')].index)
2022-08-06 05:23:36.002 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:23:36.024 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 05:23:36.024 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:23:36.025 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:23:36.025 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:23:36.025 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:23:40.129 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 05:23:40.130 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 05:23:40.160 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:40.160 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 05:23:40.161 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 05:23:40.190 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:40.190 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 05:23:40.190 | DEBUG    | __main__:run_benchmark:432 - diff = data.sub(test)
2022-08-06 05:23:40.220 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:40.220 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 05:23:40.220 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 05:23:40.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:40.249 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 05:23:40.249 | DEBUG    | __main__:run_benchmark:432 - data_sub = data.subtract(test)
2022-08-06 05:23:40.278 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:40.279 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 05:23:40.279 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 05:23:40.308 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:40.308 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 05:23:40.308 | DEBUG    | __main__:run_benchmark:432 - (data - test)
2022-08-06 05:23:40.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:40.337 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 05:23:40.337 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 05:23:40.366 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:40.367 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 05:23:40.367 | DEBUG    | __main__:run_benchmark:432 - data = data.sub(test)
2022-08-06 05:23:40.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:40.390 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 05:23:40.390 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 05:23:40.419 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:40.420 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 05:23:40.420 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 05:23:40.449 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:40.449 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 05:23:40.449 | DEBUG    | __main__:run_benchmark:432 - data_sub = data.sub(test)
2022-08-06 05:23:40.478 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:40.478 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 05:23:40.479 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 05:23:40.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:40.508 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 05:23:40.508 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 05:23:40.537 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:40.537 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 05:23:40.537 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 05:23:40.566 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:40.567 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 05:23:40.567 | DEBUG    | __main__:run_benchmark:432 - data.loc[(~ data.index.isin(test.index))]
2022-08-06 05:23:40.581 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:23:44.808 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 05:23:44.808 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 05:23:44.838 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:44.838 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 05:23:44.838 | DEBUG    | __main__:run_benchmark:432 - data = data.sub(test)
2022-08-06 05:23:44.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:44.862 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 05:23:44.862 | DEBUG    | __main__:run_benchmark:432 - data = data.sub(test)
2022-08-06 05:23:44.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:44.885 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 05:23:44.885 | DEBUG    | __main__:run_benchmark:432 - data = data.sub(test)
2022-08-06 05:23:44.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:44.909 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 05:23:44.909 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 05:23:44.938 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:44.939 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 05:23:44.939 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 05:23:44.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:44.968 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 05:23:44.968 | DEBUG    | __main__:run_benchmark:432 - data = data.sub(test)
2022-08-06 05:23:44.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:44.992 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 05:23:44.992 | DEBUG    | __main__:run_benchmark:432 - data_sub = data.sub(test)
2022-08-06 05:23:45.023 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:45.023 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 05:23:45.023 | DEBUG    | __main__:run_benchmark:432 - data = data.sub(test)
2022-08-06 05:23:45.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:45.046 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 05:23:45.046 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 05:23:45.075 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:45.075 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 05:23:45.076 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 05:23:45.104 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:45.105 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 05:23:45.105 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 05:23:45.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:45.134 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 05:23:45.134 | DEBUG    | __main__:run_benchmark:432 - sub = data.sub(test)
2022-08-06 05:23:45.163 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:45.163 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 05:23:45.163 | DEBUG    | __main__:run_benchmark:432 - data = data.sub(test)
2022-08-06 05:23:45.186 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:45.186 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 05:23:45.187 | DEBUG    | __main__:run_benchmark:432 - data = data.drop(test.index)
2022-08-06 05:23:45.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:23:45.222 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 05:23:47.373 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.374 | DEBUG    | __main__:run_benchmark:432 - data.index[data.index.isin(test.index)]
2022-08-06 05:23:47.396 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.396 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.396 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.intersection(test.index)]
2022-08-06 05:23:47.422 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.422 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.422 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 05:23:47.448 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.448 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.448 | DEBUG    | __main__:run_benchmark:432 - data.index[data.index.isin(test.index)].tolist()
2022-08-06 05:23:47.469 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.469 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.469 | DEBUG    | __main__:run_benchmark:432 - data.index[data.index.isin(test.index)]
2022-08-06 05:23:47.490 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.490 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.490 | DEBUG    | __main__:run_benchmark:432 - data.index.isin(test.index)
2022-08-06 05:23:47.510 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.511 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.511 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:23:47.537 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.537 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.537 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 05:23:47.563 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.564 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.564 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 05:23:47.590 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.590 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.590 | DEBUG    | __main__:run_benchmark:432 - data.index.isin(test.index)
2022-08-06 05:23:47.611 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.611 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.611 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:23:47.637 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.637 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.637 | DEBUG    | __main__:run_benchmark:432 - data.index[data.index.isin(test.index)]
2022-08-06 05:23:47.658 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.658 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.658 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 05:23:47.684 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.685 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.685 | DEBUG    | __main__:run_benchmark:432 - data.index[data.index.isin(test.index)]
2022-08-06 05:23:47.705 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.705 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.706 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 05:23:47.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.732 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.732 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 05:23:47.757 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.758 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.758 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:23:47.784 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.784 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.784 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 05:23:47.810 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.810 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.810 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 05:23:47.836 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:47.836 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 05:23:47.836 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:23:47.862 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:51.484 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows in df data that are in df test
2022-08-06 05:23:51.484 | DEBUG    | __main__:run_benchmark:432 - df = data.drop(test.index)
2022-08-06 05:23:51.500 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:23:56.263 | DEBUG    | __main__:run_benchmark:431 - Query: Given data and test, return all rows in data which are not in test
2022-08-06 05:23:56.264 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:23:56.264 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:23:56.265 | DEBUG    | __main__:run_benchmark:431 - Query: Given data and test, return all rows in data which are not in test
2022-08-06 05:23:56.265 | DEBUG    | __main__:run_benchmark:432 - data[~data.isin(test).all(1)]
2022-08-06 05:23:56.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:24:00.580 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return all rows in data which are not in test
2022-08-06 05:24:00.581 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:24:00.581 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:00.582 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return all rows in data which are not in test
2022-08-06 05:24:00.582 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:24:00.583 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:00.583 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return all rows in data which are not in test
2022-08-06 05:24:00.583 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:24:00.583 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:00.583 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return all rows in data which are not in test
2022-08-06 05:24:00.583 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:24:00.583 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:00.584 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return all rows in data which are not in test
2022-08-06 05:24:00.584 | DEBUG    | __main__:run_benchmark:432 - data[~data.isin(test).all(1)]
2022-08-06 05:24:00.600 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:24:04.919 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, select all rows in data which are not in test
2022-08-06 05:24:04.920 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:24:04.920 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:04.921 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, select all rows in data which are not in test
2022-08-06 05:24:04.921 | DEBUG    | __main__:run_benchmark:432 - data[~data.isin(test).all(1)]
2022-08-06 05:24:04.937 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:24:10.115 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, select all rows in data which are not present in test
2022-08-06 05:24:10.116 | DEBUG    | __main__:run_benchmark:432 - data[~data.isin(test).all(1)]
2022-08-06 05:24:10.132 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:24:12.647 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 05:24:12.647 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 05:24:12.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:12.678 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 05:24:12.679 | DEBUG    | __main__:run_benchmark:432 - data.drop(test.index)
2022-08-06 05:24:12.692 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:24:12.717 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:24:14.216 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 05:24:14.216 | DEBUG    | __main__:run_benchmark:432 - train = data.drop(data.index[rows])
2022-08-06 05:24:14.219 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:14.220 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 05:24:14.220 | DEBUG    | __main__:run_benchmark:432 - data.drop(train.index)
2022-08-06 05:24:14.223 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:14.223 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 05:24:14.223 | DEBUG    | __main__:run_benchmark:432 - data.drop(train.index, axis=0)
2022-08-06 05:24:14.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:14.227 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 05:24:14.227 | DEBUG    | __main__:run_benchmark:432 - data = data.drop(train.index)
2022-08-06 05:24:14.230 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:14.230 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 05:24:14.231 | DEBUG    | __main__:run_benchmark:432 - data = data.drop(train.index)
2022-08-06 05:24:14.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:14.234 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 05:24:14.234 | DEBUG    | __main__:run_benchmark:432 - data.drop(train.index, inplace=True)
2022-08-06 05:24:14.238 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:14.238 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 05:24:14.238 | DEBUG    | __main__:run_benchmark:432 - data.drop(train.index)
2022-08-06 05:24:14.242 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:14.242 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 05:24:14.242 | DEBUG    | __main__:run_benchmark:432 - train = data.drop(test.index)
2022-08-06 05:24:14.257 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:24:14.278 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 05:24:14.279 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:24:14.279 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:24:18.629 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 05:24:18.629 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 05:24:18.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:18.632 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 05:24:18.632 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.loc[:,['0','1','2']].idxmax(axis=1)
2022-08-06 05:24:18.633 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:18.634 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 05:24:18.634 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.apply(lambda x: np.argmax([x[0], x[1], x[2]]), axis=1)
2022-08-06 05:24:18.645 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:24:21.003 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 05:24:21.004 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.loc[:, '0':'2'].idxmax(axis=1)
2022-08-06 05:24:21.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:21.007 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 05:24:21.008 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.loc[:,['0','1','2']].idxmax(axis=1)
2022-08-06 05:24:21.009 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:21.009 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 05:24:21.009 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.apply(lambda x: np.argmax([x[0], x[1], x[2]]), axis=1)
2022-08-06 05:24:21.020 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:24:24.276 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 05:24:24.276 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.apply(lambda x: x.idxmax(), axis=1)
2022-08-06 05:24:24.288 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:24.288 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 05:24:24.288 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.idxmax(axis=1)
2022-08-06 05:24:24.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:24.300 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 05:24:24.300 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.idxmax(axis=1)
2022-08-06 05:24:24.311 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:24.311 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 05:24:24.311 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.idxmax(axis=1)
2022-08-06 05:24:24.322 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:24.323 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 05:24:24.323 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.idxmax(axis=1)
2022-08-06 05:24:24.334 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:24.334 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 05:24:24.334 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.loc[:,0:2].idxmax(axis=1)
2022-08-06 05:24:24.345 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:24:24.368 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:24:24.368 | DEBUG    | __main__:run:515 - Number of queries: 17
2022-08-06 05:24:27.469 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 05:24:27.470 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 05:24:27.485 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:27.485 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 05:24:27.485 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 05:24:27.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:27.499 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 05:24:27.499 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(max, axis=1)
2022-08-06 05:24:27.513 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:27.513 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 05:24:27.513 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.max(dfin, axis=1)
2022-08-06 05:24:27.527 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:27.527 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 05:24:27.527 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1).values
2022-08-06 05:24:27.541 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:27.541 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 05:24:27.541 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 05:24:27.555 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:27.555 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 05:24:27.555 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 05:24:27.569 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:27.569 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 05:24:27.569 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 05:24:27.582 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:27.583 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 05:24:27.583 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.idxmax(1)
2022-08-06 05:24:27.596 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:27.597 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 05:24:27.597 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 05:24:27.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:27.610 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 05:24:27.611 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(1)
2022-08-06 05:24:27.624 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:27.624 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 05:24:27.624 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, :-1].max(axis=1)
2022-08-06 05:24:27.638 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:27.638 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 05:24:27.638 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(lambda row: row.max(), axis=1)
2022-08-06 05:24:27.652 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:27.652 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 05:24:27.653 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 05:24:27.666 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:27.666 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 05:24:27.667 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.amax(dfin, axis=1)
2022-08-06 05:24:27.680 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:27.680 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 05:24:27.680 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 05:24:27.694 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:27.694 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 05:24:27.694 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[dfin.columns[:-1]].idxmax(axis=1)
2022-08-06 05:24:27.708 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:24:30.321 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:30.322 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, 0:5].idxmax(axis=1)
2022-08-06 05:24:30.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:24:35.122 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:35.123 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.max(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 05:24:35.126 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:35.126 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:35.126 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, 0:5].idxmax(axis=1)
2022-08-06 05:24:35.140 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:24:38.718 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.719 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, 0:5].max(axis=1)
2022-08-06 05:24:38.735 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.735 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.735 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.argmax(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 05:24:38.737 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.737 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.737 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].values.max(1)
2022-08-06 05:24:38.738 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.739 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.739 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.max(dfin[['0', '1', '2', '3', '4']])
2022-08-06 05:24:38.740 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.740 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.740 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 05:24:38.742 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.742 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.742 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 05:24:38.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.744 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.744 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(max, axis=1)
2022-08-06 05:24:38.758 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.758 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.759 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 05:24:38.760 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.760 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.760 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.max(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 05:24:38.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.762 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.762 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 05:24:38.764 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.764 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.764 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(np.max, axis=1)
2022-08-06 05:24:38.778 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.778 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.779 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 05:24:38.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.780 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.780 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.max(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 05:24:38.782 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.782 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.782 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 05:24:38.784 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.784 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.784 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 05:24:38.798 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.798 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.798 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 05:24:38.800 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.800 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.800 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 05:24:38.814 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.814 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.814 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 05:24:38.816 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.816 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.816 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 05:24:38.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:38.818 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:38.818 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, 0:5].max(axis=1)
2022-08-06 05:24:38.832 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:42.639 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:42.640 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:42.643 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:42.643 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:42.643 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:42.645 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:42.645 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:42.645 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(lambda row: np.argmax([row['0'], row['1'], row['2'], row['3'], row['4']]), axis=1)
2022-08-06 05:24:42.647 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:42.647 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:42.647 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:42.648 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:42.649 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:42.649 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 05:24:42.650 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:42.650 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:42.651 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.argmax(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 05:24:42.652 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:42.652 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 05:24:42.652 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, 0:5].idxmax(axis=1)
2022-08-06 05:24:42.666 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:24:47.424 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 05:24:47.425 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(lambda row: np.argmax(row[['0', '1', '2', '3', '4']]), axis=1)
2022-08-06 05:24:47.428 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:47.428 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 05:24:47.429 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.argmax(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 05:24:47.430 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:47.430 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 05:24:47.430 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(lambda row: np.argmax([row['0'], row['1'], row['2'], row['3'], row['4']]), axis=1)
2022-08-06 05:24:47.432 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:47.432 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 05:24:47.432 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:47.434 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:47.434 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 05:24:47.434 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 05:24:47.435 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:47.436 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 05:24:47.436 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.argmax(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 05:24:47.437 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:47.437 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 05:24:47.438 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, 0:5].idxmax(axis=1)
2022-08-06 05:24:47.452 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:24:52.935 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.936 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, ['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 05:24:52.939 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.939 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.939 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:52.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.941 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.941 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 05:24:52.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.943 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.943 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:52.944 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.944 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.945 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)]
2022-08-06 05:24:52.946 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.946 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.946 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:52.948 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.948 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.948 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:52.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.950 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.950 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(lambda x: x.idxmax(), axis=1)
2022-08-06 05:24:52.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.964 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.965 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:52.966 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.966 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.966 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:52.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.968 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.968 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:52.969 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.969 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.970 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, ['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 05:24:52.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.971 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.971 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:52.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.973 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.973 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:52.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.975 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.975 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, ['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 05:24:52.976 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.976 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.977 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[dfin.columns[0:4]].idxmax(axis=1)
2022-08-06 05:24:52.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.991 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.991 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:52.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.992 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.993 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:52.994 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.994 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.994 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:52.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:52.996 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 05:24:52.996 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[dfin.columns[0:5]].idxmax(axis=1)
2022-08-06 05:24:53.010 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:24:58.124 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 05:24:58.124 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 05:24:58.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:58.127 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 05:24:58.127 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 05:24:58.129 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:58.129 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 05:24:58.129 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, ['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 05:24:58.131 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:58.131 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 05:24:58.131 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 05:24:58.133 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:58.133 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 05:24:58.133 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:58.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:58.135 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 05:24:58.135 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.argmax(dfin[['0', '1', '2', '3', '4']].values, axis=1)
2022-08-06 05:24:58.136 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:58.137 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 05:24:58.137 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 05:24:58.138 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:58.138 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 05:24:58.139 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:58.140 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:58.140 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 05:24:58.140 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:58.142 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:58.142 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 05:24:58.142 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 05:24:58.144 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:58.144 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 05:24:58.144 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 05:24:58.146 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:58.146 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 05:24:58.146 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 05:24:58.148 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:58.148 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 05:24:58.148 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 05:24:58.149 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:58.150 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 05:24:58.150 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 05:24:58.151 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:58.151 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 05:24:58.152 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 05:24:58.153 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:58.153 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 05:24:58.154 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.argmax(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 05:24:58.155 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:24:58.155 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 05:24:58.155 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.drop('target', axis=1).idxmax(axis=1)
2022-08-06 05:24:58.170 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:25:02.091 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 05:25:02.092 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.drop('target', axis=1).idxmax(axis=1)
2022-08-06 05:25:02.107 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:25:06.085 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the index with maximum value among columns 0, 1, 2, 3 and 4
2022-08-06 05:25:06.086 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, 0:4].idxmax(axis=1)
2022-08-06 05:25:06.100 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:25:06.126 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:25:06.126 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:25:08.771 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.772 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[dfin.index != 'GoldTarget'].idxmax(axis=1)
2022-08-06 05:25:08.786 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:08.786 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.786 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[:, dfin.columns != 'GoldTarget'].idxmax(axis=1)
2022-08-06 05:25:08.798 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:08.798 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.798 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 05:25:08.810 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:08.810 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.810 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[dfin.index != 'GoldTarget'].idxmax(axis=1)
2022-08-06 05:25:08.822 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:08.822 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.823 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[:, dfin.columns != 'GoldTarget'].idxmax(axis=1)
2022-08-06 05:25:08.835 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:08.835 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.835 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 05:25:08.847 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:08.847 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.847 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 05:25:08.859 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:08.859 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.859 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[dfin.index != 'GoldTarget'].idxmax(axis=1)
2022-08-06 05:25:08.871 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:08.871 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.871 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[dfin.index != 'GoldTarget'].idxmax(axis=1)
2022-08-06 05:25:08.883 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:08.883 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.883 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[dfin.index != 'GoldTarget'].idxmax(axis=1)
2022-08-06 05:25:08.895 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:08.895 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.896 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 05:25:08.908 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:08.908 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.908 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 05:25:08.920 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:08.920 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.920 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 05:25:08.932 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:08.932 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.932 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 05:25:08.944 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:08.944 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.944 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[dfin.index != 'GoldTarget'].idxmax(axis=1)
2022-08-06 05:25:08.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:08.956 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.956 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[dfin.index != 'GoldTarget'].idxmax(axis=1)
2022-08-06 05:25:08.969 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:08.969 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.969 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 05:25:08.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:08.981 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.981 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 05:25:08.993 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:08.993 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:08.993 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[:, dfin.columns != 'GoldTarget'].idxmax(axis=1)
2022-08-06 05:25:09.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:25:09.005 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 05:25:09.005 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 05:25:09.017 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:32.111 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval1
2022-08-06 05:26:32.112 | DEBUG    | __main__:run:495 - Found 68 benchmarks in PandasEval1
2022-08-06 05:26:32.112 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 05:26:32.112 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.112 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.112 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 05:26:32.113 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.113 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.113 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 05:26:32.113 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.113 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.113 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 05:26:32.113 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.114 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.114 | DEBUG    | __main__:run:525 - Skipping benchmark 3 as result already exists
2022-08-06 05:26:32.114 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 05:26:32.114 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.114 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.114 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 05:26:32.114 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.114 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.114 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 05:26:32.114 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.115 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.115 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 05:26:32.115 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.115 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.115 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 05:26:32.115 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.115 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.115 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 05:26:32.115 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.116 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.116 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 05:26:32.116 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.116 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.116 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 05:26:32.116 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.116 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.116 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:26:32.116 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 05:26:32.117 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.117 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.117 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 05:26:32.117 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.117 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.117 | DEBUG    | __main__:run:525 - Skipping benchmark 13 as result already exists
2022-08-06 05:26:32.117 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 05:26:32.117 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.117 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.117 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 05:26:32.118 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.118 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.118 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 05:26:32.118 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.118 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.118 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 05:26:32.118 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.118 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.119 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 05:26:32.119 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.119 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.119 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:26:32.119 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 05:26:32.119 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.119 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.120 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 05:26:32.120 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.120 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.120 | DEBUG    | __main__:run:508 - Running benchmark 21
2022-08-06 05:26:32.120 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.120 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.120 | DEBUG    | __main__:run:508 - Running benchmark 22
2022-08-06 05:26:32.121 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.121 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.121 | DEBUG    | __main__:run:525 - Skipping benchmark 22 as result already exists
2022-08-06 05:26:32.121 | DEBUG    | __main__:run:508 - Running benchmark 23
2022-08-06 05:26:32.121 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.121 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.121 | DEBUG    | __main__:run:508 - Running benchmark 24
2022-08-06 05:26:32.121 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.122 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.122 | DEBUG    | __main__:run:508 - Running benchmark 25
2022-08-06 05:26:32.122 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.122 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.122 | DEBUG    | __main__:run:508 - Running benchmark 26
2022-08-06 05:26:32.122 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.122 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.122 | DEBUG    | __main__:run:525 - Skipping benchmark 26 as result already exists
2022-08-06 05:26:32.122 | DEBUG    | __main__:run:508 - Running benchmark 27
2022-08-06 05:26:32.123 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.123 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.123 | DEBUG    | __main__:run:508 - Running benchmark 28
2022-08-06 05:26:32.123 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.123 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.123 | DEBUG    | __main__:run:525 - Skipping benchmark 28 as result already exists
2022-08-06 05:26:32.123 | DEBUG    | __main__:run:508 - Running benchmark 29
2022-08-06 05:26:32.123 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.124 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.124 | DEBUG    | __main__:run:508 - Running benchmark 30
2022-08-06 05:26:32.124 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.124 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.124 | DEBUG    | __main__:run:525 - Skipping benchmark 30 as result already exists
2022-08-06 05:26:32.124 | DEBUG    | __main__:run:508 - Running benchmark 31
2022-08-06 05:26:32.124 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.124 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.124 | DEBUG    | __main__:run:508 - Running benchmark 32
2022-08-06 05:26:32.125 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.125 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.125 | DEBUG    | __main__:run:508 - Running benchmark 33
2022-08-06 05:26:32.125 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.125 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.125 | DEBUG    | __main__:run:508 - Running benchmark 34
2022-08-06 05:26:32.125 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.125 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.125 | DEBUG    | __main__:run:525 - Skipping benchmark 34 as result already exists
2022-08-06 05:26:32.126 | DEBUG    | __main__:run:508 - Running benchmark 35
2022-08-06 05:26:32.126 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.126 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.126 | DEBUG    | __main__:run:525 - Skipping benchmark 35 as result already exists
2022-08-06 05:26:32.126 | DEBUG    | __main__:run:508 - Running benchmark 36
2022-08-06 05:26:32.126 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.126 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.126 | DEBUG    | __main__:run:525 - Skipping benchmark 36 as result already exists
2022-08-06 05:26:32.126 | DEBUG    | __main__:run:508 - Running benchmark 37
2022-08-06 05:26:32.127 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.127 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.127 | DEBUG    | __main__:run:525 - Skipping benchmark 37 as result already exists
2022-08-06 05:26:32.127 | DEBUG    | __main__:run:508 - Running benchmark 38
2022-08-06 05:26:32.127 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.127 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.127 | DEBUG    | __main__:run:508 - Running benchmark 39
2022-08-06 05:26:32.127 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.127 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.128 | DEBUG    | __main__:run:508 - Running benchmark 40
2022-08-06 05:26:32.128 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.128 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.128 | DEBUG    | __main__:run:525 - Skipping benchmark 40 as result already exists
2022-08-06 05:26:32.128 | DEBUG    | __main__:run:508 - Running benchmark 41
2022-08-06 05:26:32.128 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.128 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.128 | DEBUG    | __main__:run:525 - Skipping benchmark 41 as result already exists
2022-08-06 05:26:32.128 | DEBUG    | __main__:run:508 - Running benchmark 42
2022-08-06 05:26:32.129 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.129 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.129 | DEBUG    | __main__:run:525 - Skipping benchmark 42 as result already exists
2022-08-06 05:26:32.129 | DEBUG    | __main__:run:508 - Running benchmark 43
2022-08-06 05:26:32.129 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.129 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.129 | DEBUG    | __main__:run:525 - Skipping benchmark 43 as result already exists
2022-08-06 05:26:32.129 | DEBUG    | __main__:run:508 - Running benchmark 44
2022-08-06 05:26:32.129 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.130 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.130 | DEBUG    | __main__:run:508 - Running benchmark 45
2022-08-06 05:26:32.130 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.130 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.130 | DEBUG    | __main__:run:525 - Skipping benchmark 45 as result already exists
2022-08-06 05:26:32.130 | DEBUG    | __main__:run:508 - Running benchmark 46
2022-08-06 05:26:32.130 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.130 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.130 | DEBUG    | __main__:run:508 - Running benchmark 47
2022-08-06 05:26:32.131 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.131 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.131 | DEBUG    | __main__:run:508 - Running benchmark 48
2022-08-06 05:26:32.131 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.131 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.131 | DEBUG    | __main__:run:525 - Skipping benchmark 48 as result already exists
2022-08-06 05:26:32.131 | DEBUG    | __main__:run:508 - Running benchmark 49
2022-08-06 05:26:32.131 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.131 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.132 | DEBUG    | __main__:run:525 - Skipping benchmark 49 as result already exists
2022-08-06 05:26:32.132 | DEBUG    | __main__:run:508 - Running benchmark 50
2022-08-06 05:26:32.132 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.132 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.132 | DEBUG    | __main__:run:525 - Skipping benchmark 50 as result already exists
2022-08-06 05:26:32.132 | DEBUG    | __main__:run:508 - Running benchmark 51
2022-08-06 05:26:32.132 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.132 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.132 | DEBUG    | __main__:run:508 - Running benchmark 52
2022-08-06 05:26:32.133 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.133 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.133 | DEBUG    | __main__:run:508 - Running benchmark 53
2022-08-06 05:26:32.133 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.133 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:32.133 | DEBUG    | __main__:run:508 - Running benchmark 54
2022-08-06 05:26:32.133 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:32.133 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:40.059 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.059 | DEBUG    | __main__:run_benchmark:432 - for i in range(len(df1)):
2022-08-06 05:26:40.059 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.059 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.060 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:26:40.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.060 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.060 | DEBUG    | __main__:run_benchmark:432 - for i in range(len(df1)):
2022-08-06 05:26:40.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.060 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.060 | DEBUG    | __main__:run_benchmark:432 - #  For every row in df1, update 'common' column to False if value in column 'A' of df1 does not lie in column 'B' of df2
2022-08-06 05:26:40.061 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.061 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.061 | DEBUG    | __main__:run_benchmark:432 - for i in range(len(df1)):
2022-08-06 05:26:40.061 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.061 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.061 | DEBUG    | __main__:run_benchmark:432 - #  For every row in df2, update 'common' column to True if value in column 'B' of df2 also lies in column 'A' of df1
2022-08-06 05:26:40.061 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.061 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.061 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:26:40.062 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.062 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.062 | DEBUG    | __main__:run_benchmark:432 - for i in range(len(df1)):
2022-08-06 05:26:40.062 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.062 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.062 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:26:40.062 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.062 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.062 | DEBUG    | __main__:run_benchmark:432 - for i in range(len(df1)):
2022-08-06 05:26:40.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.063 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.063 | DEBUG    | __main__:run_benchmark:432 - for i in range(len(df1)):
2022-08-06 05:26:40.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.063 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.063 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:26:40.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.063 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.064 | DEBUG    | __main__:run_benchmark:432 - #  For every row in df1, update 'common' column to False if value in column 'A' of df1 does not lie in column 'B' of df2
2022-08-06 05:26:40.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.064 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.064 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:26:40.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.064 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.064 | DEBUG    | __main__:run_benchmark:432 - #  For every row in df2, update 'common' column to True if value in column 'B' of df2 also lies in column 'A' of df1
2022-08-06 05:26:40.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.064 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.065 | DEBUG    | __main__:run_benchmark:432 - for i in range(len(df1)):
2022-08-06 05:26:40.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.065 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.065 | DEBUG    | __main__:run_benchmark:432 - #  For every row in df2, update 'common' column to True if value in column 'B' of df2 also lies in column 'A' of df1
2022-08-06 05:26:40.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.065 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.065 | DEBUG    | __main__:run_benchmark:432 - #  For every row in df1, update 'common' column to False if value in column 'A' of df1 does not lie in column 'B' of df2
2022-08-06 05:26:40.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.066 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.066 | DEBUG    | __main__:run_benchmark:432 - for i in range(len(df1)):
2022-08-06 05:26:40.066 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.066 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 05:26:40.066 | DEBUG    | __main__:run_benchmark:432 - for i in range(len(df1)):
2022-08-06 05:26:40.066 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:40.092 | DEBUG    | __main__:run:508 - Running benchmark 55
2022-08-06 05:26:40.092 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:40.092 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:40.092 | DEBUG    | __main__:run:508 - Running benchmark 56
2022-08-06 05:26:40.092 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:40.093 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:40.093 | DEBUG    | __main__:run:508 - Running benchmark 57
2022-08-06 05:26:40.093 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:40.093 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:40.093 | DEBUG    | __main__:run:508 - Running benchmark 58
2022-08-06 05:26:40.093 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:40.093 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:40.093 | DEBUG    | __main__:run:508 - Running benchmark 59
2022-08-06 05:26:40.093 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:40.094 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:42.177 | DEBUG    | __main__:run_benchmark:431 - Query: Increase 'count' column by 1 when column 'pet' contains substring 'dog' or 'cat'
2022-08-06 05:26:42.178 | DEBUG    | __main__:run_benchmark:432 - df['count'] = df['count'] + (df['pet'].str.contains('dog|cat'))
2022-08-06 05:26:42.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:26:42.213 | DEBUG    | __main__:run:508 - Running benchmark 60
2022-08-06 05:26:42.213 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:42.214 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:42.214 | DEBUG    | __main__:run:525 - Skipping benchmark 60 as result already exists
2022-08-06 05:26:42.214 | DEBUG    | __main__:run:508 - Running benchmark 62
2022-08-06 05:26:42.214 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:42.214 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:43.873 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.874 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].value_counts()
2022-08-06 05:26:43.877 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.877 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.878 | DEBUG    | __main__:run_benchmark:432 - df.pet1.str.count('mouse').sum()
2022-08-06 05:26:43.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.879 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.879 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].str.contains('mouse').sum()
2022-08-06 05:26:43.880 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.880 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.881 | DEBUG    | __main__:run_benchmark:432 - df.pet1.str.contains('mouse').sum()
2022-08-06 05:26:43.881 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.882 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.882 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].str.count('mouse')
2022-08-06 05:26:43.883 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.883 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.883 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].isin('mouse').sum()
2022-08-06 05:26:43.884 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.884 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.884 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].value_counts()
2022-08-06 05:26:43.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.885 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.885 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].value_counts()
2022-08-06 05:26:43.886 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.887 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.887 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].apply((lambda x: x.count('mouse')))
2022-08-06 05:26:43.888 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.888 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.888 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].str.count('mouse').sum()
2022-08-06 05:26:43.889 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.889 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.889 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].value_counts()
2022-08-06 05:26:43.891 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.891 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.891 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].value_counts()['mouse']
2022-08-06 05:26:43.892 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.892 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.892 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].str.lower().str.count('mouse')
2022-08-06 05:26:43.894 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.894 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.894 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].str.match('mouse').sum()
2022-08-06 05:26:43.895 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.895 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.895 | DEBUG    | __main__:run_benchmark:432 - df.apply((lambda x: x.count('mouse')))
2022-08-06 05:26:43.896 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.896 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.897 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].str.contains('mouse').sum()
2022-08-06 05:26:43.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.898 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.898 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].str.contains('mouse').value_counts()
2022-08-06 05:26:43.899 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.899 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.899 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].str.count('mouse')
2022-08-06 05:26:43.900 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.901 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.901 | DEBUG    | __main__:run_benchmark:432 - df.pet1.str.contains('mouse').sum()
2022-08-06 05:26:43.902 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.902 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 05:26:43.902 | DEBUG    | __main__:run_benchmark:432 - df.loc[df['pet1'].str.contains('mouse')].pet1.count()
2022-08-06 05:26:43.903 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:43.927 | DEBUG    | __main__:run:508 - Running benchmark 63
2022-08-06 05:26:43.927 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:43.928 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:43.928 | DEBUG    | __main__:run:525 - Skipping benchmark 63 as result already exists
2022-08-06 05:26:43.928 | DEBUG    | __main__:run:508 - Running benchmark 64
2022-08-06 05:26:43.928 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:43.928 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:43.929 | DEBUG    | __main__:run:508 - Running benchmark 65
2022-08-06 05:26:43.929 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:43.929 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:43.929 | DEBUG    | __main__:run:525 - Skipping benchmark 65 as result already exists
2022-08-06 05:26:43.929 | DEBUG    | __main__:run:508 - Running benchmark 66
2022-08-06 05:26:43.929 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:43.930 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:43.930 | DEBUG    | __main__:run:525 - Skipping benchmark 66 as result already exists
2022-08-06 05:26:43.930 | DEBUG    | __main__:run:508 - Running benchmark 67
2022-08-06 05:26:43.930 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:26:43.930 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:43.930 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval2
2022-08-06 05:26:43.931 | DEBUG    | __main__:run:495 - Found 21 benchmarks in PandasEval2
2022-08-06 05:26:43.931 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 05:26:43.931 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:26:43.931 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:26:43.931 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:26:43.931 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:26:43.931 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:26:43.931 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:26:43.932 | DEBUG    | __main__:run:525 - Skipping benchmark 0 as result already exists
2022-08-06 05:26:43.932 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 05:26:43.932 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:26:43.932 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:26:43.932 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:26:43.932 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:26:43.932 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:26:43.932 | DEBUG    | __main__:run:525 - Skipping benchmark 1 as result already exists
2022-08-06 05:26:45.337 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin such that colA is divisible by 5
2022-08-06 05:26:45.338 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['colA'] % 5) == 0)]
2022-08-06 05:26:45.378 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:26:45.412 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:26:45.413 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 05:26:45.413 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:26:45.413 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:26:45.413 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:46.516 | DEBUG    | __main__:run_benchmark:431 - Query: Append dataframe to itself twice
2022-08-06 05:26:46.517 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin], axis=0, sort=False)
2022-08-06 05:26:46.525 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:26:46.550 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 05:26:46.551 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:46.551 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:46.551 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:46.551 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:46.551 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:46.552 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:46.552 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:46.552 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:46.552 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:46.552 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:46.552 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:46.552 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 05:26:46.552 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:46.553 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:46.553 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:47.447 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to itself
2022-08-06 05:26:47.448 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin)
2022-08-06 05:26:47.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:26:47.522 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:47.522 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:47.522 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:47.522 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:47.523 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 05:26:47.523 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:47.523 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:47.523 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:47.523 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:47.523 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:47.523 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:47.523 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:48.436 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin, then append dfin to it
2022-08-06 05:26:48.437 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin).append(dfin)
2022-08-06 05:26:48.450 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:26:48.472 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 05:26:48.472 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:48.473 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:48.473 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:48.473 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:48.473 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:48.473 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:48.473 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:48.474 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:48.474 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:48.474 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:48.474 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:26:48.474 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 05:26:48.474 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:26:48.474 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:26:48.475 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 05:26:48.475 | DEBUG    | __main__:run:525 - Skipping benchmark 3 as result already exists
2022-08-06 05:26:48.475 | DEBUG    | __main__:run:525 - Skipping benchmark 3 as result already exists
2022-08-06 05:26:48.475 | DEBUG    | __main__:run:525 - Skipping benchmark 3 as result already exists
2022-08-06 05:26:49.674 | DEBUG    | __main__:run_benchmark:431 - Query: return second entry of column 'colC'
2022-08-06 05:26:49.675 | DEBUG    | __main__:run_benchmark:432 - dfin['colC'][1]
2022-08-06 05:26:49.677 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:26:49.701 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:26:49.701 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 05:26:49.701 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:26:50.821 | DEBUG    | __main__:run_benchmark:431 - Query: return third value at column 'gamma'
2022-08-06 05:26:50.821 | DEBUG    | __main__:run_benchmark:432 - dfin['gamma'][2]
2022-08-06 05:26:50.824 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:26:50.846 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 05:26:50.846 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:26:50.847 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:26:50.847 | DEBUG    | __main__:run:525 - Skipping benchmark 4 as result already exists
2022-08-06 05:26:50.847 | DEBUG    | __main__:run:525 - Skipping benchmark 4 as result already exists
2022-08-06 05:26:50.847 | DEBUG    | __main__:run:525 - Skipping benchmark 4 as result already exists
2022-08-06 05:26:50.847 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:26:52.569 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' lie are less than 34 or are greater than 70 of table dfin
2022-08-06 05:26:52.570 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70))]
2022-08-06 05:26:52.613 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:26:53.988 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70
2022-08-06 05:26:53.989 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70))]
2022-08-06 05:26:54.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:54.005 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70
2022-08-06 05:26:54.005 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70))]
2022-08-06 05:26:54.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:54.019 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70
2022-08-06 05:26:54.019 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70))]
2022-08-06 05:26:54.028 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:26:54.054 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:26:54.054 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:26:55.604 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 05:26:55.605 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) & (dfin['gamma'] > 53))]
2022-08-06 05:26:55.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:26:55.657 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 05:26:55.657 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) | (dfin['gamma'] > 53))]
2022-08-06 05:26:55.670 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:26:57.451 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is not between 40 and 53
2022-08-06 05:26:57.452 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['gamma'] < 40) | (dfin['gamma'] > 53)]
2022-08-06 05:26:57.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:26:59.027 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in column 'gamma' is less than 40 and select all rows where the entry in column 'gamma' is more than 53
2022-08-06 05:26:59.028 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) | (dfin['gamma'] > 53))]
2022-08-06 05:26:59.039 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:00.538 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the any entry in column 'gamma' is not between 40 and 53
2022-08-06 05:27:00.539 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['gamma'] >= 40) & (dfin['gamma'] <= 53))]
2022-08-06 05:27:00.582 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:00.615 | DEBUG    | __main__:run:525 - Skipping benchmark 4 as result already exists
2022-08-06 05:27:02.071 | DEBUG    | __main__:run_benchmark:431 - Query: From dfin, filter rows with column gamma less than 40 or more than 53
2022-08-06 05:27:02.072 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['gamma'] < 40) | (dfin['gamma'] > 53)]
2022-08-06 05:27:02.082 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:02.106 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:27:03.731 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with value of column 'bar' between 38 and 60
2022-08-06 05:27:03.732 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 60) & (dfin['bar'] > 38)]
2022-08-06 05:27:03.789 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:03.789 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with value of column 'bar' between 38 and 60
2022-08-06 05:27:03.789 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar'] >= 38) & (dfin['bar'] <= 60)]
2022-08-06 05:27:03.809 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:03.810 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with value of column 'bar' between 38 and 60
2022-08-06 05:27:03.810 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 38) & (dfin['bar'] < 60))]
2022-08-06 05:27:03.819 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:03.846 | DEBUG    | __main__:run:525 - Skipping benchmark 4 as result already exists
2022-08-06 05:27:03.846 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 05:27:03.846 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:27:03.846 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:27:03.847 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.847 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.847 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.847 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.847 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 05:27:03.847 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.847 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.848 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.848 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.848 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.848 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.848 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.848 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.848 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.849 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.849 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.849 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.849 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.849 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.849 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.849 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.850 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:27:03.850 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.850 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.850 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:03.850 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:27:05.989 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where 'alpha' is equal to 4 and 'gamma' is less than 40 or greater than 53
2022-08-06 05:27:05.990 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] == 4) & ((dfin['gamma'] < 40) | (dfin['gamma'] > 53)))]
2022-08-06 05:27:06.000 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:06.024 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:06.024 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:06.025 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 05:27:06.025 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:06.025 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:06.025 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:06.025 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:08.056 | DEBUG    | __main__:run_benchmark:431 - Query: get all rows with column 'foo' having value 11 and column 'bar' value greater than 60 or less than 38
2022-08-06 05:27:08.057 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] == 11) & ((dfin['bar'] > 60) | (dfin['bar'] < 38)))]
2022-08-06 05:27:08.068 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:08.091 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:08.092 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:27:08.092 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 05:27:08.092 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 05:27:08.092 | DEBUG    | __main__:run:515 - Number of queries: 27
2022-08-06 05:27:10.340 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'
2022-08-06 05:27:10.341 | DEBUG    | __main__:run_benchmark:432 - dfin1[~ dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:27:10.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:12.600 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows in input 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'
2022-08-06 05:27:12.601 | DEBUG    | __main__:run_benchmark:432 - dfin1[(~ dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 05:27:12.649 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:14.965 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin1' where value in column 'alpha' equals to that in column 'alpha' in 'dfin2'
2022-08-06 05:27:14.966 | DEBUG    | __main__:run_benchmark:432 - dfin1[~ dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:27:14.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:17.204 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.205 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] == dfin2['alpha'])]
2022-08-06 05:27:17.209 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.209 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.209 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin2['alpha']]
2022-08-06 05:27:17.212 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.212 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.212 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] == dfin2.iloc[i]['alpha'])]
2022-08-06 05:27:17.215 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.215 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.215 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'].unique())]
2022-08-06 05:27:17.237 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.237 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.237 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:27:17.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.258 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.259 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:27:17.280 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.280 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.280 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] == dfin2.iloc[0]['alpha'])]
2022-08-06 05:27:17.301 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.301 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.301 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin2['alpha'] == dfin1['alpha'])]
2022-08-06 05:27:17.304 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.304 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.305 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:27:17.326 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.326 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.326 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:27:17.347 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.347 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.347 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:27:17.368 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.368 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.368 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:27:17.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.390 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.390 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:27:17.411 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.411 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.411 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:27:17.432 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.433 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.433 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin2['alpha'] == dfin1['alpha'])]
2022-08-06 05:27:17.435 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.436 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.436 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'] == dfin2['alpha'])]
2022-08-06 05:27:17.439 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.439 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.439 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:27:17.460 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.460 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.460 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin2['alpha'] == dfin1['alpha'])]
2022-08-06 05:27:17.463 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.463 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.463 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:27:17.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:17.485 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 05:27:17.485 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'].to_list())].reset_index()
2022-08-06 05:27:17.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:19.000 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2 and remove them from dfin1
2022-08-06 05:27:19.001 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:27:19.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:20.632 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows of dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 05:27:20.632 | DEBUG    | __main__:run_benchmark:432 - dfin1[~ dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:27:20.648 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:20.676 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:27:22.908 | DEBUG    | __main__:run_benchmark:431 - Query: Remove all rows from dfin1 which has same column 'alpha' as dfin2
2022-08-06 05:27:22.909 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2['alpha'].index)
2022-08-06 05:27:22.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:22.974 | DEBUG    | __main__:run_benchmark:431 - Query: Remove all rows from dfin1 which has same column 'alpha' as dfin2
2022-08-06 05:27:22.974 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2, inplace=True)
2022-08-06 05:27:22.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:22.978 | DEBUG    | __main__:run_benchmark:431 - Query: Remove all rows from dfin1 which has same column 'alpha' as dfin2
2022-08-06 05:27:22.978 | DEBUG    | __main__:run_benchmark:432 - dfin1[~ dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:27:22.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:24.885 | DEBUG    | __main__:run_benchmark:431 - Query: Remove all matched rows of dfin1 and difn2 on column 'alpha' from dfin1
2022-08-06 05:27:24.886 | DEBUG    | __main__:run_benchmark:432 - dfin1[~ dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 05:27:24.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:24.964 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:27:26.936 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:26.937 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2.index, axis=0)
2022-08-06 05:27:26.999 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:26.999 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:26.999 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2['alpha'], axis=1)
2022-08-06 05:27:27.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:27.003 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:27.003 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2.alpha.values, axis=1)
2022-08-06 05:27:27.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:27.007 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:27.007 | DEBUG    | __main__:run_benchmark:432 - dfin1.pop('alpha')
2022-08-06 05:27:27.023 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:27.023 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:27.024 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2, inplace=True)
2022-08-06 05:27:27.026 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:27.027 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:27.027 | DEBUG    | __main__:run_benchmark:432 - dfin1.pop('alpha')
2022-08-06 05:27:27.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:27.043 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:27.043 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2['alpha'], axis=1, inplace=True)
2022-08-06 05:27:27.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:27.046 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:27.046 | DEBUG    | __main__:run_benchmark:432 - (dfin1 - dfin2)['alpha']
2022-08-06 05:27:27.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:27.064 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:27.064 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2.index, inplace=True)
2022-08-06 05:27:27.081 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:27.081 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:27.082 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin1.index[dfin1['alpha'] == dfin2['alpha']])
2022-08-06 05:27:27.084 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:27.084 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:27.085 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2['alpha'])
2022-08-06 05:27:27.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:27.087 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:27.088 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2.index, inplace=True)
2022-08-06 05:27:27.104 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:27.105 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:27.105 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2['alpha'], axis=1)
2022-08-06 05:27:27.108 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:27.108 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:27.108 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin1.index[dfin2['alpha']], inplace=True)
2022-08-06 05:27:27.111 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:27.111 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:27.111 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2['alpha'], axis=1)
2022-08-06 05:27:27.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:27.114 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:27.114 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2.alpha.values, axis=1)
2022-08-06 05:27:27.117 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:27.117 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:27.118 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2.index, inplace=True)
2022-08-06 05:27:27.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:27.135 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:27.135 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2.index, inplace=True)
2022-08-06 05:27:27.152 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:27.152 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:27.152 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(axis=1, columns='alpha', inplace=True)
2022-08-06 05:27:27.168 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:27.168 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:27.168 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2['alpha'], axis=1, inplace=False)
2022-08-06 05:27:27.171 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:29.222 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:29.223 | DEBUG    | __main__:run_benchmark:432 - (dfin2['alpha'] - dfin1['alpha'])
2022-08-06 05:27:29.242 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:29.242 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:29.242 | DEBUG    | __main__:run_benchmark:432 - print(dfin1['alpha'].difference(dfin2['alpha']))
2022-08-06 05:27:29.242 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin1['alpha'].difference(dfin2['alpha'])

2022-08-06 05:27:29.244 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin1['alpha'].difference(dfin2['alpha'])

2022-08-06 05:27:29.245 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:29.245 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:29.245 | DEBUG    | __main__:run_benchmark:432 - (dfin2['alpha'] - dfin1['alpha'])
2022-08-06 05:27:29.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:29.263 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:29.263 | DEBUG    | __main__:run_benchmark:432 - dfin2['alpha'] - dfin1['alpha']
2022-08-06 05:27:29.280 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:29.281 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:29.281 | DEBUG    | __main__:run_benchmark:432 - (dfin2['alpha'] - dfin1['alpha'])
2022-08-06 05:27:29.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:29.298 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:29.299 | DEBUG    | __main__:run_benchmark:432 - pd.Series(dfin2['alpha'] - dfin1['alpha'])
2022-08-06 05:27:29.316 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:29.316 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:29.316 | DEBUG    | __main__:run_benchmark:432 - (dfin2['alpha'] - dfin1['alpha'])
2022-08-06 05:27:29.334 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:29.334 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:29.334 | DEBUG    | __main__:run_benchmark:432 - dfin2['alpha'].difference(dfin1['alpha'])
2022-08-06 05:27:29.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:29.337 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:29.337 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[:, 'alpha'] - dfin2['alpha']
2022-08-06 05:27:29.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:29.354 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:29.355 | DEBUG    | __main__:run_benchmark:432 - dfin2['alpha'] - dfin1['alpha']
2022-08-06 05:27:29.372 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:29.372 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:29.372 | DEBUG    | __main__:run_benchmark:432 - print(dfin2['alpha'].difference(dfin1['alpha']))
2022-08-06 05:27:29.372 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin2['alpha'].difference(dfin1['alpha'])

2022-08-06 05:27:29.374 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin2['alpha'].difference(dfin1['alpha'])

2022-08-06 05:27:29.375 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:29.375 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 05:27:29.375 | DEBUG    | __main__:run_benchmark:432 - dfin1[(~ dfin1['alpha'].isin(dfin2['alpha'].unique()))]
2022-08-06 05:27:29.387 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:29.410 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:27:29.411 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:27:29.411 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:27:29.411 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:27:29.411 | DEBUG    | __main__:run:515 - Number of queries: 26
2022-08-06 05:27:31.423 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' of dataframe dfin1 are not part of values in column 'bar' of dataframe dfin2
2022-08-06 05:27:31.424 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:27:31.436 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:33.473 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' of dataframe dfin1 do not exist in values in column 'bar' of dataframe dfin2
2022-08-06 05:27:33.474 | DEBUG    | __main__:run_benchmark:432 - dfin1[~ dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:27:33.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:33.513 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:27:34.870 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' don't exist in column 'bar' of dataframe dfin2
2022-08-06 05:27:34.871 | DEBUG    | __main__:run_benchmark:432 - dfin1[~ dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 05:27:34.918 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:34.949 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:27:36.855 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows in dfin1 where column 'beta' in dfin1 is not equal to column 'beta' in dfin2
2022-08-06 05:27:36.855 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(~ dfin1['beta'].isin(dfin2['beta'])), :]
2022-08-06 05:27:36.867 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:41.386 | DEBUG    | __main__:run_benchmark:431 - Query: select rows in dfin1 where column 'beta' in dfin1 is not equal to column 'beta' in dfin2
2022-08-06 05:27:41.387 | DEBUG    | __main__:run_benchmark:432 - dfin1[(~ dfin1['beta'].isin(dfin2['beta']))]
2022-08-06 05:27:41.400 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:41.425 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:27:41.426 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:27:41.426 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 05:27:41.426 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 05:27:41.426 | DEBUG    | __main__:run:515 - Number of queries: 21
2022-08-06 05:27:41.426 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:41.426 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:41.426 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:41.427 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:41.427 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:41.427 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:41.427 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:41.427 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:41.427 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:41.427 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:41.427 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:41.427 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:41.428 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:41.428 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:41.428 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:41.428 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:41.428 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:41.428 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:41.428 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:43.601 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.601 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 05:27:43.621 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.621 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.621 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 05:27:43.639 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.639 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.640 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & (dfin['foo'] > 70) | (dfin['foo'] < 34))]
2022-08-06 05:27:43.658 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.658 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.658 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 05:27:43.677 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.677 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.677 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 05:27:43.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.695 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.695 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 05:27:43.714 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.714 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.714 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 05:27:43.732 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.733 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.733 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 05:27:43.751 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.751 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.752 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) | (dfin['foo'] < 34))].index)
2022-08-06 05:27:43.770 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.770 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.770 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34))]
2022-08-06 05:27:43.788 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.788 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.789 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 05:27:43.806 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.807 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.807 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 05:27:43.824 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.825 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.825 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34))]
2022-08-06 05:27:43.843 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.843 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.843 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 05:27:43.864 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.864 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.864 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34))]
2022-08-06 05:27:43.882 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.882 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.883 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 05:27:43.900 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.900 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.901 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 05:27:43.918 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.918 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.919 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 05:27:43.936 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.937 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.937 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 05:27:43.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.955 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 05:27:43.955 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 05:27:43.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:27:43.996 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:27:43.997 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:43.997 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:43.997 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:43.997 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:27:43.997 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:43.997 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:43.997 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:27:43.997 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 05:27:43.998 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 05:27:43.998 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:27:43.998 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:27:43.998 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:27:43.998 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:27:43.998 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:27:43.998 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:27:43.998 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:27:43.998 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:27:43.998 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:27:43.999 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:27:43.999 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 05:27:43.999 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:27:43.999 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:27:43.999 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:27:43.999 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:27:43.999 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 05:27:43.999 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:27:43.999 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 05:27:46.817 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 05:27:46.818 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-06 05:27:46.838 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:27:47.092 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f77bc4b87a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f77bc6388c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f7727662910>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f7727662910>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'", 'user': 'u12'}, {...
    │               └ {'queries': [{'query': "join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'", 'user': 'u12'}, {...
    └ {'query': "join 'dfin1' and 'dfin2' where column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'", 'user': 'u12'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f7727662910>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Concatenate rows where "Ticket" is e...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f7727662910>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f772777be60>
                       └ <openai.api_requestor.APIRequestor object at 0x7f77155984d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 12:27:47 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f77adfd8f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 12:27:47 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f771556be10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 05:27:47.121 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 05:28:19.796 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' where column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 05:28:19.797 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-06 05:28:19.816 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:28:19.840 | DEBUG    | __main__:run:525 - Skipping benchmark 9 as result already exists
2022-08-06 05:28:22.100 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.101 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Type1'] == dfin2['Type2']][dfin1['Date1'] == dfin2['Date2']]
2022-08-06 05:28:22.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.115 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.115 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin1.filter(regex='Type1'), dfin2.filter(regex='Type2'), dfin1.filter(regex='Date1'), dfin2.filter(regex='Date2')], axis=1)
2022-08-06 05:28:22.130 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.131 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.131 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Type2', 'Date1', 'Date2'])
2022-08-06 05:28:22.132 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.133 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.133 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 05:28:22.145 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.145 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.145 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Type2', 'Date1', 'Date2'])
2022-08-06 05:28:22.147 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.147 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.147 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 05:28:22.159 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.159 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.159 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Type2', 'Date1', 'Date2'])
2022-08-06 05:28:22.161 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.161 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.161 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 05:28:22.173 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.173 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.173 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 05:28:22.185 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.186 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.186 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Type1'] == dfin2['Type2']]
2022-08-06 05:28:22.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.198 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.198 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Type1'] == dfin2['Type2']]
2022-08-06 05:28:22.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.210 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.210 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 05:28:22.212 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.212 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.212 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Type1'] == dfin2['Type2']]
2022-08-06 05:28:22.224 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.224 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.224 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 05:28:22.236 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.236 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.236 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 05:28:22.248 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.248 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.249 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 05:28:22.250 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.250 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.250 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 05:28:22.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.263 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.263 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1.Type1 == dfin2.Type2]
2022-08-06 05:28:22.275 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.275 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.275 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 05:28:22.276 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:22.276 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 05:28:22.277 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Type1'] == dfin2['Type2']][dfin1['Date1'] == dfin2['Date2']]
2022-08-06 05:28:22.289 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.256 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.257 | DEBUG    | __main__:run_benchmark:432 - dfin1[((dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2']))]
2022-08-06 05:28:25.270 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.270 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.271 | DEBUG    | __main__:run_benchmark:432 - dfin1[((dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2']))]
2022-08-06 05:28:25.283 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.283 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.283 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Type2', 'Date1', 'Date2'])
2022-08-06 05:28:25.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.285 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.285 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 05:28:25.297 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.297 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.297 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[((dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])), ['var1', 'var2']]
2022-08-06 05:28:25.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.300 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.300 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Type1'] == dfin2['Type2']][dfin1['Date1'] == dfin2['Date2']]
2022-08-06 05:28:25.312 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.312 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.313 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 05:28:25.325 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.325 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.325 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 05:28:25.338 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.338 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.338 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 05:28:25.350 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.350 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.350 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 05:28:25.363 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.363 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.363 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 05:28:25.375 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.375 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.375 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Type2', 'Date1', 'Date2'])
2022-08-06 05:28:25.377 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.377 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.377 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin2['Type1'] == dfin2['Type2']) & (dfin2['Date1'] == dfin2['Date2'])]
2022-08-06 05:28:25.379 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.379 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.379 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 05:28:25.391 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.391 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.391 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2.iloc[i]['Type2']) & (dfin1['Date1'] == dfin2.iloc[i]['Date2'])]
2022-08-06 05:28:25.393 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.393 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.393 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 05:28:25.405 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.405 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.405 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 05:28:25.417 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.417 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.418 | DEBUG    | __main__:run_benchmark:432 - dfin1[((dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2']))]
2022-08-06 05:28:25.430 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.430 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.430 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 05:28:25.442 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.442 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 05:28:25.442 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Type1'].isin(dfin2['Type2']) & dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 05:28:25.457 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:25.482 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:28:25.482 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:28:27.389 | DEBUG    | __main__:run_benchmark:431 - Query: merge columns on "lkey" dfin1 and "rkey" dfin2
2022-08-06 05:28:27.390 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, left_on='lkey', right_on='rkey')
2022-08-06 05:28:27.404 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:28:27.428 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:28:29.081 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.082 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.083 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.083 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.083 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.084 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.084 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.084 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.084 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.084 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.084 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.085 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.085 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.085 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.085 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.085 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.085 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.085 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.085 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.085 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.086 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.086 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.086 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.086 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.086 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.087 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.087 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.087 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.087 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.087 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.087 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.088 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.088 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.088 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.088 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.088 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.088 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.088 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.088 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.089 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.089 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.089 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.089 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.089 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.089 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.089 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.089 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.089 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.090 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.090 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.090 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.090 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 05:28:29.090 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:28:29.090 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:29.116 | DEBUG    | __main__:run:525 - Skipping benchmark 9 as result already exists
2022-08-06 05:28:29.116 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:28:29.117 | DEBUG    | __main__:run:525 - Skipping benchmark 9 as result already exists
2022-08-06 05:28:31.678 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 05:28:31.679 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 05:28:31.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:31.682 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 05:28:31.682 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])], dfin2[(dfin1['Type1'] == dfin2['Type
2022-08-06 05:28:31.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:31.682 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 05:28:31.683 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 05:28:31.684 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:31.684 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 05:28:31.684 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 05:28:31.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:31.686 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 05:28:31.686 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])], dfin2])
2022-08-06 05:28:31.704 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:31.704 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 05:28:31.704 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])], dfin2])
2022-08-06 05:28:31.721 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:31.721 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 05:28:31.721 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, on=['Type1', 'Date1'])
2022-08-06 05:28:31.723 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:31.723 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 05:28:31.723 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 05:28:31.725 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:31.725 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 05:28:31.725 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 05:28:31.726 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:31.727 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 05:28:31.727 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 05:28:31.728 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:31.729 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 05:28:31.729 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 05:28:31.730 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:31.730 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 05:28:31.730 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 05:28:31.732 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:31.732 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 05:28:31.732 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 05:28:31.734 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:31.734 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 05:28:31.734 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 05:28:31.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:31.736 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 05:28:31.736 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 05:28:31.737 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:31.738 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 05:28:31.738 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-06 05:28:31.755 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:28:31.780 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 05:28:31.780 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:28:31.780 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:28:31.780 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:28:31.780 | DEBUG    | __main__:run:515 - Number of queries: 23
2022-08-06 05:28:33.418 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0
2022-08-06 05:28:33.418 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:28:33.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:33.430 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0
2022-08-06 05:28:33.430 | DEBUG    | __main__:run_benchmark:432 - dfin.phi.fillna(11.0, inplace=True)
2022-08-06 05:28:33.439 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:33.439 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0
2022-08-06 05:28:33.439 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 33.0})
2022-08-06 05:28:33.452 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:28:35.188 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 05:28:35.189 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:28:35.200 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:35.200 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 05:28:35.200 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:28:35.209 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:35.210 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 05:28:35.210 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:28:35.219 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:35.219 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 05:28:35.219 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:28:35.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:35.229 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 05:28:35.229 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:28:35.238 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:35.238 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 05:28:35.238 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:28:35.248 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:35.248 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 05:28:35.248 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:28:35.257 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:35.257 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 05:28:35.257 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 05:28:35.266 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:35.267 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 05:28:35.267 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:28:35.276 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:35.276 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 05:28:35.276 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:28:35.286 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:35.286 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 05:28:35.286 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:28:35.295 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:35.295 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 05:28:35.296 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:28:35.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:35.305 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 05:28:35.305 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:28:35.314 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:35.315 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 05:28:35.315 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 05:28:35.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:35.324 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 05:28:35.324 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 33.0})
2022-08-06 05:28:35.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:28:35.361 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:28:35.361 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:28:35.361 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:28:35.362 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:28:35.362 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:28:35.362 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:28:35.362 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:28:37.090 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of difn with value '33.0'
2022-08-06 05:28:37.091 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(inplace=True, value={'phi': 11.0, 'omega': 33.0})
2022-08-06 05:28:37.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:28:37.126 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:28:38.795 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of dfinn with value '33.0'
2022-08-06 05:28:38.796 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(inplace=True, value={'phi': 11.0, 'omega': 33.0})
2022-08-06 05:28:38.806 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:28:40.503 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' by 11 and nan in column 'omega' by 33
2022-08-06 05:28:40.504 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11, 'omega': 33})
2022-08-06 05:28:40.519 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:28:40.543 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:28:42.116 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 05:28:42.117 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(value=11)
2022-08-06 05:28:42.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:42.128 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 05:28:42.128 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11, inplace=True)
2022-08-06 05:28:42.137 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:42.137 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 05:28:42.137 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11).fillna(33)
2022-08-06 05:28:42.146 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:42.147 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 05:28:42.147 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(value=11)
2022-08-06 05:28:42.156 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:42.156 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 05:28:42.156 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(value=11)
2022-08-06 05:28:42.165 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:42.166 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 05:28:42.166 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11, inplace=True)
2022-08-06 05:28:42.175 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:42.175 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 05:28:42.175 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11)
2022-08-06 05:28:42.184 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:42.185 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 05:28:42.185 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(inplace=True, value=11)
2022-08-06 05:28:42.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:42.194 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 05:28:42.194 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(inplace=True, value=11)
2022-08-06 05:28:42.204 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:42.204 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 05:28:42.204 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11)
2022-08-06 05:28:42.213 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:42.213 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 05:28:42.213 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11)
2022-08-06 05:28:42.223 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:42.223 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 05:28:42.223 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11).fillna(33)
2022-08-06 05:28:42.236 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:42.236 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 05:28:42.237 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11, axis=0)
2022-08-06 05:28:42.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:42.246 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 05:28:42.246 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(inplace=True, value={'phi': 11, 'omega': 33})
2022-08-06 05:28:42.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:28:43.639 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-06 05:28:43.640 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11, inplace=True)
2022-08-06 05:28:43.651 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:43.651 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-06 05:28:43.651 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11, inplace=True)
2022-08-06 05:28:43.660 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:43.660 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-06 05:28:43.661 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(value=11, inplace=True)
2022-08-06 05:28:43.670 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:43.670 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-06 05:28:43.670 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(value=11, inplace=True)
2022-08-06 05:28:43.679 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:43.679 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-06 05:28:43.680 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11, inplace=True)
2022-08-06 05:28:43.689 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:43.689 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-06 05:28:43.689 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11, inplace=True)
2022-08-06 05:28:43.698 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:43.699 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-06 05:28:43.699 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(inplace=True, value={'phi': 11, 'omega': 33})
2022-08-06 05:28:43.708 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:28:43.733 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:28:43.733 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:28:43.733 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 05:28:43.733 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:28:45.535 | DEBUG    | __main__:run_benchmark:431 - Query: replace all 'NaN' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17.0
2022-08-06 05:28:45.536 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23.0, inplace=True)
2022-08-06 05:28:45.547 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:45.547 | DEBUG    | __main__:run_benchmark:431 - Query: replace all 'NaN' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17.0
2022-08-06 05:28:45.547 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23.0, inplace=True)
2022-08-06 05:28:45.556 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:45.556 | DEBUG    | __main__:run_benchmark:431 - Query: replace all 'NaN' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17.0
2022-08-06 05:28:45.557 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-06 05:28:45.569 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:28:47.414 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' with 23.0 and replace 'NaN' in 'pi' with 17.0
2022-08-06 05:28:47.415 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-06 05:28:47.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:28:48.698 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in column 'omega' with 23.0 and replace 'NaN' in column 'pi' with 17.0
2022-08-06 05:28:48.699 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23.0, inplace=True)
2022-08-06 05:28:48.709 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:48.710 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in column 'omega' with 23.0 and replace 'NaN' in column 'pi' with 17.0
2022-08-06 05:28:48.710 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23.0, inplace=True)
2022-08-06 05:28:48.719 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:48.719 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in column 'omega' with 23.0 and replace 'NaN' in column 'pi' with 17.0
2022-08-06 05:28:48.719 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace({None: 23.0})
2022-08-06 05:28:48.728 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:48.729 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in column 'omega' with 23.0 and replace 'NaN' in column 'pi' with 17.0
2022-08-06 05:28:48.729 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23.0, inplace=True)
2022-08-06 05:28:48.738 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:28:48.738 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in column 'omega' with 23.0 and replace 'NaN' in column 'pi' with 17.0
2022-08-06 05:28:48.738 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-06 05:28:48.751 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:28:50.122 | DEBUG    | __main__:run_benchmark:431 - Query: replace all value of 'NaN' in column 'omega' with 23.0 and all values of 'NaN' in column 'pi' with 17.0
2022-08-06 05:28:50.123 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-06 05:28:50.137 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:28:52.179 | DEBUG    | __main__:run_benchmark:431 - Query: Replace nan in column 'omega' with 23.0 and column 'pi' with 17
2022-08-06 05:28:52.180 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17})
2022-08-06 05:28:52.193 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:28:52.372 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f77bc4b87a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f77bc6388c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f7727662910>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f7727662910>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "replace all 'Nan' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17...
    │               └ {'queries': [{'query': "replace all 'Nan' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17...
    └ {'query': "Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'", 'user': 'u16'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f7727662910>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Replace "missing_value0" with NaN in...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f7727662910>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f772777be60>
                       └ <openai.api_requestor.APIRequestor object at 0x7f7715578090>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 12:28:52 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f77adfd8f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 12:28:52 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f771551bf90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 05:28:52.398 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 05:29:22.553 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f77bc4b87a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f77bc6388c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f7727662910>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f7727662910>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "replace all 'Nan' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17...
    │               └ {'queries': [{'query': "replace all 'Nan' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17...
    └ {'query': "Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'", 'user': 'u16'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f7727662910>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Replace "missing_value0" with NaN in...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f7727662910>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f772777be60>
                       └ <openai.api_requestor.APIRequestor object at 0x7f771556bc10>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 12:29:22 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f77adfd8f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 12:29:22 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f771551d590>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 05:29:22.578 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 05:29:54.081 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.082 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace(np.nan, 23)
2022-08-06 05:29:54.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.092 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.092 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 05:29:54.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.102 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.102 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(np.nan, 23).replace(np.nan, 17)
2022-08-06 05:29:54.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.115 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.115 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 05:29:54.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.125 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.125 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace(np.nan, 23)
2022-08-06 05:29:54.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.135 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.135 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace({None: 23})
2022-08-06 05:29:54.145 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.145 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.145 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23)
2022-08-06 05:29:54.156 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.156 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.156 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23)
2022-08-06 05:29:54.165 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.165 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.166 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23)
2022-08-06 05:29:54.175 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.175 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.175 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace({np.nan: 23})
2022-08-06 05:29:54.184 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.185 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.185 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23, inplace=True)
2022-08-06 05:29:54.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.194 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.194 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 05:29:54.204 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.204 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.204 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace(np.nan, 23)
2022-08-06 05:29:54.213 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.213 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.213 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(np.nan, [23, 17])
2022-08-06 05:29:54.214 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.215 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.215 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 05:29:54.224 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.224 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.225 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23, inplace=True)
2022-08-06 05:29:54.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.234 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.234 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace('nan', 23)
2022-08-06 05:29:54.244 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.244 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.244 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 05:29:54.253 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.253 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.253 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23)
2022-08-06 05:29:54.262 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:54.263 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 05:29:54.263 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23, inplace=True)
2022-08-06 05:29:54.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:55.687 | DEBUG    | __main__:run_benchmark:431 - Query: Replace nan with 23 in column 'omega' and with 17 in column 'pi'
2022-08-06 05:29:55.687 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23)
2022-08-06 05:29:55.697 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:55.697 | DEBUG    | __main__:run_benchmark:431 - Query: Replace nan with 23 in column 'omega' and with 17 in column 'pi'
2022-08-06 05:29:55.697 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23)
2022-08-06 05:29:55.706 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:55.706 | DEBUG    | __main__:run_benchmark:431 - Query: Replace nan with 23 in column 'omega' and with 17 in column 'pi'
2022-08-06 05:29:55.706 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace(np.NAN, 23)
2022-08-06 05:29:55.716 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:55.716 | DEBUG    | __main__:run_benchmark:431 - Query: Replace nan with 23 in column 'omega' and with 17 in column 'pi'
2022-08-06 05:29:55.716 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'omega': 23, 'pi': 17})
2022-08-06 05:29:55.728 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:29:57.536 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaN with 23.0 in column 'omega' and NaN with 17.0 in column 'pi'
2022-08-06 05:29:57.537 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23.0, inplace=True)
2022-08-06 05:29:57.547 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:57.547 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaN with 23.0 in column 'omega' and NaN with 17.0 in column 'pi'
2022-08-06 05:29:57.547 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23.0, inplace=True)
2022-08-06 05:29:57.557 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:57.557 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaN with 23.0 in column 'omega' and NaN with 17.0 in column 'pi'
2022-08-06 05:29:57.557 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23.0, inplace=True)
2022-08-06 05:29:57.566 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:57.566 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaN with 23.0 in column 'omega' and NaN with 17.0 in column 'pi'
2022-08-06 05:29:57.566 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-06 05:29:57.579 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:29:59.002 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'NaN' with '23.0' in column 'omega' and 'NaN' with '17.0' in column 'pi'
2022-08-06 05:29:59.003 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace(np.nan, 23.0)
2022-08-06 05:29:59.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:29:59.014 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'NaN' with '23.0' in column 'omega' and 'NaN' with '17.0' in column 'pi'
2022-08-06 05:29:59.014 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-06 05:29:59.027 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:00.243 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.244 | DEBUG    | __main__:run_benchmark:432 - dfin['pi'].replace({None: 17})
2022-08-06 05:30:00.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.255 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.255 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace(np.nan, 23)
2022-08-06 05:30:00.264 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.264 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.265 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'NaN': 23, 'Nan': 17})
2022-08-06 05:30:00.278 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.278 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.278 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace(np.nan, 23, inplace=True)
2022-08-06 05:30:00.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.288 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.288 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace({np.nan: 23})
2022-08-06 05:30:00.297 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.297 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.298 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace(np.nan, 23)
2022-08-06 05:30:00.307 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.307 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.307 | DEBUG    | __main__:run_benchmark:432 - dfin['pi'].replace({np.nan: 17})
2022-08-06 05:30:00.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.317 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.317 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['omega'].isnull(), 'omega'] = 23
2022-08-06 05:30:00.326 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.326 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.326 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23, inplace=True)
2022-08-06 05:30:00.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.336 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.336 | DEBUG    | __main__:run_benchmark:432 - dfin['pi'].replace(np.NaN, 17)
2022-08-06 05:30:00.345 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.346 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.346 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace(pd.np.nan, 23)
2022-08-06 05:30:00.355 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.355 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.355 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23, inplace=True)
2022-08-06 05:30:00.364 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.365 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.365 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace({np.nan: 23, np.nan: 17})
2022-08-06 05:30:00.374 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.374 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.374 | DEBUG    | __main__:run_benchmark:432 - dfin['pi'].fillna(17, inplace=True)
2022-08-06 05:30:00.383 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.383 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.383 | DEBUG    | __main__:run_benchmark:432 - dfin['pi'].replace(np.nan, 17)
2022-08-06 05:30:00.393 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.393 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.393 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'NaN': 23, 'pi': {'NaN': 17}})
2022-08-06 05:30:00.394 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.394 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.394 | DEBUG    | __main__:run_benchmark:432 - dfin['pi'].replace(np.nan, 17)
2022-08-06 05:30:00.403 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.403 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.404 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(np.NaN, 23)
2022-08-06 05:30:00.417 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.417 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.417 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23, inplace=True)
2022-08-06 05:30:00.426 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.427 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 05:30:00.427 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace(np.NaN, 23)
2022-08-06 05:30:00.436 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:00.461 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:30:00.461 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:30:00.461 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 05:30:00.461 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:30:00.461 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:30:02.519 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 05:30:02.520 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 05:30:02.529 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:02.529 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 05:30:02.529 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 05:30:02.536 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:02.537 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 05:30:02.537 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 05:30:02.544 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:02.544 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 05:30:02.544 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 05:30:02.551 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:02.552 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 05:30:02.552 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 05:30:02.559 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:02.559 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 05:30:02.559 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 05:30:02.567 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:02.567 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 05:30:02.567 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(inplace=True, to_replace='United States', value='US')
2022-08-06 05:30:02.574 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:02.574 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 05:30:02.575 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'location': 'United States', 'zip': '3434'}, {'location': 'US', 'zip': '4343'})
2022-08-06 05:30:02.585 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:02.586 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 05:30:02.586 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(inplace=True, to_replace='United States', value='US')
2022-08-06 05:30:02.593 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:02.593 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 05:30:02.593 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace({'United States': 'US'})
2022-08-06 05:30:02.601 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:02.601 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 05:30:02.601 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'location': 'United States', 'zip': 3434}, {'location': 'US', 'zip': 4343})
2022-08-06 05:30:02.611 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:04.595 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'United States' in column 'location' with 'US' and '3434' in column 'zip' with column 'zip' with '4343'
2022-08-06 05:30:04.596 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'location': 'United States', 'zip': 3434}, {'location': 'US', 'zip': 4343})
2022-08-06 05:30:04.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:04.634 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:30:04.634 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:30:04.635 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:30:04.635 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:30:06.624 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 05:30:06.625 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('India', 'IN').str.replace('London', 'LON')
2022-08-06 05:30:06.634 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:06.634 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 05:30:06.634 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('India', 'IN').replace('London', 'LON')
2022-08-06 05:30:06.641 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:06.642 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 05:30:06.642 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('India', 'IN').str.replace('London', 'LON')
2022-08-06 05:30:06.649 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:06.649 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 05:30:06.649 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('India', 'IN').replace('London', 'LON')
2022-08-06 05:30:06.657 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:06.657 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 05:30:06.657 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('India', 'IN').replace('London', 'LON')
2022-08-06 05:30:06.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:06.665 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 05:30:06.665 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('india', 'IN').replace('London', 'LON')
2022-08-06 05:30:06.672 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:06.673 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 05:30:06.673 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('India', 'IN')
2022-08-06 05:30:06.680 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:06.680 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 05:30:06.680 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('India', 'IN').replace('London', 'LON')
2022-08-06 05:30:06.688 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:06.688 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 05:30:06.688 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('India', 'IN').replace('London', 'LON')
2022-08-06 05:30:06.696 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:06.696 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 05:30:06.696 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': {'India': 'IN'}, 'city': {'London': 'LON'}})
2022-08-06 05:30:06.707 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:06.735 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:30:06.735 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:30:06.735 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:30:06.735 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:30:08.856 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values 'London' in column 'city' with 'LON', and values 'India' in column 'country' with 'IN'. df name dfin
2022-08-06 05:30:08.857 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'city': 'London', 'country': 'India'}, {'city': 'LON', 'country': 'IN'})
2022-08-06 05:30:08.868 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:08.896 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:30:08.896 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:30:08.897 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:30:08.897 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:30:08.897 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:30:08.897 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:30:10.666 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column and 'Paris' with 'PAR' in city
2022-08-06 05:30:10.667 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 05:30:10.712 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:10.712 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column and 'Paris' with 'PAR' in city
2022-08-06 05:30:10.712 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France', 'city': 'Paris'}, {'country': 'FR', 'city': 'PAR'})
2022-08-06 05:30:10.726 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:10.754 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 05:30:10.754 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:30:10.754 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:30:10.755 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:30:10.755 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:30:10.755 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:30:12.077 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, sort the dataframe on the basis of column 'B'
2022-08-06 05:30:12.078 | DEBUG    | __main__:run_benchmark:432 - dfin.sort_values('B')
2022-08-06 05:30:12.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:12.113 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:30:12.113 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 05:30:12.113 | DEBUG    | __main__:run:509 - Number of Sets: 2
2022-08-06 05:30:12.113 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:30:12.114 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:30:12.114 | DEBUG    | __main__:run:525 - Skipping benchmark 13 as result already exists
2022-08-06 05:30:12.114 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 05:30:12.114 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:30:12.114 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 05:30:13.798 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' to numeric encoding
2022-08-06 05:30:13.799 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = pd.factorize(dfin['target'])[0]
2022-08-06 05:30:13.808 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:15.920 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' of dataframe 'dfin' to numeric encoding
2022-08-06 05:30:15.921 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = pd.factorize(dfin['target'])[0]
2022-08-06 05:30:15.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:15.957 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 05:30:15.957 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:15.957 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:15.957 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:15.958 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:15.958 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:15.958 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:15.958 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:15.958 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:15.958 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:30:15.958 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:15.958 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:15.959 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:15.959 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:15.959 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 05:30:15.959 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:15.959 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:17.928 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' in 'dfin' to numeric codes
2022-08-06 05:30:17.929 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Series(preprocessing.LabelEncoder().fit(dfin['GoldTarget']).transform(dfin['GoldTarget']))
2022-08-06 05:30:17.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:17.931 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' in 'dfin' to numeric codes
2022-08-06 05:30:17.931 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.factorize(dfin['GoldTarget'].values)[0]
2022-08-06 05:30:17.939 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:19.851 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 05:30:19.851 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category').cat.codes
2022-08-06 05:30:19.860 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:21.560 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to numeric codes
2022-08-06 05:30:21.560 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.factorize(dfin['GoldTarget'])[0]
2022-08-06 05:30:21.569 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:23.083 | DEBUG    | __main__:run_benchmark:431 - Query: encode values in 'GoldTarget' column to numeric
2022-08-06 05:30:23.084 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].map({'classA': 0, 'classB': 1, 'classC': 2})
2022-08-06 05:30:23.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:23.119 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:23.119 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:23.119 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:30:25.072 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'Label' with integers
2022-08-06 05:30:25.073 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'class1': 0, 'class2': 1, 'class3': 2})
2022-08-06 05:30:25.084 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:25.110 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:25.111 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:25.111 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:30:25.111 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 05:30:25.111 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:30:25.111 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 05:30:25.111 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:30:26.743 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:26.744 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:26.748 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:26.748 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:26.748 | DEBUG    | __main__:run_benchmark:432 - #  to get the number of rows with duplicates
2022-08-06 05:30:26.748 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:26.749 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:26.749 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique() - dfin.shape[0]
2022-08-06 05:30:26.751 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:26.751 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:26.751 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:26.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:26.754 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:26.754 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:26.756 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:26.756 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:26.756 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:26.758 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:26.759 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:26.759 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:26.761 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:26.761 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:26.761 | DEBUG    | __main__:run_benchmark:432 - #  This will give the number of duplicates in the dataframe
2022-08-06 05:30:26.761 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:26.761 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:26.761 | DEBUG    | __main__:run_benchmark:432 - #  This will give us the number of duplicates in the dataframe
2022-08-06 05:30:26.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:26.762 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:26.762 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:30:26.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:26.762 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:26.762 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:26.764 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:26.764 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:26.765 | DEBUG    | __main__:run_benchmark:432 - #  This will give us the count of duplicate rows in the dataframe
2022-08-06 05:30:26.765 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:26.765 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:26.765 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:30:26.765 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:26.765 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:26.765 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:30:26.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:29.101 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:29.102 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['inp1', 'inp2', 'inp3']).size().shape[0] - dfin.groupby(['inp1', 'inp2', 'inp3']).size().nunique()
2022-08-06 05:30:29.106 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:29.106 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:29.107 | DEBUG    | __main__:run_benchmark:432 - dfin['target'].value_counts(normalize=True)
2022-08-06 05:30:29.108 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:29.109 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:29.109 | DEBUG    | __main__:run_benchmark:432 - #  This will give us the number of rows with unique values in each column
2022-08-06 05:30:29.109 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:29.109 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:29.109 | DEBUG    | __main__:run_benchmark:432 - #  This will give the number of rows with missing values
2022-08-06 05:30:29.109 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:29.110 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:29.110 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:29.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:29.112 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:29.112 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:29.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:29.114 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:29.114 | DEBUG    | __main__:run_benchmark:432 - #  This will give the number of rows with unique values in each column
2022-08-06 05:30:29.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:29.115 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:29.115 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:29.117 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:29.117 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:29.117 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:29.119 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:29.119 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:29.120 | DEBUG    | __main__:run_benchmark:432 - #  This will give the number of duplicates in the dataframe
2022-08-06 05:30:29.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:29.120 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:29.120 | DEBUG    | __main__:run_benchmark:432 - #  This will give the number of duplicates in the dataframe
2022-08-06 05:30:29.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:29.120 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:29.120 | DEBUG    | __main__:run_benchmark:432 - #  This will give the total number of rows with unique values in each column
2022-08-06 05:30:29.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:29.120 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:29.121 | DEBUG    | __main__:run_benchmark:432 - #  This is the number of duplicates in the dataframe
2022-08-06 05:30:29.121 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:29.121 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:29.121 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:29.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:29.123 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:29.123 | DEBUG    | __main__:run_benchmark:432 - #  This will give the number of duplicates in the dataframe
2022-08-06 05:30:29.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:29.123 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 05:30:29.124 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:30:29.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:29.154 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:30:29.154 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:30:29.154 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:30:30.845 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of duplicates in dataframe dfin
2022-08-06 05:30:30.846 | DEBUG    | __main__:run_benchmark:432 - len(dfin[dfin.duplicated()])
2022-08-06 05:30:30.848 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:30.877 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:30:30.878 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:30:32.381 | DEBUG    | __main__:run_benchmark:431 - Query: number of duplicate rows in 'dfin' table; number of True values
2022-08-06 05:30:32.382 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:30:32.385 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:32.412 | DEBUG    | __main__:run:515 - Number of queries: 22
2022-08-06 05:30:32.412 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:30:34.005 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.005 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 05:30:34.009 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.009 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.009 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 05:30:34.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.012 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.012 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:34.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.014 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.014 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=0)
2022-08-06 05:30:34.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.016 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.017 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 05:30:34.019 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.019 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.019 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:34.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.021 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.021 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:34.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.024 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.024 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:34.026 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.026 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.026 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:34.028 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.028 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.028 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:34.031 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.031 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.031 | DEBUG    | __main__:run_benchmark:432 - len(dfin[['f1', 'f2', 'f3']].drop_duplicates())
2022-08-06 05:30:34.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.033 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.033 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:34.035 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.036 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.036 | DEBUG    | __main__:run_benchmark:432 - print(dfin.nunique())
2022-08-06 05:30:34.036 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.nunique()

2022-08-06 05:30:34.037 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.nunique()

2022-08-06 05:30:34.038 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.038 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.039 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:34.041 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.041 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.041 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:34.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.043 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.044 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(pd.Series.nunique, axis=1)
2022-08-06 05:30:34.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.046 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.047 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=1)
2022-08-06 05:30:34.049 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.049 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.050 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:34.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.052 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.052 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 05:30:34.054 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:34.054 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 05:30:34.055 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 05:30:34.057 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:35.643 | DEBUG    | __main__:run_benchmark:431 - Query: How many rows in dataframe 'dfin' are dupliate
2022-08-06 05:30:35.644 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:30:35.646 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:35.674 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:30:37.880 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and number of unique rows
2022-08-06 05:30:37.881 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum() - dfin.shape[0]
2022-08-06 05:30:37.884 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:37.884 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and number of unique rows
2022-08-06 05:30:37.884 | DEBUG    | __main__:run_benchmark:432 - (dfin.shape[0] - dfin.drop_duplicates().shape[0])
2022-08-06 05:30:37.886 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:39.629 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and unique number of rows
2022-08-06 05:30:39.630 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique() - dfin.shape[0]
2022-08-06 05:30:39.633 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:39.633 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and unique number of rows
2022-08-06 05:30:39.633 | DEBUG    | __main__:run_benchmark:432 - (len(dfin) - len(dfin.drop_duplicates()))
2022-08-06 05:30:39.635 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:40.984 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and number of 'unique rows'
2022-08-06 05:30:40.984 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:30:40.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:41.947 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and number of distinct rows
2022-08-06 05:30:41.947 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.drop_duplicates().shape[0]
2022-08-06 05:30:41.950 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:41.976 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:30:41.976 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:30:41.976 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:30:43.469 | DEBUG    | __main__:run_benchmark:431 - Query: find count of duplicate rows in dfin
2022-08-06 05:30:43.469 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:30:43.472 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:45.096 | DEBUG    | __main__:run_benchmark:431 - Query: find number of non unique rows in the table
2022-08-06 05:30:45.097 | DEBUG    | __main__:run_benchmark:432 - len(dfin[['ftr1', 'ftr2', 'ftr3']].drop_duplicates())
2022-08-06 05:30:45.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:45.101 | DEBUG    | __main__:run_benchmark:431 - Query: find number of non unique rows in the table
2022-08-06 05:30:45.101 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr1'].nunique(dropna=False)
2022-08-06 05:30:45.103 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:45.103 | DEBUG    | __main__:run_benchmark:431 - Query: find number of non unique rows in the table
2022-08-06 05:30:45.103 | DEBUG    | __main__:run_benchmark:432 - #  Hint: use the drop_duplicates() method
2022-08-06 05:30:45.103 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:30:45.103 | DEBUG    | __main__:run_benchmark:431 - Query: find number of non unique rows in the table
2022-08-06 05:30:45.103 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:30:45.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:30:45.294 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f77bc4b87a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f77bc6388c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f7727662910>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f7727662910>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'find number of duplicate rows in dfin', 'user': 'u11'}, {'query': 'find count of duplicate rows in df...
    │               └ {'queries': [{'query': 'find number of duplicate rows in dfin', 'user': 'u11'}, {'query': 'find count of duplicate rows in df...
    └ {'query': 'find number of rows which occur more than once in the table', 'user': 'u10'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f7727662910>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Count the number of occurrences of e...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f7727662910>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f772777be60>
                       └ <openai.api_requestor.APIRequestor object at 0x7f771548af10>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 12:30:45 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f77adfd8f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 12:30:45 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f771548a110>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 05:30:45.319 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 05:31:17.188 | DEBUG    | __main__:run_benchmark:431 - Query: find number of rows which occur more than once in the table
2022-08-06 05:31:17.189 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:31:17.191 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:31:17.217 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:31:17.217 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:31:17.218 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:31:17.218 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:31:17.218 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:31:17.218 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:31:17.218 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 05:31:17.218 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:31:17.218 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:31:19.073 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - unique rows
2022-08-06 05:31:19.074 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.nunique().sum()
2022-08-06 05:31:19.078 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:31:19.078 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - unique rows
2022-08-06 05:31:19.078 | DEBUG    | __main__:run_benchmark:432 - dfin['inputA'].nunique()
2022-08-06 05:31:19.079 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:31:19.080 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - unique rows
2022-08-06 05:31:19.080 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.nunique()
2022-08-06 05:31:19.082 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:31:19.082 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - unique rows
2022-08-06 05:31:19.082 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 05:31:19.084 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:31:19.111 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:31:20.312 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows of dfin - unique rows of dfin
2022-08-06 05:31:20.313 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.nunique().sum()
2022-08-06 05:31:20.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:31:20.325 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows of dfin - unique rows of dfin
2022-08-06 05:31:20.326 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.drop_duplicates().shape[0]
2022-08-06 05:31:20.333 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:31:20.541 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f77bc4b87a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f77bc6388c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f7727662910>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f7727662910>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Count number of duplicate rows', 'user': 'u5'}, {'query': 'output number of duplicate rows in dfin', ...
    │               └ {'queries': [{'query': 'Count number of duplicate rows', 'user': 'u5'}, {'query': 'output number of duplicate rows in dfin', ...
    └ {'query': "return total rows of 'dfin' - unique rows of 'dfin'", 'user': 'u16'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f7727662910>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return the sum of unique values acro...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f7727662910>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f772777be60>
                       └ <openai.api_requestor.APIRequestor object at 0x7f7715510a50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 12:31:20 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f77adfd8f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 12:31:20 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f77154889d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 05:31:20.566 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 05:34:07.542 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval1
2022-08-06 05:34:07.542 | DEBUG    | __main__:run:495 - Found 68 benchmarks in PandasEval1
2022-08-06 05:34:07.542 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 05:34:07.543 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.543 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.543 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 05:34:07.543 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.543 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.543 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 05:34:07.544 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.544 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.544 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 05:34:07.544 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.544 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.544 | DEBUG    | __main__:run:525 - Skipping benchmark 3 as result already exists
2022-08-06 05:34:07.544 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 05:34:07.545 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.545 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.545 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 05:34:07.545 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.545 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.545 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 05:34:07.546 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.546 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.546 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 05:34:07.546 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.546 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.546 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 05:34:07.546 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.547 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.547 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 05:34:07.547 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.547 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.547 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 05:34:07.547 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.547 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.548 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 05:34:07.548 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.548 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.548 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:34:07.548 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 05:34:07.548 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.548 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.549 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 05:34:07.549 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.549 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.549 | DEBUG    | __main__:run:525 - Skipping benchmark 13 as result already exists
2022-08-06 05:34:07.549 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 05:34:07.549 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.549 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.549 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 05:34:07.549 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.550 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.550 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 05:34:07.550 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.550 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.550 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 05:34:07.550 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.550 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.550 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 05:34:07.550 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.551 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.551 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:07.551 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 05:34:07.551 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.551 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.551 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 05:34:07.551 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.551 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.551 | DEBUG    | __main__:run:508 - Running benchmark 21
2022-08-06 05:34:07.551 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.552 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.552 | DEBUG    | __main__:run:508 - Running benchmark 22
2022-08-06 05:34:07.552 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.552 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.552 | DEBUG    | __main__:run:525 - Skipping benchmark 22 as result already exists
2022-08-06 05:34:07.552 | DEBUG    | __main__:run:508 - Running benchmark 23
2022-08-06 05:34:07.552 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.552 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.552 | DEBUG    | __main__:run:508 - Running benchmark 24
2022-08-06 05:34:07.553 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.553 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.553 | DEBUG    | __main__:run:508 - Running benchmark 25
2022-08-06 05:34:07.553 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.553 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.553 | DEBUG    | __main__:run:508 - Running benchmark 26
2022-08-06 05:34:07.553 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.554 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.554 | DEBUG    | __main__:run:525 - Skipping benchmark 26 as result already exists
2022-08-06 05:34:07.554 | DEBUG    | __main__:run:508 - Running benchmark 27
2022-08-06 05:34:07.554 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.554 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.554 | DEBUG    | __main__:run:508 - Running benchmark 28
2022-08-06 05:34:07.554 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.554 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.554 | DEBUG    | __main__:run:525 - Skipping benchmark 28 as result already exists
2022-08-06 05:34:07.555 | DEBUG    | __main__:run:508 - Running benchmark 29
2022-08-06 05:34:07.555 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.555 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.555 | DEBUG    | __main__:run:508 - Running benchmark 30
2022-08-06 05:34:07.555 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.555 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.555 | DEBUG    | __main__:run:525 - Skipping benchmark 30 as result already exists
2022-08-06 05:34:07.556 | DEBUG    | __main__:run:508 - Running benchmark 31
2022-08-06 05:34:07.556 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.556 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.556 | DEBUG    | __main__:run:508 - Running benchmark 32
2022-08-06 05:34:07.556 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.556 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.556 | DEBUG    | __main__:run:508 - Running benchmark 33
2022-08-06 05:34:07.556 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.556 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.557 | DEBUG    | __main__:run:508 - Running benchmark 34
2022-08-06 05:34:07.557 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.557 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.557 | DEBUG    | __main__:run:525 - Skipping benchmark 34 as result already exists
2022-08-06 05:34:07.557 | DEBUG    | __main__:run:508 - Running benchmark 35
2022-08-06 05:34:07.557 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.557 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.557 | DEBUG    | __main__:run:525 - Skipping benchmark 35 as result already exists
2022-08-06 05:34:07.557 | DEBUG    | __main__:run:508 - Running benchmark 36
2022-08-06 05:34:07.557 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.558 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.558 | DEBUG    | __main__:run:525 - Skipping benchmark 36 as result already exists
2022-08-06 05:34:07.558 | DEBUG    | __main__:run:508 - Running benchmark 37
2022-08-06 05:34:07.558 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.558 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.558 | DEBUG    | __main__:run:525 - Skipping benchmark 37 as result already exists
2022-08-06 05:34:07.558 | DEBUG    | __main__:run:508 - Running benchmark 38
2022-08-06 05:34:07.558 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.558 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.558 | DEBUG    | __main__:run:508 - Running benchmark 39
2022-08-06 05:34:07.559 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.559 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.559 | DEBUG    | __main__:run:508 - Running benchmark 40
2022-08-06 05:34:07.559 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.559 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.559 | DEBUG    | __main__:run:525 - Skipping benchmark 40 as result already exists
2022-08-06 05:34:07.559 | DEBUG    | __main__:run:508 - Running benchmark 41
2022-08-06 05:34:07.559 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.559 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.560 | DEBUG    | __main__:run:525 - Skipping benchmark 41 as result already exists
2022-08-06 05:34:07.560 | DEBUG    | __main__:run:508 - Running benchmark 42
2022-08-06 05:34:07.560 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.560 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.560 | DEBUG    | __main__:run:525 - Skipping benchmark 42 as result already exists
2022-08-06 05:34:07.560 | DEBUG    | __main__:run:508 - Running benchmark 43
2022-08-06 05:34:07.560 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.560 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.560 | DEBUG    | __main__:run:525 - Skipping benchmark 43 as result already exists
2022-08-06 05:34:07.560 | DEBUG    | __main__:run:508 - Running benchmark 44
2022-08-06 05:34:07.561 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.561 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.561 | DEBUG    | __main__:run:508 - Running benchmark 45
2022-08-06 05:34:07.561 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.561 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.561 | DEBUG    | __main__:run:525 - Skipping benchmark 45 as result already exists
2022-08-06 05:34:07.561 | DEBUG    | __main__:run:508 - Running benchmark 46
2022-08-06 05:34:07.561 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.561 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.561 | DEBUG    | __main__:run:508 - Running benchmark 47
2022-08-06 05:34:07.562 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.562 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.562 | DEBUG    | __main__:run:508 - Running benchmark 48
2022-08-06 05:34:07.562 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.562 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.562 | DEBUG    | __main__:run:525 - Skipping benchmark 48 as result already exists
2022-08-06 05:34:07.562 | DEBUG    | __main__:run:508 - Running benchmark 49
2022-08-06 05:34:07.562 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.562 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.563 | DEBUG    | __main__:run:525 - Skipping benchmark 49 as result already exists
2022-08-06 05:34:07.563 | DEBUG    | __main__:run:508 - Running benchmark 50
2022-08-06 05:34:07.563 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.563 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.563 | DEBUG    | __main__:run:525 - Skipping benchmark 50 as result already exists
2022-08-06 05:34:07.563 | DEBUG    | __main__:run:508 - Running benchmark 51
2022-08-06 05:34:07.563 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.563 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.563 | DEBUG    | __main__:run:508 - Running benchmark 52
2022-08-06 05:34:07.563 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.564 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.564 | DEBUG    | __main__:run:508 - Running benchmark 53
2022-08-06 05:34:07.564 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.564 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.564 | DEBUG    | __main__:run:508 - Running benchmark 54
2022-08-06 05:34:07.564 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.564 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.564 | DEBUG    | __main__:run:525 - Skipping benchmark 54 as result already exists
2022-08-06 05:34:07.564 | DEBUG    | __main__:run:508 - Running benchmark 55
2022-08-06 05:34:07.565 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.565 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.565 | DEBUG    | __main__:run:508 - Running benchmark 56
2022-08-06 05:34:07.565 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.565 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.565 | DEBUG    | __main__:run:508 - Running benchmark 57
2022-08-06 05:34:07.565 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.565 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.565 | DEBUG    | __main__:run:508 - Running benchmark 58
2022-08-06 05:34:07.565 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.566 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.566 | DEBUG    | __main__:run:508 - Running benchmark 59
2022-08-06 05:34:07.566 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.566 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.566 | DEBUG    | __main__:run:525 - Skipping benchmark 59 as result already exists
2022-08-06 05:34:07.566 | DEBUG    | __main__:run:508 - Running benchmark 60
2022-08-06 05:34:07.566 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.566 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.566 | DEBUG    | __main__:run:525 - Skipping benchmark 60 as result already exists
2022-08-06 05:34:07.566 | DEBUG    | __main__:run:508 - Running benchmark 62
2022-08-06 05:34:07.567 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.567 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.567 | DEBUG    | __main__:run:525 - Skipping benchmark 62 as result already exists
2022-08-06 05:34:07.567 | DEBUG    | __main__:run:508 - Running benchmark 63
2022-08-06 05:34:07.567 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.567 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.567 | DEBUG    | __main__:run:525 - Skipping benchmark 63 as result already exists
2022-08-06 05:34:07.567 | DEBUG    | __main__:run:508 - Running benchmark 64
2022-08-06 05:34:07.567 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.568 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.568 | DEBUG    | __main__:run:508 - Running benchmark 65
2022-08-06 05:34:07.568 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.568 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.568 | DEBUG    | __main__:run:525 - Skipping benchmark 65 as result already exists
2022-08-06 05:34:07.568 | DEBUG    | __main__:run:508 - Running benchmark 66
2022-08-06 05:34:07.568 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.568 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.568 | DEBUG    | __main__:run:525 - Skipping benchmark 66 as result already exists
2022-08-06 05:34:07.568 | DEBUG    | __main__:run:508 - Running benchmark 67
2022-08-06 05:34:07.569 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:34:07.569 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.569 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval2
2022-08-06 05:34:07.569 | DEBUG    | __main__:run:495 - Found 21 benchmarks in PandasEval2
2022-08-06 05:34:07.569 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 05:34:07.569 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:34:07.569 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:34:07.569 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:34:07.569 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.569 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:34:07.570 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:34:07.570 | DEBUG    | __main__:run:525 - Skipping benchmark 0 as result already exists
2022-08-06 05:34:07.570 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 05:34:07.570 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:34:07.570 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:34:07.570 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:34:07.570 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:34:07.570 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:34:07.570 | DEBUG    | __main__:run:525 - Skipping benchmark 1 as result already exists
2022-08-06 05:34:07.571 | DEBUG    | __main__:run:525 - Skipping benchmark 1 as result already exists
2022-08-06 05:34:07.571 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:34:07.571 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 05:34:07.571 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:34:07.571 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:34:07.571 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.571 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.571 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 05:34:07.571 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.571 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.572 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.572 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.572 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.572 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.572 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.572 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.572 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.572 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.572 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.572 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 05:34:07.573 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.573 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.573 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.573 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.573 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.573 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.573 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.573 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.573 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 05:34:07.574 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.574 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.574 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.574 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.574 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.574 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.574 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.574 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.574 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 05:34:07.574 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.575 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.575 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.575 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.575 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.575 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.575 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.575 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.575 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.575 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.575 | DEBUG    | __main__:run:525 - Skipping benchmark 2 as result already exists
2022-08-06 05:34:07.576 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 05:34:07.576 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:34:07.576 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:34:07.576 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 05:34:07.576 | DEBUG    | __main__:run:525 - Skipping benchmark 3 as result already exists
2022-08-06 05:34:07.576 | DEBUG    | __main__:run:525 - Skipping benchmark 3 as result already exists
2022-08-06 05:34:07.576 | DEBUG    | __main__:run:525 - Skipping benchmark 3 as result already exists
2022-08-06 05:34:07.576 | DEBUG    | __main__:run:525 - Skipping benchmark 3 as result already exists
2022-08-06 05:34:07.576 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:34:07.577 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 05:34:07.577 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:34:07.577 | DEBUG    | __main__:run:525 - Skipping benchmark 3 as result already exists
2022-08-06 05:34:07.577 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 05:34:07.577 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:34:07.577 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:34:07.577 | DEBUG    | __main__:run:525 - Skipping benchmark 4 as result already exists
2022-08-06 05:34:07.577 | DEBUG    | __main__:run:525 - Skipping benchmark 4 as result already exists
2022-08-06 05:34:07.577 | DEBUG    | __main__:run:525 - Skipping benchmark 4 as result already exists
2022-08-06 05:34:07.577 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:34:07.578 | DEBUG    | __main__:run:525 - Skipping benchmark 4 as result already exists
2022-08-06 05:34:07.578 | DEBUG    | __main__:run:525 - Skipping benchmark 4 as result already exists
2022-08-06 05:34:07.578 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:34:07.578 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:34:07.578 | DEBUG    | __main__:run:525 - Skipping benchmark 4 as result already exists
2022-08-06 05:34:07.578 | DEBUG    | __main__:run:525 - Skipping benchmark 4 as result already exists
2022-08-06 05:34:07.578 | DEBUG    | __main__:run:525 - Skipping benchmark 4 as result already exists
2022-08-06 05:34:07.578 | DEBUG    | __main__:run:525 - Skipping benchmark 4 as result already exists
2022-08-06 05:34:07.578 | DEBUG    | __main__:run:525 - Skipping benchmark 4 as result already exists
2022-08-06 05:34:07.579 | DEBUG    | __main__:run:525 - Skipping benchmark 4 as result already exists
2022-08-06 05:34:07.579 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:34:07.579 | DEBUG    | __main__:run:525 - Skipping benchmark 4 as result already exists
2022-08-06 05:34:07.579 | DEBUG    | __main__:run:525 - Skipping benchmark 4 as result already exists
2022-08-06 05:34:07.579 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 05:34:07.579 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:34:07.579 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:34:07.579 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.579 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.579 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.580 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.580 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 05:34:07.580 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.580 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.580 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.580 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.580 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.580 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.580 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.580 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.581 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.581 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.581 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.581 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.581 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.581 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.581 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.581 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.581 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:34:07.582 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.582 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.582 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.582 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:34:07.582 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.582 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.582 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.582 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 05:34:07.582 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.582 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.583 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.583 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.583 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.583 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.583 | DEBUG    | __main__:run:525 - Skipping benchmark 5 as result already exists
2022-08-06 05:34:07.583 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 05:34:07.583 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 05:34:07.583 | DEBUG    | __main__:run:515 - Number of queries: 27
2022-08-06 05:34:07.583 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.583 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.584 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.584 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.584 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.584 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.584 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.584 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.584 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.584 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.584 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.585 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.585 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.585 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.585 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.585 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.585 | DEBUG    | __main__:run:515 - Number of queries: 26
2022-08-06 05:34:07.585 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.585 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.585 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.585 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.586 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:34:07.586 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.586 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.586 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:34:07.586 | DEBUG    | __main__:run:525 - Skipping benchmark 6 as result already exists
2022-08-06 05:34:07.586 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 05:34:07.586 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 05:34:07.586 | DEBUG    | __main__:run:515 - Number of queries: 21
2022-08-06 05:34:07.586 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.586 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.587 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.587 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.587 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.587 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.587 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.587 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.587 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.587 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.587 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.588 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.588 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.588 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.588 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.588 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.588 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.588 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.588 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.588 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.588 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:34:07.589 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.589 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.589 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.589 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:34:07.589 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.589 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.589 | DEBUG    | __main__:run:525 - Skipping benchmark 7 as result already exists
2022-08-06 05:34:07.589 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 05:34:07.589 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 05:34:07.589 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:34:07.590 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:34:07.590 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:34:07.590 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:34:07.590 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:34:07.590 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:34:07.590 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:34:07.590 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:34:07.590 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:34:07.590 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:34:07.591 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 05:34:07.591 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:34:07.591 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:34:07.591 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:34:07.591 | DEBUG    | __main__:run:525 - Skipping benchmark 8 as result already exists
2022-08-06 05:34:07.591 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 05:34:07.591 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:34:07.591 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 05:34:07.591 | DEBUG    | __main__:run:525 - Skipping benchmark 9 as result already exists
2022-08-06 05:34:07.591 | DEBUG    | __main__:run:525 - Skipping benchmark 9 as result already exists
2022-08-06 05:34:07.592 | DEBUG    | __main__:run:525 - Skipping benchmark 9 as result already exists
2022-08-06 05:34:07.592 | DEBUG    | __main__:run:525 - Skipping benchmark 9 as result already exists
2022-08-06 05:34:07.592 | DEBUG    | __main__:run:525 - Skipping benchmark 9 as result already exists
2022-08-06 05:34:07.592 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:34:07.592 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:34:07.592 | DEBUG    | __main__:run:525 - Skipping benchmark 9 as result already exists
2022-08-06 05:34:07.592 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:34:07.592 | DEBUG    | __main__:run:525 - Skipping benchmark 9 as result already exists
2022-08-06 05:34:07.592 | DEBUG    | __main__:run:525 - Skipping benchmark 9 as result already exists
2022-08-06 05:34:07.593 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:34:07.593 | DEBUG    | __main__:run:525 - Skipping benchmark 9 as result already exists
2022-08-06 05:34:07.593 | DEBUG    | __main__:run:525 - Skipping benchmark 9 as result already exists
2022-08-06 05:34:07.593 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 05:34:07.593 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:34:07.593 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.593 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.593 | DEBUG    | __main__:run:515 - Number of queries: 23
2022-08-06 05:34:07.593 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.593 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.594 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.594 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.594 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.594 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.594 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.594 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.594 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.594 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.594 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.594 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.595 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.595 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.595 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.595 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.595 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.595 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.595 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 05:34:07.595 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.595 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.595 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.596 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.596 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.596 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.596 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.596 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.596 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.596 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.596 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.596 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.597 | DEBUG    | __main__:run:525 - Skipping benchmark 10 as result already exists
2022-08-06 05:34:07.597 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 05:34:07.597 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:34:07.597 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:34:07.597 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:34:07.597 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:34:07.597 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:34:07.597 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:34:07.597 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:34:07.597 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.598 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:34:07.598 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:34:07.598 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:34:07.598 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:34:07.598 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:34:07.598 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:34:07.598 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:34:07.598 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:34:07.598 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:34:07.599 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:34:07.599 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:34:07.599 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:34:07.599 | DEBUG    | __main__:run:525 - Skipping benchmark 11 as result already exists
2022-08-06 05:34:07.599 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 05:34:07.599 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:34:07.599 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:34:07.599 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.599 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:34:07.599 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:34:07.600 | DEBUG    | __main__:run:525 - Skipping benchmark 12 as result already exists
2022-08-06 05:34:07.600 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:34:07.600 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 05:34:07.600 | DEBUG    | __main__:run:509 - Number of Sets: 2
2022-08-06 05:34:07.600 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:34:07.600 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:07.600 | DEBUG    | __main__:run:525 - Skipping benchmark 13 as result already exists
2022-08-06 05:34:07.600 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 05:34:07.600 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:34:07.601 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 05:34:07.601 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.601 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.601 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 05:34:07.601 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.601 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.601 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.601 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.601 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.601 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.602 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.602 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.602 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:34:07.602 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.602 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.602 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.602 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.602 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 05:34:07.602 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.602 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.603 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.603 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.603 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.603 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.603 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.603 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.603 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:34:07.603 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.603 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.603 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.604 | DEBUG    | __main__:run:525 - Skipping benchmark 14 as result already exists
2022-08-06 05:34:07.604 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 05:34:07.604 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:34:07.604 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 05:34:07.604 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.604 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.604 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.604 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.604 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.605 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.605 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.605 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.605 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.605 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.605 | DEBUG    | __main__:run:515 - Number of queries: 22
2022-08-06 05:34:07.605 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.605 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.605 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.605 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.606 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.606 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.606 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.606 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.606 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.606 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:34:07.606 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.606 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.606 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.606 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.607 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:34:07.607 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.607 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.607 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.607 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.607 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.607 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 05:34:07.607 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.607 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.608 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.608 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:07.608 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:15.090 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows of 'dfin' - unique rows of 'dfin'
2022-08-06 05:34:15.090 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.nunique().sum()
2022-08-06 05:34:15.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:15.094 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows of 'dfin' - unique rows of 'dfin'
2022-08-06 05:34:15.094 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin['GoldTarget'].nunique()
2022-08-06 05:34:15.095 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:15.095 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows of 'dfin' - unique rows of 'dfin'
2022-08-06 05:34:15.095 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.drop_duplicates().shape[0]
2022-08-06 05:34:15.097 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:15.124 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:16.898 | DEBUG    | __main__:run_benchmark:431 - Query: return length - length of drop duplicates
2022-08-06 05:34:16.898 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False, subset=dfin.columns[1:]).shape[0] - dfin.shape[0]
2022-08-06 05:34:16.901 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:16.901 | DEBUG    | __main__:run_benchmark:431 - Query: return length - length of drop duplicates
2022-08-06 05:34:16.901 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 05:34:16.904 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:16.904 | DEBUG    | __main__:run_benchmark:431 - Query: return length - length of drop duplicates
2022-08-06 05:34:16.904 | DEBUG    | __main__:run_benchmark:432 - len(dfin) - len(dfin.drop_duplicates())
2022-08-06 05:34:16.905 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:16.933 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:16.934 | DEBUG    | __main__:run:525 - Skipping benchmark 15 as result already exists
2022-08-06 05:34:16.934 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 05:34:16.934 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 05:34:16.934 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:34:16.934 | DEBUG    | __main__:run:525 - Skipping benchmark 16 as result already exists
2022-08-06 05:34:16.934 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:34:18.684 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, drop all rows that are duplicated for column 'feat2' and keep the last occurence unmarked
2022-08-06 05:34:18.685 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='feat2', inplace=True, keep='last')
2022-08-06 05:34:18.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:18.722 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:34:18.723 | DEBUG    | __main__:run:525 - Skipping benchmark 16 as result already exists
2022-08-06 05:34:18.723 | DEBUG    | __main__:run:525 - Skipping benchmark 16 as result already exists
2022-08-06 05:34:18.723 | DEBUG    | __main__:run:525 - Skipping benchmark 16 as result already exists
2022-08-06 05:34:18.723 | DEBUG    | __main__:run:525 - Skipping benchmark 16 as result already exists
2022-08-06 05:34:20.418 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB' dont keep first or last
2022-08-06 05:34:20.419 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep=False, inplace=True)
2022-08-06 05:34:20.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:20.456 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:34:20.456 | DEBUG    | __main__:run:525 - Skipping benchmark 16 as result already exists
2022-08-06 05:34:20.457 | DEBUG    | __main__:run:525 - Skipping benchmark 16 as result already exists
2022-08-06 05:34:20.457 | DEBUG    | __main__:run:525 - Skipping benchmark 16 as result already exists
2022-08-06 05:34:20.457 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 05:34:20.457 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:34:20.457 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:34:20.457 | DEBUG    | __main__:run:525 - Skipping benchmark 17 as result already exists
2022-08-06 05:34:20.458 | DEBUG    | __main__:run:525 - Skipping benchmark 17 as result already exists
2022-08-06 05:34:20.458 | DEBUG    | __main__:run:525 - Skipping benchmark 17 as result already exists
2022-08-06 05:34:22.196 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'f2' in dataframe 'dfin' set values that are smaller than 10 to 10 inplace
2022-08-06 05:34:22.197 | DEBUG    | __main__:run_benchmark:432 - dfin['f2'].clip_lower(10, inplace=True)
2022-08-06 05:34:22.199 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:22.199 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'f2' in dataframe 'dfin' set values that are smaller than 10 to 10 inplace
2022-08-06 05:34:22.199 | DEBUG    | __main__:run_benchmark:432 - dfin['f2'].where(dfin['f2'] > 10, 10, inplace=True)
2022-08-06 05:34:22.209 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:22.236 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 05:34:23.901 | DEBUG    | __main__:run_benchmark:431 - Query: if "ftr2" value is less than 5 then change it to 5 and return all rows
2022-08-06 05:34:23.902 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['ftr2'] < 5, 'ftr2'] = 5
2022-08-06 05:34:23.911 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:23.939 | DEBUG    | __main__:run:525 - Skipping benchmark 17 as result already exists
2022-08-06 05:34:25.625 | DEBUG    | __main__:run_benchmark:431 - Query: if val of "ftr2" <5 then val=5
2022-08-06 05:34:25.626 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (5 if (x < 5) else x)))
2022-08-06 05:34:25.635 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:25.635 | DEBUG    | __main__:run_benchmark:431 - Query: if val of "ftr2" <5 then val=5
2022-08-06 05:34:25.635 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'] = np.where((dfin['ftr2'] < 5), 5, dfin['ftr2'])
2022-08-06 05:34:25.643 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:25.669 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:34:27.240 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, if 'feat2' is greater than 10, replace the cell value to 10
2022-08-06 05:34:27.241 | DEBUG    | __main__:run_benchmark:432 - #  If 'feat2' is less than -10, replace the cell value to -10
2022-08-06 05:34:27.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:27.242 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, if 'feat2' is greater than 10, replace the cell value to 10
2022-08-06 05:34:27.242 | DEBUG    | __main__:run_benchmark:432 - #  If 'feat2' is less than 10, replace the cell value to 0
2022-08-06 05:34:27.242 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:27.242 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, if 'feat2' is greater than 10, replace the cell value to 10
2022-08-06 05:34:27.242 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['feat2'] > 10, 'feat2'] = 10
2022-08-06 05:34:27.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:28.217 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, if 'feat2' is greater than 10 replace the cell value to 10
2022-08-06 05:34:28.218 | DEBUG    | __main__:run_benchmark:432 - #  If 'feat2' is less than -10 replace the cell value to -10
2022-08-06 05:34:28.219 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:28.219 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, if 'feat2' is greater than 10 replace the cell value to 10
2022-08-06 05:34:28.219 | DEBUG    | __main__:run_benchmark:432 - #  If 'feat2' is less than 10, replace the cell value to 0
2022-08-06 05:34:28.219 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:28.219 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, if 'feat2' is greater than 10 replace the cell value to 10
2022-08-06 05:34:28.219 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['feat2'] > 10, 'feat2'] = 10
2022-08-06 05:34:28.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:28.256 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 05:34:28.256 | DEBUG    | __main__:run:525 - Skipping benchmark 17 as result already exists
2022-08-06 05:34:28.256 | DEBUG    | __main__:run:515 - Number of queries: 25
2022-08-06 05:34:28.256 | DEBUG    | __main__:run:525 - Skipping benchmark 17 as result already exists
2022-08-06 05:34:28.256 | DEBUG    | __main__:run:525 - Skipping benchmark 17 as result already exists
2022-08-06 05:34:28.256 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 05:34:28.257 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 05:34:28.257 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:34:30.021 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-06 05:34:30.022 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '-')]
2022-08-06 05:34:30.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:30.042 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-06 05:34:30.042 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '-')].index)
2022-08-06 05:34:30.061 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:30.062 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-06 05:34:30.062 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.index[dfin.isin(['-']).any(axis=1)])
2022-08-06 05:34:30.074 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:30.100 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:30.101 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:31.739 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:31.740 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index)
2022-08-06 05:34:31.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:31.766 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:31.766 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:31.790 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:31.790 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:31.791 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:31.815 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:31.815 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:31.815 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index)
2022-08-06 05:34:31.840 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:31.840 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:31.840 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(~ (dfin['B'] == '-'))]
2022-08-06 05:34:31.858 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:31.858 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:31.858 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:31.882 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:31.882 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:31.882 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:31.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:31.906 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:31.906 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:31.930 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:31.930 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:31.930 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:31.954 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:31.954 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:31.955 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:31.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:31.978 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:31.979 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:32.002 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:32.002 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:32.003 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:32.026 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:32.027 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:32.027 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index, inplace=True)
2022-08-06 05:34:32.044 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:32.044 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:32.044 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:32.068 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:32.068 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:32.068 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:32.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:32.092 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:32.092 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:32.116 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:32.116 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:32.117 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:32.140 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:32.140 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:32.141 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:32.165 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:32.165 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:32.165 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '-']
2022-08-06 05:34:32.182 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:32.182 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 05:34:32.182 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:32.206 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:33.629 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:33.630 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:33.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:33.656 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:33.656 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:33.680 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:33.681 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:33.681 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index).reset_index(drop=True)
2022-08-06 05:34:33.705 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:33.705 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:33.706 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:33.730 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:33.730 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:33.730 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['B'] != '-')].reset_index(drop=True)
2022-08-06 05:34:33.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:33.754 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:33.755 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:33.779 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:33.779 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:33.779 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index, inplace=True)
2022-08-06 05:34:33.796 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:33.796 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:33.797 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:33.820 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:33.820 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:33.821 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:33.844 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:33.845 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:33.845 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:33.869 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:33.869 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:33.869 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '-')]
2022-08-06 05:34:33.886 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:33.886 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:33.886 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:33.910 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:33.910 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:33.911 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index, inplace=True)
2022-08-06 05:34:33.928 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:33.928 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:33.928 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '-')].index)
2022-08-06 05:34:33.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:33.947 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:33.947 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index)
2022-08-06 05:34:33.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:33.971 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:33.971 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index)
2022-08-06 05:34:33.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:33.995 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:33.995 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:34.019 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:34.019 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:34.020 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:34.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:34.043 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:34.044 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:34.067 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:34.067 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 05:34:34.068 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 05:34:34.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:34.118 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:34.119 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 05:34:34.119 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:34.119 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:34.119 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:35.774 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with ? in any column of dfin
2022-08-06 05:34:35.775 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?')].index)
2022-08-06 05:34:35.795 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:35.795 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with ? in any column of dfin
2022-08-06 05:34:35.796 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '?').all(axis=1)]
2022-08-06 05:34:35.805 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:37.520 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with 'NaN' and Remove rows which has any column value missing
2022-08-06 05:34:37.521 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 05:34:37.536 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:38.772 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with 'NaN' and then drop rows which has any column value missing
2022-08-06 05:34:38.773 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 05:34:38.788 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:39.968 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with 'NaN' in dfin and then drop rows which has any column value missing
2022-08-06 05:34:39.969 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 05:34:39.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:40.012 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:40.012 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:41.685 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with numpy NaN in dfin and drop rows which has any missing value
2022-08-06 05:34:41.685 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 05:34:41.700 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:41.732 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:43.189 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where values are '?'
2022-08-06 05:34:43.189 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?')].index)
2022-08-06 05:34:43.218 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:43.218 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where values are '?'
2022-08-06 05:34:43.218 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 05:34:43.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:43.271 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:43.271 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:43.271 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:44.802 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 05:34:44.803 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?')].index)
2022-08-06 05:34:44.868 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:44.869 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 05:34:44.869 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 05:34:44.894 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:44.894 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 05:34:44.895 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 05:34:44.919 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:44.919 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 05:34:44.920 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 05:34:44.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:44.945 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 05:34:44.946 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 05:34:44.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:44.971 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 05:34:44.971 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 05:34:44.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:44.995 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 05:34:44.995 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 05:34:45.020 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:45.020 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 05:34:45.020 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 05:34:45.044 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:45.044 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 05:34:45.044 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 05:34:45.069 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:45.069 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 05:34:45.069 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 05:34:45.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:45.093 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 05:34:45.093 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 05:34:45.118 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:45.118 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 05:34:45.118 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 05:34:45.142 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:45.142 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 05:34:45.143 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 05:34:45.167 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:45.167 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 05:34:45.167 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 05:34:45.192 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:45.192 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 05:34:45.192 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 05:34:45.216 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:45.216 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 05:34:45.216 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 05:34:45.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:45.241 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 05:34:45.241 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '?').all(axis=1)]
2022-08-06 05:34:45.250 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:45.277 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:34:45.277 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:45.277 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:45.277 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:45.277 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:45.277 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:46.567 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 05:34:46.567 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?')].index)
2022-08-06 05:34:46.597 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:46.597 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 05:34:46.597 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 05:34:46.615 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:46.615 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 05:34:46.615 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 05:34:46.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:46.633 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 05:34:46.633 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(~ (dfin['B'] == '?'))]
2022-08-06 05:34:46.653 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:46.654 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 05:34:46.654 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 05:34:46.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:46.682 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 05:34:46.682 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '?')]
2022-08-06 05:34:46.705 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:46.705 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 05:34:46.705 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 05:34:46.722 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:46.722 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 05:34:46.722 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '?')]
2022-08-06 05:34:46.739 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:46.740 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 05:34:46.740 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 05:34:46.757 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:46.757 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 05:34:46.757 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['B'] != '?')].reset_index(drop=True)
2022-08-06 05:34:46.781 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:46.781 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 05:34:46.781 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 05:34:46.798 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:46.798 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 05:34:46.798 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?')].index)
2022-08-06 05:34:46.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:46.817 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 05:34:46.817 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '?')]
2022-08-06 05:34:46.834 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:46.834 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 05:34:46.834 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '?').all(axis=1)]
2022-08-06 05:34:46.843 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:46.870 | DEBUG    | __main__:run:525 - Skipping benchmark 18 as result already exists
2022-08-06 05:34:48.621 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 05:34:48.622 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?')].index)
2022-08-06 05:34:48.648 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:48.648 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 05:34:48.648 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '?').all(axis=1)]
2022-08-06 05:34:48.658 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:48.684 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 05:34:48.684 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:34:48.685 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:34:48.685 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:34:51.175 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows from "data" that are not present in "test"
2022-08-06 05:34:51.176 | DEBUG    | __main__:run_benchmark:432 - data.loc[~data.index.isin(test.index)]
2022-08-06 05:34:51.193 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:53.420 | DEBUG    | __main__:run_benchmark:431 - Query: remove all common rows that "data" and "test" contain
2022-08-06 05:34:53.421 | DEBUG    | __main__:run_benchmark:432 - data.loc[(~ data.index.isin(test.index))]
2022-08-06 05:34:53.438 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:53.466 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:34:53.466 | DEBUG    | __main__:run:525 - Skipping benchmark 19 as result already exists
2022-08-06 05:34:53.466 | DEBUG    | __main__:run:525 - Skipping benchmark 19 as result already exists
2022-08-06 05:34:55.819 | DEBUG    | __main__:run_benchmark:431 - Query: Choose row from 'data' which is not in 'test'
2022-08-06 05:34:55.820 | DEBUG    | __main__:run_benchmark:432 - #  Hint: use the isin() function
2022-08-06 05:34:55.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:55.822 | DEBUG    | __main__:run_benchmark:431 - Query: Choose row from 'data' which is not in 'test'
2022-08-06 05:34:55.822 | DEBUG    | __main__:run_benchmark:432 - data[(~ data['inp1'].isin(test['inp1'].values)) & (~ data['inp2'].isin(test['inp2'].values)) & (~ data['inp3'].isin(test['inp3'].values))]
2022-08-06 05:34:55.852 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:55.852 | DEBUG    | __main__:run_benchmark:431 - Query: Choose row from 'data' which is not in 'test'
2022-08-06 05:34:55.852 | DEBUG    | __main__:run_benchmark:432 - data.loc[(~ data.index.isin(test.index))]
2022-08-06 05:34:55.867 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:34:55.893 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 05:34:55.893 | DEBUG    | __main__:run:525 - Skipping benchmark 19 as result already exists
2022-08-06 05:34:57.686 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:57.687 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:57.716 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:57.716 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:57.716 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:57.743 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:57.744 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:57.744 | DEBUG    | __main__:run_benchmark:432 - data.index[~data.index.isin(test.index)]
2022-08-06 05:34:57.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:57.766 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:57.766 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 05:34:57.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:57.766 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:57.767 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:57.794 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:57.794 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:57.794 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:57.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:57.821 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:57.822 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:57.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:57.849 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:57.850 | DEBUG    | __main__:run_benchmark:432 - data.index.intersection(test.index)
2022-08-06 05:34:57.872 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:57.872 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:57.872 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:57.900 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:57.900 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:57.901 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:57.928 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:57.928 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:57.928 | DEBUG    | __main__:run_benchmark:432 - rows_to_drop = np.setdiff1d(data.index, test.index)
2022-08-06 05:34:57.950 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:57.950 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:57.950 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:57.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:57.978 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:57.978 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:58.006 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:58.006 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:58.006 | DEBUG    | __main__:run_benchmark:432 - data.index[~data.index.isin(test.index)]
2022-08-06 05:34:58.028 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:58.028 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:58.028 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:58.055 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:58.055 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:58.056 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:58.083 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:58.083 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:58.083 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:58.111 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:58.111 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:58.111 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:58.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:58.139 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:58.139 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:58.166 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:58.166 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 05:34:58.167 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:58.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:59.841 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:34:59.841 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:59.912 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:59.913 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:34:59.913 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:59.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:59.941 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:34:59.941 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:59.969 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:59.969 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:34:59.969 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:34:59.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:34:59.997 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:34:59.997 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:35:00.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:00.025 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:35:00.025 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:35:00.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:00.052 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:35:00.052 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:35:00.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:00.080 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:35:00.080 | DEBUG    | __main__:run_benchmark:432 - data[True]
2022-08-06 05:35:00.084 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:00.084 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:35:00.084 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:35:00.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:00.112 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:35:00.112 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:35:00.140 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:00.140 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:35:00.140 | DEBUG    | __main__:run_benchmark:432 - data.loc[(data.index.isin(test.index))]
2022-08-06 05:35:00.168 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:00.168 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:35:00.168 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:35:00.196 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:00.196 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:35:00.196 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:35:00.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:00.227 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:35:00.228 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:35:00.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:00.255 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:35:00.255 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:35:00.283 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:00.283 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:35:00.283 | DEBUG    | __main__:run_benchmark:432 - data.loc[test.index]
2022-08-06 05:35:00.311 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:00.311 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:35:00.311 | DEBUG    | __main__:run_benchmark:432 - data = data[data.index.isin(test.index)]
2022-08-06 05:35:00.333 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:00.333 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:35:00.333 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:35:00.361 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:00.361 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:35:00.361 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:35:00.389 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:00.389 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 05:35:00.390 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 05:35:00.417 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:00.445 | DEBUG    | __main__:run:525 - Skipping benchmark 19 as result already exists
2022-08-06 05:35:00.445 | DEBUG    | __main__:run:525 - Skipping benchmark 19 as result already exists
2022-08-06 05:35:00.446 | DEBUG    | __main__:run:525 - Skipping benchmark 19 as result already exists
2022-08-06 05:35:00.446 | DEBUG    | __main__:run:525 - Skipping benchmark 19 as result already exists
2022-08-06 05:35:00.446 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:35:02.804 | DEBUG    | __main__:run_benchmark:431 - Query: remove similar rows between dataframe 'data' and dataframe 'test'
2022-08-06 05:35:02.805 | DEBUG    | __main__:run_benchmark:432 - data.loc[(~ data.index.isin(test.index))]
2022-08-06 05:35:02.822 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:35:04.465 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:04.466 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 05:35:04.498 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:04.498 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:04.498 | DEBUG    | __main__:run_benchmark:432 - diff = data - test
2022-08-06 05:35:04.529 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:04.529 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:04.530 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 05:35:04.561 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:04.561 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:04.561 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 05:35:04.592 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:04.592 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:04.592 | DEBUG    | __main__:run_benchmark:432 - data_test = data - test
2022-08-06 05:35:04.623 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:04.623 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:04.623 | DEBUG    | __main__:run_benchmark:432 - diff = data - test
2022-08-06 05:35:04.654 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:04.654 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:04.654 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 05:35:04.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:04.685 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:04.685 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 05:35:04.716 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:04.716 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:04.716 | DEBUG    | __main__:run_benchmark:432 - data = data.append(test)
2022-08-06 05:35:04.739 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:04.739 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:04.739 | DEBUG    | __main__:run_benchmark:432 - data.subtract(test)
2022-08-06 05:35:04.770 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:04.770 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:04.770 | DEBUG    | __main__:run_benchmark:432 - diff = data - test
2022-08-06 05:35:04.801 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:04.801 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:04.801 | DEBUG    | __main__:run_benchmark:432 - difference = data - test
2022-08-06 05:35:04.832 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:04.832 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:04.832 | DEBUG    | __main__:run_benchmark:432 - (data - test)
2022-08-06 05:35:04.863 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:04.863 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:04.863 | DEBUG    | __main__:run_benchmark:432 - diff = data - test
2022-08-06 05:35:04.894 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:04.894 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:04.894 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 05:35:04.925 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:04.925 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:04.925 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 05:35:04.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:04.956 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:04.956 | DEBUG    | __main__:run_benchmark:432 - diff = data - test
2022-08-06 05:35:04.987 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:04.987 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:04.987 | DEBUG    | __main__:run_benchmark:432 - diff = data - test
2022-08-06 05:35:05.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:05.018 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:05.018 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 05:35:05.049 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:05.049 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 05:35:05.049 | DEBUG    | __main__:run_benchmark:432 - data.subtract(test)
2022-08-06 05:35:05.079 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:06.758 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'train' from 'data'
2022-08-06 05:35:06.759 | DEBUG    | __main__:run_benchmark:432 - data = data.drop(['train'])
2022-08-06 05:35:06.764 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:06.764 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'train' from 'data'
2022-08-06 05:35:06.764 | DEBUG    | __main__:run_benchmark:432 - data = data.drop('train', axis=1)
2022-08-06 05:35:06.768 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:06.768 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'train' from 'data'
2022-08-06 05:35:06.768 | DEBUG    | __main__:run_benchmark:432 - data = data.drop(['train'])
2022-08-06 05:35:06.772 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:06.772 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'train' from 'data'
2022-08-06 05:35:06.772 | DEBUG    | __main__:run_benchmark:432 - data = data[:-1]
2022-08-06 05:35:06.784 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:35:06.817 | DEBUG    | __main__:run:525 - Skipping benchmark 19 as result already exists
2022-08-06 05:35:06.817 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 05:35:06.818 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:35:06.818 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:35:06.818 | DEBUG    | __main__:run:525 - Skipping benchmark 20 as result already exists
2022-08-06 05:35:06.818 | DEBUG    | __main__:run:525 - Skipping benchmark 20 as result already exists
2022-08-06 05:35:06.818 | DEBUG    | __main__:run:525 - Skipping benchmark 20 as result already exists
2022-08-06 05:35:06.818 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:35:08.806 | DEBUG    | __main__:run_benchmark:431 - Query: find maximum value of first three columns of row and add its column name to a new column "output"
2022-08-06 05:35:08.806 | DEBUG    | __main__:run_benchmark:432 - dfin['output'] = dfin.iloc[:, 0:3].idxmax(axis=1)
2022-08-06 05:35:08.819 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:35:08.849 | DEBUG    | __main__:run:515 - Number of queries: 17
2022-08-06 05:35:08.849 | DEBUG    | __main__:run:525 - Skipping benchmark 20 as result already exists
2022-08-06 05:35:08.849 | DEBUG    | __main__:run:525 - Skipping benchmark 20 as result already exists
2022-08-06 05:35:08.849 | DEBUG    | __main__:run:525 - Skipping benchmark 20 as result already exists
2022-08-06 05:35:08.849 | DEBUG    | __main__:run:525 - Skipping benchmark 20 as result already exists
2022-08-06 05:35:08.850 | DEBUG    | __main__:run:525 - Skipping benchmark 20 as result already exists
2022-08-06 05:35:08.850 | DEBUG    | __main__:run:525 - Skipping benchmark 20 as result already exists
2022-08-06 05:35:08.850 | DEBUG    | __main__:run:525 - Skipping benchmark 20 as result already exists
2022-08-06 05:35:08.850 | DEBUG    | __main__:run:525 - Skipping benchmark 20 as result already exists
2022-08-06 05:35:08.850 | DEBUG    | __main__:run:525 - Skipping benchmark 20 as result already exists
2022-08-06 05:35:15.109 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-PLNC6ulVlY7Nc2Arf9QxoEyT on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7efe3ed597a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7efe3eed98c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7efdab1aea90>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7efdab1aea90>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Get maximum value of rows and store in a new column 'prediction'", 'user': 'u6'}, {'query': "Get maxi...
    │               └ {'queries': [{'query': "Get maximum value of rows and store in a new column 'prediction'", 'user': 'u6'}, {'query': "Get maxi...
    └ {'query': 'Get the index of maximum value among columns 0, 1, 2, 3 and 4 and store it as column name prediction', 'user': 'u15'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7efdab1aea90>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a series with the index of th...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7efdab1aea90>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7efdaa002e60>
                       └ <openai.api_requestor.APIRequestor object at 0x7efd97d92e10>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 12:35:15 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '373', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7efe3287cf50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 12:35:15 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '373', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-PLNC6ulVlY7Nc2Arf9QxoEyT on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7efd97d90d90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-PLNC6ulVlY7Nc2Arf9QxoEyT on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-PLNC6ulVlY7Nc2Arf9QxoEyT on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase.
2022-08-06 05:35:15.137 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 05:35:47.453 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among columns 0, 1, 2, 3 and 4 and store it as column name prediction
2022-08-06 05:35:47.454 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 05:35:47.456 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:47.457 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among columns 0, 1, 2, 3 and 4 and store it as column name prediction
2022-08-06 05:35:47.457 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[0:5].idxmax(axis=1)
2022-08-06 05:35:47.471 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:47.471 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among columns 0, 1, 2, 3 and 4 and store it as column name prediction
2022-08-06 05:35:47.471 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[list(dfin.columns[:-1])].apply(np.argmax, axis=1)
2022-08-06 05:35:47.485 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:35:49.668 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 05:35:49.669 | DEBUG    | __main__:run_benchmark:432 - prediction = dfin.iloc[:, :5].idxmax(axis=1)
2022-08-06 05:35:49.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:49.682 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 05:35:49.682 | DEBUG    | __main__:run_benchmark:432 - prediction = dfin.iloc[:, :5].idxmax(axis=1)
2022-08-06 05:35:49.694 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 05:35:49.694 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 05:35:49.694 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, 0:5].values.argmax(axis=1)
2022-08-06 05:35:49.707 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 05:35:49.736 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:35:49.736 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:35:49.736 | DEBUG    | __main__:run:525 - Skipping benchmark 20 as result already exists
2022-08-06 05:39:10.377 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval1
2022-08-06 05:39:10.377 | DEBUG    | __main__:run:495 - Found 68 benchmarks in PandasEval1
2022-08-06 05:39:10.377 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 05:39:10.377 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.378 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.378 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 05:39:10.378 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.378 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.378 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 05:39:10.378 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.378 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.379 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 05:39:10.379 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.379 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.379 | DEBUG    | __main__:run:525 - Skipping benchmark 3:A0 as result already exists
2022-08-06 05:39:10.379 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 05:39:10.379 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.379 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.379 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 05:39:10.379 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.380 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.380 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 05:39:10.380 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.380 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.380 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 05:39:10.380 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.380 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.380 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 05:39:10.381 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.381 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.381 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 05:39:10.381 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.381 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.381 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 05:39:10.381 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.381 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.381 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 05:39:10.382 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.382 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.382 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A0 as result already exists
2022-08-06 05:39:10.382 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 05:39:10.382 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.382 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.382 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 05:39:10.382 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.382 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.383 | DEBUG    | __main__:run:525 - Skipping benchmark 13:A0 as result already exists
2022-08-06 05:39:10.383 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 05:39:10.383 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.383 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.383 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 05:39:10.383 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.383 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.383 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 05:39:10.383 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.384 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.384 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 05:39:10.384 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.384 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.384 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 05:39:10.384 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.384 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.385 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A0 as result already exists
2022-08-06 05:39:10.385 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 05:39:10.385 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.385 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.385 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 05:39:10.385 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.385 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.385 | DEBUG    | __main__:run:508 - Running benchmark 21
2022-08-06 05:39:10.386 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.386 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.386 | DEBUG    | __main__:run:508 - Running benchmark 22
2022-08-06 05:39:10.386 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.386 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.386 | DEBUG    | __main__:run:525 - Skipping benchmark 22:A0 as result already exists
2022-08-06 05:39:10.386 | DEBUG    | __main__:run:508 - Running benchmark 23
2022-08-06 05:39:10.386 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.386 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.387 | DEBUG    | __main__:run:508 - Running benchmark 24
2022-08-06 05:39:10.387 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.387 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.387 | DEBUG    | __main__:run:508 - Running benchmark 25
2022-08-06 05:39:10.387 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.387 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.387 | DEBUG    | __main__:run:508 - Running benchmark 26
2022-08-06 05:39:10.387 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.387 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.388 | DEBUG    | __main__:run:525 - Skipping benchmark 26:A0 as result already exists
2022-08-06 05:39:10.388 | DEBUG    | __main__:run:508 - Running benchmark 27
2022-08-06 05:39:10.388 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.388 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.388 | DEBUG    | __main__:run:508 - Running benchmark 28
2022-08-06 05:39:10.388 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.388 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.388 | DEBUG    | __main__:run:525 - Skipping benchmark 28:A0 as result already exists
2022-08-06 05:39:10.388 | DEBUG    | __main__:run:508 - Running benchmark 29
2022-08-06 05:39:10.389 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.389 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.389 | DEBUG    | __main__:run:508 - Running benchmark 30
2022-08-06 05:39:10.389 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.389 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.389 | DEBUG    | __main__:run:525 - Skipping benchmark 30:A0 as result already exists
2022-08-06 05:39:10.389 | DEBUG    | __main__:run:508 - Running benchmark 31
2022-08-06 05:39:10.390 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.390 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.390 | DEBUG    | __main__:run:508 - Running benchmark 32
2022-08-06 05:39:10.390 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.390 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.390 | DEBUG    | __main__:run:508 - Running benchmark 33
2022-08-06 05:39:10.390 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.391 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.391 | DEBUG    | __main__:run:508 - Running benchmark 34
2022-08-06 05:39:10.391 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.391 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.391 | DEBUG    | __main__:run:525 - Skipping benchmark 34:A0 as result already exists
2022-08-06 05:39:10.391 | DEBUG    | __main__:run:508 - Running benchmark 35
2022-08-06 05:39:10.391 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.391 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.391 | DEBUG    | __main__:run:525 - Skipping benchmark 35:A0 as result already exists
2022-08-06 05:39:10.391 | DEBUG    | __main__:run:508 - Running benchmark 36
2022-08-06 05:39:10.392 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.392 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.392 | DEBUG    | __main__:run:525 - Skipping benchmark 36:A0 as result already exists
2022-08-06 05:39:10.392 | DEBUG    | __main__:run:508 - Running benchmark 37
2022-08-06 05:39:10.392 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.392 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.392 | DEBUG    | __main__:run:525 - Skipping benchmark 37:A0 as result already exists
2022-08-06 05:39:10.392 | DEBUG    | __main__:run:508 - Running benchmark 38
2022-08-06 05:39:10.393 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.393 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.393 | DEBUG    | __main__:run:508 - Running benchmark 39
2022-08-06 05:39:10.393 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.393 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.393 | DEBUG    | __main__:run:508 - Running benchmark 40
2022-08-06 05:39:10.393 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.394 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.394 | DEBUG    | __main__:run:525 - Skipping benchmark 40:A0 as result already exists
2022-08-06 05:39:10.394 | DEBUG    | __main__:run:508 - Running benchmark 41
2022-08-06 05:39:10.394 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.394 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.394 | DEBUG    | __main__:run:525 - Skipping benchmark 41:A0 as result already exists
2022-08-06 05:39:10.394 | DEBUG    | __main__:run:508 - Running benchmark 42
2022-08-06 05:39:10.395 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.395 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.395 | DEBUG    | __main__:run:525 - Skipping benchmark 42:A0 as result already exists
2022-08-06 05:39:10.395 | DEBUG    | __main__:run:508 - Running benchmark 43
2022-08-06 05:39:10.395 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.395 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.395 | DEBUG    | __main__:run:525 - Skipping benchmark 43:A0 as result already exists
2022-08-06 05:39:10.395 | DEBUG    | __main__:run:508 - Running benchmark 44
2022-08-06 05:39:10.395 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.395 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.396 | DEBUG    | __main__:run:508 - Running benchmark 45
2022-08-06 05:39:10.396 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.396 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.396 | DEBUG    | __main__:run:525 - Skipping benchmark 45:A0 as result already exists
2022-08-06 05:39:10.396 | DEBUG    | __main__:run:508 - Running benchmark 46
2022-08-06 05:39:10.396 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.396 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.396 | DEBUG    | __main__:run:508 - Running benchmark 47
2022-08-06 05:39:10.396 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.397 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.397 | DEBUG    | __main__:run:508 - Running benchmark 48
2022-08-06 05:39:10.397 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.397 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.397 | DEBUG    | __main__:run:525 - Skipping benchmark 48:A0 as result already exists
2022-08-06 05:39:10.397 | DEBUG    | __main__:run:508 - Running benchmark 49
2022-08-06 05:39:10.397 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.398 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.398 | DEBUG    | __main__:run:525 - Skipping benchmark 49:A0 as result already exists
2022-08-06 05:39:10.398 | DEBUG    | __main__:run:508 - Running benchmark 50
2022-08-06 05:39:10.398 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.398 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.398 | DEBUG    | __main__:run:525 - Skipping benchmark 50:A0 as result already exists
2022-08-06 05:39:10.398 | DEBUG    | __main__:run:508 - Running benchmark 51
2022-08-06 05:39:10.398 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.398 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.398 | DEBUG    | __main__:run:508 - Running benchmark 52
2022-08-06 05:39:10.399 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.399 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.399 | DEBUG    | __main__:run:508 - Running benchmark 53
2022-08-06 05:39:10.399 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.399 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.399 | DEBUG    | __main__:run:508 - Running benchmark 54
2022-08-06 05:39:10.400 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.400 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.400 | DEBUG    | __main__:run:525 - Skipping benchmark 54:A0 as result already exists
2022-08-06 05:39:10.400 | DEBUG    | __main__:run:508 - Running benchmark 55
2022-08-06 05:39:10.400 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.400 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.400 | DEBUG    | __main__:run:508 - Running benchmark 56
2022-08-06 05:39:10.400 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.401 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.401 | DEBUG    | __main__:run:508 - Running benchmark 57
2022-08-06 05:39:10.401 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.401 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.401 | DEBUG    | __main__:run:508 - Running benchmark 58
2022-08-06 05:39:10.401 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.401 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.401 | DEBUG    | __main__:run:508 - Running benchmark 59
2022-08-06 05:39:10.401 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.402 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.402 | DEBUG    | __main__:run:525 - Skipping benchmark 59:A0 as result already exists
2022-08-06 05:39:10.402 | DEBUG    | __main__:run:508 - Running benchmark 60
2022-08-06 05:39:10.402 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.402 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.402 | DEBUG    | __main__:run:525 - Skipping benchmark 60:A0 as result already exists
2022-08-06 05:39:10.402 | DEBUG    | __main__:run:508 - Running benchmark 62
2022-08-06 05:39:10.402 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.402 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.403 | DEBUG    | __main__:run:525 - Skipping benchmark 62:A0 as result already exists
2022-08-06 05:39:10.403 | DEBUG    | __main__:run:508 - Running benchmark 63
2022-08-06 05:39:10.403 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.403 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.403 | DEBUG    | __main__:run:525 - Skipping benchmark 63:A0 as result already exists
2022-08-06 05:39:10.403 | DEBUG    | __main__:run:508 - Running benchmark 64
2022-08-06 05:39:10.403 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.403 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.403 | DEBUG    | __main__:run:508 - Running benchmark 65
2022-08-06 05:39:10.403 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.404 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.404 | DEBUG    | __main__:run:525 - Skipping benchmark 65:A0 as result already exists
2022-08-06 05:39:10.404 | DEBUG    | __main__:run:508 - Running benchmark 66
2022-08-06 05:39:10.404 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.404 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.404 | DEBUG    | __main__:run:525 - Skipping benchmark 66:A0 as result already exists
2022-08-06 05:39:10.404 | DEBUG    | __main__:run:508 - Running benchmark 67
2022-08-06 05:39:10.404 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:39:10.404 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.405 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval2
2022-08-06 05:39:10.405 | DEBUG    | __main__:run:495 - Found 21 benchmarks in PandasEval2
2022-08-06 05:39:10.405 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 05:39:10.405 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:39:10.405 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:39:10.405 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:39:10.405 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.405 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:39:10.406 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:39:10.406 | DEBUG    | __main__:run:525 - Skipping benchmark 0:E2 as result already exists
2022-08-06 05:39:10.406 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 05:39:10.406 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:39:10.406 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:39:10.406 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:39:10.406 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:39:10.406 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:39:10.406 | DEBUG    | __main__:run:525 - Skipping benchmark 1:C3 as result already exists
2022-08-06 05:39:10.406 | DEBUG    | __main__:run:525 - Skipping benchmark 1:C5 as result already exists
2022-08-06 05:39:10.407 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:39:10.407 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 05:39:10.407 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:39:10.407 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:39:10.407 | DEBUG    | __main__:run:525 - Skipping benchmark 2:A2 as result already exists
2022-08-06 05:39:10.407 | DEBUG    | __main__:run:525 - Skipping benchmark 2:A5 as result already exists
2022-08-06 05:39:10.407 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 05:39:10.407 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D0 as result already exists
2022-08-06 05:39:10.407 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D1 as result already exists
2022-08-06 05:39:10.408 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D3 as result already exists
2022-08-06 05:39:10.408 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D4 as result already exists
2022-08-06 05:39:10.408 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D5 as result already exists
2022-08-06 05:39:10.408 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D6 as result already exists
2022-08-06 05:39:10.408 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D7 as result already exists
2022-08-06 05:39:10.408 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D8 as result already exists
2022-08-06 05:39:10.408 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D9 as result already exists
2022-08-06 05:39:10.408 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D10 as result already exists
2022-08-06 05:39:10.408 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D11 as result already exists
2022-08-06 05:39:10.409 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 05:39:10.409 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B1 as result already exists
2022-08-06 05:39:10.409 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B2 as result already exists
2022-08-06 05:39:10.409 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B3 as result already exists
2022-08-06 05:39:10.409 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B4 as result already exists
2022-08-06 05:39:10.409 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B6 as result already exists
2022-08-06 05:39:10.409 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B7 as result already exists
2022-08-06 05:39:10.409 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B8 as result already exists
2022-08-06 05:39:10.409 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B9 as result already exists
2022-08-06 05:39:10.410 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 05:39:10.410 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C0 as result already exists
2022-08-06 05:39:10.410 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C1 as result already exists
2022-08-06 05:39:10.410 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C2 as result already exists
2022-08-06 05:39:10.410 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C3 as result already exists
2022-08-06 05:39:10.410 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C4 as result already exists
2022-08-06 05:39:10.410 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C5 as result already exists
2022-08-06 05:39:10.410 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C8 as result already exists
2022-08-06 05:39:10.410 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C9 as result already exists
2022-08-06 05:39:10.410 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 05:39:10.411 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E0 as result already exists
2022-08-06 05:39:10.411 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E1 as result already exists
2022-08-06 05:39:10.411 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E2 as result already exists
2022-08-06 05:39:10.411 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E3 as result already exists
2022-08-06 05:39:10.411 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E4 as result already exists
2022-08-06 05:39:10.411 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E5 as result already exists
2022-08-06 05:39:10.411 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E6 as result already exists
2022-08-06 05:39:10.411 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E7 as result already exists
2022-08-06 05:39:10.411 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E13 as result already exists
2022-08-06 05:39:10.412 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E14 as result already exists
2022-08-06 05:39:10.412 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E15 as result already exists
2022-08-06 05:39:10.412 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 05:39:10.412 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:39:10.412 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:39:10.412 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 05:39:10.412 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D1 as result already exists
2022-08-06 05:39:10.412 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D4 as result already exists
2022-08-06 05:39:10.412 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D7 as result already exists
2022-08-06 05:39:10.413 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D10 as result already exists
2022-08-06 05:39:10.413 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:39:10.413 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 05:39:10.413 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:39:10.413 | DEBUG    | __main__:run:525 - Skipping benchmark 3:E2 as result already exists
2022-08-06 05:39:10.413 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 05:39:10.413 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:39:10.413 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:39:10.413 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A0 as result already exists
2022-08-06 05:39:10.413 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A3 as result already exists
2022-08-06 05:39:10.414 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A4 as result already exists
2022-08-06 05:39:10.414 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:39:10.414 | DEBUG    | __main__:run:525 - Skipping benchmark 4:D1 as result already exists
2022-08-06 05:39:10.414 | DEBUG    | __main__:run:525 - Skipping benchmark 4:D2 as result already exists
2022-08-06 05:39:10.414 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:39:10.414 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:39:10.414 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C1 as result already exists
2022-08-06 05:39:10.414 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C2 as result already exists
2022-08-06 05:39:10.414 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C3 as result already exists
2022-08-06 05:39:10.414 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C4 as result already exists
2022-08-06 05:39:10.415 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C5 as result already exists
2022-08-06 05:39:10.415 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C6 as result already exists
2022-08-06 05:39:10.415 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:39:10.415 | DEBUG    | __main__:run:525 - Skipping benchmark 4:E2 as result already exists
2022-08-06 05:39:10.415 | DEBUG    | __main__:run:525 - Skipping benchmark 4:E4 as result already exists
2022-08-06 05:39:10.415 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 05:39:10.415 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:39:10.415 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:39:10.415 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A0 as result already exists
2022-08-06 05:39:10.415 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A1 as result already exists
2022-08-06 05:39:10.416 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A2 as result already exists
2022-08-06 05:39:10.416 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A3 as result already exists
2022-08-06 05:39:10.416 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 05:39:10.416 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D0 as result already exists
2022-08-06 05:39:10.416 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D1 as result already exists
2022-08-06 05:39:10.416 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D2 as result already exists
2022-08-06 05:39:10.416 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D3 as result already exists
2022-08-06 05:39:10.416 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D4 as result already exists
2022-08-06 05:39:10.417 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D5 as result already exists
2022-08-06 05:39:10.417 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D6 as result already exists
2022-08-06 05:39:10.417 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D7 as result already exists
2022-08-06 05:39:10.417 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D8 as result already exists
2022-08-06 05:39:10.417 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D9 as result already exists
2022-08-06 05:39:10.417 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D10 as result already exists
2022-08-06 05:39:10.417 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D11 as result already exists
2022-08-06 05:39:10.417 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D12 as result already exists
2022-08-06 05:39:10.417 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D13 as result already exists
2022-08-06 05:39:10.418 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D14 as result already exists
2022-08-06 05:39:10.418 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D15 as result already exists
2022-08-06 05:39:10.418 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:39:10.418 | DEBUG    | __main__:run:525 - Skipping benchmark 5:B4 as result already exists
2022-08-06 05:39:10.418 | DEBUG    | __main__:run:525 - Skipping benchmark 5:B5 as result already exists
2022-08-06 05:39:10.418 | DEBUG    | __main__:run:525 - Skipping benchmark 5:B6 as result already exists
2022-08-06 05:39:10.418 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:39:10.418 | DEBUG    | __main__:run:525 - Skipping benchmark 5:C0 as result already exists
2022-08-06 05:39:10.418 | DEBUG    | __main__:run:525 - Skipping benchmark 5:C1 as result already exists
2022-08-06 05:39:10.418 | DEBUG    | __main__:run:525 - Skipping benchmark 5:C2 as result already exists
2022-08-06 05:39:10.419 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 05:39:10.419 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E2 as result already exists
2022-08-06 05:39:10.419 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E3 as result already exists
2022-08-06 05:39:10.419 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E4 as result already exists
2022-08-06 05:39:10.419 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E5 as result already exists
2022-08-06 05:39:10.419 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E6 as result already exists
2022-08-06 05:39:10.419 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E8 as result already exists
2022-08-06 05:39:10.419 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E9 as result already exists
2022-08-06 05:39:10.419 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 05:39:10.419 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 05:39:10.420 | DEBUG    | __main__:run:515 - Number of queries: 27
2022-08-06 05:39:10.420 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D0 as result already exists
2022-08-06 05:39:10.420 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D1 as result already exists
2022-08-06 05:39:10.420 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D4 as result already exists
2022-08-06 05:39:10.420 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D7 as result already exists
2022-08-06 05:39:10.420 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D9 as result already exists
2022-08-06 05:39:10.420 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D10 as result already exists
2022-08-06 05:39:10.420 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D11 as result already exists
2022-08-06 05:39:10.421 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D12 as result already exists
2022-08-06 05:39:10.421 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D13 as result already exists
2022-08-06 05:39:10.421 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D18 as result already exists
2022-08-06 05:39:10.421 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D19 as result already exists
2022-08-06 05:39:10.421 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D20 as result already exists
2022-08-06 05:39:10.421 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D21 as result already exists
2022-08-06 05:39:10.421 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D22 as result already exists
2022-08-06 05:39:10.422 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D23 as result already exists
2022-08-06 05:39:10.422 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D24 as result already exists
2022-08-06 05:39:10.422 | DEBUG    | __main__:run:515 - Number of queries: 26
2022-08-06 05:39:10.422 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B17 as result already exists
2022-08-06 05:39:10.422 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B18 as result already exists
2022-08-06 05:39:10.422 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B24 as result already exists
2022-08-06 05:39:10.422 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B25 as result already exists
2022-08-06 05:39:10.422 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:39:10.422 | DEBUG    | __main__:run:525 - Skipping benchmark 6:E5 as result already exists
2022-08-06 05:39:10.423 | DEBUG    | __main__:run:525 - Skipping benchmark 6:E6 as result already exists
2022-08-06 05:39:10.423 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:39:10.423 | DEBUG    | __main__:run:525 - Skipping benchmark 6:C1 as result already exists
2022-08-06 05:39:10.423 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 05:39:10.423 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 05:39:10.423 | DEBUG    | __main__:run:515 - Number of queries: 21
2022-08-06 05:39:10.423 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D0 as result already exists
2022-08-06 05:39:10.423 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D1 as result already exists
2022-08-06 05:39:10.423 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D2 as result already exists
2022-08-06 05:39:10.423 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D3 as result already exists
2022-08-06 05:39:10.424 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D4 as result already exists
2022-08-06 05:39:10.424 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D5 as result already exists
2022-08-06 05:39:10.424 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D6 as result already exists
2022-08-06 05:39:10.424 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D7 as result already exists
2022-08-06 05:39:10.424 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D9 as result already exists
2022-08-06 05:39:10.424 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D10 as result already exists
2022-08-06 05:39:10.424 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D11 as result already exists
2022-08-06 05:39:10.424 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D12 as result already exists
2022-08-06 05:39:10.424 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D13 as result already exists
2022-08-06 05:39:10.424 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D14 as result already exists
2022-08-06 05:39:10.425 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D15 as result already exists
2022-08-06 05:39:10.425 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D16 as result already exists
2022-08-06 05:39:10.425 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D17 as result already exists
2022-08-06 05:39:10.425 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D18 as result already exists
2022-08-06 05:39:10.425 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D19 as result already exists
2022-08-06 05:39:10.425 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D20 as result already exists
2022-08-06 05:39:10.425 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:39:10.425 | DEBUG    | __main__:run:525 - Skipping benchmark 7:A0 as result already exists
2022-08-06 05:39:10.425 | DEBUG    | __main__:run:525 - Skipping benchmark 7:A1 as result already exists
2022-08-06 05:39:10.426 | DEBUG    | __main__:run:525 - Skipping benchmark 7:A2 as result already exists
2022-08-06 05:39:10.426 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:39:10.426 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E0 as result already exists
2022-08-06 05:39:10.426 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E2 as result already exists
2022-08-06 05:39:10.426 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E3 as result already exists
2022-08-06 05:39:10.426 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 05:39:10.426 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 05:39:10.426 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:39:10.426 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C0 as result already exists
2022-08-06 05:39:10.426 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C1 as result already exists
2022-08-06 05:39:10.427 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C2 as result already exists
2022-08-06 05:39:10.427 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C3 as result already exists
2022-08-06 05:39:10.427 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:39:10.427 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A0 as result already exists
2022-08-06 05:39:10.427 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A2 as result already exists
2022-08-06 05:39:10.427 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A3 as result already exists
2022-08-06 05:39:10.427 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A4 as result already exists
2022-08-06 05:39:10.427 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 05:39:10.427 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D3 as result already exists
2022-08-06 05:39:10.427 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D6 as result already exists
2022-08-06 05:39:10.428 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D7 as result already exists
2022-08-06 05:39:10.428 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D8 as result already exists
2022-08-06 05:39:10.428 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 05:39:10.428 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:39:10.428 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 05:39:10.428 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D0 as result already exists
2022-08-06 05:39:10.428 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D1 as result already exists
2022-08-06 05:39:10.428 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D2 as result already exists
2022-08-06 05:39:10.428 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D3 as result already exists
2022-08-06 05:39:10.429 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D6 as result already exists
2022-08-06 05:39:10.429 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:39:10.429 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:39:10.429 | DEBUG    | __main__:run:525 - Skipping benchmark 9:C2 as result already exists
2022-08-06 05:39:10.429 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:39:10.429 | DEBUG    | __main__:run:525 - Skipping benchmark 9:A2 as result already exists
2022-08-06 05:39:10.429 | DEBUG    | __main__:run:525 - Skipping benchmark 9:A3 as result already exists
2022-08-06 05:39:10.429 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:39:10.429 | DEBUG    | __main__:run:525 - Skipping benchmark 9:E0 as result already exists
2022-08-06 05:39:10.430 | DEBUG    | __main__:run:525 - Skipping benchmark 9:E2 as result already exists
2022-08-06 05:39:10.430 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 05:39:10.430 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:39:10.430 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.430 | DEBUG    | __main__:run:525 - Skipping benchmark 10:C0 as result already exists
2022-08-06 05:39:10.430 | DEBUG    | __main__:run:515 - Number of queries: 23
2022-08-06 05:39:10.430 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D0 as result already exists
2022-08-06 05:39:10.430 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D1 as result already exists
2022-08-06 05:39:10.430 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D5 as result already exists
2022-08-06 05:39:10.431 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D6 as result already exists
2022-08-06 05:39:10.431 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D7 as result already exists
2022-08-06 05:39:10.431 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D8 as result already exists
2022-08-06 05:39:10.431 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D9 as result already exists
2022-08-06 05:39:10.431 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D10 as result already exists
2022-08-06 05:39:10.431 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D11 as result already exists
2022-08-06 05:39:10.431 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D13 as result already exists
2022-08-06 05:39:10.431 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D14 as result already exists
2022-08-06 05:39:10.431 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D15 as result already exists
2022-08-06 05:39:10.431 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D18 as result already exists
2022-08-06 05:39:10.432 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D19 as result already exists
2022-08-06 05:39:10.432 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D21 as result already exists
2022-08-06 05:39:10.432 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D22 as result already exists
2022-08-06 05:39:10.432 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.432 | DEBUG    | __main__:run:525 - Skipping benchmark 10:A0 as result already exists
2022-08-06 05:39:10.432 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 05:39:10.432 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E0 as result already exists
2022-08-06 05:39:10.432 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E1 as result already exists
2022-08-06 05:39:10.432 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E3 as result already exists
2022-08-06 05:39:10.433 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E4 as result already exists
2022-08-06 05:39:10.433 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E5 as result already exists
2022-08-06 05:39:10.433 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E6 as result already exists
2022-08-06 05:39:10.433 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E7 as result already exists
2022-08-06 05:39:10.433 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E8 as result already exists
2022-08-06 05:39:10.433 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E9 as result already exists
2022-08-06 05:39:10.433 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E10 as result already exists
2022-08-06 05:39:10.433 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E11 as result already exists
2022-08-06 05:39:10.434 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.434 | DEBUG    | __main__:run:525 - Skipping benchmark 10:B0 as result already exists
2022-08-06 05:39:10.434 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 05:39:10.434 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:39:10.434 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:39:10.434 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D0 as result already exists
2022-08-06 05:39:10.434 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D1 as result already exists
2022-08-06 05:39:10.434 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D4 as result already exists
2022-08-06 05:39:10.434 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D6 as result already exists
2022-08-06 05:39:10.434 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D7 as result already exists
2022-08-06 05:39:10.435 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.435 | DEBUG    | __main__:run:525 - Skipping benchmark 11:C0 as result already exists
2022-08-06 05:39:10.435 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:39:10.435 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A0 as result already exists
2022-08-06 05:39:10.435 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A1 as result already exists
2022-08-06 05:39:10.435 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A2 as result already exists
2022-08-06 05:39:10.435 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A3 as result already exists
2022-08-06 05:39:10.435 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:39:10.436 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:39:10.436 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B0 as result already exists
2022-08-06 05:39:10.436 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B1 as result already exists
2022-08-06 05:39:10.436 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B2 as result already exists
2022-08-06 05:39:10.436 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B3 as result already exists
2022-08-06 05:39:10.436 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B4 as result already exists
2022-08-06 05:39:10.436 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 05:39:10.437 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:39:10.437 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:39:10.437 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.437 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:39:10.437 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:39:10.437 | DEBUG    | __main__:run:525 - Skipping benchmark 12:A3 as result already exists
2022-08-06 05:39:10.437 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:39:10.437 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 05:39:10.438 | DEBUG    | __main__:run:509 - Number of Sets: 2
2022-08-06 05:39:10.438 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 05:39:10.438 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.438 | DEBUG    | __main__:run:525 - Skipping benchmark 13:A0 as result already exists
2022-08-06 05:39:10.438 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 05:39:10.438 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:39:10.438 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 05:39:10.438 | DEBUG    | __main__:run:525 - Skipping benchmark 14:D0 as result already exists
2022-08-06 05:39:10.438 | DEBUG    | __main__:run:525 - Skipping benchmark 14:D1 as result already exists
2022-08-06 05:39:10.439 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 05:39:10.439 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C0 as result already exists
2022-08-06 05:39:10.439 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C1 as result already exists
2022-08-06 05:39:10.439 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C2 as result already exists
2022-08-06 05:39:10.439 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C3 as result already exists
2022-08-06 05:39:10.439 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C5 as result already exists
2022-08-06 05:39:10.439 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C6 as result already exists
2022-08-06 05:39:10.439 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C7 as result already exists
2022-08-06 05:39:10.439 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C8 as result already exists
2022-08-06 05:39:10.440 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:39:10.440 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A0 as result already exists
2022-08-06 05:39:10.440 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A1 as result already exists
2022-08-06 05:39:10.440 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A2 as result already exists
2022-08-06 05:39:10.440 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A4 as result already exists
2022-08-06 05:39:10.440 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 05:39:10.440 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E0 as result already exists
2022-08-06 05:39:10.440 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E1 as result already exists
2022-08-06 05:39:10.440 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E4 as result already exists
2022-08-06 05:39:10.440 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E6 as result already exists
2022-08-06 05:39:10.441 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E7 as result already exists
2022-08-06 05:39:10.441 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E10 as result already exists
2022-08-06 05:39:10.441 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E11 as result already exists
2022-08-06 05:39:10.441 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E12 as result already exists
2022-08-06 05:39:10.441 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:39:10.441 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B0 as result already exists
2022-08-06 05:39:10.441 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B3 as result already exists
2022-08-06 05:39:10.441 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B4 as result already exists
2022-08-06 05:39:10.441 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B5 as result already exists
2022-08-06 05:39:10.441 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 05:39:10.442 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:39:10.442 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 05:39:10.442 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D2 as result already exists
2022-08-06 05:39:10.442 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D3 as result already exists
2022-08-06 05:39:10.442 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D4 as result already exists
2022-08-06 05:39:10.442 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D5 as result already exists
2022-08-06 05:39:10.442 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D7 as result already exists
2022-08-06 05:39:10.442 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D8 as result already exists
2022-08-06 05:39:10.442 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D9 as result already exists
2022-08-06 05:39:10.443 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D10 as result already exists
2022-08-06 05:39:10.443 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D11 as result already exists
2022-08-06 05:39:10.443 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D15 as result already exists
2022-08-06 05:39:10.443 | DEBUG    | __main__:run:515 - Number of queries: 22
2022-08-06 05:39:10.443 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B0 as result already exists
2022-08-06 05:39:10.443 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B2 as result already exists
2022-08-06 05:39:10.443 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B7 as result already exists
2022-08-06 05:39:10.443 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B11 as result already exists
2022-08-06 05:39:10.443 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B12 as result already exists
2022-08-06 05:39:10.443 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B14 as result already exists
2022-08-06 05:39:10.444 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B15 as result already exists
2022-08-06 05:39:10.444 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B16 as result already exists
2022-08-06 05:39:10.444 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B18 as result already exists
2022-08-06 05:39:10.444 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:39:10.444 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C0 as result already exists
2022-08-06 05:39:10.444 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C1 as result already exists
2022-08-06 05:39:10.444 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C2 as result already exists
2022-08-06 05:39:10.444 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C3 as result already exists
2022-08-06 05:39:10.444 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:39:10.445 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A2 as result already exists
2022-08-06 05:39:10.445 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A3 as result already exists
2022-08-06 05:39:10.445 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A4 as result already exists
2022-08-06 05:39:10.445 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A5 as result already exists
2022-08-06 05:39:10.445 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A6 as result already exists
2022-08-06 05:39:10.445 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 05:39:10.445 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E4 as result already exists
2022-08-06 05:39:10.445 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E6 as result already exists
2022-08-06 05:39:10.445 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E7 as result already exists
2022-08-06 05:39:10.445 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E8 as result already exists
2022-08-06 05:39:10.446 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E9 as result already exists
2022-08-06 05:39:10.446 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E10 as result already exists
2022-08-06 05:39:10.446 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E11 as result already exists
2022-08-06 05:39:10.446 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E12 as result already exists
2022-08-06 05:39:10.446 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E13 as result already exists
2022-08-06 05:39:10.446 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E14 as result already exists
2022-08-06 05:39:10.446 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 05:39:10.446 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 05:39:10.446 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:39:10.446 | DEBUG    | __main__:run:525 - Skipping benchmark 16:B0 as result already exists
2022-08-06 05:39:10.447 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.447 | DEBUG    | __main__:run:525 - Skipping benchmark 16:A0 as result already exists
2022-08-06 05:39:10.447 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:39:10.447 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E0 as result already exists
2022-08-06 05:39:10.447 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E1 as result already exists
2022-08-06 05:39:10.447 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E2 as result already exists
2022-08-06 05:39:10.447 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E3 as result already exists
2022-08-06 05:39:10.447 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E4 as result already exists
2022-08-06 05:39:10.447 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:39:10.448 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D0 as result already exists
2022-08-06 05:39:10.448 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D2 as result already exists
2022-08-06 05:39:10.448 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D3 as result already exists
2022-08-06 05:39:10.448 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 05:39:10.448 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:39:10.448 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:39:10.448 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B0 as result already exists
2022-08-06 05:39:10.448 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B1 as result already exists
2022-08-06 05:39:10.448 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B2 as result already exists
2022-08-06 05:39:10.448 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B4 as result already exists
2022-08-06 05:39:10.449 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 05:39:10.449 | DEBUG    | __main__:run:525 - Skipping benchmark 17:C5 as result already exists
2022-08-06 05:39:10.449 | DEBUG    | __main__:run:525 - Skipping benchmark 17:C6 as result already exists
2022-08-06 05:39:10.449 | DEBUG    | __main__:run:525 - Skipping benchmark 17:C7 as result already exists
2022-08-06 05:39:10.449 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 05:39:10.449 | DEBUG    | __main__:run:525 - Skipping benchmark 17:A3 as result already exists
2022-08-06 05:39:10.449 | DEBUG    | __main__:run:525 - Skipping benchmark 17:A4 as result already exists
2022-08-06 05:39:10.449 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 05:39:10.449 | DEBUG    | __main__:run:525 - Skipping benchmark 17:D11 as result already exists
2022-08-06 05:39:10.449 | DEBUG    | __main__:run:515 - Number of queries: 25
2022-08-06 05:39:10.450 | DEBUG    | __main__:run:525 - Skipping benchmark 17:E14 as result already exists
2022-08-06 05:39:10.450 | DEBUG    | __main__:run:525 - Skipping benchmark 17:E24 as result already exists
2022-08-06 05:39:10.450 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 05:39:10.450 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 05:39:10.450 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 05:39:10.450 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A0 as result already exists
2022-08-06 05:39:10.450 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A1 as result already exists
2022-08-06 05:39:10.450 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A2 as result already exists
2022-08-06 05:39:10.450 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A3 as result already exists
2022-08-06 05:39:10.450 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A4 as result already exists
2022-08-06 05:39:10.451 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A5 as result already exists
2022-08-06 05:39:10.451 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 05:39:10.451 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D0 as result already exists
2022-08-06 05:39:10.451 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D1 as result already exists
2022-08-06 05:39:10.451 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D2 as result already exists
2022-08-06 05:39:10.451 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D3 as result already exists
2022-08-06 05:39:10.451 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D4 as result already exists
2022-08-06 05:39:10.451 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D5 as result already exists
2022-08-06 05:39:10.451 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D6 as result already exists
2022-08-06 05:39:10.451 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D7 as result already exists
2022-08-06 05:39:10.452 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D8 as result already exists
2022-08-06 05:39:10.452 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D9 as result already exists
2022-08-06 05:39:10.452 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D10 as result already exists
2022-08-06 05:39:10.452 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D11 as result already exists
2022-08-06 05:39:10.452 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D12 as result already exists
2022-08-06 05:39:10.452 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D13 as result already exists
2022-08-06 05:39:10.452 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D14 as result already exists
2022-08-06 05:39:10.452 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D15 as result already exists
2022-08-06 05:39:10.452 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:39:10.453 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E0 as result already exists
2022-08-06 05:39:10.453 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E1 as result already exists
2022-08-06 05:39:10.453 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E2 as result already exists
2022-08-06 05:39:10.453 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E3 as result already exists
2022-08-06 05:39:10.453 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E4 as result already exists
2022-08-06 05:39:10.453 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E5 as result already exists
2022-08-06 05:39:10.453 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E6 as result already exists
2022-08-06 05:39:10.453 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E7 as result already exists
2022-08-06 05:39:10.453 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 05:39:10.453 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:39:10.453 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:39:10.454 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:39:10.454 | DEBUG    | __main__:run:525 - Skipping benchmark 19:C0 as result already exists
2022-08-06 05:39:10.454 | DEBUG    | __main__:run:525 - Skipping benchmark 19:C3 as result already exists
2022-08-06 05:39:10.454 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 05:39:10.454 | DEBUG    | __main__:run:525 - Skipping benchmark 19:D1 as result already exists
2022-08-06 05:39:10.454 | DEBUG    | __main__:run:525 - Skipping benchmark 19:D2 as result already exists
2022-08-06 05:39:10.454 | DEBUG    | __main__:run:525 - Skipping benchmark 19:D5 as result already exists
2022-08-06 05:39:10.454 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 05:39:10.454 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A1 as result already exists
2022-08-06 05:39:10.454 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A2 as result already exists
2022-08-06 05:39:10.455 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A4 as result already exists
2022-08-06 05:39:10.455 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A8 as result already exists
2022-08-06 05:39:10.455 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A10 as result already exists
2022-08-06 05:39:10.455 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A11 as result already exists
2022-08-06 05:39:10.455 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A14 as result already exists
2022-08-06 05:39:10.455 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:39:10.455 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E1 as result already exists
2022-08-06 05:39:10.455 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E2 as result already exists
2022-08-06 05:39:10.455 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E3 as result already exists
2022-08-06 05:39:10.455 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E4 as result already exists
2022-08-06 05:39:10.456 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 05:39:10.456 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 05:39:10.456 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 05:39:10.456 | DEBUG    | __main__:run:525 - Skipping benchmark 20:B1 as result already exists
2022-08-06 05:39:10.456 | DEBUG    | __main__:run:525 - Skipping benchmark 20:B2 as result already exists
2022-08-06 05:39:10.456 | DEBUG    | __main__:run:525 - Skipping benchmark 20:B3 as result already exists
2022-08-06 05:39:10.456 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:39:10.456 | DEBUG    | __main__:run:525 - Skipping benchmark 20:C0 as result already exists
2022-08-06 05:39:10.456 | DEBUG    | __main__:run:515 - Number of queries: 17
2022-08-06 05:39:10.457 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D0 as result already exists
2022-08-06 05:39:10.457 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D2 as result already exists
2022-08-06 05:39:10.457 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D3 as result already exists
2022-08-06 05:39:10.457 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D5 as result already exists
2022-08-06 05:39:10.457 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D6 as result already exists
2022-08-06 05:39:10.457 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D7 as result already exists
2022-08-06 05:39:10.457 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D10 as result already exists
2022-08-06 05:39:10.457 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D11 as result already exists
2022-08-06 05:39:10.457 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D12 as result already exists
2022-08-06 05:39:10.457 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D13 as result already exists
2022-08-06 05:39:10.458 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D14 as result already exists
2022-08-06 05:39:10.458 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 05:39:10.458 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 05:39:10.458 | DEBUG    | __main__:run:525 - Skipping benchmark 20:E0 as result already exists
2022-08-06 06:07:19.079 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval1
2022-08-06 06:07:19.080 | DEBUG    | __main__:run:495 - Found 68 benchmarks in PandasEval1
2022-08-06 06:07:19.080 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 06:07:19.080 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:19.080 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:19.080 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 06:07:19.080 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:19.081 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:19.081 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 06:07:19.081 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:19.081 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:19.081 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 06:07:19.081 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:19.081 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:26.967 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 06:07:26.967 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.assign(id=lambda x: x['id'].replace(5, 1005), idnew=lambda x: x['idnew'].replace(-45, -1005))
2022-08-06 06:07:26.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:26.981 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 06:07:26.981 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, 1005)
2022-08-06 06:07:26.993 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:26.993 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 06:07:26.993 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, 1005)
2022-08-06 06:07:27.006 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:27.006 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 06:07:27.007 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, {'id': 1005, 'idnew': -1005})
2022-08-06 06:07:27.019 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:27.019 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 06:07:27.019 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.assign(id=df1['id'].replace(5, 1005), idnew=df1['idnew'].replace(-45, -1005))
2022-08-06 06:07:27.032 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:27.032 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 06:07:27.032 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, {'id': 1005, 'idnew': -1005})
2022-08-06 06:07:27.045 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:27.045 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 06:07:27.045 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, 1005)
2022-08-06 06:07:27.058 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:27.058 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 06:07:27.058 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.copy()
2022-08-06 06:07:27.070 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:27.070 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 06:07:27.070 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, 1005)
2022-08-06 06:07:27.082 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:27.082 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 06:07:27.082 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': 5}, {'id': 1005, 'idnew': -1005})
2022-08-06 06:07:27.094 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:07:27.095 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 06:07:27.095 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:27.095 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:27.095 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 06:07:27.095 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:27.095 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:27.095 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 06:07:27.096 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:27.096 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:27.096 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 06:07:27.096 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:27.096 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:27.096 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 06:07:27.096 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:27.096 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:27.097 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 06:07:27.097 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:27.097 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:27.097 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 06:07:27.097 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:27.097 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:27.097 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 06:07:27.097 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:27.097 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:28.692 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:07:28.693 | DEBUG    | __main__:run_benchmark:432 - df1['score'].mean()
2022-08-06 06:07:28.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:28.695 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:07:28.696 | DEBUG    | __main__:run_benchmark:432 - df1['score'].notna().mean()
2022-08-06 06:07:28.697 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:28.697 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:07:28.697 | DEBUG    | __main__:run_benchmark:432 - (df1.score.astype(float) / df1.score.astype(float).count())
2022-08-06 06:07:28.699 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:28.699 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:07:28.699 | DEBUG    | __main__:run_benchmark:432 - #  Save the result in a variable named "fraction"
2022-08-06 06:07:28.700 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:28.700 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:07:28.700 | DEBUG    | __main__:run_benchmark:432 - (df1.score.astype(bool).sum() / len(df1))
2022-08-06 06:07:28.701 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:07:28.701 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 06:07:28.702 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:28.702 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:28.702 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 06:07:28.702 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:28.702 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:30.268 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.269 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max().reset_index()
2022-08-06 06:07:30.279 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.280 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.280 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 06:07:30.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.287 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.287 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 06:07:30.294 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.294 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.294 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').Earnings.max()
2022-08-06 06:07:30.301 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.301 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.302 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x.nlargest(1, 'Earnings'))
2022-08-06 06:07:30.313 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.314 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.314 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x.nlargest(1, 'Earnings'))
2022-08-06 06:07:30.326 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.326 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.326 | DEBUG    | __main__:run_benchmark:432 - df1.groupby(['Quarter', 'Subsidiary'])['Earnings'].max()
2022-08-06 06:07:30.334 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.334 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.334 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').Earnings.max()
2022-08-06 06:07:30.341 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.342 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.342 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 06:07:30.349 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.349 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.349 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].transform(np.max)
2022-08-06 06:07:30.357 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.357 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.357 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x.nlargest(1, 'Earnings'))
2022-08-06 06:07:30.369 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.369 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.369 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].transform('max') == df1['Earnings']
2022-08-06 06:07:30.376 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.376 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.376 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 06:07:30.383 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.383 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.383 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 06:07:30.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.390 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.390 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter', as_index=False)['Earnings'].max()
2022-08-06 06:07:30.399 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.399 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.400 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').Earnings.max()
2022-08-06 06:07:30.406 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.406 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.406 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').Earnings.max()
2022-08-06 06:07:30.413 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.413 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.413 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 06:07:30.420 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.420 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.420 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x.nlargest(1, 'Earnings'))
2022-08-06 06:07:30.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.431 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:07:30.431 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 06:07:30.438 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:30.439 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 06:07:30.439 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:30.439 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:30.439 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 06:07:30.439 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:30.439 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:30.439 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 06:07:30.440 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:30.440 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:30.440 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 06:07:30.440 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:30.440 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:30.440 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 06:07:30.440 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:30.440 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:32.255 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.255 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 06:07:32.262 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.263 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.263 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.loc[2]
2022-08-06 06:07:32.264 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.264 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.264 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame({'STID': {'a': 1.0, 'b': 2.0, 'c': 3.0, 'd': None}, 'key': {'a': 1, 'b': 3, 'c': 4, 'd': 7
2022-08-06 06:07:32.264 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.264 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.264 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 06:07:32.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.270 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.270 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.loc[2]
2022-08-06 06:07:32.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.271 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.271 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 06:07:32.276 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.276 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.276 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 06:07:32.282 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.282 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.282 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 06:07:32.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.287 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.288 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 06:07:32.293 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.294 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.294 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 06:07:32.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.300 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.300 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 06:07:32.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.306 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.306 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 06:07:32.311 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.312 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.312 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 06:07:32.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.318 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.318 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 06:07:32.323 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.324 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.324 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 06:07:32.329 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.330 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.330 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 06:07:32.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.336 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.336 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 06:07:32.342 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.342 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.342 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 06:07:32.348 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.348 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.348 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 06:07:32.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.354 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 06:07:32.354 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 06:07:32.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:32.361 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 06:07:32.361 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:32.361 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:32.361 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 06:07:32.361 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:32.362 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:32.362 | DEBUG    | __main__:run:508 - Running benchmark 21
2022-08-06 06:07:32.362 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:32.362 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:32.362 | DEBUG    | __main__:run:508 - Running benchmark 22
2022-08-06 06:07:32.362 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:32.362 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:33.291 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.292 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 06:07:33.294 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.294 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.295 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum().to_frame('nulls')
2022-08-06 06:07:33.296 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.296 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.296 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum(axis=1).reset_index()
2022-08-06 06:07:33.297 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.298 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.298 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum()
2022-08-06 06:07:33.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.299 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.299 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 06:07:33.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.300 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.300 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum().to_frame()[0]
2022-08-06 06:07:33.301 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.301 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.301 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 06:07:33.302 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.303 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.303 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.isna(df1).sum()
2022-08-06 06:07:33.304 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.304 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.304 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum()
2022-08-06 06:07:33.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.305 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.305 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 06:07:33.306 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.306 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.306 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum()
2022-08-06 06:07:33.307 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.307 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.308 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 06:07:33.309 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.309 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.309 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 06:07:33.310 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.310 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.310 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum()
2022-08-06 06:07:33.311 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.311 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.311 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum(0)
2022-08-06 06:07:33.312 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.312 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.312 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum(axis=0).reset_index()
2022-08-06 06:07:33.314 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.314 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.314 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().count()
2022-08-06 06:07:33.316 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.316 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.316 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.apply((lambda x: x.isnull().sum()))
2022-08-06 06:07:33.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.317 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.317 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum()
2022-08-06 06:07:33.318 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.318 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:07:33.319 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum(1)
2022-08-06 06:07:33.319 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:33.320 | DEBUG    | __main__:run:508 - Running benchmark 23
2022-08-06 06:07:33.321 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:33.321 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:33.321 | DEBUG    | __main__:run:508 - Running benchmark 24
2022-08-06 06:07:33.321 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:33.321 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:33.321 | DEBUG    | __main__:run:508 - Running benchmark 25
2022-08-06 06:07:33.322 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:33.322 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:33.322 | DEBUG    | __main__:run:508 - Running benchmark 26
2022-08-06 06:07:33.322 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:33.322 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:35.217 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.218 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:07:35.229 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.229 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.229 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:07:35.238 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.238 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.238 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.groupby('A').agg(['mean', 'median'])
2022-08-06 06:07:35.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.249 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.249 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:07:35.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.258 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.258 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:07:35.267 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.267 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.267 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:07:35.276 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.276 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.276 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg([np.mean, np.median])
2022-08-06 06:07:35.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.285 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.285 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame({'mean': {0: df1['A'].mean(), 1: df1['B'].mean()}, 'median': {0: df1['A'].median(), 1: df1['B'].median()}})
2022-08-06 06:07:35.293 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.293 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.294 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 06:07:35.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.299 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.299 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 06:07:35.304 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.304 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.305 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:07:35.313 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.313 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.313 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 06:07:35.319 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.319 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.319 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 06:07:35.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.324 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.324 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 06:07:35.330 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.330 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.330 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg({'A': ['mean', 'median'], 'B': ['mean', 'median']})
2022-08-06 06:07:35.338 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.339 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.339 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 06:07:35.344 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.344 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.344 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 06:07:35.349 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.350 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.350 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 06:07:35.355 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.355 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.355 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:07:35.364 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.364 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:07:35.364 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 06:07:35.369 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:35.370 | DEBUG    | __main__:run:508 - Running benchmark 27
2022-08-06 06:07:35.370 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:35.371 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:35.371 | DEBUG    | __main__:run:508 - Running benchmark 28
2022-08-06 06:07:35.371 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:35.371 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:36.329 | DEBUG    | __main__:run_benchmark:431 - Query: Set 'A' as 5 in 6th row of df1
2022-08-06 06:07:36.330 | DEBUG    | __main__:run_benchmark:432 - df1.loc[5, 'A'] = 5
2022-08-06 06:07:36.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:07:36.338 | DEBUG    | __main__:run:508 - Running benchmark 29
2022-08-06 06:07:36.338 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:36.339 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:36.339 | DEBUG    | __main__:run:508 - Running benchmark 30
2022-08-06 06:07:36.339 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:36.339 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:37.692 | DEBUG    | __main__:run_benchmark:431 - Query: Concatenate two data frames and drop duplicates
2022-08-06 06:07:37.693 | DEBUG    | __main__:run_benchmark:432 - pd.concat([df1, df2]).drop_duplicates()
2022-08-06 06:07:37.704 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:37.704 | DEBUG    | __main__:run_benchmark:431 - Query: Concatenate two data frames and drop duplicates
2022-08-06 06:07:37.705 | DEBUG    | __main__:run_benchmark:432 - pd.concat([df1, df2], axis=0, ignore_index=True).drop_duplicates()
2022-08-06 06:07:37.715 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:07:37.716 | DEBUG    | __main__:run:508 - Running benchmark 31
2022-08-06 06:07:37.717 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:37.717 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:37.717 | DEBUG    | __main__:run:508 - Running benchmark 32
2022-08-06 06:07:37.717 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:37.717 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:37.717 | DEBUG    | __main__:run:508 - Running benchmark 33
2022-08-06 06:07:37.717 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:37.717 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:37.717 | DEBUG    | __main__:run:508 - Running benchmark 34
2022-08-06 06:07:37.718 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:37.718 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:38.706 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:38.706 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 06:07:38.727 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:38.727 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:38.728 | DEBUG    | __main__:run_benchmark:432 - df1.loc[:, (df1.dtypes == 'float64')]
2022-08-06 06:07:38.747 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:38.748 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:38.748 | DEBUG    | __main__:run_benchmark:432 - df1.loc[:, (df1.dtypes == float)]
2022-08-06 06:07:38.768 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:38.768 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:38.768 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(np.float64)
2022-08-06 06:07:38.788 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:38.788 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:38.788 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=np.float64)
2022-08-06 06:07:38.808 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:38.808 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:38.808 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 06:07:38.828 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:38.828 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:38.829 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(float)
2022-08-06 06:07:38.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:38.849 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:38.849 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(np.float64)
2022-08-06 06:07:38.869 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:38.869 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:38.869 | DEBUG    | __main__:run_benchmark:432 - df1.dtypes[(df1.dtypes == 'float64')]
2022-08-06 06:07:38.883 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:38.884 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:38.884 | DEBUG    | __main__:run_benchmark:432 - df1.columns[(df1.dtypes == np.float64)]
2022-08-06 06:07:38.898 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:38.898 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:38.898 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 06:07:38.918 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:38.918 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:38.919 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(float)
2022-08-06 06:07:38.938 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:38.939 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:38.939 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(np.float64)
2022-08-06 06:07:38.959 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:38.959 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:38.959 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 06:07:38.979 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:38.979 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:38.979 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 06:07:38.999 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:38.999 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:38.999 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(td)
2022-08-06 06:07:39.001 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:39.001 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:39.002 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(i)
2022-08-06 06:07:39.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:39.004 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:39.004 | DEBUG    | __main__:run_benchmark:432 - df1.dtypes[(df1.dtypes == np.float64)]
2022-08-06 06:07:39.019 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:39.019 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:39.019 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=np.float64)
2022-08-06 06:07:39.039 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:39.039 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:07:39.039 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=np.float64)
2022-08-06 06:07:39.059 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:39.060 | DEBUG    | __main__:run:508 - Running benchmark 35
2022-08-06 06:07:39.060 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:39.060 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:40.833 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 06:07:40.833 | DEBUG    | __main__:run_benchmark:432 - df1['C1'].isin([1, 2, 3])
2022-08-06 06:07:40.837 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:07:40.838 | DEBUG    | __main__:run:508 - Running benchmark 36
2022-08-06 06:07:40.838 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:40.839 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:42.113 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 06:07:42.114 | DEBUG    | __main__:run_benchmark:432 - df1['foo'].apply((lambda x: pd.to_numeric(x, errors='ignore')))
2022-08-06 06:07:42.121 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:42.121 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 06:07:42.121 | DEBUG    | __main__:run_benchmark:432 - pd.to_numeric(df1['foo'], errors='ignore')
2022-08-06 06:07:42.126 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:42.126 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 06:07:42.127 | DEBUG    | __main__:run_benchmark:432 - df1['foo'].apply(pd.to_numeric, errors='ignore')
2022-08-06 06:07:42.132 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:42.132 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 06:07:42.132 | DEBUG    | __main__:run_benchmark:432 - df1['foo'].apply(pd.to_numeric, errors='ignore')
2022-08-06 06:07:42.138 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:42.138 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 06:07:42.138 | DEBUG    | __main__:run_benchmark:432 - df1['foo'].apply(pd.to_numeric, errors='ignore')
2022-08-06 06:07:42.143 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:42.143 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 06:07:42.144 | DEBUG    | __main__:run_benchmark:432 - df1['foo'].apply(pd.to_numeric, errors='ignore')
2022-08-06 06:07:42.149 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:42.149 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 06:07:42.150 | DEBUG    | __main__:run_benchmark:432 - pd.to_numeric(df1['foo'], errors='ignore')
2022-08-06 06:07:42.155 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:42.156 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 06:07:42.156 | DEBUG    | __main__:run_benchmark:432 - pd.to_numeric(df1['foo'], errors='ignore')
2022-08-06 06:07:42.161 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:42.161 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 06:07:42.162 | DEBUG    | __main__:run_benchmark:432 - pd.to_numeric(df1['foo'], errors='ignore')
2022-08-06 06:07:42.167 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:42.167 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 06:07:42.167 | DEBUG    | __main__:run_benchmark:432 - df1['foo'].apply(pd.to_numeric, errors='ignore')
2022-08-06 06:07:42.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:42.173 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 06:07:42.173 | DEBUG    | __main__:run_benchmark:432 - df1['foo'].apply(pd.to_numeric, errors='ignore')
2022-08-06 06:07:42.178 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:42.178 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 06:07:42.178 | DEBUG    | __main__:run_benchmark:432 - df1['foo'].astype(np.int64, errors='ignore')
2022-08-06 06:07:42.184 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:42.184 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 06:07:42.184 | DEBUG    | __main__:run_benchmark:432 - df1['foo'] = pd.to_numeric(df1['foo'], errors='coerce')
2022-08-06 06:07:42.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:07:42.190 | DEBUG    | __main__:run:508 - Running benchmark 37
2022-08-06 06:07:42.190 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:42.190 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:43.473 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric
2022-08-06 06:07:43.473 | DEBUG    | __main__:run_benchmark:432 - pd.to_numeric(df1['foo'].values)
2022-08-06 06:07:43.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:43.474 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric
2022-08-06 06:07:43.475 | DEBUG    | __main__:run_benchmark:432 - df1['foo'] = pd.to_numeric(df1['foo'], errors='coerce')
2022-08-06 06:07:43.480 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:07:43.482 | DEBUG    | __main__:run:508 - Running benchmark 38
2022-08-06 06:07:43.482 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:43.482 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:43.482 | DEBUG    | __main__:run:508 - Running benchmark 39
2022-08-06 06:07:43.482 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:43.482 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:43.483 | DEBUG    | __main__:run:508 - Running benchmark 40
2022-08-06 06:07:43.483 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:43.483 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:45.318 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 06:07:45.319 | DEBUG    | __main__:run_benchmark:432 - df = df.drop_duplicates(subset='time', keep='first')
2022-08-06 06:07:45.327 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:45.327 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 06:07:45.327 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first')
2022-08-06 06:07:45.335 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:45.335 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 06:07:45.335 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 06:07:45.344 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:45.344 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 06:07:45.344 | DEBUG    | __main__:run_benchmark:432 - df = df.loc[df['time'].shift() != df['time']]
2022-08-06 06:07:45.351 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:07:45.353 | DEBUG    | __main__:run:508 - Running benchmark 41
2022-08-06 06:07:45.353 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:45.353 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:47.419 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.420 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:07:47.421 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.421 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.421 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset=['time'], keep='first', inplace=True)
2022-08-06 06:07:47.435 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.435 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.435 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 06:07:47.448 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.448 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.448 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 06:07:47.461 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.461 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.461 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last', inplace=True)
2022-08-06 06:07:47.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.474 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.474 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last', inplace=True)
2022-08-06 06:07:47.486 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.487 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.487 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 06:07:47.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.499 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.499 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last', inplace=True)
2022-08-06 06:07:47.512 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.512 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.512 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 06:07:47.525 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.525 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.525 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 06:07:47.538 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.538 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.538 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 06:07:47.550 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.551 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.551 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 06:07:47.563 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.563 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.563 | DEBUG    | __main__:run_benchmark:432 - df.drop(df[(df['time'] < 10)].index)
2022-08-06 06:07:47.566 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.566 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.566 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 06:07:47.578 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.579 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.579 | DEBUG    | __main__:run_benchmark:432 - df.drop(df[df['time'].diff() < pd.Timedelta('10 minute')].index)
2022-08-06 06:07:47.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.595 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.596 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 06:07:47.608 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.608 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.608 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 06:07:47.620 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.620 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.621 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 06:07:47.633 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.633 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.633 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last', inplace=True)
2022-08-06 06:07:47.646 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.646 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:07:47.646 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset=['time'], keep='first', inplace=True)
2022-08-06 06:07:47.658 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:47.660 | DEBUG    | __main__:run:508 - Running benchmark 42
2022-08-06 06:07:47.660 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:47.660 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:49.270 | DEBUG    | __main__:run_benchmark:431 - Query: Group df1 on column 'b' and keep half of the elements at random
2022-08-06 06:07:49.271 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('b').apply(lambda x: x.sample(frac=0.5))
2022-08-06 06:07:49.283 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:49.283 | DEBUG    | __main__:run_benchmark:431 - Query: Group df1 on column 'b' and keep half of the elements at random
2022-08-06 06:07:49.283 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('b').apply(lambda x: x.sample(frac=0.5))
2022-08-06 06:07:49.294 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:49.294 | DEBUG    | __main__:run_benchmark:431 - Query: Group df1 on column 'b' and keep half of the elements at random
2022-08-06 06:07:49.294 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('b').apply(lambda x: x.sample(frac=0.5))
2022-08-06 06:07:49.304 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:49.305 | DEBUG    | __main__:run_benchmark:431 - Query: Group df1 on column 'b' and keep half of the elements at random
2022-08-06 06:07:49.305 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('b').apply(lambda x: x.sample(frac=0.5))
2022-08-06 06:07:49.315 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:07:49.317 | DEBUG    | __main__:run:508 - Running benchmark 43
2022-08-06 06:07:49.318 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:49.318 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:51.104 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 06:07:51.105 | DEBUG    | __main__:run_benchmark:432 - df['X'].replace({15: 1015, -15: -1015})
2022-08-06 06:07:51.113 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:51.113 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 06:07:51.113 | DEBUG    | __main__:run_benchmark:432 - df['X'].replace({15: 1015, -15: -1015})
2022-08-06 06:07:51.119 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:51.119 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 06:07:51.119 | DEBUG    | __main__:run_benchmark:432 - df['X'].replace(15, 1015).replace(-15, -1015)
2022-08-06 06:07:51.126 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:51.126 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 06:07:51.126 | DEBUG    | __main__:run_benchmark:432 - df.replace({'X': {15: 1015, -15: -1015}})
2022-08-06 06:07:51.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:07:51.135 | DEBUG    | __main__:run:508 - Running benchmark 44
2022-08-06 06:07:51.136 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:51.136 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:51.136 | DEBUG    | __main__:run:508 - Running benchmark 45
2022-08-06 06:07:51.136 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:51.136 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:52.923 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 06:07:52.924 | DEBUG    | __main__:run_benchmark:432 - df['First Name'], df['Last Name'] = df['Name'].str.split(' ', 1).str
2022-08-06 06:07:52.937 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:07:52.938 | DEBUG    | __main__:run:508 - Running benchmark 46
2022-08-06 06:07:52.939 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:52.939 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:52.939 | DEBUG    | __main__:run:508 - Running benchmark 47
2022-08-06 06:07:52.939 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:52.939 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:52.939 | DEBUG    | __main__:run:508 - Running benchmark 48
2022-08-06 06:07:52.939 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:52.940 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:54.073 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.074 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.092 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.092 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.108 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.108 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.108 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.124 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.125 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.125 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.141 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.141 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.141 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.157 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.157 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.158 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.174 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.174 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.174 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.190 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.190 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.190 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.206 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.206 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.206 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.222 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.223 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.223 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.239 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.239 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.239 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.255 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.255 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.271 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.271 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.287 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.287 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.303 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.303 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.304 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.320 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.320 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.320 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.336 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.336 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.352 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.352 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.352 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.368 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.368 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.369 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.384 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.385 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 06:07:54.385 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 06:07:54.401 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:54.402 | DEBUG    | __main__:run:508 - Running benchmark 49
2022-08-06 06:07:54.403 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:54.403 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:56.111 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.112 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:07:56.116 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.116 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.116 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg('mean')
2022-08-06 06:07:56.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.120 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.120 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:07:56.122 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.123 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.123 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:07:56.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.125 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.125 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:07:56.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.128 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.128 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:07:56.130 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.130 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.130 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:07:56.132 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.133 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.133 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:07:56.135 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.135 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.135 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:07:56.138 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.138 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.138 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:07:56.140 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.140 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.141 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:07:56.143 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.143 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.144 | DEBUG    | __main__:run_benchmark:432 - #  for each student, get the average score
2022-08-06 06:07:56.144 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.144 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.144 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:07:56.147 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.147 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.148 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:07:56.150 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.150 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.151 | DEBUG    | __main__:run_benchmark:432 - #  for each student, get the average score
2022-08-06 06:07:56.151 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.151 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.151 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:07:56.154 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.154 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.154 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg({'score': ['sum', 'min', 'max', 'mean', 'median', 'std', 'var']})
2022-08-06 06:07:56.164 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.164 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.164 | DEBUG    | __main__:run_benchmark:432 - #  for each student, get the maximum score
2022-08-06 06:07:56.164 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.164 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.164 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:07:56.167 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.167 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:07:56.167 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:07:56.169 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:56.171 | DEBUG    | __main__:run:508 - Running benchmark 50
2022-08-06 06:07:56.171 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:56.171 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:57.768 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.769 | DEBUG    | __main__:run_benchmark:432 - df.pivot_table(aggfunc='max', index='student', values='score')
2022-08-06 06:07:57.775 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.776 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.776 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 06:07:57.777 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.778 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.778 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 06:07:57.779 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.779 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.779 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max().reset_index()
2022-08-06 06:07:57.783 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.783 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.784 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform(np.max)
2022-08-06 06:07:57.785 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.785 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.786 | DEBUG    | __main__:run_benchmark:432 - pd.DataFrame(df.groupby('student')['score'].max())
2022-08-06 06:07:57.788 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.789 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.789 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 06:07:57.790 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.791 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.791 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform('max')
2022-08-06 06:07:57.792 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.792 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.793 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform('max')
2022-08-06 06:07:57.794 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.794 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.795 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform('max')
2022-08-06 06:07:57.796 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.796 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.796 | DEBUG    | __main__:run_benchmark:432 - df.groupby(by='student')['score'].transform(max)
2022-08-06 06:07:57.798 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.798 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.798 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 06:07:57.800 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.800 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.801 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform('max')
2022-08-06 06:07:57.802 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.803 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.803 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 06:07:57.805 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.805 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.805 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').max()
2022-08-06 06:07:57.810 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.811 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.811 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 06:07:57.813 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.813 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.813 | DEBUG    | __main__:run_benchmark:432 - df.loc[(df['student'] == df['student'].max())]
2022-08-06 06:07:57.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.818 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.818 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform('max')
2022-08-06 06:07:57.820 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.820 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.820 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform(np.max)
2022-08-06 06:07:57.822 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.822 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:07:57.823 | DEBUG    | __main__:run_benchmark:432 - pd.DataFrame(df.groupby('student')['score'].max())
2022-08-06 06:07:57.826 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:07:57.828 | DEBUG    | __main__:run:508 - Running benchmark 51
2022-08-06 06:07:57.828 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:57.829 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:57.829 | DEBUG    | __main__:run:508 - Running benchmark 52
2022-08-06 06:07:57.829 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:57.829 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:57.829 | DEBUG    | __main__:run:508 - Running benchmark 53
2022-08-06 06:07:57.830 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:57.830 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:07:57.830 | DEBUG    | __main__:run:508 - Running benchmark 54
2022-08-06 06:07:57.830 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:07:57.830 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:08:00.005 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 06:08:00.006 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:08:00.006 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:00.006 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 06:08:00.006 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:08:00.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:00.007 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 06:08:00.007 | DEBUG    | __main__:run_benchmark:432 - for i in range(len(df1)):
2022-08-06 06:08:00.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:00.008 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 06:08:00.008 | DEBUG    | __main__:run_benchmark:432 - #  For every row in df1, update 'common' column to False if value in column 'A' of df1 does not lie in column 'B' of df2
2022-08-06 06:08:00.008 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:00.008 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 06:08:00.008 | DEBUG    | __main__:run_benchmark:432 - df1['common'] = (df1['A'].isin(df2['B']))
2022-08-06 06:08:00.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:08:00.020 | DEBUG    | __main__:run:508 - Running benchmark 55
2022-08-06 06:08:00.021 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:08:00.021 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:08:00.021 | DEBUG    | __main__:run:508 - Running benchmark 56
2022-08-06 06:08:00.021 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:08:00.022 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:08:00.022 | DEBUG    | __main__:run:508 - Running benchmark 57
2022-08-06 06:08:00.022 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:08:00.022 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:08:00.023 | DEBUG    | __main__:run:508 - Running benchmark 58
2022-08-06 06:08:00.023 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:08:00.023 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:08:00.023 | DEBUG    | __main__:run:508 - Running benchmark 59
2022-08-06 06:08:00.023 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:08:00.024 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:08:02.055 | DEBUG    | __main__:run_benchmark:431 - Query: Increase 'count' column by 1 when column 'pet' contains substring 'dog' or 'cat'
2022-08-06 06:08:02.056 | DEBUG    | __main__:run_benchmark:432 - df['count'] = df['count'] + (df['pet'].str.contains('dog|cat'))
2022-08-06 06:08:02.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:08:02.065 | DEBUG    | __main__:run:508 - Running benchmark 60
2022-08-06 06:08:02.065 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:08:02.066 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:08:03.891 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.891 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[[1, 1, 2, 2], ['a', 'b', 'c', 'd']])
2022-08-06 06:08:03.899 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.900 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.900 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['col1'])
2022-08-06 06:08:03.904 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.904 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.905 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[[1, 1, 2, 2], ['a', 'b', 'c', 'd']])
2022-08-06 06:08:03.910 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.911 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.911 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data.values, index=pd.MultiIndex.from_tuples([('a', 1), ('a', 2), ('a', 2), ('b', 2)], names=['first', 'second']))
2022-08-06 06:08:03.915 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.916 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.916 | DEBUG    | __main__:run_benchmark:432 - #  and indices as the innermost level of index
2022-08-06 06:08:03.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.916 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.916 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=['a', 'b', 'c', 'd'])
2022-08-06 06:08:03.921 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.921 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.921 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=['a', 'b', 'c', 'd'])
2022-08-06 06:08:03.926 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.926 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.927 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[[1, 1, 2, 2], ['a', 'b', 'c', 'd']])
2022-08-06 06:08:03.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.933 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.934 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]])
2022-08-06 06:08:03.939 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.940 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.940 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[[1, 1, 2, 2], [1, 2, 1, 2]])
2022-08-06 06:08:03.946 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.946 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.946 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index = [['a', 'a', 'b', 'b'], [1, 2, 1, 2]])
2022-08-06 06:08:03.952 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.953 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.953 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=['a', 'b', 'c', 'd'])
2022-08-06 06:08:03.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.958 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.958 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[[1, 1, 2, 2], ['a', 'b', 'c', 'd']])
2022-08-06 06:08:03.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.964 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.964 | DEBUG    | __main__:run_benchmark:432 - #  and with values as the series data.
2022-08-06 06:08:03.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.965 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.965 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index = [['a', 'a', 'b', 'b'], [1, 2, 1, 2]])
2022-08-06 06:08:03.970 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.971 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.971 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]])
2022-08-06 06:08:03.976 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.976 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.977 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['col'])
2022-08-06 06:08:03.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.981 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.981 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['data'])
2022-08-06 06:08:03.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.985 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.986 | DEBUG    | __main__:run_benchmark:432 - #  and the values as the data
2022-08-06 06:08:03.986 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.986 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:08:03.986 | DEBUG    | __main__:run_benchmark:432 - data.unstack()
2022-08-06 06:08:03.987 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:03.989 | DEBUG    | __main__:run:508 - Running benchmark 62
2022-08-06 06:08:03.989 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:08:03.989 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:08:05.653 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.654 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].value_counts()
2022-08-06 06:08:05.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.657 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.657 | DEBUG    | __main__:run_benchmark:432 - df.pet1.str.count('mouse').sum()
2022-08-06 06:08:05.658 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.659 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.659 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].str.contains('mouse').sum()
2022-08-06 06:08:05.660 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.660 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.660 | DEBUG    | __main__:run_benchmark:432 - df.pet1.str.contains('mouse').sum()
2022-08-06 06:08:05.661 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.661 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.662 | DEBUG    | __main__:run_benchmark:432 - df.pet1.str.count('mouse')
2022-08-06 06:08:05.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.663 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.663 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].isin('mouse').sum()
2022-08-06 06:08:05.664 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.664 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.664 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].value_counts()
2022-08-06 06:08:05.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.665 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.665 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].value_counts()
2022-08-06 06:08:05.667 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.667 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.667 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].apply((lambda x: x.count('mouse')))
2022-08-06 06:08:05.668 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.668 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.668 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].str.count('mouse').sum()
2022-08-06 06:08:05.669 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.670 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.670 | DEBUG    | __main__:run_benchmark:432 - df[df.pet1.str.contains('mouse')].count()
2022-08-06 06:08:05.671 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.672 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.672 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].str.contains('mouse').sum()
2022-08-06 06:08:05.673 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.673 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.673 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].str.lower().str.count('mouse')
2022-08-06 06:08:05.674 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.674 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.675 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].str.match('mouse').sum()
2022-08-06 06:08:05.676 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.676 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.676 | DEBUG    | __main__:run_benchmark:432 - df.apply(lambda x: x.count('mouse'))
2022-08-06 06:08:05.677 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.677 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.677 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].str.contains('mouse').sum()
2022-08-06 06:08:05.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.678 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.678 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].str.contains('mouse').value_counts()
2022-08-06 06:08:05.679 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.680 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.680 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].str.count('mouse')
2022-08-06 06:08:05.681 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.681 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.681 | DEBUG    | __main__:run_benchmark:432 - df.pet1.str.contains('mouse').sum()
2022-08-06 06:08:05.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.682 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 06:08:05.683 | DEBUG    | __main__:run_benchmark:432 - df.loc[df['pet1'].str.contains('mouse')].pet1.count()
2022-08-06 06:08:05.684 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:05.686 | DEBUG    | __main__:run:508 - Running benchmark 63
2022-08-06 06:08:05.686 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:08:05.686 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:08:07.197 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 06:08:07.198 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:08:07.199 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:07.199 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 06:08:07.200 | DEBUG    | __main__:run_benchmark:432 - len(df[df['pet1'].isin(['mouse'])])
2022-08-06 06:08:07.201 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:07.201 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 06:08:07.201 | DEBUG    | __main__:run_benchmark:432 - df[df['pet1'].str.contains('mouse')].shape[0]
2022-08-06 06:08:07.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:07.203 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 06:08:07.203 | DEBUG    | __main__:run_benchmark:432 - df.isin(['mouse']).sum()
2022-08-06 06:08:07.204 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:07.204 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 06:08:07.204 | DEBUG    | __main__:run_benchmark:432 - df[df['pet1'].str.contains(pat='mouse')].shape[0]
2022-08-06 06:08:07.205 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:07.205 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 06:08:07.206 | DEBUG    | __main__:run_benchmark:432 - df.where((df == 'mouse')).count()
2022-08-06 06:08:07.207 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:07.208 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 06:08:07.208 | DEBUG    | __main__:run_benchmark:432 - len(df[(df['pet1'] == 'mouse') | (df['pet2'] == 'mouse')])
2022-08-06 06:08:07.209 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:08:07.212 | DEBUG    | __main__:run:508 - Running benchmark 64
2022-08-06 06:08:07.212 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:08:07.212 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:08:07.212 | DEBUG    | __main__:run:508 - Running benchmark 65
2022-08-06 06:08:07.212 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:08:07.213 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:08:08.858 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:08.858 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:08:08.875 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:08.876 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:08.876 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:08:08.892 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:08.893 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:08.893 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:08:08.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:08.909 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:08.910 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:08:08.926 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:08.926 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:08.926 | DEBUG    | __main__:run_benchmark:432 - df[((df['X'] > 4) & (df['X'] <= 10))]
2022-08-06 06:08:08.942 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:08.942 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:08.942 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:08:08.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:08.959 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:08.959 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:08:08.975 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:08.975 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:08.975 | DEBUG    | __main__:run_benchmark:432 - df[df['X'].between(4, 10)]
2022-08-06 06:08:08.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:08.991 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:08.991 | DEBUG    | __main__:run_benchmark:432 - df[((df['X'] >= 4) & (df['X'] <= 10))]
2022-08-06 06:08:09.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:09.008 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:09.008 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:08:09.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:09.024 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:09.024 | DEBUG    | __main__:run_benchmark:432 - df[df['X'].between(4, 10, inclusive=True)]
2022-08-06 06:08:09.040 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:09.040 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:09.041 | DEBUG    | __main__:run_benchmark:432 - df.loc[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:08:09.057 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:09.057 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:09.057 | DEBUG    | __main__:run_benchmark:432 - df[df['X'].between(4, 10)]
2022-08-06 06:08:09.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:09.073 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:09.073 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:08:09.089 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:09.089 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:09.090 | DEBUG    | __main__:run_benchmark:432 - df[df['X'].between(4, 10)]
2022-08-06 06:08:09.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:09.106 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:09.106 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:08:09.121 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:09.121 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:09.122 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:08:09.137 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:09.137 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:09.138 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:08:09.153 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:09.154 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:09.154 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:08:09.170 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:09.170 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:08:09.170 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:08:09.186 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:09.188 | DEBUG    | __main__:run:508 - Running benchmark 66
2022-08-06 06:08:09.188 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:08:09.188 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:08:11.418 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.419 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:08:11.437 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.437 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.437 | DEBUG    | __main__:run_benchmark:432 - df[(df['Y'] >= 4) & (df['Y'] <= 10) | (df['Y'] >= 14) & (df['Y'] <= 20)]
2022-08-06 06:08:11.454 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.454 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.455 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:08:11.471 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.471 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.472 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:08:11.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.488 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.489 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:08:11.505 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.505 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.505 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:08:11.522 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.522 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.523 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:08:11.539 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.539 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.540 | DEBUG    | __main__:run_benchmark:432 - df.loc[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:08:11.557 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.557 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.557 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:08:11.574 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.574 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.574 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:08:11.590 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.591 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.591 | DEBUG    | __main__:run_benchmark:432 - df[df['Y'].between(4, 10) | df['Y'].between(14, 20)]
2022-08-06 06:08:11.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.607 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.607 | DEBUG    | __main__:run_benchmark:432 - df[(df['Y'].between(4, 10)) | (df['Y'].between(14, 20))]
2022-08-06 06:08:11.624 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.624 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.624 | DEBUG    | __main__:run_benchmark:432 - df[(df['Y'] >= 4) & (df['Y'] <= 10) | (df['Y'] >= 14) & (df['Y'] <= 20)]
2022-08-06 06:08:11.641 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.641 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.641 | DEBUG    | __main__:run_benchmark:432 - df[df['Y'].between(4, 20, inclusive=True)]
2022-08-06 06:08:11.657 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.657 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.657 | DEBUG    | __main__:run_benchmark:432 - df[np.logical_or(np.logical_and((df['Y'] >= 4), (df['Y'] <= 10)), (df['Y'] >= 14), (df['Y'] <= 20))]
2022-08-06 06:08:11.669 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.669 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.669 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:08:11.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.685 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.685 | DEBUG    | __main__:run_benchmark:432 - df.loc[(((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20)))]
2022-08-06 06:08:11.702 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.702 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.702 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:08:11.719 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.719 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.719 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:08:11.735 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.735 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:08:11.736 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:08:11.752 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:11.755 | DEBUG    | __main__:run:508 - Running benchmark 67
2022-08-06 06:08:11.755 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:08:11.755 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:08:11.755 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval2
2022-08-06 06:08:11.755 | DEBUG    | __main__:run:495 - Found 21 benchmarks in PandasEval2
2022-08-06 06:08:11.756 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 06:08:11.756 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:08:11.756 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:08:11.756 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:08:11.756 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:08:11.756 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:08:11.756 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:08:13.236 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.236 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, index=str)
2022-08-06 06:08:13.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.258 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.258 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:08:13.277 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.277 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.277 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, index=str, inplace=True)
2022-08-06 06:08:13.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.291 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.291 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:08:13.310 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.310 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.310 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 06:08:13.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.324 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.324 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:08:13.343 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.343 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.344 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:08:13.363 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.363 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.363 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:08:13.382 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.382 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.382 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 06:08:13.396 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.396 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.396 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 06:08:13.410 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.410 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.410 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=False)
2022-08-06 06:08:13.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.429 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.429 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:08:13.448 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.448 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.449 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 06:08:13.462 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.462 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.462 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:08:13.481 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.481 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.482 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 06:08:13.495 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.495 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.495 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:08:13.514 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.514 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.514 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:08:13.533 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.534 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.534 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:08:13.553 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.553 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.553 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:08:13.572 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.572 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:08:13.572 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 06:08:13.586 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:13.589 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 06:08:13.589 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:08:13.589 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:08:13.589 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:08:13.589 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:08:13.589 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:08:15.356 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:08:15.357 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['colA'] % 5) == 0)]
2022-08-06 06:08:15.366 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:08:16.656 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin such that colA is divisible by 5
2022-08-06 06:08:16.657 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['colA'] % 5) == 0)]
2022-08-06 06:08:16.666 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:08:16.670 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:08:16.670 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 06:08:16.670 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:08:16.670 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:08:17.950 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:17.951 | DEBUG    | __main__:run_benchmark:432 - dfin_copy = dfin.copy()
2022-08-06 06:08:17.966 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:17.966 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:17.966 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*2, ignore_index=True)
2022-08-06 06:08:17.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:17.978 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:17.978 | DEBUG    | __main__:run_benchmark:432 - dfin_copy = dfin.append([dfin]*2, ignore_index=True)
2022-08-06 06:08:17.994 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:17.994 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:17.995 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append([dfin]*2, ignore_index=True)
2022-08-06 06:08:18.011 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:18.011 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:18.011 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:08:18.027 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:18.028 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:18.028 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2:].append(dfin.loc[2:]).append(dfin.loc[2:])
2022-08-06 06:08:18.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:18.042 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:18.043 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:08:18.054 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:18.055 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:18.055 | DEBUG    | __main__:run_benchmark:432 - dfin_copy = dfin.copy()
2022-08-06 06:08:18.069 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:18.070 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:18.070 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3, ignore_index=True)
2022-08-06 06:08:18.084 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:18.084 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:18.085 | DEBUG    | __main__:run_benchmark:432 - dfin_copy = dfin.copy()
2022-08-06 06:08:18.099 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:18.099 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:18.099 | DEBUG    | __main__:run_benchmark:432 - dfin_copy = dfin.copy()
2022-08-06 06:08:18.113 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:18.113 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:18.113 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, :].values
2022-08-06 06:08:18.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:18.123 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:18.124 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3:3] = dfin.loc[0:1]
2022-08-06 06:08:18.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:18.134 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:18.135 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3:].append(dfin.loc[3:].append(dfin.loc[3:]))
2022-08-06 06:08:18.146 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:18.146 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:18.146 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :]
2022-08-06 06:08:18.160 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:18.160 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:18.161 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = dfin.loc[0]
2022-08-06 06:08:18.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:18.172 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:18.172 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:08:18.188 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:18.188 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:18.188 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[::3]
2022-08-06 06:08:18.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:18.203 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:18.203 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append([dfin, dfin, dfin])
2022-08-06 06:08:18.217 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:18.218 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:08:18.218 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin] * 3)
2022-08-06 06:08:18.225 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:08:19.378 | DEBUG    | __main__:run_benchmark:431 - Query: Append dataframe to itself twice
2022-08-06 06:08:19.379 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin], axis=0, sort=False)
2022-08-06 06:08:19.387 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:08:19.391 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 06:08:21.057 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:08:21.058 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :].append([dfin]*4, ignore_index=True)
2022-08-06 06:08:21.075 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:21.075 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:08:21.075 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:,:] = dfin.loc[:,:].apply(lambda x: x.repeat(4), axis=0)
2022-08-06 06:08:21.079 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:21.079 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:08:21.079 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:08:21.095 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:21.095 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:08:21.095 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4), axis=0)
2022-08-06 06:08:21.097 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:21.097 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:08:21.097 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.values.repeat(4), axis=0)
2022-08-06 06:08:21.109 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:21.109 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:08:21.110 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :]
2022-08-06 06:08:21.124 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:21.124 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:08:21.125 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :]
2022-08-06 06:08:21.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:21.140 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:08:21.140 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:08:21.155 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:21.155 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:08:21.156 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.values.repeat(4))
2022-08-06 06:08:21.167 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:21.167 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:08:21.168 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.values.repeat(4), axis=0)
2022-08-06 06:08:21.179 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:21.179 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:08:21.179 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.values.repeat(4), axis=0)
2022-08-06 06:08:21.190 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:21.190 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:08:21.191 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.iloc[0] if x.name == 'A' else x.iloc[1])
2022-08-06 06:08:21.203 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:21.203 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:08:21.203 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :] * 4
2022-08-06 06:08:21.214 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:21.214 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:08:21.214 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.values.repeat(4), axis=0)
2022-08-06 06:08:21.225 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:21.226 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:08:21.226 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :].append([dfin]*4, ignore_index=True)
2022-08-06 06:08:21.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:21.241 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:08:21.241 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:08:21.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:21.255 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:08:21.256 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0)
2022-08-06 06:08:21.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:08:22.628 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:08:22.629 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 06:08:22.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:22.632 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:08:22.633 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4), axis=0)
2022-08-06 06:08:22.635 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:22.635 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:08:22.635 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :]
2022-08-06 06:08:22.650 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:22.650 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:08:22.650 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :].repeat(4, axis=0)
2022-08-06 06:08:22.652 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:22.652 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:08:22.652 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :].repeat(4, axis=0)
2022-08-06 06:08:22.654 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:22.654 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:08:22.654 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].values.repeat(4, axis=0)
2022-08-06 06:08:22.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:22.656 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:08:22.656 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].values.repeat(4, axis=0)
2022-08-06 06:08:22.658 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:22.658 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:08:22.658 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'].repeat(4)
2022-08-06 06:08:22.669 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:22.669 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:08:22.670 | DEBUG    | __main__:run_benchmark:432 - dfin.repeat(4)
2022-08-06 06:08:22.671 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:22.671 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:08:22.672 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].values.repeat(4, axis=0)
2022-08-06 06:08:22.673 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:22.674 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:08:22.674 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:08:22.688 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:22.688 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:08:22.688 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0)
2022-08-06 06:08:22.696 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:08:26.865 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-PLNC6ulVlY7Nc2Arf9QxoEyT on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'duplicate all rows 4 times', 'user': 'u12'}, {'query': 'repeat all rows of the dataframe 4 times', 'u...
    │               └ {'queries': [{'query': 'duplicate all rows 4 times', 'user': 'u12'}, {'query': 'repeat all rows of the dataframe 4 times', 'u...
    └ {'query': 'Repeat table 4 times', 'user': 'u6'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Multiply the "Label" column in the f...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2bd9e90>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:08:26 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '373', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:08:26 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '373', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-PLNC6ulVlY7Nc2Arf9QxoEyT on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e2aadbd0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-PLNC6ulVlY7Nc2Arf9QxoEyT on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-PLNC6ulVlY7Nc2Arf9QxoEyT on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase.
2022-08-06 06:08:26.874 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:08:58.253 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:08:58.254 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] * 4
2022-08-06 06:08:58.267 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:58.267 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:08:58.267 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, sort=False)
2022-08-06 06:08:58.275 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:08:59.471 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:08:59.471 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:08:59.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:59.489 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:08:59.489 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:08:59.504 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:59.505 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:08:59.505 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:08:59.516 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:59.517 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:08:59.517 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:08:59.532 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:59.533 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:08:59.533 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:08:59.549 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:59.549 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:08:59.549 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:08:59.565 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:59.565 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:08:59.565 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:08:59.576 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:59.576 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:08:59.577 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:08:59.592 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:59.593 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:08:59.593 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:08:59.604 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:59.604 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:08:59.604 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:08:59.615 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:59.615 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:08:59.615 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:08:59.630 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:08:59.630 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:08:59.630 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4)
2022-08-06 06:08:59.637 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:00.821 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:00.822 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:00.838 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:00.838 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:00.838 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:00.853 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:00.853 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:00.854 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:09:00.869 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:00.869 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:00.869 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:09:00.884 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:00.884 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:00.884 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:00.898 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:00.899 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:00.899 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:09:00.914 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:00.914 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:00.914 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:09:00.924 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:00.925 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:00.925 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:09:00.935 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:00.936 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:00.936 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:00.950 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:00.950 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:00.950 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:09:00.965 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:00.966 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:00.966 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:09:00.980 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:00.981 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:00.981 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:09:00.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:00.991 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:00.992 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:09:01.002 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:01.002 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:01.002 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:01.017 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:01.017 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:01.017 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:01.032 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:01.032 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:01.032 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:09:01.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:01.043 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:01.043 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:09:01.054 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:01.054 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:01.054 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:09:01.069 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:01.069 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:01.069 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:09:01.084 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:01.084 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:09:01.084 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:09:01.095 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:02.464 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate 4 times
2022-08-06 06:09:02.465 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0)
2022-08-06 06:09:02.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:03.501 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.502 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.503 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.503 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.504 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.504 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.504 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.504 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.504 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.504 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.505 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.505 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.505 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.505 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.505 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.505 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.505 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.506 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.506 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.506 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.506 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.506 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.506 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.506 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.506 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.506 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.507 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.507 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.507 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.507 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.507 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.507 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.508 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.508 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.508 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.508 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.508 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.508 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.509 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.509 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.509 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.509 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.509 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.509 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.509 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.509 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.510 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.510 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.510 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.510 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.510 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:03.510 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:09:03.510 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:03.510 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:04.750 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe 4 times
2022-08-06 06:09:04.750 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0, sort=False)
2022-08-06 06:09:04.759 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:06.050 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.050 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 3))
2022-08-06 06:09:06.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.054 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.054 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin])
2022-08-06 06:09:06.069 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.069 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.069 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 3), axis=0)
2022-08-06 06:09:06.071 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.071 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.071 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3, sort=False)
2022-08-06 06:09:06.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.086 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.086 | DEBUG    | __main__:run_benchmark:432 - dfin.assign(fold=3)
2022-08-06 06:09:06.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.102 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.102 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*2, ignore_index=True)
2022-08-06 06:09:06.113 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.113 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.114 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 3)
2022-08-06 06:09:06.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.125 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.125 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*2, ignore_index=True)
2022-08-06 06:09:06.136 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.136 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.136 | DEBUG    | __main__:run_benchmark:432 - np.tile(dfin, (3, 1))
2022-08-06 06:09:06.147 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.147 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.147 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:06.162 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.162 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.162 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin], axis=0)
2022-08-06 06:09:06.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.177 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.177 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(3)
2022-08-06 06:09:06.180 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.180 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.180 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*2, ignore_index=True)
2022-08-06 06:09:06.190 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.190 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.191 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin] * 2, ignore_index=True)
2022-08-06 06:09:06.201 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.201 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.201 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*2, ignore_index=True)
2022-08-06 06:09:06.212 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.212 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.212 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin])
2022-08-06 06:09:06.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.227 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.227 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3, ignore_index=True)
2022-08-06 06:09:06.243 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.243 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.243 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin)
2022-08-06 06:09:06.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.258 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.258 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:06.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:06.269 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:09:06.269 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 3), ignore_index=True)
2022-08-06 06:09:06.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.622 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.623 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :] * 3
2022-08-06 06:09:07.635 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.636 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.636 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :].append([dfin]*3, ignore_index=True)
2022-08-06 06:09:07.651 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.652 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.652 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 3), ignore_index=True)
2022-08-06 06:09:07.654 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.654 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.654 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :]
2022-08-06 06:09:07.669 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.669 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.669 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3, ignore_index=True)
2022-08-06 06:09:07.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.685 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.685 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] * 3
2022-08-06 06:09:07.699 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.700 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.700 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :]
2022-08-06 06:09:07.714 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.714 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.714 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3, ignore_index=True)
2022-08-06 06:09:07.730 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.730 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.730 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:09:07.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.745 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.745 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:09:07.759 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.759 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.760 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.values.repeat(3, axis=0), axis=1)
2022-08-06 06:09:07.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.762 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.763 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :]
2022-08-06 06:09:07.777 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.777 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.777 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] * 3
2022-08-06 06:09:07.791 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.791 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.792 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:09:07.806 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.806 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.806 | DEBUG    | __main__:run_benchmark:432 - np.repeat(dfin, 3, axis=0)
2022-08-06 06:09:07.808 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.808 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.808 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :].append([dfin]*3, ignore_index=True)
2022-08-06 06:09:07.824 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.824 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.824 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.values.repeat(3, axis=0))
2022-08-06 06:09:07.836 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.836 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.836 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:09:07.850 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.851 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.851 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:09:07.865 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:07.866 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:09:07.866 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3, axis=0)
2022-08-06 06:09:07.880 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:09.281 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 06:09:09.282 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :] * 4
2022-08-06 06:09:09.294 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:09.294 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 06:09:09.294 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(4)
2022-08-06 06:09:09.297 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:09.297 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 06:09:09.297 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :] * 4
2022-08-06 06:09:09.308 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:09.308 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 06:09:09.309 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 06:09:09.316 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:09.321 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:09:10.270 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin once
2022-08-06 06:09:10.271 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin], axis=0, sort=False)
2022-08-06 06:09:10.280 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:11.523 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 06:09:11.524 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin])
2022-08-06 06:09:11.533 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:12.624 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe dfin
2022-08-06 06:09:12.625 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin)
2022-08-06 06:09:12.634 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:13.487 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to itself
2022-08-06 06:09:13.488 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin)
2022-08-06 06:09:13.497 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:14.518 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.519 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(), :]
2022-08-06 06:09:14.532 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.532 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.532 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.B)]
2022-08-06 06:09:14.542 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.542 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.542 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(), :]
2022-08-06 06:09:14.554 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.554 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.554 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.B)]
2022-08-06 06:09:14.563 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.564 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.564 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(), :]
2022-08-06 06:09:14.575 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.576 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.576 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.weight)]
2022-08-06 06:09:14.578 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.578 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.578 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.B)]
2022-08-06 06:09:14.587 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.587 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.588 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(), :]
2022-08-06 06:09:14.600 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.600 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.600 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.weight)]
2022-08-06 06:09:14.602 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.602 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.602 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.A)]
2022-08-06 06:09:14.618 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.618 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.618 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(), :]
2022-08-06 06:09:14.630 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.630 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.630 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.B)]
2022-08-06 06:09:14.639 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.639 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.639 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(), :]
2022-08-06 06:09:14.651 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.651 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.651 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.values.shape[1])]
2022-08-06 06:09:14.666 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.666 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.667 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(), :]
2022-08-06 06:09:14.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.678 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.678 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(keep=False), :]
2022-08-06 06:09:14.690 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.690 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.690 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.weight)]
2022-08-06 06:09:14.692 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.692 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.692 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(), :]
2022-08-06 06:09:14.704 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.704 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.704 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(), :]
2022-08-06 06:09:14.716 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:14.716 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:09:14.716 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(), :]
2022-08-06 06:09:14.727 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:15.780 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:15.781 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = [44, -4]
2022-08-06 06:09:15.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:15.788 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:15.788 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:15.800 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:15.800 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:15.800 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:15.812 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:15.812 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:15.812 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:15.824 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:15.824 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:15.824 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:]
2022-08-06 06:09:15.842 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:15.842 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:15.843 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[0:1, :]
2022-08-06 06:09:15.858 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:15.858 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:15.858 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:15.870 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:15.871 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:15.871 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[0:1, :]
2022-08-06 06:09:15.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:15.885 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:15.885 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0:2, :]
2022-08-06 06:09:15.900 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:15.900 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:15.900 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:15.911 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:15.911 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:15.911 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:15.922 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:15.922 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:15.923 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:15.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:15.934 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:15.934 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:15.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:15.945 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:15.945 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:15.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:15.957 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:15.957 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.isin([0, 2])]
2022-08-06 06:09:15.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:15.972 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:15.972 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.tolist()]
2022-08-06 06:09:15.986 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:15.987 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:15.987 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:15.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:15.998 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:15.998 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.A)]
2022-08-06 06:09:16.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:16.013 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:16.014 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:16.025 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:16.025 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:09:16.025 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:16.036 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:17.059 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows
2022-08-06 06:09:17.060 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:17.072 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:17.072 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows
2022-08-06 06:09:17.072 | DEBUG    | __main__:run_benchmark:432 - df_out[1] = dfin.copy()
2022-08-06 06:09:17.074 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:17.074 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows
2022-08-06 06:09:17.074 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = [44, -1]
2022-08-06 06:09:17.081 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:17.081 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows
2022-08-06 06:09:17.081 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = [44, -1]
2022-08-06 06:09:17.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:17.087 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows
2022-08-06 06:09:17.087 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:17.098 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:17.099 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows
2022-08-06 06:09:17.099 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin)
2022-08-06 06:09:17.106 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:18.078 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.078 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:18.095 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.095 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.095 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:18.110 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.110 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.111 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:18.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.127 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.127 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:18.143 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.143 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.143 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0]).reset_index(drop=True)
2022-08-06 06:09:18.160 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.160 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.160 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:18.175 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.176 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.176 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:18.191 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.191 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.191 | DEBUG    | __main__:run_benchmark:432 - dfin.append(series, ignore_index=True)
2022-08-06 06:09:18.193 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.193 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.193 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:18.208 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.208 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.209 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:18.224 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.224 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.224 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:18.239 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.240 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.240 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = [44, -1]
2022-08-06 06:09:18.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.246 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.246 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.copy(), ignore_index=True)
2022-08-06 06:09:18.261 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.261 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.262 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:18.277 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.277 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.277 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = [44, -1]
2022-08-06 06:09:18.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.284 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.284 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:18.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.299 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.299 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:18.315 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.315 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.315 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:18.331 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.331 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.331 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:18.346 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.346 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:09:18.346 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:18.362 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:18.366 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 06:09:19.782 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 06:09:19.783 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 3)
2022-08-06 06:09:19.813 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:19.813 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 06:09:19.813 | DEBUG    | __main__:run_benchmark:432 - np.repeat(dfin, 3, axis=1)
2022-08-06 06:09:19.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:19.817 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 06:09:19.817 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 3)
2022-08-06 06:09:19.832 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:19.833 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 06:09:19.833 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin])
2022-08-06 06:09:19.840 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:21.376 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:09:21.377 | DEBUG    | __main__:run_benchmark:432 - pd.melt(dfin, value_vars=['A', 'B']).assign(A=lambda x: x.variable.str[0],
2022-08-06 06:09:21.378 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:21.378 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:09:21.379 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ['A', 'B']] * 3
2022-08-06 06:09:21.394 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:21.394 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:09:21.394 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame(np.tile(dfin, (1, 3)), columns=['A', 'B', 'C'])
2022-08-06 06:09:21.396 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:21.396 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:09:21.396 | DEBUG    | __main__:run_benchmark:432 - dfin.T.loc[:, :] * 3
2022-08-06 06:09:21.411 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:21.411 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:09:21.411 | DEBUG    | __main__:run_benchmark:432 - dfin.T.loc[:, :] = dfin.T.loc[:, :] * 3
2022-08-06 06:09:21.423 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:21.423 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:09:21.423 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'C'] = dfin.loc[:, 'A']
2022-08-06 06:09:21.435 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:21.435 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:09:21.435 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 3)
2022-08-06 06:09:21.446 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:21.447 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:09:21.447 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 3)
2022-08-06 06:09:21.458 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:21.459 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:09:21.459 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 3)
2022-08-06 06:09:21.470 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:21.470 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:09:21.470 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, 0].repeat(3)
2022-08-06 06:09:21.481 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:21.481 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:09:21.481 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3, axis=1)
2022-08-06 06:09:21.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:21.499 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:09:21.499 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin])
2022-08-06 06:09:21.506 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:22.755 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.756 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index * 2)
2022-08-06 06:09:22.774 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.774 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.774 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:22.785 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.785 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.785 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:,:]
2022-08-06 06:09:22.800 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.800 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.800 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:22.812 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.812 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.812 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*2,ignore_index=True)
2022-08-06 06:09:22.828 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.828 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.828 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:22.840 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.840 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.841 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = [44, -1]
2022-08-06 06:09:22.847 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.848 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.848 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:22.859 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.859 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.860 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:22.871 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.871 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.871 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:22.882 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.882 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.882 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:22.893 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.893 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.893 | DEBUG    | __main__:run_benchmark:432 - pd.concat([df, dfin], axis=0)
2022-08-06 06:09:22.895 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.895 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.895 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(r, 'target')] = dfin.loc[(r, 'target')] * 2
2022-08-06 06:09:22.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.897 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.897 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:22.908 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.908 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.908 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[['A', 'B']]
2022-08-06 06:09:22.911 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.911 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.911 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:22.922 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.922 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.922 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:22.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.933 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.933 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index]
2022-08-06 06:09:22.948 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.948 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.948 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:09:22.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:22.964 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:09:22.964 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:22.975 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.137 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.137 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin])
2022-08-06 06:09:24.155 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.155 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.156 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin], axis=0, sort=False)
2022-08-06 06:09:24.171 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.171 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.171 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:24.183 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.183 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.183 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:24.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.194 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.194 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:24.209 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.209 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.209 | DEBUG    | __main__:run_benchmark:432 - dfin.melt()
2022-08-06 06:09:24.225 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.226 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.226 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(2)
2022-08-06 06:09:24.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.228 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.228 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:24.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.240 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.240 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:24.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.258 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.258 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin)
2022-08-06 06:09:24.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.270 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.270 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:24.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.281 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.281 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin)
2022-08-06 06:09:24.292 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.293 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.293 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:24.307 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.307 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.308 | DEBUG    | __main__:run_benchmark:432 - np.tile(dfin, (2, 1))
2022-08-06 06:09:24.318 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.318 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.318 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 2)
2022-08-06 06:09:24.329 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.329 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.329 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:24.344 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.344 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.344 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin)
2022-08-06 06:09:24.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.355 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.355 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:24.369 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.369 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.370 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin)
2022-08-06 06:09:24.383 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:24.383 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:09:24.383 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:24.395 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.590 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.591 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:25.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.607 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.608 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 2), axis=0)
2022-08-06 06:09:25.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.610 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.610 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:25.624 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.625 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.625 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*2, sort=False)
2022-08-06 06:09:25.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.640 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.640 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 2))
2022-08-06 06:09:25.642 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.642 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.642 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:25.657 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.658 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.658 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.repeat(2))
2022-08-06 06:09:25.661 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.662 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.662 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:25.676 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.676 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.677 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:25.691 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.691 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.691 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:25.705 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.706 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.706 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:25.720 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.720 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.720 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:25.735 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.735 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.735 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:25.749 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.750 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.750 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:25.764 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.764 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.764 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:25.779 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.779 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.779 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:25.793 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.793 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.793 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 2)
2022-08-06 06:09:25.804 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.804 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.804 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:25.819 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.819 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.819 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:25.834 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:25.834 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:09:25.834 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:09:25.848 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.001 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.001 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:27.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.024 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.024 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:27.037 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.038 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.038 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:27.049 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.050 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.050 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:27.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.066 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.066 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:27.081 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.081 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.081 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:27.097 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.097 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.097 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:27.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.112 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.112 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:27.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.124 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.124 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:27.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.139 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.139 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:27.155 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.155 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.155 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:27.166 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.166 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.166 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:27.181 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.181 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.182 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:27.197 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.197 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.197 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:27.208 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.208 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.208 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0])
2022-08-06 06:09:27.229 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.229 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.229 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:27.244 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.245 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.245 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:27.256 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.256 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.256 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:27.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.271 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.271 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:09:27.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:27.287 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:09:27.287 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:09:27.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:28.339 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:09:28.340 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:28.356 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:28.356 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:09:28.356 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:28.370 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:28.371 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:09:28.371 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:28.385 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:28.386 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:09:28.386 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:28.401 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:28.401 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:09:28.401 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:28.416 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:28.416 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:09:28.416 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:28.430 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:28.430 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:09:28.431 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:28.445 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:28.445 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:09:28.445 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:28.459 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:28.460 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:09:28.460 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:28.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:28.474 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:09:28.474 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:28.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:28.489 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:09:28.489 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:28.503 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:28.503 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:09:28.503 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:28.517 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:28.518 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:09:28.518 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:28.532 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:28.532 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:09:28.532 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin])
2022-08-06 06:09:28.539 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:29.466 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin, then append dfin to it
2022-08-06 06:09:29.467 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin).append(dfin)
2022-08-06 06:09:29.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:29.488 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:09:30.909 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:09:30.910 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.repeat(4), axis=0)
2022-08-06 06:09:30.915 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:30.915 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:09:30.915 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 06:09:30.917 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:30.918 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:09:30.918 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0, sort=False)
2022-08-06 06:09:30.926 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:32.232 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:09:32.233 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.repeat(4), axis=0)
2022-08-06 06:09:32.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:32.241 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:09:32.241 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :].repeat(4, axis=0)
2022-08-06 06:09:32.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:32.246 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:09:32.246 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 06:09:32.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:32.252 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:09:32.252 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :].repeat(4, axis=0)
2022-08-06 06:09:32.257 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:32.257 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:09:32.258 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.repeat(4), axis=0)
2022-08-06 06:09:32.266 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:32.267 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:09:32.267 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4), axis=0)
2022-08-06 06:09:32.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:32.271 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:09:32.271 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(4)
2022-08-06 06:09:32.276 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:32.276 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:09:32.276 | DEBUG    | __main__:run_benchmark:432 - dfin.repeat(4)
2022-08-06 06:09:32.279 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:32.279 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:09:32.279 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :] * 4
2022-08-06 06:09:32.292 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:32.293 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:09:32.293 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0)
2022-08-06 06:09:32.301 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:33.312 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 06:09:33.313 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 06:09:33.316 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:33.317 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 06:09:33.317 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4), axis=0)
2022-08-06 06:09:33.319 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:33.319 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 06:09:33.319 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, sort=False)
2022-08-06 06:09:33.327 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:34.155 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:09:34.155 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:09:34.173 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:34.174 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:09:34.174 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:09:34.190 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:34.190 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:09:34.190 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 06:09:34.192 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:34.192 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:09:34.192 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4), axis=0)
2022-08-06 06:09:34.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:34.194 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:09:34.194 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:09:34.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:34.211 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:09:34.211 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:09:34.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:34.227 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:09:34.227 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = dfin.loc[0]
2022-08-06 06:09:34.239 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:34.239 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:09:34.240 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:09:34.256 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:34.256 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:09:34.256 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:09:34.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:34.273 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:09:34.273 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:09:34.289 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:34.289 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:09:34.289 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:09:34.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:34.305 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:09:34.305 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[4] = dfin.loc[0]
2022-08-06 06:09:34.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:34.317 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:09:34.317 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:09:34.332 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:34.333 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:09:34.333 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0)
2022-08-06 06:09:34.343 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:35.650 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 06:09:35.651 | DEBUG    | __main__:run_benchmark:432 - dfin.repeat(4)
2022-08-06 06:09:35.653 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:35.653 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 06:09:35.654 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].values.repeat(4, axis=0)
2022-08-06 06:09:35.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:35.656 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 06:09:35.656 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0)
2022-08-06 06:09:35.664 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:36.786 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 06:09:36.787 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:09:36.803 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:36.803 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 06:09:36.803 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:09:36.819 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:36.819 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 06:09:36.819 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4), axis=0)
2022-08-06 06:09:36.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:36.821 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 06:09:36.821 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0, sort=False)
2022-08-06 06:09:36.829 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:09:37.966 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:37.966 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 06:09:37.979 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:37.980 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:37.980 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'C'] = dfin.loc[:, 'A']
2022-08-06 06:09:37.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:37.991 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:37.991 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:09:38.002 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:38.002 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:38.002 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:09:38.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:38.014 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:38.014 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 06:09:38.026 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:38.026 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:38.026 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 06:09:38.038 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:38.038 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:38.038 | DEBUG    | __main__:run_benchmark:432 - datas = [dfin] * 4
2022-08-06 06:09:38.049 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:38.050 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:38.050 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 06:09:38.062 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:38.062 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:38.062 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*2,ignore_index=True)
2022-08-06 06:09:38.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:38.073 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:38.073 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:09:38.084 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:38.084 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:38.085 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:09:38.096 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:38.096 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:38.096 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 06:09:38.108 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:38.108 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:38.108 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3,ignore_index=True)
2022-08-06 06:09:38.119 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:38.119 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:38.119 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 06:09:38.131 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:38.131 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:38.131 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*2, ignore_index=True)
2022-08-06 06:09:38.141 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:38.142 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:38.142 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 06:09:38.143 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:38.144 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:38.144 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 06:09:38.155 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:38.155 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:38.155 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin] * 4, ignore_index=True)
2022-08-06 06:09:38.166 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:38.167 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:38.167 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 06:09:38.178 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:38.178 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:09:38.178 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 06:09:38.190 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.545 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.546 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:09:39.563 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.563 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.563 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4), ignore_index=True)
2022-08-06 06:09:39.565 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.565 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.565 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin] * 4, ignore_index=True)
2022-08-06 06:09:39.580 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.580 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.580 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 06:09:39.582 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.582 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.582 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[4] = [44, -4]
2022-08-06 06:09:39.589 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.589 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.589 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = [44, -4]
2022-08-06 06:09:39.596 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.596 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.596 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:39.596 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.596 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.597 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = [44, -1]
2022-08-06 06:09:39.603 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.603 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.604 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = [44, -4]
2022-08-06 06:09:39.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.610 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.610 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:39.611 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.611 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.611 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = [44, -1]
2022-08-06 06:09:39.617 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.618 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.618 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = [44, -4]
2022-08-06 06:09:39.624 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.625 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.625 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = [44, -4]
2022-08-06 06:09:39.631 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.632 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.632 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = [44, -1]
2022-08-06 06:09:39.638 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.639 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.639 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:39.639 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.639 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.639 | DEBUG    | __main__:run_benchmark:432 - dfin.append([{'A': 44, 'B': -4}, {'A': 55, 'B': -5}] * 4, ignore_index=True)
2022-08-06 06:09:39.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.656 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.656 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = [44, -1]
2022-08-06 06:09:39.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.663 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.663 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:09:39.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.663 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.664 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:09:39.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.678 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:09:39.679 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = [44, -4]
2022-08-06 06:09:39.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:09:39.846 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'repeat the rows 4 times', 'user': 'u5'}, {'query': 'repeat all rows 4 times', 'user': 'u5'}, {'query'...
    │               └ {'queries': [{'query': 'repeat the rows 4 times', 'user': 'u5'}, {'query': 'repeat all rows 4 times', 'user': 'u5'}, {'query'...
    └ {'query': 'Duplicate the rows 4 times', 'user': 'u16'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Concatenate "series1" and "series2" ...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2b86850>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:09:39 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:09:39 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e2acfed0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:09:39.851 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:10:11.154 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.154 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:10:11.171 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.172 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.172 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :].append([dfin]*4, ignore_index=True)
2022-08-06 06:10:11.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.187 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.187 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:10:11.203 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.203 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.203 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :]
2022-08-06 06:10:11.217 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.218 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.218 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = dfin.loc[0]
2022-08-06 06:10:11.230 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.230 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.230 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = dfin.loc[0]
2022-08-06 06:10:11.242 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.242 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.242 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = dfin.loc[0]
2022-08-06 06:10:11.253 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.254 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.254 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:10:11.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.270 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.270 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :].append([dfin] * 4, ignore_index=True)
2022-08-06 06:10:11.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.285 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.285 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 06:10:11.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.287 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.287 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 4)
2022-08-06 06:10:11.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.298 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.298 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.values.repeat(4), axis=0)
2022-08-06 06:10:11.309 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.309 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.310 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 4)
2022-08-06 06:10:11.320 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.321 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.321 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:10:11.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.336 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.337 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :].append([dfin] * 4, ignore_index=True)
2022-08-06 06:10:11.351 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.351 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.351 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4), axis=0)
2022-08-06 06:10:11.353 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.353 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.354 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:10:11.369 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.370 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.370 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :].append([dfin] * 4, ignore_index=True)
2022-08-06 06:10:11.384 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.384 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.385 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:10:11.400 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:11.400 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:10:11.401 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = dfin.loc[0]
2022-08-06 06:10:11.413 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.503 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.503 | DEBUG    | __main__:run_benchmark:432 - np.multiply(dfin, 4)
2022-08-06 06:10:12.554 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.555 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.555 | DEBUG    | __main__:run_benchmark:432 - dfin.multiply(4)
2022-08-06 06:10:12.571 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.571 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.571 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 06:10:12.582 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.582 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.582 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[4] * 4
2022-08-06 06:10:12.584 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.584 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.585 | DEBUG    | __main__:run_benchmark:432 - np.dot(dfin, np.array([[4], [4]]))
2022-08-06 06:10:12.590 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.591 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.591 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 06:10:12.602 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.602 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.602 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] * 4
2022-08-06 06:10:12.613 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.613 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.614 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x * 4)
2022-08-06 06:10:12.629 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.629 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.629 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 06:10:12.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.640 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.640 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 06:10:12.651 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.651 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.651 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[4] * 4
2022-08-06 06:10:12.653 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.653 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.653 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 06:10:12.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.664 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.664 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[4] * 4
2022-08-06 06:10:12.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.666 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.666 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[4] * 4
2022-08-06 06:10:12.667 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.667 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.668 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x * 4)
2022-08-06 06:10:12.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.683 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.683 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[4] * 4
2022-08-06 06:10:12.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.685 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.685 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[4] * 4
2022-08-06 06:10:12.687 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.687 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.687 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[4] = dfin.iloc[4] * 4
2022-08-06 06:10:12.688 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.689 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.689 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x * 4)
2022-08-06 06:10:12.704 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.704 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:10:12.704 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[4] = dfin.iloc[4] * 4
2022-08-06 06:10:12.706 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:12.867 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'repeat the rows 4 times', 'user': 'u5'}, {'query': 'repeat all rows 4 times', 'user': 'u5'}, {'query'...
    │               └ {'queries': [{'query': 'repeat the rows 4 times', 'user': 'u5'}, {'query': 'repeat all rows 4 times', 'user': 'u5'}, {'query'...
    └ {'query': 'Duplicate table 4 times', 'user': 'u16'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Concatenate a list of dataframes "df...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2be2cd0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:10:12 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:10:12 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e2ade8d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:10:12.892 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:10:44.069 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate table 4 times
2022-08-06 06:10:44.070 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:10:44.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:44.087 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate table 4 times
2022-08-06 06:10:44.087 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'C'] = dfin.loc[:, 'A']
2022-08-06 06:10:44.099 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:44.099 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate table 4 times
2022-08-06 06:10:44.099 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:10:44.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:44.114 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate table 4 times
2022-08-06 06:10:44.114 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin]*4, axis=0)
2022-08-06 06:10:44.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:10:44.127 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 06:10:44.128 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:10:44.128 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:10:44.128 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 06:10:45.206 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 06:10:45.206 | DEBUG    | __main__:run_benchmark:432 - dfin.values[(0, 2)]
2022-08-06 06:10:45.208 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:45.208 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 06:10:45.208 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0, 2]
2022-08-06 06:10:45.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:45.210 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 06:10:45.210 | DEBUG    | __main__:run_benchmark:432 - dfin.at[(1, 'colC')]
2022-08-06 06:10:45.211 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:10:46.478 | DEBUG    | __main__:run_benchmark:431 - Query: return value from ColC's 1st row
2022-08-06 06:10:46.478 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[0,'colC']
2022-08-06 06:10:46.480 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:46.480 | DEBUG    | __main__:run_benchmark:431 - Query: return value from ColC's 1st row
2022-08-06 06:10:46.480 | DEBUG    | __main__:run_benchmark:432 - dfin['colC'].values[0]
2022-08-06 06:10:46.481 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:46.481 | DEBUG    | __main__:run_benchmark:431 - Query: return value from ColC's 1st row
2022-08-06 06:10:46.481 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(0, 'colC')]
2022-08-06 06:10:46.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:46.483 | DEBUG    | __main__:run_benchmark:431 - Query: return value from ColC's 1st row
2022-08-06 06:10:46.483 | DEBUG    | __main__:run_benchmark:432 - dfin[params][x]
2022-08-06 06:10:46.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:46.484 | DEBUG    | __main__:run_benchmark:431 - Query: return value from ColC's 1st row
2022-08-06 06:10:46.485 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[(1, dfin.columns.get_loc('colC'))]
2022-08-06 06:10:46.485 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:10:47.632 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.633 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(2, 'colC')]
2022-08-06 06:10:47.635 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.636 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.636 | DEBUG    | __main__:run_benchmark:432 - dfin.at[2, 'colC']
2022-08-06 06:10:47.637 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.637 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.637 | DEBUG    | __main__:run_benchmark:432 - dfin.at[2, 'colC']
2022-08-06 06:10:47.638 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.639 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.639 | DEBUG    | __main__:run_benchmark:432 - dfin.at[2, 'colC']
2022-08-06 06:10:47.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.640 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.640 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(2, 'colC')]
2022-08-06 06:10:47.641 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.642 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.642 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[2]['colC']
2022-08-06 06:10:47.643 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.643 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.643 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2]['colC']
2022-08-06 06:10:47.645 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.645 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.645 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[2, dfin.columns.get_loc('colC')]
2022-08-06 06:10:47.646 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.646 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.646 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(2, 'colC')]
2022-08-06 06:10:47.648 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.648 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.648 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 06:10:47.649 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.649 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.649 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(2, 'colC')]
2022-08-06 06:10:47.651 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.651 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.651 | DEBUG    | __main__:run_benchmark:432 - dfin.values[2, 2]
2022-08-06 06:10:47.652 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.652 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.652 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(2, 'colC')]
2022-08-06 06:10:47.653 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.653 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.654 | DEBUG    | __main__:run_benchmark:432 - dfin.at[2, 'colC']
2022-08-06 06:10:47.655 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.655 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.655 | DEBUG    | __main__:run_benchmark:432 - dfin['colC'].ix[2]
2022-08-06 06:10:47.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.656 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.657 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(2, 'colC')]
2022-08-06 06:10:47.658 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.658 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.658 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[2]['colC']
2022-08-06 06:10:47.659 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.660 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.660 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 06:10:47.661 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.661 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.662 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(2, 'colC')]
2022-08-06 06:10:47.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:47.663 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:10:47.663 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 06:10:47.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:48.902 | DEBUG    | __main__:run_benchmark:431 - Query: return second entry of column 'colC'
2022-08-06 06:10:48.903 | DEBUG    | __main__:run_benchmark:432 - dfin['colC'][1]
2022-08-06 06:10:48.905 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:10:48.913 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:10:48.913 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 06:10:48.913 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:10:50.040 | DEBUG    | __main__:run_benchmark:431 - Query: return third value at column 'gamma'
2022-08-06 06:10:50.040 | DEBUG    | __main__:run_benchmark:432 - dfin['gamma'][2]
2022-08-06 06:10:50.041 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:10:50.048 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 06:10:50.048 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:10:50.048 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:10:51.798 | DEBUG    | __main__:run_benchmark:431 - Query: Filter all rows with alpha less than 40 or greater than 59 from dfin
2022-08-06 06:10:51.799 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] < 40) | (dfin['alpha'] > 59)]
2022-08-06 06:10:51.808 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:10:53.483 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.483 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['alpha'].between(40, 59)]
2022-08-06 06:10:53.502 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.502 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.503 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:10:53.520 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.520 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.520 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:10:53.538 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.538 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.538 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:10:53.556 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.556 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.556 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:10:53.574 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.574 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.574 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['alpha'].between(40, 59)]
2022-08-06 06:10:53.591 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.591 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.592 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:10:53.609 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.609 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.609 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:10:53.626 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.626 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.626 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] >= 40) & (dfin['alpha'] <= 59))]
2022-08-06 06:10:53.643 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.643 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.644 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:10:53.661 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.661 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.661 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:10:53.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.678 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.678 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:10:53.696 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.696 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.696 | DEBUG    | __main__:run_benchmark:432 - dfin[np.logical_and(dfin['alpha'] >= 40, dfin['alpha'] <= 59)]
2022-08-06 06:10:53.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.713 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.714 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:10:53.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.731 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.731 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:10:53.748 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.748 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.749 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)), :]
2022-08-06 06:10:53.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.766 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.766 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] < 59)]
2022-08-06 06:10:53.783 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.783 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.784 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:10:53.801 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.801 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.801 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:10:53.818 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:53.819 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:10:53.819 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['alpha'].between(40, 59)]
2022-08-06 06:10:53.836 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:55.045 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 06:10:55.046 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['alpha'] >= 40) & (dfin['alpha'] <= 59))]
2022-08-06 06:10:55.056 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:10:55.063 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:10:56.804 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' lie are less than 34 or are greater than 70 of table dfin
2022-08-06 06:10:56.804 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70))]
2022-08-06 06:10:56.814 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:10:58.471 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70
2022-08-06 06:10:58.471 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70))]
2022-08-06 06:10:58.485 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:58.485 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70
2022-08-06 06:10:58.486 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70))]
2022-08-06 06:10:58.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:10:58.499 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70
2022-08-06 06:10:58.499 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70))]
2022-08-06 06:10:58.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:10:58.515 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:10:58.515 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:11:00.128 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 06:11:00.128 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) & (dfin['gamma'] > 53))]
2022-08-06 06:11:00.143 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:00.144 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 06:11:00.144 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) & (dfin['gamma'] > 53))]
2022-08-06 06:11:00.157 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:00.157 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 06:11:00.157 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) & (dfin['gamma'] > 53))]
2022-08-06 06:11:00.170 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:00.170 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 06:11:00.171 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['gamma'] < 40) & (dfin['gamma'] > 53)]
2022-08-06 06:11:00.184 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:00.184 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 06:11:00.184 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) & (dfin['gamma'] > 53))]
2022-08-06 06:11:00.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:00.198 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 06:11:00.198 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) & (dfin['gamma'] > 53))]
2022-08-06 06:11:00.212 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:00.212 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 06:11:00.213 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) | (dfin['gamma'] > 53))]
2022-08-06 06:11:00.222 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:11:01.987 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is not between 40 and 53
2022-08-06 06:11:01.987 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['gamma'] < 40) | (dfin['gamma'] > 53)]
2022-08-06 06:11:01.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:11:03.512 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in column 'gamma' is less than 40 and select all rows where the entry in column 'gamma' is more than 53
2022-08-06 06:11:03.513 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) | (dfin['gamma'] > 53))]
2022-08-06 06:11:03.524 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:11:04.998 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the any entry in column 'gamma' is not between 40 and 53
2022-08-06 06:11:04.999 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['gamma'] >= 40) & (dfin['gamma'] <= 53))]
2022-08-06 06:11:05.010 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:11:06.600 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where 'gamma' is less than 40 or greater than 53
2022-08-06 06:11:06.601 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) | (dfin['gamma'] > 53))]
2022-08-06 06:11:06.611 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:11:06.775 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'select rows where column "gamma" value is less than 40 or greater than 53', 'user': 'u4'}, {'query': ...
    │               └ {'queries': [{'query': 'select rows where column "gamma" value is less than 40 or greater than 53', 'user': 'u4'}, {'query': ...
    └ {'query': 'From dfin, filter rows with column gamma less than 40 or more than 53', 'user': 'u17'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a dataframe with rows of "df"...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2b1d610>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:11:06 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:11:06 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e2b18290>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:11:06.783 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:11:38.312 | DEBUG    | __main__:run_benchmark:431 - Query: From dfin, filter rows with column gamma less than 40 or more than 53
2022-08-06 06:11:38.313 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['gamma'] < 40) | (dfin['gamma'] > 53)]
2022-08-06 06:11:38.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:11:38.366 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:11:40.132 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with value of column 'bar' between 38 and 60
2022-08-06 06:11:40.133 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 60) & (dfin['bar'] > 38)]
2022-08-06 06:11:40.152 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:40.152 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with value of column 'bar' between 38 and 60
2022-08-06 06:11:40.152 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar'] >= 38) & (dfin['bar'] <= 60)]
2022-08-06 06:11:40.169 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:40.170 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with value of column 'bar' between 38 and 60
2022-08-06 06:11:40.170 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 38) & (dfin['bar'] < 60))]
2022-08-06 06:11:40.179 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:11:41.776 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:41.776 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar']<38) & (dfin['bar']>60)]
2022-08-06 06:11:41.794 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:41.794 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:41.794 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar']<38) & (dfin['bar']>60)]
2022-08-06 06:11:41.810 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:41.811 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:41.811 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar']<38) & (dfin['bar']>60)]
2022-08-06 06:11:41.825 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:41.825 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:41.825 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:11:41.839 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:41.839 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:41.839 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:11:41.853 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:41.853 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:41.854 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:11:41.867 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:41.867 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:41.867 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:11:41.880 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:41.880 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:41.880 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) & (dfin['bar'] > 60))]
2022-08-06 06:11:41.893 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:41.893 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:41.894 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar']<38) & (dfin['bar']>60)]
2022-08-06 06:11:41.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:41.907 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:41.907 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:11:41.920 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:41.920 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:41.920 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar']<38) & (dfin['bar']>60)]
2022-08-06 06:11:41.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:41.933 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:41.933 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar']<38) & (dfin['bar']>60)]
2022-08-06 06:11:41.946 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:41.947 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:41.947 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:11:41.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:41.960 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:41.960 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:11:41.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:41.973 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:41.973 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) & (dfin['bar'] > 60))]
2022-08-06 06:11:41.986 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:41.987 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:41.987 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar']<38) & (dfin['bar']>60)]
2022-08-06 06:11:42.000 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:42.000 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:42.000 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:11:42.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:42.013 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:42.013 | DEBUG    | __main__:run_benchmark:432 - dfin.where((dfin['bar'] < 38) & (dfin['bar'] > 60))
2022-08-06 06:11:42.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:42.033 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:42.033 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:11:42.047 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:42.047 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:11:42.047 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar']<38) & (dfin['bar']>60)]
2022-08-06 06:11:42.061 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:11:42.068 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 06:11:42.068 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:11:42.068 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:11:43.661 | DEBUG    | __main__:run_benchmark:431 - Query: Filter all rows with alpha less than 40 or greater than 59 and filter all rows with beta equal to 3 from dfin
2022-08-06 06:11:43.661 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3)]
2022-08-06 06:11:43.681 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:11:43.862 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Filter all rows with alpha less than 40 or greater than 59 and filter all rows with beta equal to 3 f...
    │               └ {'queries': [{'query': 'Filter all rows with alpha less than 40 or greater than 59 and filter all rows with beta equal to 3 f...
    └ {'query': 'Filter all rows with alpha less than 40 or greater than 59 and beta equal to 3 from dfin', 'user': 'u20'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a DataFrame containing rows w...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2b255d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:11:43 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:11:43 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e2ae1810>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:11:43.873 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:12:15.355 | DEBUG    | __main__:run_benchmark:431 - Query: Filter all rows with alpha less than 40 or greater than 59 and beta equal to 3 from dfin
2022-08-06 06:12:15.355 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3)]
2022-08-06 06:12:15.366 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:16.740 | DEBUG    | __main__:run_benchmark:431 - Query: Filter all rows with alpha less than 40 or greater than 59 with beta equal to 3
2022-08-06 06:12:16.740 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3)]
2022-08-06 06:12:16.777 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:18.174 | DEBUG    | __main__:run_benchmark:431 - Query: Select all rows with alpha less than 40 or greater than 59 with beta equal to 3
2022-08-06 06:12:18.175 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3)]
2022-08-06 06:12:18.185 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:18.192 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:12:20.187 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 34 or greater than 70 and value in column 'bar' is 8
2022-08-06 06:12:20.187 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:20.197 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:21.970 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:21.971 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.022 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.022 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.022 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.040 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.041 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.041 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.054 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.055 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.055 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] < 34) | (dfin['foo'] > 70) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.073 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.073 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.086 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.086 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.099 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.099 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.099 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.113 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.113 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.126 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.126 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.126 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.139 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.139 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.152 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.153 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.153 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.166 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.166 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.166 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.179 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.179 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.179 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.193 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.193 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.193 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.207 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.207 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.207 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.220 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.221 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.221 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.234 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.234 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.247 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.247 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.248 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.261 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.261 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.261 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:22.274 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:12:22.274 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:12:22.288 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:23.632 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 8 of table dfin
2022-08-06 06:12:23.632 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:23.642 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:25.052 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.052 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8))]
2022-08-06 06:12:25.067 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.067 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.067 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:25.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.081 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.081 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-06 06:12:25.094 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.094 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.094 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8))]
2022-08-06 06:12:25.108 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.108 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.108 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8))]
2022-08-06 06:12:25.121 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.122 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.122 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:25.135 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.135 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.135 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:25.148 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.148 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.148 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:25.161 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.162 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.162 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:25.175 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.175 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.175 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:25.188 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.188 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.188 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:12:25.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.189 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.189 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:25.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.202 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.202 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:25.215 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.215 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.215 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:25.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.229 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.229 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:25.242 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.242 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.242 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8))]
2022-08-06 06:12:25.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.255 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.255 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:25.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.268 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.268 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:25.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.281 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.282 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:25.295 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:25.295 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:12:25.295 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:25.308 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.586 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.587 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8))]
2022-08-06 06:12:26.602 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.602 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.603 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:26.617 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.617 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.617 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-06 06:12:26.631 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.631 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.631 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8))]
2022-08-06 06:12:26.645 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.645 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.646 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8))]
2022-08-06 06:12:26.659 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.659 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.659 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:26.673 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.673 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.673 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:26.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.687 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.687 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:26.700 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.700 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.700 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:26.714 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.714 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.714 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:26.728 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.728 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.728 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:12:26.728 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.728 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.728 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:26.741 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.741 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.742 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:26.755 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.755 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.755 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:26.768 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.768 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.768 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:26.781 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.782 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.782 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:26.795 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.795 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.795 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:26.808 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.808 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.809 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:26.822 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.822 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.822 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:26.835 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:26.836 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:12:26.836 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:26.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.230 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.231 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.246 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.246 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.259 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.259 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.259 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.272 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.272 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.286 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.286 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.299 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.299 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.312 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.312 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.312 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.326 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.326 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.326 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.339 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.339 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.340 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.353 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.353 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.353 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.367 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.367 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.367 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.380 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.380 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:12:28.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.380 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.380 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.393 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.394 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.394 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.407 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.407 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.407 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.420 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.420 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.420 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.433 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.433 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.433 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.446 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.447 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.447 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.460 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.460 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.460 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.473 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:28.473 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:12:28.473 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:28.486 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.032 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.033 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:30.047 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.047 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.047 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:30.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.060 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.060 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-06 06:12:30.074 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.074 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.074 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:30.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.087 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.087 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['bar'] == 8))]
2022-08-06 06:12:30.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.102 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.102 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:30.116 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.116 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.116 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) & (dfin['bar'] > 8))]
2022-08-06 06:12:30.129 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.129 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.129 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:30.143 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.143 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.143 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['bar'] == 8))]
2022-08-06 06:12:30.158 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.158 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.159 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['bar'] == 8))]
2022-08-06 06:12:30.174 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.174 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.174 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['bar'] == 8))]
2022-08-06 06:12:30.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.189 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.189 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['bar'] == 8))]
2022-08-06 06:12:30.203 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.204 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.204 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['bar'] == 8))]
2022-08-06 06:12:30.218 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.218 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.219 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['bar'] == 8))]
2022-08-06 06:12:30.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.233 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.233 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:30.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.247 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.247 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['bar'] == 8))]
2022-08-06 06:12:30.262 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.262 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.262 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-06 06:12:30.275 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.275 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.275 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:30.288 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.289 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.289 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:30.302 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:30.302 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:12:30.302 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:30.315 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.269 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.270 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:32.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.285 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.285 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:32.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.298 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.298 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:32.311 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.312 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.312 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:32.325 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.325 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.326 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:32.339 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.339 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.339 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:32.353 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.353 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.354 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:32.367 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.367 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.368 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:32.381 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.381 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.381 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:32.394 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.394 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.394 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:32.407 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.407 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.408 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:32.421 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.421 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.421 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:32.434 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.434 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.434 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:32.447 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.447 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.448 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:32.461 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.461 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.461 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:32.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.474 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.474 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:32.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.487 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.487 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:32.500 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.500 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.500 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 06:12:32.513 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.514 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.514 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:32.527 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:32.527 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:32.527 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 06:12:32.540 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.240 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.240 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:34.254 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.255 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.255 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:34.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.268 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.268 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:34.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.282 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.282 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:34.295 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.295 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.295 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:34.308 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.308 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.308 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:34.322 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.322 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.322 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:34.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.336 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.336 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:34.349 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.349 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.349 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:34.363 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.363 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.363 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:34.377 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.377 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.377 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:34.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.390 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.391 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:34.404 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.404 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.404 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:34.417 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.417 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.417 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:34.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.431 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.431 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:34.444 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.444 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.444 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:34.457 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.458 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.458 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:34.471 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.471 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.471 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:12:34.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.484 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.484 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 06:12:34.497 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:34.497 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:12:34.498 | DEBUG    | __main__:run_benchmark:432 - dfin[np.logical_and(dfin['bar'] == 8, np.logical_and(dfin['foo'] > 70, dfin['foo'] < 34))]
2022-08-06 06:12:34.511 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:36.322 | DEBUG    | __main__:run_benchmark:431 - Query: Choose rows such that in column 'foo' it is less than 34 or greater than 70, in column 'bar' equals 8
2022-08-06 06:12:36.323 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:36.344 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:37.750 | DEBUG    | __main__:run_benchmark:431 - Query: Choose rows such that in column 'foo' it is less than 34 or greater than 70 and in column 'bar' equals 8
2022-08-06 06:12:37.750 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:37.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:39.243 | DEBUG    | __main__:run_benchmark:431 - Query: Get rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:12:39.244 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:12:39.254 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:41.286 | DEBUG    | __main__:run_benchmark:431 - Query: retain rows where 'foo' greater than 70 or 'foo' less than 34 and 'bar' is 8
2022-08-06 06:12:41.286 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 06:12:41.297 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:42.829 | DEBUG    | __main__:run_benchmark:431 - Query: retain rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 06:12:42.830 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 06:12:42.840 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:44.575 | DEBUG    | __main__:run_benchmark:431 - Query: select entries in column 'foo' which are greater than 70 or less than 34 and select entries in column 'bar' which are equal to 8
2022-08-06 06:12:44.576 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 06:12:44.586 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:46.100 | DEBUG    | __main__:run_benchmark:431 - Query: select entries where column 'foo' is greater than 70 or less than 34 and column 'bar' is equal to 8
2022-08-06 06:12:46.101 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 06:12:46.110 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:46.119 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:12:48.170 | DEBUG    | __main__:run_benchmark:431 - Query: get rows with beta greater than 53 or less than 40 and gamma equal to 9
2022-08-06 06:12:48.171 | DEBUG    | __main__:run_benchmark:432 - dfin[np.logical_or(dfin['beta'] > 53, dfin['beta'] < 40) | (dfin['gamma'] == 9)]
2022-08-06 06:12:48.190 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:48.190 | DEBUG    | __main__:run_benchmark:431 - Query: get rows with beta greater than 53 or less than 40 and gamma equal to 9
2022-08-06 06:12:48.190 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['beta'] > 53) | (dfin['beta'] < 40)) & (dfin['gamma'] == 9)]
2022-08-06 06:12:48.199 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:50.097 | DEBUG    | __main__:run_benchmark:431 - Query: get rows with beta greater than 53 or less than 40 AND gamma equal to 9
2022-08-06 06:12:50.097 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['beta'] > 53) | (dfin['beta'] < 40)) & (dfin['gamma'] == 9)]
2022-08-06 06:12:50.108 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:51.596 | DEBUG    | __main__:run_benchmark:431 - Query: get rows with beta greater than 53 or less than 40, filter rows with gamma equal to 9
2022-08-06 06:12:51.597 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['beta'] > 53) | (dfin['beta'] < 40)) & (dfin['gamma'] == 9)]
2022-08-06 06:12:51.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:51.616 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:12:53.071 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where 'alpha' is equal to 4 and 'gamma' is less than 40 or greater than 53
2022-08-06 06:12:53.072 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] == 4) & ((dfin['gamma'] < 40) | (dfin['gamma'] > 53)))]
2022-08-06 06:12:53.082 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:54.846 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where 'alpha' is equal to 4 and 'gamma' is not between 40 and 53
2022-08-06 06:12:54.847 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] == 4) & (dfin['gamma'] < 40) & (dfin['gamma'] > 53))]
2022-08-06 06:12:54.862 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:12:54.862 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where 'alpha' is equal to 4 and 'gamma' is not between 40 and 53
2022-08-06 06:12:54.862 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] == 4) & ~(dfin['gamma'].between(40, 53)))]
2022-08-06 06:12:54.871 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:56.531 | DEBUG    | __main__:run_benchmark:431 - Query: From dfin, filter rows with column gamma less than 40 or more than 53, and column alpha equal to 4
2022-08-06 06:12:56.532 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) | (dfin['gamma'] > 53)) & (dfin['alpha'] == 4)]
2022-08-06 06:12:56.574 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:56.589 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:12:58.434 | DEBUG    | __main__:run_benchmark:431 - Query: retain those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is equal to 11
2022-08-06 06:12:58.434 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 37) | (dfin['bar'] > 61)) & (dfin['foo'] == 11)]
2022-08-06 06:12:58.445 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:12:58.623 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "retain those rows where value in cell of column 'foo' is equal to 11 and value in column 'bar' is eit...
    │               └ {'queries': [{'query': "retain those rows where value in cell of column 'foo' is equal to 11 and value in column 'bar' is eit...
    └ {'query': "drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11", 'us...

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Drop rows in "df" where "GrLivArea" ...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2ae9490>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:12:58 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:12:58 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e2a8da90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:12:58.649 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:13:28.813 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "retain those rows where value in cell of column 'foo' is equal to 11 and value in column 'bar' is eit...
    │               └ {'queries': [{'query': "retain those rows where value in cell of column 'foo' is equal to 11 and value in column 'bar' is eit...
    └ {'query': "drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11", 'us...

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Drop rows in "df" where "GrLivArea" ...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2ae9250>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:13:28 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:13:28 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e2a8d150>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:13:28.822 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:14:00.842 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:00.843 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] > 37) & (dfin['bar'] < 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:00.862 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:00.862 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:00.862 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:00.880 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:00.880 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:00.881 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] >= 37) & (dfin['bar'] <= 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:00.899 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:00.899 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:00.899 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] > 37) & (dfin['bar'] < 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:00.917 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:00.918 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:00.918 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:00.936 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:00.936 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:00.936 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:00.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:00.955 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:00.955 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] >= 37) & (dfin['bar'] <= 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:00.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:00.973 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:00.974 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:00.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:00.991 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:00.991 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37,61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:01.009 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:01.009 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:01.009 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:01.027 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:01.027 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:01.027 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:01.045 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:01.045 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:01.045 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:01.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:01.063 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:01.063 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:01.081 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:01.081 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:01.081 | DEBUG    | __main__:run_benchmark:432 - dfin[(~ dfin['bar'].between(left=37, right=61)) & (dfin['foo'] != 11)]
2022-08-06 06:14:01.098 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:01.098 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:01.099 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:01.116 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:01.117 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:01.117 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:01.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:01.134 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:01.135 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:01.153 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:01.153 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:01.153 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:01.171 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:01.171 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:01.171 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:01.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:01.189 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:14:01.189 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:14:01.207 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:02.923 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where (bar < 38 or bar > 60) and foo = 11
2022-08-06 06:14:02.924 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:14:02.935 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:14:04.451 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where bar < 38 or bar > 60 and foo = 11
2022-08-06 06:14:04.452 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:14:04.463 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:14:06.184 | DEBUG    | __main__:run_benchmark:431 - Query: get all rows with column 'foo' having value 11 and column 'bar' value greater than 60 or less than 38
2022-08-06 06:14:06.184 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] == 11) & ((dfin['bar'] > 60) | (dfin['bar'] < 38)))]
2022-08-06 06:14:06.195 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:14:07.744 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where (bar<38 || bar>60) && foo==11
2022-08-06 06:14:07.745 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:14:07.756 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:14:09.293 | DEBUG    | __main__:run_benchmark:431 - Query: select rows from dfin such that column 'bar' is less than 38 or greater than 60 and column 'foo' equals 11
2022-08-06 06:14:09.294 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:14:09.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:14:09.314 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 06:14:09.314 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 06:14:09.314 | DEBUG    | __main__:run:515 - Number of queries: 27
2022-08-06 06:14:11.402 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'
2022-08-06 06:14:11.403 | DEBUG    | __main__:run_benchmark:432 - dfin1[~ dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:11.416 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:14:12.732 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows in input 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'
2022-08-06 06:14:12.732 | DEBUG    | __main__:run_benchmark:432 - dfin1[(~ dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 06:14:12.745 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:14:15.172 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin1' where value in column 'alpha' equals to that in column 'alpha' in 'dfin2'
2022-08-06 06:14:15.173 | DEBUG    | __main__:run_benchmark:432 - dfin1[~ dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:15.186 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:14:17.323 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.324 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] == dfin2['alpha'])]
2022-08-06 06:14:17.328 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.328 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.328 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:17.349 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.349 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.350 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] == dfin2.iloc[i]['alpha'])]
2022-08-06 06:14:17.352 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.352 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.353 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'].unique())]
2022-08-06 06:14:17.374 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.374 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.374 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:17.395 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.395 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.395 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:17.416 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.416 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.416 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] == dfin2.iloc[0]['alpha'])]
2022-08-06 06:14:17.437 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.437 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.437 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin2['alpha'] == dfin1['alpha'])]
2022-08-06 06:14:17.440 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.440 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.440 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:17.461 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.461 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.461 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:17.482 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.482 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.483 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:17.503 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.503 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.504 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:17.524 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.524 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.524 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:17.545 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.546 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.546 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:17.567 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.567 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.567 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin2['alpha'] == dfin1['alpha'])]
2022-08-06 06:14:17.570 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.570 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.571 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'] == dfin2['alpha'])]
2022-08-06 06:14:17.574 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.574 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.574 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:17.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.596 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.596 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin2['alpha'] == dfin1['alpha'])]
2022-08-06 06:14:17.599 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.599 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.599 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:17.621 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:17.621 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 06:14:17.621 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'].to_list())]
2022-08-06 06:14:17.642 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:19.707 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2 and remove them from dfin1
2022-08-06 06:14:19.708 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:19.720 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:14:21.646 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows of dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:21.647 | DEBUG    | __main__:run_benchmark:432 - dfin1[~ dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:21.660 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:14:23.527 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.528 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] == dfin2.iloc[i]['alpha'])]
2022-08-06 06:14:23.532 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.532 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.533 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:23.554 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.554 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.554 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] == dfin2['alpha'])]
2022-08-06 06:14:23.557 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.557 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.557 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:23.578 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.578 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.578 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] == dfin2.iloc[0]['alpha'])]
2022-08-06 06:14:23.599 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.599 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.599 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin2['alpha'] == dfin1['alpha'])]
2022-08-06 06:14:23.602 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.602 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.602 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:23.623 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.623 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.623 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:23.644 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.644 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.645 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:23.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.665 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.666 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:23.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.686 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.687 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:23.707 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.708 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.708 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:23.728 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.729 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.729 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 06:14:23.750 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.750 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.750 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:23.771 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.771 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.771 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:23.792 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.792 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.792 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:23.813 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.813 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.813 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] == dfin2['alpha'])]
2022-08-06 06:14:23.816 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.816 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.816 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:23.837 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.837 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.837 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:23.858 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:23.858 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:14:23.858 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 06:14:23.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:26.149 | DEBUG    | __main__:run_benchmark:431 - Query: Remove all rows from dfin1 which has same column 'alpha' as dfin2
2022-08-06 06:14:26.150 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2['alpha'].index)
2022-08-06 06:14:26.173 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:26.174 | DEBUG    | __main__:run_benchmark:431 - Query: Remove all rows from dfin1 which has same column 'alpha' as dfin2
2022-08-06 06:14:26.174 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2, inplace=True)
2022-08-06 06:14:26.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:26.177 | DEBUG    | __main__:run_benchmark:431 - Query: Remove all rows from dfin1 which has same column 'alpha' as dfin2
2022-08-06 06:14:26.177 | DEBUG    | __main__:run_benchmark:432 - dfin1[~ dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:26.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:14:27.980 | DEBUG    | __main__:run_benchmark:431 - Query: Remove all matched rows of dfin1 and difn2 on column 'alpha' from dfin1
2022-08-06 06:14:27.980 | DEBUG    | __main__:run_benchmark:432 - dfin1[~ dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:27.994 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:14:29.801 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:29.801 | DEBUG    | __main__:run_benchmark:432 - (dfin1 - dfin2['alpha'])
2022-08-06 06:14:29.831 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:29.831 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:29.832 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:29.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:29.850 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:29.850 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:29.868 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:29.868 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:29.868 | DEBUG    | __main__:run_benchmark:432 - dfin1.alpha - dfin2.alpha
2022-08-06 06:14:29.886 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:29.886 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:29.886 | DEBUG    | __main__:run_benchmark:432 - dfin1.alpha - dfin2.alpha
2022-08-06 06:14:29.904 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:29.904 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:29.904 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:29.922 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:29.923 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:29.923 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'].sub(dfin2['alpha'], axis=0)
2022-08-06 06:14:29.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:29.941 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:29.941 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:29.959 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:29.959 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:29.959 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:29.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:29.977 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:29.977 | DEBUG    | __main__:run_benchmark:432 - dfin1.alpha - dfin2.alpha
2022-08-06 06:14:29.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:29.995 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:29.995 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:30.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:30.013 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:30.013 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:30.031 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:30.031 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:30.031 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:30.049 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:30.049 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:30.049 | DEBUG    | __main__:run_benchmark:432 - dfin1.alpha - dfin2.alpha
2022-08-06 06:14:30.067 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:30.067 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:30.067 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:30.085 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:30.085 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:30.085 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:30.103 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:30.103 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:30.103 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:30.121 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:30.121 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:30.122 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:30.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:30.139 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:30.140 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[:, 'alpha'] - dfin2.loc[:, 'alpha']
2022-08-06 06:14:30.158 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:30.158 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:30.158 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:30.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.471 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.471 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2.alpha)
2022-08-06 06:14:32.476 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.476 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.476 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2['alpha'], axis=1)
2022-08-06 06:14:32.479 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.479 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.480 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2.alpha.values, axis=1)
2022-08-06 06:14:32.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.483 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.483 | DEBUG    | __main__:run_benchmark:432 - dfin1.pop('alpha')
2022-08-06 06:14:32.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.499 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.500 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2, inplace=True)
2022-08-06 06:14:32.503 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.503 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.503 | DEBUG    | __main__:run_benchmark:432 - dfin1.pop('alpha')
2022-08-06 06:14:32.519 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.519 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.519 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2['alpha'], axis=1, inplace=True)
2022-08-06 06:14:32.523 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.523 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.523 | DEBUG    | __main__:run_benchmark:432 - (dfin1 - dfin2)['alpha']
2022-08-06 06:14:32.541 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.541 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.542 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2.index, inplace=True)
2022-08-06 06:14:32.559 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.559 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.559 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin1.index[dfin1['alpha'] == dfin2['alpha']])
2022-08-06 06:14:32.562 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.562 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.562 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2['alpha'])
2022-08-06 06:14:32.565 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.566 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.566 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin1[dfin1['alpha'] == dfin2['alpha']].index, inplace=True)
2022-08-06 06:14:32.569 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.569 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.569 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2['alpha'], axis=1)
2022-08-06 06:14:32.572 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.572 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.572 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin1.index[dfin2['alpha']], inplace=True)
2022-08-06 06:14:32.575 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.575 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.575 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2['alpha'], axis=1)
2022-08-06 06:14:32.578 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.578 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.579 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2['alpha'], axis=1)
2022-08-06 06:14:32.582 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.582 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.582 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2.index, axis=0)
2022-08-06 06:14:32.603 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.604 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.604 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2.index, inplace=True)
2022-08-06 06:14:32.621 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.621 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.621 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(axis=1, columns='alpha', inplace=True)
2022-08-06 06:14:32.637 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:32.637 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:32.637 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2['alpha'], axis=1, inplace=False)
2022-08-06 06:14:32.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:34.669 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:34.670 | DEBUG    | __main__:run_benchmark:432 - (dfin2['alpha'] - dfin1['alpha'])
2022-08-06 06:14:34.689 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:34.690 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:34.690 | DEBUG    | __main__:run_benchmark:432 - print(dfin1.alpha.difference(dfin2.alpha))
2022-08-06 06:14:34.690 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin1.alpha.difference(dfin2.alpha)

2022-08-06 06:14:34.691 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin1.alpha.difference(dfin2.alpha)

2022-08-06 06:14:34.693 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:34.693 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:34.693 | DEBUG    | __main__:run_benchmark:432 - (dfin2['alpha'] - dfin1['alpha'])
2022-08-06 06:14:34.711 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:34.711 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:34.711 | DEBUG    | __main__:run_benchmark:432 - dfin2['alpha'] - dfin1['alpha']
2022-08-06 06:14:34.729 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:34.729 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:34.730 | DEBUG    | __main__:run_benchmark:432 - (dfin2['alpha'] - dfin1['alpha'])
2022-08-06 06:14:34.747 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:34.748 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:34.748 | DEBUG    | __main__:run_benchmark:432 - pd.Series(dfin2['alpha'] - dfin1['alpha'])
2022-08-06 06:14:34.765 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:34.766 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:34.766 | DEBUG    | __main__:run_benchmark:432 - (dfin2['alpha'] - dfin1['alpha'])
2022-08-06 06:14:34.783 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:34.783 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:34.783 | DEBUG    | __main__:run_benchmark:432 - dfin2['alpha'].difference(dfin1['alpha'])
2022-08-06 06:14:34.786 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:34.786 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:34.786 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[:, 'alpha'] - dfin2['alpha']
2022-08-06 06:14:34.803 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:34.803 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:34.804 | DEBUG    | __main__:run_benchmark:432 - dfin2['alpha'] - dfin1['alpha']
2022-08-06 06:14:34.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:34.821 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:34.821 | DEBUG    | __main__:run_benchmark:432 - setdiff_df2_df1 = dfin2['alpha'].isin(dfin1['alpha'])
2022-08-06 06:14:34.837 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:34.837 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 06:14:34.837 | DEBUG    | __main__:run_benchmark:432 - dfin1[(~ dfin1['alpha'].isin(dfin2['alpha'].unique()))]
2022-08-06 06:14:34.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:14:36.482 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.483 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:36.501 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.502 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.502 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:36.519 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.519 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.520 | DEBUG    | __main__:run_benchmark:432 - np.setdiff1d(dfin1['alpha'], dfin2['alpha'])
2022-08-06 06:14:36.536 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.537 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.537 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:36.555 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.555 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.555 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:36.573 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.573 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.573 | DEBUG    | __main__:run_benchmark:432 - (dfin1['alpha'] - dfin2['alpha'])
2022-08-06 06:14:36.590 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.591 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.591 | DEBUG    | __main__:run_benchmark:432 - (dfin1['alpha'] - dfin2['alpha'])
2022-08-06 06:14:36.608 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.608 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.608 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'].diff()
2022-08-06 06:14:36.625 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.625 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.625 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:36.643 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.643 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.643 | DEBUG    | __main__:run_benchmark:432 - (dfin1['alpha'] - dfin2['alpha'])
2022-08-06 06:14:36.660 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.660 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.661 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:36.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.678 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.678 | DEBUG    | __main__:run_benchmark:432 - (dfin1['alpha'] - dfin2['alpha'])
2022-08-06 06:14:36.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.696 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.696 | DEBUG    | __main__:run_benchmark:432 - pd.Series((dfin1['alpha'] - dfin2['alpha']))
2022-08-06 06:14:36.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.713 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.713 | DEBUG    | __main__:run_benchmark:432 - (dfin1['alpha'] - dfin2['alpha'])
2022-08-06 06:14:36.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.731 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.731 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:36.748 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.748 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.748 | DEBUG    | __main__:run_benchmark:432 - (dfin1['alpha'] - dfin2['alpha'])
2022-08-06 06:14:36.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.766 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.766 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:36.783 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.783 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.783 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:36.801 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.801 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.801 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:14:36.818 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:36.819 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:14:36.819 | DEBUG    | __main__:run_benchmark:432 - (dfin1['alpha'] - dfin2['alpha'])
2022-08-06 06:14:36.836 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.157 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.158 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 06:14:39.162 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.162 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.162 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 06:14:39.165 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.165 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.165 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 06:14:39.167 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.168 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.168 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 06:14:39.170 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.170 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.170 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 06:14:39.192 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.192 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.192 | DEBUG    | __main__:run_benchmark:432 - df1[(df1['alpha'].isin(dfin2['alpha'])) & (df1['alpha'].isin(dfin1['alpha']))]
2022-08-06 06:14:39.195 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.195 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.195 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 06:14:39.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.198 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.198 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:39.219 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.219 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.219 | DEBUG    | __main__:run_benchmark:432 - df1[(df1['alpha'].isin(dfin2['alpha'])) & (df1['alpha'].isin(dfin1['alpha']))]
2022-08-06 06:14:39.222 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.222 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.223 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 06:14:39.225 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.225 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.225 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 06:14:39.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.228 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.228 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 06:14:39.250 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.250 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.250 | DEBUG    | __main__:run_benchmark:432 - df1.loc[(df1['alpha'].isin(dfin2['alpha'])) & (df1['alpha'].isin(dfin1['alpha']))]
2022-08-06 06:14:39.253 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.253 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.253 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 06:14:39.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.274 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.275 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 06:14:39.277 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.277 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.277 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:39.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.298 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.298 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 06:14:39.319 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.319 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.319 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 06:14:39.322 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.322 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.322 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 06:14:39.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:39.324 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:39.325 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:39.345 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:40.809 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:40.809 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 06:14:40.832 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:40.832 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:40.832 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:40.854 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:40.854 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:40.855 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:40.877 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:40.877 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:40.877 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:40.898 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:40.898 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:40.898 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:14:40.901 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:40.901 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:40.901 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:14:40.904 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:40.904 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:40.904 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'].isin(dfin2['alpha'])), :]
2022-08-06 06:14:40.925 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:40.925 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:40.925 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:40.946 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:40.946 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:40.947 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha'])) & (dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:14:40.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:40.950 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:40.950 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:40.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:40.971 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:40.971 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:40.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:40.992 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:40.992 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:14:40.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:40.995 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:40.995 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:41.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:41.016 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:41.016 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 06:14:41.037 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:41.038 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:41.038 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:41.059 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:41.059 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:41.059 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:41.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:41.080 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:41.080 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:41.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:41.101 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:41.101 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 06:14:41.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:41.123 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:41.123 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:41.144 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:41.145 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:14:41.145 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:41.156 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:14:42.929 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:42.930 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha'])) & (dfin1['beta'].isin(dfin2['beta'])) & (dfin1['gamma'].isin(dfin2['gamma']))]
2022-08-06 06:14:42.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:42.956 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:42.956 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'].isin(dfin2['alpha'])), :]
2022-08-06 06:14:42.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:42.977 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:42.978 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 06:14:42.999 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:42.999 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:42.999 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:43.020 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:43.020 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:43.020 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha'].unique()))]
2022-08-06 06:14:43.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:43.042 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:43.042 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:43.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:43.064 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:43.064 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:14:43.067 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:43.067 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:43.067 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:43.088 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:43.089 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:43.089 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha'])) & (dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:14:43.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:43.092 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:43.092 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:43.113 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:43.113 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:43.113 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:43.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:43.134 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:43.134 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:43.155 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:43.155 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:43.155 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:43.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:43.176 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:43.177 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:43.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:43.198 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:43.198 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:14:43.201 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:43.201 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:43.201 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha'])) & (~ dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 06:14:43.219 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:43.219 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:43.219 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:14:43.222 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:43.222 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:43.222 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:43.243 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:43.243 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:43.243 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:43.264 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:43.264 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:14:43.264 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:14:43.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:14:43.295 | DEBUG    | __main__:run:515 - Number of queries: 26
2022-08-06 06:14:45.309 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' of dataframe dfin1 are not part of values in column 'bar' of dataframe dfin2
2022-08-06 06:14:45.310 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:14:45.323 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:14:45.752 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Get rows in dataframe dfin1 which don't have matching rows in dataframe dfin2 along column 'bar'", 'u...
    │               └ {'queries': [{'query': "Get rows in dataframe dfin1 which don't have matching rows in dataframe dfin2 along column 'bar'", 'u...
    └ {'query': "Select rows from dataframe dfin1 where values in column 'bar' of dataframe dfin1 do not exist in values in column ...

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a DataFrame containing all ro...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2b46c50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:14:45 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:14:45 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e2b463d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:14:45.759 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:15:17.185 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' of dataframe dfin1 do not exist in values in column 'bar' of dataframe dfin2
2022-08-06 06:15:17.186 | DEBUG    | __main__:run_benchmark:432 - dfin1[(~ dfin1['bar'].isin(dfin2['bar']))]
2022-08-06 06:15:17.199 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:15:19.306 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.307 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:15:19.330 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.330 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.330 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:15:19.351 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.351 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.352 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:15:19.373 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.373 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.373 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'].to_list())]
2022-08-06 06:15:19.395 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.395 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.395 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['bar'].isin(dfin2['bar']))]
2022-08-06 06:15:19.416 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.417 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.417 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:15:19.438 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.438 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.438 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:15:19.459 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.459 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.459 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:15:19.480 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.480 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.480 | DEBUG    | __main__:run_benchmark:432 - dfin1.set_index('bar').loc[dfin2['bar']]
2022-08-06 06:15:19.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.484 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.484 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:15:19.505 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.505 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.505 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:15:19.526 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.526 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.526 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:15:19.547 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.547 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.547 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:15:19.568 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.568 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.568 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:15:19.589 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.589 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.589 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:15:19.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.610 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.611 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:15:19.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.632 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.632 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['bar'].isin(dfin2['bar']))]
2022-08-06 06:15:19.654 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.654 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.654 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:15:19.675 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.676 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.676 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:15:19.697 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:19.697 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:19.697 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:15:19.718 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:21.936 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' don't exist in column 'bar' of dataframe dfin2
2022-08-06 06:15:21.937 | DEBUG    | __main__:run_benchmark:432 - dfin1[~ dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:15:21.950 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:15:21.960 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:15:23.465 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows in dfin1 where column 'beta' in dfin1 is not equal to column 'beta' in dfin2
2022-08-06 06:15:23.466 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(~ dfin1['beta'].isin(dfin2['beta'])), :]
2022-08-06 06:15:23.478 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:15:25.005 | DEBUG    | __main__:run_benchmark:431 - Query: select rows in dfin1 where column 'beta' in dfin1 is not equal to column 'beta' in dfin2
2022-08-06 06:15:25.006 | DEBUG    | __main__:run_benchmark:432 - dfin1[(~ dfin1['beta'].isin(dfin2['beta']))]
2022-08-06 06:15:25.019 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:15:25.029 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:15:26.935 | DEBUG    | __main__:run_benchmark:431 - Query: From dfin, filter rows with dfin1.yah values not in column dfin2.yah
2022-08-06 06:15:26.936 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['yah'].isin(dfin2['yah'])]
2022-08-06 06:15:26.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:15:26.960 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 06:15:26.960 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 06:15:26.960 | DEBUG    | __main__:run:515 - Number of queries: 21
2022-08-06 06:15:28.617 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.618 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:28.649 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.650 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.650 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:28.668 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.668 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.668 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)].index)
2022-08-06 06:15:28.687 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.687 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.687 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:28.705 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.705 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.705 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:28.724 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.724 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.724 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:28.742 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.742 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.742 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:28.759 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.760 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.760 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:28.777 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.777 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.778 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:28.795 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.795 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.796 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:28.813 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.813 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.813 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:15:28.814 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.814 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.814 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:28.831 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.832 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.832 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:28.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.849 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.850 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:28.867 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.867 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.867 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:28.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.885 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.885 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:28.903 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.903 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.903 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:28.921 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.921 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.921 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:28.939 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.939 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.939 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:28.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:28.956 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:15:28.957 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:28.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.263 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.264 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))
2022-08-06 06:15:31.265 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.265 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.265 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))
2022-08-06 06:15:31.266 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.266 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.266 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 06:15:31.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.285 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.285 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 06:15:31.304 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.304 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.304 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 06:15:31.323 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.323 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.323 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:15:31.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.324 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.324 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 06:15:31.343 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.343 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.343 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 06:15:31.362 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.362 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.362 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 06:15:31.381 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.381 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.381 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar
2022-08-06 06:15:31.381 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.381 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.381 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))
2022-08-06 06:15:31.381 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.382 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.382 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 06:15:31.400 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.400 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.400 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 06:15:31.419 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.419 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.419 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 06:15:31.437 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.437 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.437 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 06:15:31.456 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.456 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.456 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] ==
2022-08-06 06:15:31.456 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.456 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.456 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 06:15:31.475 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.475 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.475 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 06:15:31.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.493 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.494 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 06:15:31.512 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:31.512 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:15:31.512 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 06:15:31.530 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.853 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.854 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:15:32.855 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.855 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.855 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:15:32.855 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.856 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.856 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:15:32.856 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.856 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.856 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:15:32.856 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.856 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.857 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:15:32.857 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.857 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.857 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8 and value in column 'yah' is greater than 10)
2022-08-06 06:15:32.857 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.857 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.857 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8 and value in column 'yah' is greater than 10)
2022-08-06 06:15:32.857 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.858 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.858 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:15:32.858 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.858 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.858 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8 and value in column 'yah' is greater than 10)
2022-08-06 06:15:32.858 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.858 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.858 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:15:32.858 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.859 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.859 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:15:32.859 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.859 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.859 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:15:32.859 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.859 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.859 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:15:32.859 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.859 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.860 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:15:32.860 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.860 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.860 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8 and value in column 'yah' is greater than 10)
2022-08-06 06:15:32.860 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.860 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.860 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:15:32.860 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.860 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.861 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:15:32.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.861 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.861 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:15:32.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.861 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.861 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:15:32.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:32.861 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:15:32.861 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:15:32.862 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.218 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.219 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:34.239 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.239 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.239 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:34.257 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.257 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.257 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:34.275 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.275 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.275 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:34.293 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.293 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.293 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:34.311 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.311 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.311 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:34.329 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.329 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.329 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8))]
2022-08-06 06:15:34.347 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.347 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.347 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:34.365 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.365 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.365 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:15:34.366 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.366 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.366 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:34.384 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.384 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.384 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:34.401 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.402 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.402 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:34.420 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.420 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.420 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:34.438 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.438 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.438 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:34.456 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.456 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.456 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:34.473 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.474 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.474 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:34.491 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.491 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.492 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:34.509 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.510 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.510 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:34.527 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.527 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.527 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:34.545 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:34.545 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:15:34.545 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:15:34.563 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.239 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.240 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:15:36.259 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.259 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.259 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:15:36.277 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.277 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.277 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:15:36.295 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.295 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.295 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:15:36.313 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.313 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.313 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:15:36.331 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.332 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.332 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:15:36.350 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.351 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.351 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:15:36.369 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.369 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.369 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:15:36.387 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.387 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.388 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:15:36.406 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.406 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.406 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:15:36.424 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.424 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.424 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:15:36.443 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.443 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.443 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:15:36.443 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.443 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.443 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))].index)
2022-08-06 06:15:36.463 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.463 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.463 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:15:36.481 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.481 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.481 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:15:36.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.499 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.499 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:15:36.517 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.518 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.518 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:15:36.536 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.536 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.536 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:15:36.554 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.554 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.554 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:15:36.573 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.573 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:15:36.573 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:15:36.591 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:15:36.767 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'b...
    │               └ {'queries': [{'query': "filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'b...
    └ {'query': "filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or gr...

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a subset of "df" where site_i...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2a88190>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:15:36 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:15:36 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e2a8d7d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:15:36.773 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:16:08.346 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.347 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:08.366 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.366 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.366 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:16:08.384 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.385 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.385 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40 | dfin['foo'] > 50))]
2022-08-06 06:16:08.388 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.388 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.388 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:16:08.406 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.406 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.406 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:08.424 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.424 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.425 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:08.443 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.443 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.443 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:16:08.461 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.462 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.462 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:08.480 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.480 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.480 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:08.498 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.498 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.499 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & (dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:16:08.516 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.516 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.516 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40) | (dfin['foo'] > 50))].index)
2022-08-06 06:16:08.534 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.535 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.535 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:08.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.553 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.553 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:08.570 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.571 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.571 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:16:08.571 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.571 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.571 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & (dfin['foo'] < 40 | dfin['foo'] > 50))]
2022-08-06 06:16:08.574 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.574 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.574 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:08.592 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.592 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.592 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:08.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.610 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.610 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40 | dfin['foo'] > 50))]
2022-08-06 06:16:08.612 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.613 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.613 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:08.630 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:08.630 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:16:08.630 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:08.648 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.064 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.064 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:10.084 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.084 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.084 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:10.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.102 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.102 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40 | dfin['foo'] > 50))]
2022-08-06 06:16:10.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.105 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.105 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:10.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.124 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.124 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:10.142 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.142 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.142 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:10.161 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.161 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.161 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:10.184 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.185 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.185 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & (dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:16:10.207 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.207 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.207 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40) | (dfin['foo'] > 50))].index)
2022-08-06 06:16:10.230 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.231 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.231 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:10.250 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.250 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.250 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:10.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.268 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.269 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:10.286 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.287 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.287 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:16:10.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.287 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.287 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:10.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.305 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.305 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:10.323 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.323 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.323 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & (dfin['foo'] < 40 | dfin['foo'] > 50))]
2022-08-06 06:16:10.326 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.326 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.326 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:10.344 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.344 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.344 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40 | dfin['foo'] > 50))]
2022-08-06 06:16:10.347 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.347 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.347 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:10.365 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.365 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:16:10.366 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:16:10.384 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:10.597 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'b...
    │               └ {'queries': [{'query': "filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'b...
    └ {'query': "filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and le...

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a DataFrame containing rows w...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2b1d0d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:16:10 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:16:10 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e2a8d150>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:16:10.603 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:16:42.265 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.267 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:16:42.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.299 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.300 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:16:42.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.318 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.318 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:16:42.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.336 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.336 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:16:42.355 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.355 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.356 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:16:42.373 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.374 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.374 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:16:42.391 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.392 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.392 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:16:42.410 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.410 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.410 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:16:42.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.429 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.429 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 06:16:42.447 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.447 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.447 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:16:42.465 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.465 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.465 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:16:42.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.483 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.483 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:16:42.501 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.501 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.501 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:16:42.523 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.523 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.523 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:16:42.548 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.549 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.549 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:16:42.568 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.568 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.568 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:16:42.586 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.586 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.586 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 06:16:42.604 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.604 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.604 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:16:42.622 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.622 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.622 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:16:42.645 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:42.645 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:16:42.645 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:16:42.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:44.348 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:44.349 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:44.368 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:44.368 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:44.368 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:44.386 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:44.386 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:44.386 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:44.404 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:44.404 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:44.404 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:44.422 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:44.422 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:44.422 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:44.440 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:44.440 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:44.440 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:44.458 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:44.458 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:44.458 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:44.476 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:44.476 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:44.476 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:44.494 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:44.494 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:44.494 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:44.512 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:44.512 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:44.512 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:44.530 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:44.530 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:44.530 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)].index)
2022-08-06 06:16:44.540 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:16:46.121 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:46.121 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:46.141 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:46.141 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:46.141 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:46.159 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:46.159 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:46.159 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] != 8)]
2022-08-06 06:16:46.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:46.177 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:46.178 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:46.195 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:46.195 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:46.195 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:46.213 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:46.213 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:46.213 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:46.231 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:46.231 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:46.231 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)].index)
2022-08-06 06:16:46.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:16:47.733 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:47.734 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:47.753 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:47.754 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:47.754 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:47.771 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:47.771 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:47.772 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:47.789 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:47.790 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:47.790 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:47.807 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:47.807 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:47.808 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:47.825 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:47.825 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:47.825 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:47.843 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:47.843 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:47.843 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:47.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:47.861 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:47.861 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:47.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:47.879 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:47.879 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:47.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:47.897 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:47.897 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:47.914 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:47.914 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:47.915 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:47.932 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:47.932 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:47.932 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:47.950 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:47.950 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:47.950 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:47.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:47.968 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:47.968 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:47.986 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:47.986 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:47.986 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:48.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:48.003 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:48.004 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:48.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:48.021 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:48.021 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:48.039 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:48.039 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:48.039 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:48.057 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:48.057 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:48.057 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:48.074 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:48.075 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:16:48.075 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:16:48.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:49.936 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 06:16:49.937 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)].index)
2022-08-06 06:16:49.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:16:51.662 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 06:16:51.663 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)].index)
2022-08-06 06:16:51.673 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:16:53.252 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.252 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.272 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.272 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)].index)
2022-08-06 06:16:53.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.291 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.291 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.309 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.310 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.310 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.328 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.328 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.328 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.346 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.347 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.347 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.365 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.365 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.365 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.383 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.383 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.383 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.401 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.401 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.401 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.419 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.419 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.419 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.436 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.437 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.437 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.454 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.455 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.455 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.472 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.472 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.472 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.490 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.490 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.490 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.508 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.508 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.526 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.526 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.526 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.543 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.544 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.544 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.561 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.561 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.561 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.579 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.579 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.579 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.597 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:53.597 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:16:53.597 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:16:53.615 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:16:55.301 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 06:16:55.302 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)].index)
2022-08-06 06:16:55.312 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:16:57.171 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 06:16:57.172 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)].index)
2022-08-06 06:16:57.183 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:16:58.776 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 06:16:58.776 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)].index)
2022-08-06 06:16:58.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:17:00.920 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:00.921 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) | (dfin['foo'] < 34))].index)
2022-08-06 06:17:00.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:00.942 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:00.942 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) | (dfin['foo'] < 34)].index)
2022-08-06 06:17:00.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:00.960 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:00.960 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:00.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:00.978 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:00.978 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:00.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:00.996 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:00.996 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:01.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:01.014 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:01.014 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & (dfin['foo'] > 70) | (dfin['foo'] < 34))]
2022-08-06 06:17:01.032 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:01.032 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:01.032 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:01.050 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:01.050 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:01.050 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] == 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34))].index)
2022-08-06 06:17:01.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:17:02.805 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:02.805 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) | (dfin['foo'] < 34))].index)
2022-08-06 06:17:02.827 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:02.827 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:02.827 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) | (dfin['foo'] < 34)].index)
2022-08-06 06:17:02.845 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:02.846 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:02.846 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:02.864 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:02.864 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:02.864 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:02.882 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:02.882 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:02.882 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:02.900 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:02.900 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:02.900 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:02.918 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:02.918 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:02.918 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:02.936 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:02.936 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:02.936 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] == 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))].index)
2022-08-06 06:17:02.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:17:04.733 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:04.733 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:04.751 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:04.751 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:04.752 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:04.769 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:04.769 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:04.770 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & (dfin['foo'] > 70) | (dfin['foo'] < 34))]
2022-08-06 06:17:04.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:04.787 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:04.787 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:04.805 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:04.805 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:04.805 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:04.824 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:04.824 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:04.824 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:04.842 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:04.842 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:04.842 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:04.860 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:04.861 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:04.861 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) | (dfin['foo'] > 70) | (dfin['foo'] < 34))]
2022-08-06 06:17:04.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:04.880 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:04.880 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) | (dfin['foo'] < 34))].index)
2022-08-06 06:17:04.898 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:04.898 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:04.898 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34))]
2022-08-06 06:17:04.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:04.916 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:04.916 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:04.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:04.934 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:04.934 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:04.952 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:04.952 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:04.952 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34))]
2022-08-06 06:17:04.970 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:04.970 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:04.970 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:04.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:04.988 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:04.988 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34))]
2022-08-06 06:17:05.006 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:05.006 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:05.006 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:05.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:05.024 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:05.024 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:05.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:05.042 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:05.042 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:05.059 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:05.060 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:05.060 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:05.077 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:05.078 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:17:05.078 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 06:17:05.095 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:05.107 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:17:06.924 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:06.925 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3))]
2022-08-06 06:17:06.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:06.945 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:06.946 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:06.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:06.964 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:06.964 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:06.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:06.982 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:06.982 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:07.000 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:07.000 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:07.000 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:07.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:07.018 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:07.018 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:07.036 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:07.036 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:07.036 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:07.054 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:07.054 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:07.054 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:07.072 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:07.072 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:07.072 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:17:07.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:07.073 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:07.073 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:07.091 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:07.091 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:07.091 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:07.109 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:07.109 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:07.109 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:07.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:07.127 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:07.127 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:07.145 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:07.145 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:07.145 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:07.163 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:07.163 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:07.163 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:07.181 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:07.181 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:07.181 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:07.199 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:07.199 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:07.199 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:07.217 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:07.217 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:07.217 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:07.235 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:07.235 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:07.235 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:07.253 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:07.253 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:07.253 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:07.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.026 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.026 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3))]
2022-08-06 06:17:09.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.046 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.046 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:09.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.064 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.064 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:09.082 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.082 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.082 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:09.100 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.100 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.100 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:09.118 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.118 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.119 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:09.136 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.137 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.137 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:09.155 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.155 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.155 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:09.173 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.173 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.173 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:09.191 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.191 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.191 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:09.209 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.209 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.209 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:09.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.227 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.227 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:09.245 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.245 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.245 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:09.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.263 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.263 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:09.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.281 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.281 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:09.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.300 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.300 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:17:09.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.300 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.300 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:09.318 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.318 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.318 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:09.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.337 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.337 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:09.355 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:09.355 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:09.355 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:09.373 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:10.933 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:10.933 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3))]
2022-08-06 06:17:10.954 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:10.955 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:10.955 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:10.976 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:10.976 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:10.976 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:10.994 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:10.994 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:10.994 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:11.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:11.012 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:11.013 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:11.030 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:11.030 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:11.031 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:11.050 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:11.050 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:11.050 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:11.069 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:11.069 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:11.069 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:11.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:11.087 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:11.087 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:17:11.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:11.087 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:11.087 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:11.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:11.105 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:11.106 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:11.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:11.124 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:11.124 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:11.142 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:11.142 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:11.142 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:11.160 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:11.160 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:11.160 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:11.178 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:11.178 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:11.178 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:11.196 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:11.197 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:11.197 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:11.214 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:11.215 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:11.215 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:11.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:11.233 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:11.233 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:11.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:11.251 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:11.251 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:11.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:11.269 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:17:11.269 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:17:11.288 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:11.301 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:17:13.285 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.285 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 06:17:13.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.305 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.305 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 06:17:13.323 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.324 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.324 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] < 37) | (dfin['bar'] > 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:17:13.342 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.343 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.343 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] < 37) | (dfin['bar'] > 61)) & (dfin['foo'] != 11)].index)
2022-08-06 06:17:13.362 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.362 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.362 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 06:17:13.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.380 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.380 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 06:17:13.398 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.399 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.399 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 06:17:13.417 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.417 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.417 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 06:17:13.435 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.435 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.435 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] != 11)].index)
2022-08-06 06:17:13.453 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.453 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.453 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] > 37) & (dfin['bar'] < 61)) & (dfin['foo'] != 11)]
2022-08-06 06:17:13.471 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.471 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.471 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 06:17:13.489 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.489 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.490 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 06:17:13.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.508 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.508 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 06:17:13.526 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.526 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.526 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 06:17:13.544 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.544 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.545 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 06:17:13.563 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.563 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.563 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61)].index, inplace=True)
2022-08-06 06:17:13.576 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.576 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.576 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] != 11)].index)
2022-08-06 06:17:13.594 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.595 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.595 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 06:17:13.613 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.613 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.613 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 06:17:13.631 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:13.631 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:17:13.631 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 06:17:13.650 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:15.676 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:15.677 | DEBUG    | __main__:run_benchmark:432 - print(dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) | (dfin['foo'] == 11)])
2022-08-06 06:17:15.678 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) | (dfin['foo'] == 11))]

2022-08-06 06:17:15.687 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) | (dfin['foo'] == 11))]

2022-08-06 06:17:15.697 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:15.697 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:15.697 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:17:15.715 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:15.715 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:15.715 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:17:15.734 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:15.734 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:15.734 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:17:15.752 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:15.752 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:15.753 | DEBUG    | __main__:run_benchmark:432 - print(dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)])
2022-08-06 06:17:15.753 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]

2022-08-06 06:17:15.762 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]

2022-08-06 06:17:15.771 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:15.771 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:15.772 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:17:15.789 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:15.789 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:15.789 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:17:15.807 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:15.807 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:15.807 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:17:15.825 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:15.825 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:15.825 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:17:15.843 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:15.843 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:15.844 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:17:15.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:15.861 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:15.861 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:17:15.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:15.879 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:15.879 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:17:15.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:15.897 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:15.897 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:17:15.915 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:15.915 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:15.915 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:17:15.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:15.933 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:15.933 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:17:15.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:15.951 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:15.951 | DEBUG    | __main__:run_benchmark:432 - print(dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)])
2022-08-06 06:17:15.951 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]

2022-08-06 06:17:15.960 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]

2022-08-06 06:17:15.969 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:15.969 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:15.969 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:17:15.987 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:15.987 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:15.987 | DEBUG    | __main__:run_benchmark:432 - print(dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)])
2022-08-06 06:17:15.988 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]

2022-08-06 06:17:15.996 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]

2022-08-06 06:17:16.006 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:16.006 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:16.006 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:17:16.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:16.024 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:17:16.024 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)]
2022-08-06 06:17:16.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:17.805 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:17.805 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | (dfin['bar'] > 60 & dfin['foo'] == 11))]
2022-08-06 06:17:17.809 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:17.809 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:17.809 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:17:17.830 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:17.830 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:17.830 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11))) )]
2022-08-06 06:17:17.850 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:17.850 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:17.850 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | (dfin['bar'] > 60 & dfin['foo'] == 11))]
2022-08-06 06:17:17.853 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:17.853 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:17.853 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(~((dfin['bar'] < 38) | (dfin['bar'] > 60 & dfin['foo'] == 11)))]
2022-08-06 06:17:17.856 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:17.856 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:17.856 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)) ))]
2022-08-06 06:17:17.876 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:17.876 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:17.876 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:17:17.894 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:17.895 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:17.895 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | (dfin['bar'] > 60 & dfin['foo'] == 11))]
2022-08-06 06:17:17.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:17.897 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:17.898 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11))) )]
2022-08-06 06:17:17.915 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:17.915 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:17.916 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | (dfin['bar'] > 60 & dfin['foo'] == 11))]
2022-08-06 06:17:17.918 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:17.918 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:17.919 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | (dfin['bar'] > 60 & dfin['foo'] == 11))]
2022-08-06 06:17:17.921 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:17.921 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:17.921 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:17:17.940 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:17.940 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:17.940 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | (dfin['bar'] > 60 & dfin['foo'] == 11))]
2022-08-06 06:17:17.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:17.943 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:17.943 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:17:17.961 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:17.961 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:17.961 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60 & dfin['foo'] == 11)))]
2022-08-06 06:17:17.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:17.964 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:17.964 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | (dfin['bar'] > 60 & dfin['foo'] == 11))]
2022-08-06 06:17:17.966 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:17.967 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:17.967 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11))) )]
2022-08-06 06:17:17.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:17.985 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:17.985 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11))) )]
2022-08-06 06:17:18.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:18.003 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:18.003 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:17:18.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:18.021 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:17:18.021 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:17:18.039 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:18.051 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 06:17:18.051 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 06:17:18.052 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:17:20.186 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.187 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:20.195 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.195 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.196 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(min_periods=1, window=3).mean()
2022-08-06 06:17:20.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.202 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.202 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:20.208 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.208 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.208 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:20.215 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.215 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.215 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:20.222 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.222 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.222 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:20.229 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.229 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.229 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:20.236 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.237 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.237 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:20.244 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.244 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.244 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:20.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.251 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.251 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(window=3, min_periods=1).mean()
2022-08-06 06:17:20.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.258 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.258 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:20.265 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.265 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.265 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'] = dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'].rolling(3).mean()
2022-08-06 06:17:20.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.272 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.272 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'a'].rolling(window=3).mean().shift(1)
2022-08-06 06:17:20.279 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.279 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.279 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:20.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.285 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.285 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(window=3, min_periods=1).mean()
2022-08-06 06:17:20.292 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.292 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.292 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(window=3, min_periods=1).mean()
2022-08-06 06:17:20.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.298 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.298 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:20.304 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.304 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.305 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(center=False, min_periods=1, window=3).mean()
2022-08-06 06:17:20.311 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.311 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.311 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(window=3, min_periods=1).mean()
2022-08-06 06:17:20.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:20.317 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:17:20.317 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:20.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:22.669 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:17:22.669 | DEBUG    | __main__:run_benchmark:432 - dfin['a'][2:] = dfin['a'][2:].rolling(3, min_periods=1).mean()
2022-08-06 06:17:22.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:22.678 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:17:22.678 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:22.684 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:22.684 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:17:22.684 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].loc[2:] = dfin['a'].loc[2:].rolling(3, min_periods=1).mean()
2022-08-06 06:17:22.691 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:22.691 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:17:22.691 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[0:1, 'a'] = np.nan
2022-08-06 06:17:22.698 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:22.698 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:17:22.698 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:22.705 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:22.705 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:17:22.705 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:22.712 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:22.712 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:17:22.712 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].iloc[2:] = dfin['a'].iloc[2:].rolling(3, min_periods=1).mean()
2022-08-06 06:17:22.719 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:22.719 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:17:22.719 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].loc[2:] = dfin['a'].loc[2:].rolling(3, min_periods=1).mean()
2022-08-06 06:17:22.726 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:22.727 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:17:22.727 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'] = dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'].rolling(3, min_periods=1).
2022-08-06 06:17:22.727 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:22.727 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:17:22.727 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].iloc[2:] = dfin['a'].iloc[2:].rolling(3, min_periods=1).mean()
2022-08-06 06:17:22.734 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:22.734 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:17:22.734 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:22.741 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:22.741 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:17:22.741 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:22.748 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:22.748 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:17:22.748 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index[2:], 'a'] = dfin.loc[dfin.index[2:], 'a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:22.756 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:22.756 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:17:22.756 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3, min_periods=1).mean()
2022-08-06 06:17:22.763 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:22.763 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:17:22.763 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean().bfill().iloc[2:]
2022-08-06 06:17:22.770 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:17:24.751 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.751 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].loc[3:] = dfin['a'].loc[3:].rolling(3, min_periods=1).mean()
2022-08-06 06:17:24.759 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.759 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.759 | DEBUG    | __main__:run_benchmark:432 - dfin['a'][1] = np.nan
2022-08-06 06:17:24.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.766 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.767 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:24.773 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.773 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.773 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].iloc[(1):(-2)].mean()
2022-08-06 06:17:24.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.780 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.780 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'] = dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'].rolling(3, min_periods=1).
2022-08-06 06:17:24.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.780 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.780 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin.index != 1) & (dfin.index != 2), 'a'] = dfin.loc[(dfin.index != 1) & (dfin.index != 2), 'a'].rolling(3, min_periods=1).
2022-08-06 06:17:24.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.781 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.781 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:24.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.787 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.787 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index != 0, 'a'] = dfin.loc[dfin.index != 0, 'a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:24.794 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.794 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.794 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:24.800 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.800 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.801 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean().bfill().ffill()
2022-08-06 06:17:24.807 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.807 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.807 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:24.813 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.813 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.813 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].loc[1:3] = np.nan
2022-08-06 06:17:24.820 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.820 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.820 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].mask(dfin['a'].shift(1) == dfin['a'].shift(2) == dfin['a'].shift(3), np.nan)
2022-08-06 06:17:24.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.821 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.822 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].iloc[1:].rolling(3, min_periods=1).mean()
2022-08-06 06:17:24.828 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.828 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.828 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index[2:], 'a'] = dfin.loc[dfin.index[2:], 'a'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:24.835 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.835 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.835 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'] = dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'].rolling(3).mean()
2022-08-06 06:17:24.842 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.842 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.842 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].iloc[1] = np.nan
2022-08-06 06:17:24.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.849 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.849 | DEBUG    | __main__:run_benchmark:432 - #  to the dataframe
2022-08-06 06:17:24.850 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.850 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.850 | DEBUG    | __main__:run_benchmark:432 - dfin['a'][(dfin['a'] != 1) & (dfin['a'] != 2)] = dfin['a'][(dfin['a'] != 1) & (dfin['a'] != 2)].rolling(3, min_periods=1).mean
2022-08-06 06:17:24.857 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:24.857 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:17:24.857 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[1:2, 'a'] = np.nan
2022-08-06 06:17:24.864 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:25.944 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:25.945 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(min_periods=1, window=3).mean()
2022-08-06 06:17:25.953 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:25.953 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:25.953 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 06:17:25.959 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:25.959 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:25.959 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 06:17:25.966 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:25.966 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:25.966 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(window=3).mean()
2022-08-06 06:17:25.972 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:25.972 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:25.972 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 06:17:25.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:25.979 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:25.979 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 06:17:25.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:25.985 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:25.985 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 06:17:25.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:25.991 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:25.991 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(window=3).mean()
2022-08-06 06:17:25.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:25.998 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:25.998 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'a'].rolling(window=3).mean()
2022-08-06 06:17:26.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:26.005 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:26.005 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 06:17:26.011 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:26.011 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:26.011 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(window=3).mean()
2022-08-06 06:17:26.017 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:26.018 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:26.018 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(window=3).mean()
2022-08-06 06:17:26.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:26.024 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:26.024 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 06:17:26.030 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:26.030 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:26.031 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 06:17:26.037 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:26.037 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:26.037 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 06:17:26.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:26.043 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:26.043 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(window=3).mean()
2022-08-06 06:17:26.050 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:26.050 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:26.050 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 06:17:26.056 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:26.056 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:26.056 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(center=True, min_periods=0, window=3).mean()
2022-08-06 06:17:26.062 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:26.063 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:26.063 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 06:17:26.069 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:26.069 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:17:26.069 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(center=False, window=3).mean()
2022-08-06 06:17:26.075 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:26.088 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:17:27.586 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.587 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:17:27.594 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.595 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.595 | DEBUG    | __main__:run_benchmark:432 - pd.rolling_mean(dfin['colA'], window=3)
2022-08-06 06:17:27.596 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.596 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.596 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'colA'].rolling(window=3).mean()
2022-08-06 06:17:27.602 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.602 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.602 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:17:27.609 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.609 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.609 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=True, window=3).mean()
2022-08-06 06:17:27.615 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.615 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.615 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:17:27.622 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.622 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.622 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:17:27.629 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.629 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.629 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(min_periods=1, window=3).mean()
2022-08-06 06:17:27.636 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.636 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.636 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:17:27.643 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.643 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.643 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:17:27.650 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.650 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.650 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:17:27.657 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.657 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.657 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:17:27.664 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.664 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.664 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:17:27.670 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.671 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.671 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:17:27.677 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.677 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.677 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, min_periods=1, window=3).mean()
2022-08-06 06:17:27.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.684 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.684 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, window=3).mean()
2022-08-06 06:17:27.690 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.690 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.690 | DEBUG    | __main__:run_benchmark:432 - pd.rolling_mean(dfin['colA'], 3)
2022-08-06 06:17:27.691 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.691 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.691 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:17:27.697 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.698 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.698 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:17:27.704 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.704 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:17:27.704 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:17:27.710 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:27.885 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Compute rolling mean of window size 3 from 'colA'", 'user': 'u9'}, {'query': "Create column 'colA' by...
    │               └ {'queries': [{'query': "Compute rolling mean of window size 3 from 'colA'", 'user': 'u9'}, {'query': "Create column 'colA' by...
    └ {'query': "Use column 'colA' for computing rolling mean of window size 3", 'user': 'u9'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a series containing the 10 da...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2a7c350>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:17:27 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:17:27 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e2a3bcd0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:17:27.910 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:17:59.045 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.046 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:17:59.054 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.054 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.054 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(min_periods=1, window=3).mean().round(2)
2022-08-06 06:17:59.061 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.061 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.061 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, min_periods=1, window=3).mean()
2022-08-06 06:17:59.067 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.067 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.067 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3, min_periods=1).mean()
2022-08-06 06:17:59.074 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.074 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.074 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=True, window=3).mean()
2022-08-06 06:17:59.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.080 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.080 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:17:59.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.087 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.087 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'colA'].rolling(window=3).mean()
2022-08-06 06:17:59.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.093 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.093 | DEBUG    | __main__:run_benchmark:432 - pd.rolling_mean(dfin['colA'], 3)
2022-08-06 06:17:59.094 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.094 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.094 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:17:59.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.101 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.101 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:17:59.107 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.107 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.107 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:17:59.113 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.113 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.114 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:17:59.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.120 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.120 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, window=3).mean()
2022-08-06 06:17:59.126 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.126 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.127 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:17:59.133 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.133 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.133 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:17:59.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.139 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.139 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(window=3).mean()
2022-08-06 06:17:59.149 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.149 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.149 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:17:59.155 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.155 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.155 | DEBUG    | __main__:run_benchmark:432 - pd.rolling_mean(dfin['colA'], window=3)
2022-08-06 06:17:59.156 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.156 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.157 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, window=3).mean()
2022-08-06 06:17:59.163 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:17:59.163 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:17:59.163 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:17:59.169 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.648 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.649 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:18:00.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.656 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.656 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3, min_periods=1).mean()
2022-08-06 06:18:00.662 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.662 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.663 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:18:00.669 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.669 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.669 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:18:00.675 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.675 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.675 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:18:00.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.682 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.682 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, min_periods=1, window=3).mean()
2022-08-06 06:18:00.688 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.688 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.688 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:18:00.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.695 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.695 | DEBUG    | __main__:run_benchmark:432 - pd.rolling_mean(dfin['colA'], 3)
2022-08-06 06:18:00.696 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.696 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.696 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:18:00.702 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.703 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.703 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:18:00.709 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.709 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.709 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, window=3).mean()
2022-08-06 06:18:00.715 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.715 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.716 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:18:00.722 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.722 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.722 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:18:00.728 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.728 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.728 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=True, window=3).mean()
2022-08-06 06:18:00.735 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.735 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.735 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'colA'].rolling(window=3).mean()
2022-08-06 06:18:00.741 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.741 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.741 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:18:00.747 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.748 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.748 | DEBUG    | __main__:run_benchmark:432 - pd.rolling_mean(dfin['colA'], window=3)
2022-08-06 06:18:00.749 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.749 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.749 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(min_periods=1, window=3).mean()
2022-08-06 06:18:00.755 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.755 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.755 | DEBUG    | __main__:run_benchmark:432 - dfin.colA.rolling(window=3).mean()
2022-08-06 06:18:00.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:00.762 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:18:00.762 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, window=3).mean()
2022-08-06 06:18:00.768 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.039 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.040 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:18:02.047 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.047 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.047 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(window=3).mean()
2022-08-06 06:18:02.057 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.057 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.057 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:18:02.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.063 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.063 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:18:02.070 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.070 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.070 | DEBUG    | __main__:run_benchmark:432 - pd.rolling_mean(dfin['colA'], window=3)
2022-08-06 06:18:02.071 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.071 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.071 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:18:02.077 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.077 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.078 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'colA'].rolling(window=3).mean()
2022-08-06 06:18:02.084 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.084 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.084 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).mean()
2022-08-06 06:18:02.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.093 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.093 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:18:02.099 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.100 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.100 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:18:02.106 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.106 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.106 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, min_periods=1, window=3).mean()
2022-08-06 06:18:02.113 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.113 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.113 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=True, window=3).mean()
2022-08-06 06:18:02.119 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.119 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.119 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, window=3).mean()
2022-08-06 06:18:02.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.126 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.126 | DEBUG    | __main__:run_benchmark:432 - pd.rolling_mean(dfin['colA'], 3)
2022-08-06 06:18:02.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.127 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.127 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(min_periods=1, window=3).mean().round(2)
2022-08-06 06:18:02.133 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.133 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.133 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:18:02.140 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.140 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.140 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:18:02.146 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.146 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.146 | DEBUG    | __main__:run_benchmark:432 - dfin.colA.rolling(window=3).mean()
2022-08-06 06:18:02.152 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.153 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.153 | DEBUG    | __main__:run_benchmark:432 - pd.DataFrame.rolling(dfin['colA'], 3).mean()
2022-08-06 06:18:02.159 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.159 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:18:02.159 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(min_periods=1, window=3).mean()
2022-08-06 06:18:02.165 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:02.179 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 06:18:03.661 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.662 | DEBUG    | __main__:run_benchmark:432 - dfin['column1'].rolling(3).median()
2022-08-06 06:18:03.670 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.670 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.670 | DEBUG    | __main__:run_benchmark:432 - pd.rolling_median(dfin['column1'], 3, min_periods=1)
2022-08-06 06:18:03.671 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.671 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.671 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:18:03.681 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.681 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.681 | DEBUG    | __main__:run_benchmark:432 - dfin['column1'].fillna(dfin['column1'].rolling(3).median())
2022-08-06 06:18:03.688 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.688 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.688 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:18:03.697 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.698 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.698 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:18:03.707 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.708 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.708 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median()
2022-08-06 06:18:03.714 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.715 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.715 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:18:03.724 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.724 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.725 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:18:03.734 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.734 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.735 | DEBUG    | __main__:run_benchmark:432 - dfin['column1'].rolling(3).median().fillna(0)
2022-08-06 06:18:03.741 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.741 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.741 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3, min_periods=1).median()
2022-08-06 06:18:03.751 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.751 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.751 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'column1'].rolling(3).median().fillna(0)
2022-08-06 06:18:03.758 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.758 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.758 | DEBUG    | __main__:run_benchmark:432 - sts.median(dfin['column1'].rolling(3).median())
2022-08-06 06:18:03.759 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.759 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.760 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, 1:ncol].rolling(3).median()
2022-08-06 06:18:03.760 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.761 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.761 | DEBUG    | __main__:run_benchmark:432 - dfin['column1'].rolling(3).median()
2022-08-06 06:18:03.767 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.767 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.768 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3, min_periods=1).median()
2022-08-06 06:18:03.777 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.777 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.777 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:18:03.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.787 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.787 | DEBUG    | __main__:run_benchmark:432 - dfin['column1'].rolling(3).median().fillna(0)
2022-08-06 06:18:03.794 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.794 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.794 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:18:03.803 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:03.804 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:18:03.804 | DEBUG    | __main__:run_benchmark:432 - dfin['column1'].rolling(3).median().fillna(0)
2022-08-06 06:18:03.810 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:06.139 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:06.140 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = np.where((dfin['column2'] == -1), dfin['column2'].median(), dfin['column2'])
2022-08-06 06:18:06.148 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:06.148 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:06.148 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = np.where((dfin['column2'] == -2), dfin['column2'].median(), dfin['column2'])
2022-08-06 06:18:06.155 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:06.155 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:06.155 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'column2'] = dfin.loc[:, 'column2'].replace(np.nan, dfin.loc[:, 'column2'].rolling(3).median())
2022-08-06 06:18:06.156 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:06.156 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:06.157 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(to_replace = -1, value = dfin['column2'].rolling(3).median())
2022-08-06 06:18:06.158 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:06.158 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:06.158 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].rolling(window=3).median()
2022-08-06 06:18:06.164 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:18:06.334 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'in column two choose median of previous 3 rows and assign back', 'user': 'u13'}, {'query': "in 'colum...
    │               └ {'queries': [{'query': 'in column two choose median of previous 3 rows and assign back', 'user': 'u13'}, {'query': "in 'colum...
    └ {'query': 'copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows', 'user': 'u0'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a series containing the rolli...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2a888d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:18:06 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:18:06 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e2a38b50>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:18:06.338 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:18:37.340 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.341 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.351 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.351 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.351 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.360 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.360 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.369 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.369 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.369 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.378 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.378 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.378 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.387 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.387 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.387 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.396 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.396 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.397 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.405 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.405 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.406 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.414 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.414 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.415 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.424 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.424 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.424 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.433 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.433 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.433 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.442 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.442 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.442 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.451 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.451 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.451 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.460 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.460 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.460 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.469 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.469 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.469 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.478 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.479 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.479 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.488 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.488 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.496 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.496 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.497 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.505 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.505 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.506 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.514 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:37.514 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:18:37.515 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:18:37.523 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.596 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.597 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin.groupby('column1')['column2'].transform(lambda x: x.rolling(3, 1).median())
2022-08-06 06:18:39.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.607 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.607 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = np.where((dfin['column2'] == -2), dfin['column2'].median(), dfin['column2'])
2022-08-06 06:18:39.614 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.614 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.614 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:,'column2'] = dfin.loc[:,'column2'].transform(lambda x: np.median([x.iloc[0], x.iloc[1], x.iloc[2]]))
2022-08-06 06:18:39.615 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.615 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.615 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace(to_replace=-1, value=dfin['column2'][0], method='bfill', limit=2, inplace=True)
2022-08-06 06:18:39.622 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.622 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.622 | DEBUG    | __main__:run_benchmark:432 - dfin.column2 = dfin.column2.shift(1)
2022-08-06 06:18:39.629 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.629 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.629 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(0, np.median([dfin['column2'][0], dfin['column2'][1], dfin['column2'][2]]))
2022-08-06 06:18:39.635 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.636 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.636 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = np.where((dfin['column2'] == -2), dfin['column2'].median(), dfin['column2'])
2022-08-06 06:18:39.642 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.643 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.643 | DEBUG    | __main__:run_benchmark:432 - dfin.columns = ['column1', 'column2']
2022-08-06 06:18:39.649 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.649 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.649 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(to_replace = -1, value = (dfin['column2'][0] + dfin['column2'][1])/2)
2022-08-06 06:18:39.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.656 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.656 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].apply(lambda x: dfin['column2'].median() if x == -1 else x)
2022-08-06 06:18:39.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.663 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.663 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].apply(lambda x: np.median([dfin['column2'][dfin.index[dfin['column2'] == x].tolist()[0] - 1], dfin['column2'][df
2022-08-06 06:18:39.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.664 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.664 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin.apply(lambda row: np.median([row['column1'], dfin.loc[row.name-1,'column1'], dfin.loc[row.name-2,'column1']]), axis=1)
2022-08-06 06:18:39.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.665 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.665 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].fillna(np.median(dfin['column2'].shift(1).append(dfin['column2'].shift(-1))))
2022-08-06 06:18:39.672 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.672 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.672 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin.apply(lambda row: np.median([row['column1'], dfin.loc[row.name-1, 'column1'], dfin.loc[row.name-2, 'column1']]), axis=1)
2022-08-06 06:18:39.673 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.673 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.673 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].apply(lambda x: sts.median([dfin['column2'][x], dfin['column2'][x-1], dfin['column2'][x-2]]))
2022-08-06 06:18:39.674 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.675 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.675 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace(np.nan, np.median(dfin['column2'][0:3]))
2022-08-06 06:18:39.681 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.681 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.681 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(-2, np.median([dfin['column2'][0], dfin['column2'][1]]))
2022-08-06 06:18:39.688 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.688 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.688 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace((-2, -4), np.median(dfin['column2']))
2022-08-06 06:18:39.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.695 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.695 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(-2, np.median([-1, -2]))
2022-08-06 06:18:39.702 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.702 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:18:39.702 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(to_replace = -2, value = dfin['column2'].median())
2022-08-06 06:18:39.708 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:39.724 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 06:18:39.724 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:18:39.724 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:18:42.467 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 06:18:42.468 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 06:18:42.471 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:42.471 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 06:18:42.471 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 06:18:42.472 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:42.473 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 06:18:42.473 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-06 06:18:42.491 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:18:44.645 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' where column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 06:18:44.646 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-06 06:18:44.664 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:18:47.015 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.016 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:18:47.031 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.031 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.031 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:18:47.045 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.045 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.045 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'] == dfin2['Date2']]
2022-08-06 06:18:47.057 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.057 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.057 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'] == dfin2['Date2']]
2022-08-06 06:18:47.068 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.069 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.069 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:18:47.082 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.083 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.083 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'] == dfin2['Date2']]
2022-08-06 06:18:47.094 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.094 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.094 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:18:47.108 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.108 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.109 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:18:47.122 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.122 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.122 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:18:47.136 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.136 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.137 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:18:47.150 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.150 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.150 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:18:47.164 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.164 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.165 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:18:47.178 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.178 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.179 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:18:47.192 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.192 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.193 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:18:47.206 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.206 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.206 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:18:47.220 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.220 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.220 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:18:47.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.234 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.234 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'] == dfin2['Date2']]
2022-08-06 06:18:47.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.246 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.246 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:18:47.260 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.260 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.260 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:18:47.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:47.274 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:18:47.274 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:18:47.288 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.602 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.603 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Type1'] == dfin2['Type2']][dfin1['Date1'] == dfin2['Date2']]
2022-08-06 06:18:49.616 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.616 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.617 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Type2', 'Date1', 'Date2'])
2022-08-06 06:18:49.618 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.618 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.618 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin1, dfin2], axis=1)[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:49.630 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.630 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.631 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:49.642 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.642 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.643 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Type2', 'Date1', 'Date2'])
2022-08-06 06:18:49.644 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.644 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.644 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:49.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.656 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.656 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Type2', 'Date1', 'Date2'])
2022-08-06 06:18:49.658 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.658 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.658 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:49.670 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.670 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.670 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:49.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.682 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.682 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, on=['Type1', 'Type2', 'Date1', 'Date2'])
2022-08-06 06:18:49.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.684 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.684 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Type2', 'Date1', 'Date2'])
2022-08-06 06:18:49.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.685 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.685 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 06:18:49.687 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.687 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.687 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Type1'] == dfin2['Type2']]
2022-08-06 06:18:49.698 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.699 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.699 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:49.710 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.710 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.711 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:49.722 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.722 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.722 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 06:18:49.724 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.724 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.724 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:49.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.736 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.736 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1.Type1 == dfin2.Type2]
2022-08-06 06:18:49.747 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.747 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.748 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Type2', 'Date1', 'Date2'], how='inner')
2022-08-06 06:18:49.749 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:49.749 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 06:18:49.749 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Type1'] == dfin2['Type2']][dfin1['Date1'] == dfin2['Date2']]
2022-08-06 06:18:49.761 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.606 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.607 | DEBUG    | __main__:run_benchmark:432 - dfin1[((dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2']))]
2022-08-06 06:18:52.620 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.620 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.620 | DEBUG    | __main__:run_benchmark:432 - dfin1[((dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2']))]
2022-08-06 06:18:52.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.632 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.632 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Type2', 'Date1', 'Date2'])
2022-08-06 06:18:52.634 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.634 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.634 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:52.646 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.646 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.646 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[((dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])), ['var1', 'var2']]
2022-08-06 06:18:52.648 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.648 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.649 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Type1'] == dfin2['Type2']][dfin1['Date1'] == dfin2['Date2']]
2022-08-06 06:18:52.660 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.660 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.661 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:52.672 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.672 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.673 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:52.684 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.684 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.685 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:52.696 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.696 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.697 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:52.708 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.709 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.709 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:52.720 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.720 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.721 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Type2', 'Date1', 'Date2'])
2022-08-06 06:18:52.722 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.722 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.723 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin2['Type1'] == dfin2['Type2']) & (dfin2['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:52.724 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.724 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.724 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:52.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.736 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.736 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2.iloc[i]['Type2']) & (dfin1['Date1'] == dfin2.iloc[i]['Date2'])]
2022-08-06 06:18:52.738 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.738 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.738 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:52.750 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.750 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.750 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:52.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.762 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.762 | DEBUG    | __main__:run_benchmark:432 - dfin1[((dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2']))]
2022-08-06 06:18:52.774 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.774 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.774 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 06:18:52.786 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.786 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 06:18:52.786 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Type1'].isin(dfin2['Type2']) & dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:18:52.800 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:52.814 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:18:52.814 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:18:54.696 | DEBUG    | __main__:run_benchmark:431 - Query: merge columns on "lkey" dfin1 and "rkey" dfin2
2022-08-06 06:18:54.696 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, left_on='lkey', right_on='rkey')
2022-08-06 06:18:54.710 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:18:54.725 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:18:56.612 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.613 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.614 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.614 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.614 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.614 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.615 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.615 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.615 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.615 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.615 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.615 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.615 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.615 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.616 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.616 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.616 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.616 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.616 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.616 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.616 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.616 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.616 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.617 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.617 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.617 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.617 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.617 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.617 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.617 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.618 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.618 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.618 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.618 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.618 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.618 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.618 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.618 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.618 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.618 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.619 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.619 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.619 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.619 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.619 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.619 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.619 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.619 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.619 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.620 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.620 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.620 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.620 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.620 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.620 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.620 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.620 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:56.620 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:56.620 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:56.621 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:58.123 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:58.123 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:18:58.124 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:18:58.124 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 06:18:58.124 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, left_on='left_key', right_on='right_key', how='inner')
2022-08-06 06:18:58.138 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:18:58.153 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:19:00.676 | DEBUG    | __main__:run_benchmark:431 - Query: join dfin1 and dfin2 on column 'Type1'=='Type2' && 'Date1'=='Date2'
2022-08-06 06:19:00.677 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:19:00.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:00.678 | DEBUG    | __main__:run_benchmark:431 - Query: join dfin1 and dfin2 on column 'Type1'=='Type2' && 'Date1'=='Date2'
2022-08-06 06:19:00.678 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-06 06:19:00.696 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:19:03.521 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 06:19:03.522 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 06:19:03.525 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:03.526 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 06:19:03.526 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])], dfin2[(dfin1['Type1'] == dfin2['Type
2022-08-06 06:19:03.526 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:03.526 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 06:19:03.526 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 06:19:03.528 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:03.528 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 06:19:03.528 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 06:19:03.530 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:03.530 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 06:19:03.530 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])], dfin2])
2022-08-06 06:19:03.547 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:03.547 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 06:19:03.547 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])], dfin2])
2022-08-06 06:19:03.564 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:03.564 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 06:19:03.564 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, on=['Type1', 'Date1'])
2022-08-06 06:19:03.566 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:03.566 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 06:19:03.566 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 06:19:03.567 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:03.568 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 06:19:03.568 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 06:19:03.569 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:03.569 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 06:19:03.570 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 06:19:03.571 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:03.571 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 06:19:03.572 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 06:19:03.573 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:03.573 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 06:19:03.573 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 06:19:03.575 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:03.575 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 06:19:03.575 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 06:19:03.577 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:03.577 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 06:19:03.577 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 06:19:03.579 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:03.579 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 06:19:03.579 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 06:19:03.581 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:03.581 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 06:19:03.581 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-06 06:19:03.598 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:19:03.615 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 06:19:03.615 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:19:03.615 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:19:05.166 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.167 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:19:05.181 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.181 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.181 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'], inplace=True)
2022-08-06 06:19:05.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.190 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.190 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:19:05.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.202 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.202 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:19:05.215 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.215 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.215 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:19:05.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.227 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.228 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.loc[dfin['delta'].isnull()].index)
2022-08-06 06:19:05.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.240 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.240 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, subset=['delta', 'phi'])
2022-08-06 06:19:05.252 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.252 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.253 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:19:05.265 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.265 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.265 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:19:05.278 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.278 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.278 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:19:05.290 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.290 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.290 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:19:05.303 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.303 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.303 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:19:05.315 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.315 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.315 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'], inplace=True)
2022-08-06 06:19:05.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.324 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.324 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:19:05.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.336 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.337 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:19:05.349 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.349 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.349 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:19:05.361 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.362 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.362 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:19:05.374 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.374 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.374 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['delta'].isna() == False)]
2022-08-06 06:19:05.386 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.386 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.386 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:19:05.399 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.399 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:19:05.399 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:19:05.411 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:05.426 | DEBUG    | __main__:run:515 - Number of queries: 23
2022-08-06 06:19:07.094 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0
2022-08-06 06:19:07.095 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:07.106 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:07.106 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0
2022-08-06 06:19:07.106 | DEBUG    | __main__:run_benchmark:432 - dfin.phi.fillna(11.0, inplace=True)
2022-08-06 06:19:07.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:07.115 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0
2022-08-06 06:19:07.115 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 33.0})
2022-08-06 06:19:07.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:19:08.379 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 06:19:08.380 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:08.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:08.391 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 06:19:08.391 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:08.400 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:08.400 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 06:19:08.400 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:08.409 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:08.409 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 06:19:08.409 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:08.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:08.418 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 06:19:08.419 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:08.428 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:08.428 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 06:19:08.428 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:08.437 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:08.437 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 06:19:08.437 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:08.446 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:08.446 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 06:19:08.447 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 06:19:08.455 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:08.456 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 06:19:08.456 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:08.465 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:08.465 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 06:19:08.465 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:08.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:08.474 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 06:19:08.474 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:08.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:08.484 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 06:19:08.484 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:08.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:08.493 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 06:19:08.493 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:08.502 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:08.502 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 06:19:08.502 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:08.511 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:08.511 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 06:19:08.511 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 33.0})
2022-08-06 06:19:08.524 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:19:10.478 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.479 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:10.494 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.494 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.494 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:10.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.507 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.507 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:10.520 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.521 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.521 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:10.530 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.530 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.530 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:10.544 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.544 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.544 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:10.558 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.558 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.559 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:10.572 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.572 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.572 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:10.586 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.586 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.586 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:10.599 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.599 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.599 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:10.612 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.613 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.613 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:10.626 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.626 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.626 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:10.639 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.639 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.640 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:10.653 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.653 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.653 | DEBUG    | __main__:run_benchmark:432 - dfin.apply((lambda x: (11.0 if pd.isnull(x['phi']) else x['phi'])), axis=1)
2022-08-06 06:19:10.662 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.662 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.663 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:10.676 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.676 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.676 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:10.689 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.689 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.689 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:10.703 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.703 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.703 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:10.716 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.716 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.716 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:10.729 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:10.730 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:19:10.730 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:10.743 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.608 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.609 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isna(), 11.0, dfin['phi'])
2022-08-06 06:19:12.649 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.649 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.649 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:12.664 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.665 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.665 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:12.680 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.681 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.681 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:12.694 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.694 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.694 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:12.708 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.708 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.708 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(pd.isnull(dfin['phi']), 11.0, dfin['phi'])
2022-08-06 06:19:12.717 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.717 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.718 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:12.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.731 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.731 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 06:19:12.740 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.740 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.741 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:12.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.754 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.754 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:12.768 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.768 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.768 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:12.782 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.782 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.782 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:12.791 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.792 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.792 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:12.806 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.806 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.806 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:12.820 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.820 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.820 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:12.829 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.829 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.830 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isnull(), 11.0, dfin['phi'])
2022-08-06 06:19:12.839 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.839 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.839 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isna(), 11.0, dfin['phi'])
2022-08-06 06:19:12.848 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.848 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.848 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:12.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.862 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.862 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:12.875 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:12.875 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:19:12.875 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:12.884 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.664 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.665 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:14.680 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.680 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.680 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:14.689 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.689 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.689 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:14.702 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.703 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.703 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:14.716 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.716 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.716 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:14.729 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.730 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.730 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:14.739 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.739 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.739 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:14.752 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.752 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.753 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].where((~ (dfin['phi'].isnull())), other=11.0)
2022-08-06 06:19:14.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.762 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.762 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 06:19:14.771 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.771 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.771 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:14.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.780 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.780 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:14.794 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.794 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.794 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 06:19:14.803 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.803 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.803 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].apply((lambda x: (11.0 if (np.isnan(x)) else x)))
2022-08-06 06:19:14.812 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.812 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.812 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:14.825 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.826 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.826 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:14.839 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.839 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.839 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].transform((lambda x: 11.0 if pd.isnull(x) else x))
2022-08-06 06:19:14.848 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.848 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.848 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:14.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.862 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.862 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:14.871 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.871 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.871 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:14.884 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:14.884 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:19:14.884 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:14.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.660 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.661 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].apply((lambda x: (11.0 if (np.isnan(x)) else x)))
2022-08-06 06:19:16.671 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.672 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.672 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:16.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.685 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.685 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:16.694 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.695 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.695 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:16.708 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.708 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.708 | DEBUG    | __main__:run_benchmark:432 - np.where((dfin['phi'].isnull()), 11.0, dfin['phi'])
2022-08-06 06:19:16.717 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.717 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.717 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:16.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.731 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.731 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].replace({np.nan: 11.0})
2022-08-06 06:19:16.740 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.740 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.740 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:16.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.754 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.754 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:19:16.763 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.763 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.763 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:16.776 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.776 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.777 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].apply((lambda x: (11.0 if (np.isnan(x)) else x)))
2022-08-06 06:19:16.786 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.786 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.786 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:16.799 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.799 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.799 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:16.812 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.812 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.812 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].where((~ (dfin['phi'].isnull())), other=11.0)
2022-08-06 06:19:16.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.822 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.822 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:16.835 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.835 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.835 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:16.848 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.848 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.848 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:16.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.862 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.862 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:16.875 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.875 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.875 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].fillna(11.0)
2022-08-06 06:19:16.884 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:16.884 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:19:16.884 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 06:19:16.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.775 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.775 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, subset=['phi'])
2022-08-06 06:19:18.777 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.778 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.778 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:18.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.787 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.787 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:18.796 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.797 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.797 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:18.806 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.806 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.806 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13})
2022-08-06 06:19:18.819 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.819 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.819 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:18.828 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.828 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.828 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:18.837 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.837 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.838 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:18.846 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.847 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.847 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:18.856 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.856 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.856 | DEBUG    | __main__:run_benchmark:432 - dfin.apply((lambda x: (11.0 if (x.name == 'phi') else (13 if (x == 'NaN') else x))))
2022-08-06 06:19:18.857 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.858 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.858 | DEBUG    | __main__:run_benchmark:432 - dfin.where((~ (dfin['phi'].isnull()) | (dfin['omega'].isnull())), other=11.0)
2022-08-06 06:19:18.871 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.871 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.872 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:18.880 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.881 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.881 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:18.889 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.890 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.890 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:18.898 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.899 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.899 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:18.907 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.908 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.908 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:18.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.917 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.917 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:18.925 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.926 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.926 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:18.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.934 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.935 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:18.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:18.944 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:19:18.944 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:18.952 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.704 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.704 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:20.714 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.715 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.715 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:20.723 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.724 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.724 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:20.733 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.733 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.733 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:20.742 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.742 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.742 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:20.751 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.751 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.751 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:20.760 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.760 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.760 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:20.769 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.769 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.769 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:20.778 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.778 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.779 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, subset=['phi'])
2022-08-06 06:19:20.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.780 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.780 | DEBUG    | __main__:run_benchmark:432 - dfin.where((~ (dfin['phi'].isnull()) | (dfin['omega'].isnull())), other=11.0)
2022-08-06 06:19:20.794 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.794 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.794 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:20.803 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.803 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.803 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:20.812 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.812 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.812 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:20.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.821 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.821 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:20.830 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.830 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.830 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:20.839 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.839 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.840 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:20.848 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.849 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.849 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:20.857 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.858 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.858 | DEBUG    | __main__:run_benchmark:432 - dfin.transform((lambda x: (11.0 if x.name == 'phi' else 13) if pd.isnull(x) else x))
2022-08-06 06:19:20.859 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.859 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.859 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:20.868 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:20.868 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:19:20.868 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 06:19:20.877 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.646 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.647 | DEBUG    | __main__:run_benchmark:432 - #  replace 'NaN' with (0.0, 0.0) if column is ('mu', 'delta')
2022-08-06 06:19:22.648 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.648 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.649 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['phi'].isnull(), 'phi'] = 11.0
2022-08-06 06:19:22.658 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.658 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.659 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ['phi', 'omega']] = (11.0, 13.0)
2022-08-06 06:19:22.668 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.668 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.668 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['phi'].isnull(), 'phi'] = 11.0
2022-08-06 06:19:22.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.678 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.678 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ['phi', 'omega']] = (11.0, 13.0)
2022-08-06 06:19:22.687 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.687 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.687 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')] = dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 06:19:22.689 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.689 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.689 | DEBUG    | __main__:run_benchmark:432 - #  replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.689 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.690 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.690 | DEBUG    | __main__:run_benchmark:432 - #  replace 'NaN' with (0.0, 0.0) if column is ('mu', 'delta')
2022-08-06 06:19:22.690 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.690 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.690 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ['phi', 'omega']] = (11.0, 13.0)
2022-08-06 06:19:22.699 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.700 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.700 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['phi'].isnull(), 'phi'] = 11.0
2022-08-06 06:19:22.709 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.709 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.709 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['phi'].isnull(), 'phi'] = 11.0
2022-08-06 06:19:22.718 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.718 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.718 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ['phi', 'omega']] = (11.0, 13.0)
2022-08-06 06:19:22.728 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.728 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.728 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['phi'].isnull(), 'phi'] = (11.0, 13.0)
2022-08-06 06:19:22.729 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.729 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.729 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ['phi', 'omega']] = (11.0, 13.0)
2022-08-06 06:19:22.739 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.739 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.739 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['phi'].isnull(), 'phi'] = 11.0
2022-08-06 06:19:22.748 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.748 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.748 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['phi'].isnull(), 'phi'] = 11.0
2022-08-06 06:19:22.757 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.757 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.757 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ['phi', 'omega']] = (11.0, 13.0)
2022-08-06 06:19:22.767 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.767 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.767 | DEBUG    | __main__:run_benchmark:432 - #  replace 'NaN' with (0.0, 0.0) if column is ('mu', 'delta')
2022-08-06 06:19:22.767 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.767 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.767 | DEBUG    | __main__:run_benchmark:432 - #  replace 'NaN' with (0.0, 0.0) if column is ('mu', 'delta')
2022-08-06 06:19:22.767 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:22.768 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:19:22.768 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['phi'].isnull(), 'phi'] = 11.0
2022-08-06 06:19:22.777 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:24.449 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of difn with value '33.0'
2022-08-06 06:19:24.449 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(inplace=True, value={'phi': 11.0, 'omega': 33.0})
2022-08-06 06:19:24.459 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:19:26.252 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of dfin with value '33.0'
2022-08-06 06:19:26.253 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(inplace=True, value={'phi': 11.0, 'omega': 33.0})
2022-08-06 06:19:26.264 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:19:27.581 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of dfinn with value '33.0'
2022-08-06 06:19:27.582 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(inplace=True, value={'phi': 11.0, 'omega': 33.0})
2022-08-06 06:19:27.592 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:19:29.031 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' by 11 and nan in column 'omega' by 33
2022-08-06 06:19:29.032 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].fillna(11)
2022-08-06 06:19:29.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:29.043 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' by 11 and nan in column 'omega' by 33
2022-08-06 06:19:29.043 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].fillna(11)
2022-08-06 06:19:29.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:29.052 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' by 11 and nan in column 'omega' by 33
2022-08-06 06:19:29.052 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11, 'omega': 33})
2022-08-06 06:19:29.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:19:30.747 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:19:30.748 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), other=11)
2022-08-06 06:19:30.763 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:30.763 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:19:30.763 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11, 'omega': 33})
2022-08-06 06:19:30.775 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:19:32.295 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 06:19:32.295 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(value=11)
2022-08-06 06:19:32.306 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:32.306 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 06:19:32.306 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11, inplace=True)
2022-08-06 06:19:32.315 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:32.315 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 06:19:32.315 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11).fillna(33)
2022-08-06 06:19:32.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:32.325 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 06:19:32.325 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(value=11)
2022-08-06 06:19:32.334 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:32.334 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 06:19:32.334 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(value=11)
2022-08-06 06:19:32.343 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:32.343 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 06:19:32.343 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11, inplace=True)
2022-08-06 06:19:32.352 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:32.353 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 06:19:32.353 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11)
2022-08-06 06:19:32.362 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:32.362 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 06:19:32.362 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(inplace=True, value=11)
2022-08-06 06:19:32.371 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:32.371 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 06:19:32.371 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(inplace=True, value=11)
2022-08-06 06:19:32.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:32.380 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 06:19:32.381 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11)
2022-08-06 06:19:32.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:32.390 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 06:19:32.390 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11)
2022-08-06 06:19:32.399 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:32.399 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 06:19:32.399 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11).fillna(33)
2022-08-06 06:19:32.412 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:32.412 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 06:19:32.412 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11, axis=0)
2022-08-06 06:19:32.421 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:19:32.421 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 06:19:32.421 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(inplace=True, value={'phi': 11, 'omega': 33})
2022-08-06 06:19:32.430 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:19:32.604 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0", 'user': '...
    │               └ {'queries': [{'query': "Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0", 'user': '...
    └ {'query': "fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace", 'user': 'u8'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a series containing forward-f...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2b69a90>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:19:32 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:19:32 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e2a57dd0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:19:32.630 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:20:04.249 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-06 06:20:04.250 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11, inplace=True)
2022-08-06 06:20:04.261 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:04.261 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-06 06:20:04.261 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11, inplace=True)
2022-08-06 06:20:04.270 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:04.270 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-06 06:20:04.270 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(value=11, inplace=True)
2022-08-06 06:20:04.279 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:04.279 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-06 06:20:04.280 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(value=11, inplace=True)
2022-08-06 06:20:04.289 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:04.289 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-06 06:20:04.289 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11, inplace=True)
2022-08-06 06:20:04.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:04.298 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-06 06:20:04.298 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11, inplace=True)
2022-08-06 06:20:04.307 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:04.308 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-06 06:20:04.308 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(inplace=True, value={'phi': 11, 'omega': 33})
2022-08-06 06:20:04.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:20:04.334 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:20:05.994 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaNs in column 'mu' with 24 and NaNs in column 'delta' with 45
2022-08-06 06:20:05.995 | DEBUG    | __main__:run_benchmark:432 - dfin.mu.fillna(24, inplace=True)
2022-08-06 06:20:06.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:06.005 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaNs in column 'mu' with 24 and NaNs in column 'delta' with 45
2022-08-06 06:20:06.005 | DEBUG    | __main__:run_benchmark:432 - dfin['mu'].replace(np.nan, 24)
2022-08-06 06:20:06.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:06.014 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaNs in column 'mu' with 24 and NaNs in column 'delta' with 45
2022-08-06 06:20:06.014 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'mu': 24, 'delta': 45})
2022-08-06 06:20:06.026 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:20:06.045 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 06:20:06.203 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "replace all 'Nan' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17...
    │               └ {'queries': [{'query': "replace all 'Nan' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17...
    └ {'query': "replace all 'Nan' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17.0", 'user': ...

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Replace 0\'s with NaN in the column ...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2a99f10>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:20:06 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:20:06 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e2a634d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:20:06.228 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:20:37.887 | DEBUG    | __main__:run_benchmark:431 - Query: replace all 'Nan' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17.0
2022-08-06 06:20:37.888 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23.0, inplace=True)
2022-08-06 06:20:37.899 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:37.899 | DEBUG    | __main__:run_benchmark:431 - Query: replace all 'Nan' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17.0
2022-08-06 06:20:37.899 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-06 06:20:37.911 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:20:39.669 | DEBUG    | __main__:run_benchmark:431 - Query: replace all 'NaN' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17.0
2022-08-06 06:20:39.670 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23.0, inplace=True)
2022-08-06 06:20:39.712 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:39.713 | DEBUG    | __main__:run_benchmark:431 - Query: replace all 'NaN' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17.0
2022-08-06 06:20:39.713 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23.0, inplace=True)
2022-08-06 06:20:39.729 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:39.729 | DEBUG    | __main__:run_benchmark:431 - Query: replace all 'NaN' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17.0
2022-08-06 06:20:39.729 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-06 06:20:39.743 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:20:41.378 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' with 23.0 and replace 'NaN' in 'pi' with 17.0
2022-08-06 06:20:41.379 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-06 06:20:41.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:20:42.577 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in column 'omega' with 23.0 and replace 'NaN' in column 'pi' with 17.0
2022-08-06 06:20:42.578 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23.0, inplace=True)
2022-08-06 06:20:42.588 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:42.588 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in column 'omega' with 23.0 and replace 'NaN' in column 'pi' with 17.0
2022-08-06 06:20:42.588 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23.0, inplace=True)
2022-08-06 06:20:42.597 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:42.598 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in column 'omega' with 23.0 and replace 'NaN' in column 'pi' with 17.0
2022-08-06 06:20:42.598 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace({None: 23.0})
2022-08-06 06:20:42.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:42.607 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in column 'omega' with 23.0 and replace 'NaN' in column 'pi' with 17.0
2022-08-06 06:20:42.607 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-06 06:20:42.619 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:20:43.834 | DEBUG    | __main__:run_benchmark:431 - Query: replace all value of 'NaN' in column 'omega' with 23.0 and all values of 'NaN' in column 'pi' with 17.0
2022-08-06 06:20:43.834 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23.0, inplace=True)
2022-08-06 06:20:43.844 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:43.844 | DEBUG    | __main__:run_benchmark:431 - Query: replace all value of 'NaN' in column 'omega' with 23.0 and all values of 'NaN' in column 'pi' with 17.0
2022-08-06 06:20:43.844 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-06 06:20:43.857 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:20:45.426 | DEBUG    | __main__:run_benchmark:431 - Query: Replace nan in column 'omega' with 23.0 and column 'pi' with 17
2022-08-06 06:20:45.427 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17})
2022-08-06 06:20:45.478 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:20:46.954 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:46.955 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace(np.nan, 23)
2022-08-06 06:20:46.965 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:46.965 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:46.965 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 06:20:46.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:46.974 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:46.975 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'nan': 23, 'pi': {'nan': 17}})
2022-08-06 06:20:46.976 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:46.976 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:46.976 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 06:20:46.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:46.985 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:46.985 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23)
2022-08-06 06:20:46.994 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:46.994 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:46.995 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace({None: 23})
2022-08-06 06:20:47.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:47.004 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:47.004 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23)
2022-08-06 06:20:47.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:47.013 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:47.013 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace({np.nan: 23})
2022-08-06 06:20:47.022 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:47.023 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:47.023 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23)
2022-08-06 06:20:47.032 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:47.032 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:47.032 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace({np.nan: 23})
2022-08-06 06:20:47.041 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:47.041 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:47.041 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23, inplace=True)
2022-08-06 06:20:47.051 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:47.051 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:47.051 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(np.NaN, [17, 23])
2022-08-06 06:20:47.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:47.052 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:47.053 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace(np.nan, 23)
2022-08-06 06:20:47.062 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:47.062 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:47.062 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'nan': 23, 'nan': 17})
2022-08-06 06:20:47.075 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:47.075 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:47.075 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 06:20:47.084 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:47.084 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:47.084 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 06:20:47.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:47.093 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:47.094 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace('nan', 23)
2022-08-06 06:20:47.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:47.103 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:47.103 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 06:20:47.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:47.112 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:47.112 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23)
2022-08-06 06:20:47.121 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:47.121 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 06:20:47.121 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23, inplace=True)
2022-08-06 06:20:47.130 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:48.390 | DEBUG    | __main__:run_benchmark:431 - Query: Replace nan with 23 in column 'omega' and with 17 in column 'pi'
2022-08-06 06:20:48.390 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23)
2022-08-06 06:20:48.400 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:48.400 | DEBUG    | __main__:run_benchmark:431 - Query: Replace nan with 23 in column 'omega' and with 17 in column 'pi'
2022-08-06 06:20:48.400 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23)
2022-08-06 06:20:48.409 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:48.409 | DEBUG    | __main__:run_benchmark:431 - Query: Replace nan with 23 in column 'omega' and with 17 in column 'pi'
2022-08-06 06:20:48.409 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace(np.NAN, 23)
2022-08-06 06:20:48.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:48.418 | DEBUG    | __main__:run_benchmark:431 - Query: Replace nan with 23 in column 'omega' and with 17 in column 'pi'
2022-08-06 06:20:48.419 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'omega': 23, 'pi': 17})
2022-08-06 06:20:48.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:20:50.525 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaN with 23.0 in column 'omega' and NaN with 17.0 in column 'pi'
2022-08-06 06:20:50.526 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23.0, inplace=True)
2022-08-06 06:20:50.568 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:50.568 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaN with 23.0 in column 'omega' and NaN with 17.0 in column 'pi'
2022-08-06 06:20:50.568 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23.0, inplace=True)
2022-08-06 06:20:50.584 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:50.584 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaN with 23.0 in column 'omega' and NaN with 17.0 in column 'pi'
2022-08-06 06:20:50.585 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23.0, inplace=True)
2022-08-06 06:20:50.596 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:50.596 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaN with 23.0 in column 'omega' and NaN with 17.0 in column 'pi'
2022-08-06 06:20:50.596 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'omega': 23.0, 'pi': 17.0})
2022-08-06 06:20:50.609 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:20:52.254 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'NaN' with '23.0' in column 'omega' and 'NaN' with '17.0' in column 'pi'
2022-08-06 06:20:52.255 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23.0)
2022-08-06 06:20:52.264 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:52.265 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'NaN' with '23.0' in column 'omega' and 'NaN' with '17.0' in column 'pi'
2022-08-06 06:20:52.265 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-06 06:20:52.277 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:20:53.737 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.738 | DEBUG    | __main__:run_benchmark:432 - dfin['pi'].replace({None: 17})
2022-08-06 06:20:53.748 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.748 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.748 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace(np.nan, 23)
2022-08-06 06:20:53.757 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.757 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.758 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'NaN': 23, 'pi': 17})
2022-08-06 06:20:53.770 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.771 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.771 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace(np.nan, 23, inplace=True)
2022-08-06 06:20:53.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.780 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.780 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace({np.nan: 23})
2022-08-06 06:20:53.789 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.789 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.789 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(np.nan, 23)
2022-08-06 06:20:53.802 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.802 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.802 | DEBUG    | __main__:run_benchmark:432 - dfin['pi'].replace({np.nan: 17})
2022-08-06 06:20:53.811 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.811 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.811 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['omega'].isnull(), 'omega'] = 23
2022-08-06 06:20:53.820 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.821 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.821 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23, inplace=True)
2022-08-06 06:20:53.830 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.830 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.830 | DEBUG    | __main__:run_benchmark:432 - dfin['pi'].replace(np.NaN, 17)
2022-08-06 06:20:53.839 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.839 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.839 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace(pd.np.nan, 23)
2022-08-06 06:20:53.848 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.848 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.848 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 06:20:53.857 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.858 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.858 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace({np.nan: 23, np.nan: 17})
2022-08-06 06:20:53.867 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.867 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.867 | DEBUG    | __main__:run_benchmark:432 - dfin['pi'].fillna(17, inplace=True)
2022-08-06 06:20:53.876 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.876 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.876 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace(np.nan, 23)
2022-08-06 06:20:53.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.885 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.885 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'NaN': 23, 'pi': {'NaN': 17}})
2022-08-06 06:20:53.886 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.886 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.887 | DEBUG    | __main__:run_benchmark:432 - dfin['pi'].replace(np.nan, 17)
2022-08-06 06:20:53.895 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.895 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.896 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(np.NaN, [23, 17])
2022-08-06 06:20:53.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.897 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.897 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23, inplace=True)
2022-08-06 06:20:53.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.906 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 06:20:53.906 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].replace(np.NaN, 23)
2022-08-06 06:20:53.915 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:53.934 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:20:55.333 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.334 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:20:55.348 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.348 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.348 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].fillna(10)
2022-08-06 06:20:55.357 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.357 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.357 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].replace(to_replace=np.nan, value=10)
2022-08-06 06:20:55.366 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.366 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.366 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:20:55.379 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.379 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.380 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:20:55.393 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.393 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.393 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].fillna(10)
2022-08-06 06:20:55.401 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.402 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.402 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].replace(np.nan, 10)
2022-08-06 06:20:55.411 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.411 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.411 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].fillna(10)
2022-08-06 06:20:55.420 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.420 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.420 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(10)
2022-08-06 06:20:55.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.429 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.429 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(10)
2022-08-06 06:20:55.438 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.438 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.438 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(10)
2022-08-06 06:20:55.447 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.447 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.448 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(10, inplace=True)
2022-08-06 06:20:55.456 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.456 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.456 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:20:55.469 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.470 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.470 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:20:55.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.483 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.483 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:20:55.496 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.496 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.497 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].replace(np.nan, 10)
2022-08-06 06:20:55.506 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.506 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.506 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].fillna(10)
2022-08-06 06:20:55.515 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.516 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.516 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:20:55.529 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.530 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.530 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:20:55.543 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.543 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:20:55.543 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(10, inplace=True)
2022-08-06 06:20:55.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:55.570 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 06:20:55.571 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:20:55.571 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:20:57.631 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 06:20:57.632 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:20:57.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:57.641 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 06:20:57.641 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 06:20:57.648 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:57.649 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 06:20:57.649 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 06:20:57.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:57.656 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 06:20:57.656 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:20:57.664 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:57.664 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 06:20:57.664 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:20:57.671 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:57.671 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 06:20:57.671 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:20:57.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:57.679 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 06:20:57.679 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(inplace=True, to_replace='United States', value='US')
2022-08-06 06:20:57.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:20:57.686 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 06:20:57.686 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'location': 'United States', 'zip': 3434}, {'location': 'US', 'zip': 4343})
2022-08-06 06:20:57.696 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:20:59.884 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'United States' in column 'location' with 'US' and '3434' in column 'zip' with column 'zip' with '4343'
2022-08-06 06:20:59.885 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'location': 'United States', 'zip': 3434}, {'location': 'US', 'zip': 4343})
2022-08-06 06:20:59.896 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:21:02.105 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.106 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['location'] == 'United States'), 'location'] = 'US'
2022-08-06 06:21:02.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.114 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.114 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = 4343
2022-08-06 06:21:02.122 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.122 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.122 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = 4343
2022-08-06 06:21:02.129 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.129 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.129 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 06:21:02.136 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.137 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.137 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = '4343'
2022-08-06 06:21:02.144 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.144 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.144 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = 4343
2022-08-06 06:21:02.151 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.151 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.152 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'].replace(to_replace='3434', value='4343')
2022-08-06 06:21:02.159 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.159 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.159 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = 4343
2022-08-06 06:21:02.166 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.166 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.166 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = 4343
2022-08-06 06:21:02.174 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.174 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.174 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = dfin.loc[dfin['location'] == 'UK', 'zip'].replace(3434, 4343)
2022-08-06 06:21:02.181 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.182 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.182 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'].replace({'3434': '4343'})
2022-08-06 06:21:02.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.189 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.189 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'].replace('3434', '4343')
2022-08-06 06:21:02.196 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.196 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.197 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'].replace('3434', '4343')
2022-08-06 06:21:02.204 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.204 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.204 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['location'] == 'United States'), 'location'] = 'US'
2022-08-06 06:21:02.211 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.211 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.211 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'].replace(inplace=True, to_replace='3434', value='4343')
2022-08-06 06:21:02.218 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.219 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.219 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'].replace('3434', '4343')
2022-08-06 06:21:02.226 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.226 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.226 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['location'] == 'United States'), 'location'] = 'US'
2022-08-06 06:21:02.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.233 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.234 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = 4343
2022-08-06 06:21:02.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.241 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.241 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = dfin.loc[dfin['location'] == 'UK', 'zip'].replace(3434, 4343)
2022-08-06 06:21:02.248 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:02.248 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:21:02.248 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = 4343
2022-08-06 06:21:02.256 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:03.884 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:03.885 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].str.replace('United States', 'US')
2022-08-06 06:21:03.922 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:03.922 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:03.923 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US', inplace=True)
2022-08-06 06:21:03.938 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:03.938 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:03.938 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 06:21:03.948 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:03.949 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:03.949 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 06:21:03.957 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:03.957 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:03.957 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US', inplace=True)
2022-08-06 06:21:03.965 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:03.965 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:03.965 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace({'United States': 'US'})
2022-08-06 06:21:03.972 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:03.972 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:03.972 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:21:03.979 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:03.980 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:03.980 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('United States', 'US')
2022-08-06 06:21:03.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:03.990 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:03.990 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(inplace=True, to_replace='United States', value='US')
2022-08-06 06:21:03.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:03.998 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:03.998 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 06:21:04.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:04.005 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:04.005 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 06:21:04.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:04.012 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:04.013 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:21:04.020 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:04.020 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:04.020 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:21:04.027 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:04.027 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:04.027 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(inplace=True, to_replace='United States', value='US')
2022-08-06 06:21:04.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:04.034 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:04.035 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:21:04.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:04.042 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:04.042 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].str.replace('United States', 'US')
2022-08-06 06:21:04.049 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:04.049 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:04.049 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:21:04.056 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:04.057 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:04.057 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:21:04.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:04.064 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:04.064 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:21:04.071 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:04.071 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:21:04.071 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:21:04.078 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.097 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.097 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].mask((dfin['location'] == 'United States'), 'US', inplace=True)
2022-08-06 06:21:06.106 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.106 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.107 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:21:06.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.114 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.114 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'location': {'United States': 'US'}, 'zip': {'3434': '4343'}}, inplace=True)
2022-08-06 06:21:06.121 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.121 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.121 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:21:06.128 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.129 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.129 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:21:06.136 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.136 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.136 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('United States', 'US').replace('3434', '4343')
2022-08-06 06:21:06.146 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.146 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.147 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].str.replace('United States', 'US').str.replace('3434', '4343')
2022-08-06 06:21:06.154 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.154 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.154 | DEBUG    | __main__:run_benchmark:432 - dfin['location'] = dfin['location'].str.replace('United States', 'US')
2022-08-06 06:21:06.161 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.162 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.162 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'United States': 'US', '3434': '4343'})
2022-08-06 06:21:06.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.172 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.172 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace({'United States': 'US'})
2022-08-06 06:21:06.179 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.179 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.180 | DEBUG    | __main__:run_benchmark:432 - dfin.location = dfin.location.apply(lambda x: x.replace('United States', 'US'))
2022-08-06 06:21:06.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.187 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.187 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:21:06.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.187 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.187 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 06:21:06.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.195 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.195 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:21:06.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.202 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.202 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 06:21:06.209 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.209 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.210 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US').replace('3434', '4343')
2022-08-06 06:21:06.217 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.217 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.217 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace({'United States': 'US'})
2022-08-06 06:21:06.225 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.225 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.225 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'United States': 'US', '3434': '4343'})
2022-08-06 06:21:06.236 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.236 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.236 | DEBUG    | __main__:run_benchmark:432 - dfin.location.replace('United States', 'US')
2022-08-06 06:21:06.244 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.244 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:21:06.244 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].str.replace('United States', 'US').str.replace('3434', '4343')
2022-08-06 06:21:06.252 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:06.271 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:21:08.283 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 06:21:08.283 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('India', 'IN').str.replace('London', 'LON')
2022-08-06 06:21:08.292 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:08.292 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 06:21:08.292 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('India', 'IN').replace('London', 'LON')
2022-08-06 06:21:08.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:08.300 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 06:21:08.300 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('India', 'IN').str.replace('London', 'LON')
2022-08-06 06:21:08.307 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:08.307 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 06:21:08.308 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('India', 'IN').replace('London', 'LON')
2022-08-06 06:21:08.315 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:08.315 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 06:21:08.315 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('India', 'IN').replace('London', 'LON')
2022-08-06 06:21:08.323 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:08.323 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 06:21:08.323 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('India', 'IN').replace('London', 'LON')
2022-08-06 06:21:08.330 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:08.330 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 06:21:08.330 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('India', 'IN')
2022-08-06 06:21:08.338 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:08.338 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 06:21:08.338 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('India', 'IN').replace('London', 'LON')
2022-08-06 06:21:08.345 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:08.345 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 06:21:08.346 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('India', 'IN').replace('London', 'LON')
2022-08-06 06:21:08.353 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:21:08.353 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 06:21:08.353 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': {'India': 'IN'}, 'city': {'London': 'LON'}})
2022-08-06 06:21:08.363 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:21:08.381 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:21:10.205 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'London' in column 'city' with 'LON' and 'India' in column 'country' with 'IN'
2022-08-06 06:21:10.205 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'city': 'London', 'country': 'India'}, {'city': 'LON', 'country': 'IN'})
2022-08-06 06:21:10.217 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:21:10.402 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Replace 'London' in column 'city' with 'LON' and 'India' in column 'country' with 'IN'", 'user': 'u9'...
    │               └ {'queries': [{'query': "Replace 'London' in column 'city' with 'LON' and 'India' in column 'country' with 'IN'", 'user': 'u9'...
    └ {'query': "Replace 'London' in column 'city' with 'LON', and 'India' in column 'country' with 'IN'", 'user': 'u9'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Replace values "Ms" and "Mme" in the...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2a60c50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:21:10 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:21:10 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e2a0b750>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:21:10.409 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:21:40.561 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Replace 'London' in column 'city' with 'LON' and 'India' in column 'country' with 'IN'", 'user': 'u9'...
    │               └ {'queries': [{'query': "Replace 'London' in column 'city' with 'LON' and 'India' in column 'country' with 'IN'", 'user': 'u9'...
    └ {'query': "Replace 'London' in column 'city' with 'LON', and 'India' in column 'country' with 'IN'", 'user': 'u9'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Replace values "Ms" and "Mme" in the...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2a57dd0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:21:40 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:21:40 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e2a18bd0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:21:40.584 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:22:12.551 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'London' in column 'city' with 'LON', and 'India' in column 'country' with 'IN'
2022-08-06 06:22:12.552 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('India', 'IN')
2022-08-06 06:22:12.561 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:12.561 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'London' in column 'city' with 'LON', and 'India' in column 'country' with 'IN'
2022-08-06 06:22:12.561 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'city': 'London', 'country': 'India'}, {'city': 'LON', 'country': 'IN'})
2022-08-06 06:22:12.571 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:22:14.696 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values 'London' in column 'city' with 'LON', and values 'India' in column 'country' with 'IN'
2022-08-06 06:22:14.697 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'city': 'London', 'country': 'India'}, {'city': 'LON', 'country': 'IN'})
2022-08-06 06:22:14.709 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:22:16.759 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values 'London' in column 'city' with 'LON', and values 'India' in column 'country' with 'IN'. df name dfin
2022-08-06 06:22:16.759 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'city': 'London', 'country': 'India'}, {'city': 'LON', 'country': 'IN'})
2022-08-06 06:22:16.771 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:22:16.788 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:22:16.788 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:22:18.307 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.308 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:18.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.317 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.317 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': {'France': 'FR'}})
2022-08-06 06:22:18.327 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.328 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.328 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:22:18.335 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.335 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.335 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:18.342 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.342 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.342 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:22:18.350 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.350 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.350 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(inplace=True, to_replace='France', value='FR')
2022-08-06 06:22:18.357 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.357 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.357 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:18.364 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.364 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.365 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:18.372 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.372 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.372 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:18.379 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.379 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.379 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:18.387 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.387 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.387 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:18.394 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.394 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.394 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:22:18.401 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.402 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.402 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:18.409 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.409 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.409 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:18.416 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.416 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.416 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:22:18.424 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.424 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.424 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:22:18.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.431 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.431 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:18.438 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.439 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.439 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:22:18.446 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.446 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.446 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:22:18.453 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:18.453 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:22:18.453 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:22:18.461 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:19.917 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:19.918 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:19.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:19.927 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:19.927 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(inplace=True, to_replace='France', value='FR')
2022-08-06 06:22:19.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:19.934 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:19.934 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:19.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:19.942 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:19.942 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:22:19.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:19.949 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:19.949 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:22:19.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:19.956 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:19.956 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, {'country': 'FR'})
2022-08-06 06:22:19.967 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:19.967 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:19.967 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': {'France': 'FR'}})
2022-08-06 06:22:19.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:19.978 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:19.978 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:19.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:19.985 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:19.986 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:19.993 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:19.993 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:19.993 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(inplace=True, to_replace='France', value='FR')
2022-08-06 06:22:20.000 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:20.001 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:20.001 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:20.008 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:20.008 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:20.008 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:20.015 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:20.015 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:20.015 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:20.023 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:20.023 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:20.023 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:20.030 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:20.030 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:20.030 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:20.037 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:20.037 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:20.038 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:22:20.045 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:20.045 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:20.045 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:20.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:20.052 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:20.052 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 06:22:20.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:20.063 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:20.063 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:20.070 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:20.070 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:22:20.070 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:20.077 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.756 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.757 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 06:22:21.769 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.769 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.769 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 06:22:21.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.780 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.780 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:22:21.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.787 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.787 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR'})
2022-08-06 06:22:21.798 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.798 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.798 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(inplace=True, to_replace='France', value='FR')
2022-08-06 06:22:21.805 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.806 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.806 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 06:22:21.816 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.816 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.817 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR', inplace=True)
2022-08-06 06:22:21.824 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.824 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.824 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:21.831 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.831 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.831 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:22:21.838 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.839 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.839 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:22:21.846 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.846 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.846 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:22:21.853 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.853 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.854 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:22:21.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.861 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.861 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].apply((lambda x: (x.replace('France', 'FR') if ('France' in str(x)) else x)))
2022-08-06 06:22:21.868 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.869 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.869 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR', inplace=True)
2022-08-06 06:22:21.876 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.876 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.876 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(inplace=True, to_replace='France', value='FR')
2022-08-06 06:22:21.883 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.884 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.884 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:22:21.891 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.891 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.891 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:21.898 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.898 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.899 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:21.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.906 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.906 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:22:21.913 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:21.913 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:22:21.913 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:21.921 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.497 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.498 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:23.506 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.506 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.506 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:23.513 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.513 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.514 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:23.521 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.521 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.521 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:23.528 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.528 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.528 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:23.536 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.536 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.536 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:23.543 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.543 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.543 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(inplace=True, to_replace='France', value='FR')
2022-08-06 06:22:23.550 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.551 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.551 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:23.558 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.558 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.558 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:22:23.565 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.565 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.566 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:22:23.573 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.573 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.573 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:22:23.580 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.580 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.581 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace({'France': 'FR'})
2022-08-06 06:22:23.588 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.588 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.588 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:23.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.595 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.595 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:22:23.603 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.603 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.603 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:22:23.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.610 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.610 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:22:23.617 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.618 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.618 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:22:23.625 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.625 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.625 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].apply((lambda x: (x.replace('France', 'FR') if ('France' in str(x)) else x)))
2022-08-06 06:22:23.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.633 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.633 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:22:23.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:23.640 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:22:23.640 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 06:22:23.651 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:25.400 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column and 'Paris' with 'PAR' in city
2022-08-06 06:22:25.401 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France', 'city': 'Paris'}, {'country': 'FR', 'city': 'PAR'})
2022-08-06 06:22:25.413 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:22:25.432 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 06:22:25.432 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:22:25.432 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:22:25.432 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:22:25.432 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:22:25.432 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:22:26.715 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, sort the dataframe on the basis of column 'B'
2022-08-06 06:22:26.716 | DEBUG    | __main__:run_benchmark:432 - dfin.sort_values('B')
2022-08-06 06:22:26.725 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:22:26.743 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:22:26.743 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 06:22:26.743 | DEBUG    | __main__:run:509 - Number of Sets: 2
2022-08-06 06:22:26.743 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:22:26.743 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:22:28.236 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 06:22:28.237 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='name', columns='type', values='value')
2022-08-06 06:22:28.247 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:28.247 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 06:22:28.247 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(columns='date')
2022-08-06 06:22:28.260 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:28.260 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 06:22:28.260 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='name', columns='type', values='value')
2022-08-06 06:22:28.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:28.268 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 06:22:28.269 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='name', columns='type', values='value')
2022-08-06 06:22:28.277 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:28.277 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 06:22:28.277 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='name', columns='date')
2022-08-06 06:22:28.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:28.288 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 06:22:28.288 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='name', columns='type', values='value')
2022-08-06 06:22:28.296 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:28.296 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 06:22:28.296 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='name', columns='date', values='value')
2022-08-06 06:22:28.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:22:28.323 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 06:22:28.323 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:22:28.324 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:22:30.050 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' to numeric encoding
2022-08-06 06:22:30.051 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = pd.factorize(dfin['target'])[0]
2022-08-06 06:22:30.059 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:22:31.406 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' of dataframe 'dfin' to numeric encoding
2022-08-06 06:22:31.407 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = pd.factorize(dfin['target'])[0]
2022-08-06 06:22:31.444 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:22:31.474 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 06:22:33.396 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.397 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'])
2022-08-06 06:22:33.407 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.407 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.407 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:33.415 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.415 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.415 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'])
2022-08-06 06:22:33.423 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.423 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.424 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'], ordered=True)
2022-08-06 06:22:33.432 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.432 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.432 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:33.440 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.440 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.440 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'], ordered=True)
2022-08-06 06:22:33.448 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.448 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.448 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'].astype('category')
2022-08-06 06:22:33.457 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.457 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.457 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:33.465 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.465 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.465 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:33.473 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.473 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.474 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'].astype('category')
2022-08-06 06:22:33.482 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.482 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.482 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=dfin['goldLabel'].unique())
2022-08-06 06:22:33.490 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.490 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.490 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:33.498 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.498 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.499 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:33.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.507 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.507 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], ordered=False)
2022-08-06 06:22:33.515 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.515 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.515 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'].cat.categories
2022-08-06 06:22:33.516 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.517 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.517 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:33.525 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.525 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.525 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'])
2022-08-06 06:22:33.533 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.533 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.533 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:33.542 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.542 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.542 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:33.550 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:33.550 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:22:33.550 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:33.558 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.180 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.180 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:35.190 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.190 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.190 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:22:35.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.198 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.199 | DEBUG    | __main__:run_benchmark:432 - pd.Categorical(dfin['goldLabel'])
2022-08-06 06:22:35.206 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.207 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.207 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].asfactor()
2022-08-06 06:22:35.208 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.208 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.208 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:35.216 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.216 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.217 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:22:35.225 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.225 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.225 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:35.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.233 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.233 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'])
2022-08-06 06:22:35.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.241 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.242 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'].values)
2022-08-06 06:22:35.250 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.250 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.250 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], ordered=False)
2022-08-06 06:22:35.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.258 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.258 | DEBUG    | __main__:run_benchmark:432 - pd.Categorical.from_array(dfin['goldLabel'])
2022-08-06 06:22:35.259 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.259 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.260 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'])
2022-08-06 06:22:35.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.268 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.268 | DEBUG    | __main__:run_benchmark:432 - pd.Categorical(dfin['goldLabel'])
2022-08-06 06:22:35.276 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.276 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.276 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:35.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.284 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.284 | DEBUG    | __main__:run_benchmark:432 - pd.Categorical(dfin['goldLabel'])
2022-08-06 06:22:35.292 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.292 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.292 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:22:35.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.300 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.301 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:35.308 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.309 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.309 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:35.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.317 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.317 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:35.325 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:35.325 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:22:35.325 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=dfin['goldLabel'].unique())
2022-08-06 06:22:35.333 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:37.251 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:22:37.252 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:22:37.254 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:37.254 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:22:37.255 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:22:37.256 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:37.256 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:22:37.256 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].map({'class1': 0, 'class2': 1, 'class3': 2})
2022-08-06 06:22:37.264 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:22:38.854 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:22:38.855 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:22:38.856 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:38.857 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:22:38.857 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:22:38.858 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:38.858 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:22:38.858 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:22:38.859 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:38.859 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:22:38.859 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(preprocessing.LabelEncoder().fit_transform)
2022-08-06 06:22:38.860 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:38.861 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:22:38.861 | DEBUG    | __main__:run_benchmark:432 - labelEnc[i].fit_transform(dfin['goldLabel'])
2022-08-06 06:22:38.862 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:38.862 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:22:38.862 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:38.870 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:38.871 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:22:38.871 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].map({'class1': 0, 'class2': 1, 'class3': 2})
2022-08-06 06:22:38.878 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:22:40.751 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.752 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:40.761 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.761 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.761 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:40.769 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.769 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.769 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:40.777 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.778 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.778 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:40.786 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.786 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.786 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:40.794 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.794 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.795 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:40.803 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.803 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.803 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:40.811 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.811 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.811 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:40.819 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.819 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.820 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:40.828 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.828 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.828 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:40.836 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.836 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.836 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:40.844 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.845 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.845 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'].cat.set_categories(['class1', 'class2', 'class3'])
2022-08-06 06:22:40.846 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.846 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.846 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:40.854 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.854 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.855 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:40.863 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.863 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.863 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'])
2022-08-06 06:22:40.871 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.871 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.871 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=dfin['goldLabel'].unique())
2022-08-06 06:22:40.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.879 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.880 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:40.888 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.888 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.888 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:40.896 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.896 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.896 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:40.904 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:40.904 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:22:40.904 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:40.912 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.042 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.042 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:43.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.052 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.052 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:43.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.060 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.060 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:43.068 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.068 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.069 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:43.077 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.077 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.077 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:43.085 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.085 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.085 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:43.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.094 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.094 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:22:43.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.102 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.102 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:43.110 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.110 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.110 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:43.118 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.118 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.119 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:43.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.127 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.127 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:43.135 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.135 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.135 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:43.143 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.143 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.144 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:43.152 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.152 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.152 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'], ordered=True)
2022-08-06 06:22:43.160 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.160 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.160 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:43.168 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.168 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.169 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:43.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.177 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.177 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:43.185 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.185 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.185 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'].astype(pd.api.types.CategoricalDtype(categories=['class1', 'class2', 'class3']))
2022-08-06 06:22:43.193 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.194 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.194 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'], ordered=True)
2022-08-06 06:22:43.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:43.202 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:22:43.202 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:43.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.074 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.075 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:45.085 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.085 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.085 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=dfin['goldLabel'].unique())
2022-08-06 06:22:45.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.093 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.093 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:45.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.101 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.102 | DEBUG    | __main__:run_benchmark:432 - pd.Categorical(dfin['goldLabel'])
2022-08-06 06:22:45.109 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.110 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.110 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:45.118 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.118 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.118 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].asfactor()
2022-08-06 06:22:45.119 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.119 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.119 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'].values)
2022-08-06 06:22:45.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.128 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.128 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:22:45.136 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.136 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.136 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:45.144 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.144 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.144 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:22:45.152 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.153 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.153 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:45.161 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.161 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.161 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:22:45.169 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.169 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.169 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:45.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.178 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.178 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:45.186 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.186 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.186 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:22:45.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.194 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.194 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'].astype('category')
2022-08-06 06:22:45.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.203 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.203 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:45.211 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.211 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.211 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical.from_array(dfin['goldLabel'])
2022-08-06 06:22:45.212 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.212 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.213 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:45.221 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:45.221 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:22:45.221 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'])
2022-08-06 06:22:45.229 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:46.933 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:46.934 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:46.944 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:46.944 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:46.944 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:22:46.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:46.945 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:46.945 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].apply(categorical)
2022-08-06 06:22:46.946 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:46.947 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:46.947 | DEBUG    | __main__:run_benchmark:432 - pd.Categorical(dfin['goldLabel'])
2022-08-06 06:22:46.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:46.955 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:46.955 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:46.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:46.963 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:46.963 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:46.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:46.971 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:46.972 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'])
2022-08-06 06:22:46.980 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:46.980 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:46.980 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:22:46.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:46.988 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:46.988 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:46.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:46.996 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:46.997 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].asfactor()
2022-08-06 06:22:46.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:46.998 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:46.998 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'])
2022-08-06 06:22:47.006 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:47.006 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:47.006 | DEBUG    | __main__:run_benchmark:432 - pd.Categorical(dfin['goldLabel'], ordered=False)
2022-08-06 06:22:47.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:47.014 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:47.015 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:47.023 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:47.023 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:47.023 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:47.031 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:47.031 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:47.031 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:47.039 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:47.040 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:47.040 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:47.048 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:47.048 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:47.048 | DEBUG    | __main__:run_benchmark:432 - pd.Categorical(dfin['goldLabel'])
2022-08-06 06:22:47.056 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:47.056 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:47.057 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:47.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:47.065 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:47.065 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:22:47.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:47.073 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:22:47.073 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].apply(categorical)
2022-08-06 06:22:47.074 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:47.094 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:22:48.721 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.722 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].asfactor()
2022-08-06 06:22:48.724 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.725 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.725 | DEBUG    | __main__:run_benchmark:432 - pd.Categorical(dfin['labels'])
2022-08-06 06:22:48.733 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.733 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.733 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = pd.Categorical(dfin['labels'])
2022-08-06 06:22:48.742 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.742 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.742 | DEBUG    | __main__:run_benchmark:432 - pd.get_dummies(data=dfin, drop_first=True)
2022-08-06 06:22:48.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.754 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.754 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:22:48.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.762 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.762 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:22:48.770 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.771 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.771 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:22:48.779 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.779 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.779 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:22:48.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.787 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.787 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = pd.Categorical(dfin['labels'])
2022-08-06 06:22:48.795 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.796 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.796 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:22:48.804 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.804 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.804 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = pd.Categorical(dfin['labels'])
2022-08-06 06:22:48.812 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.812 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.813 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:22:48.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.821 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.821 | DEBUG    | __main__:run_benchmark:432 - pd.factorize(dfin['labels'])
2022-08-06 06:22:48.829 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.829 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.829 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:22:48.837 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.837 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.837 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:22:48.845 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.845 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.846 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = pd.Categorical(dfin['labels'])
2022-08-06 06:22:48.854 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.854 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.854 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = pd.Categorical(dfin['labels'])
2022-08-06 06:22:48.862 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.862 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.862 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:22:48.870 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.870 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.870 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:22:48.878 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:48.879 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:22:48.879 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:22:48.887 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:50.690 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 06:22:50.691 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].apply(preprocessing.LabelEncoder().fit_transform)
2022-08-06 06:22:50.693 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:50.693 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 06:22:50.693 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].map({'class_a': 0, 'class_b': 1, 'class_c': 2})
2022-08-06 06:22:50.701 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:22:52.373 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.373 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:22:52.374 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.374 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.374 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 06:22:52.375 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.376 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.376 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:22:52.393 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.393 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.393 | DEBUG    | __main__:run_benchmark:432 - #  Return a DataFrame with the "labels" column encoded by LabelEncoder
2022-08-06 06:22:52.394 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.394 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.394 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:22:52.394 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.394 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.394 | DEBUG    | __main__:run_benchmark:432 - labelEnc = LabelEncoder()
2022-08-06 06:22:52.396 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.396 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.396 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].apply(preprocessing.LabelEncoder().fit_transform)
2022-08-06 06:22:52.398 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.398 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.398 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:22:52.398 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.399 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.399 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 06:22:52.400 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.400 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.400 | DEBUG    | __main__:run_benchmark:432 - le = preprocessing.LabelEncoder()
2022-08-06 06:22:52.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.402 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.402 | DEBUG    | __main__:run_benchmark:432 - from sklearn.preprocessing import LabelEncoder
2022-08-06 06:22:52.411 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.411 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.411 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = LabelEncoder().fit_transform(dfin['labels'])
2022-08-06 06:22:52.413 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.413 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.413 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:22:52.413 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.413 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.413 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 06:22:52.414 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.414 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.414 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 06:22:52.416 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.416 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.416 | DEBUG    | __main__:run_benchmark:432 - LabelEncoder().fit_transform(dfin['labels'])
2022-08-06 06:22:52.417 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.417 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.417 | DEBUG    | __main__:run_benchmark:432 - label.transform(dfin['labels'])
2022-08-06 06:22:52.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.418 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.418 | DEBUG    | __main__:run_benchmark:432 - enc_x[0].transform(dfin['labels'])
2022-08-06 06:22:52.419 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.419 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.419 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:22:52.428 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:52.428 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:22:52.428 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:22:52.428 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.175 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.175 | DEBUG    | __main__:run_benchmark:432 - for i, label in enumerate(dfin['labels']):
2022-08-06 06:22:54.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.177 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.177 | DEBUG    | __main__:run_benchmark:432 - for i, label in enumerate(dfin['labels']):
2022-08-06 06:22:54.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.177 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.177 | DEBUG    | __main__:run_benchmark:432 - for i, label in enumerate(dfin['labels']):
2022-08-06 06:22:54.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.178 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.178 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(enumerate, 1)
2022-08-06 06:22:54.186 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.187 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.187 | DEBUG    | __main__:run_benchmark:432 - for i, label in enumerate(dfin['labels']):
2022-08-06 06:22:54.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.187 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.187 | DEBUG    | __main__:run_benchmark:432 - for index, value in dfin.iterrows():
2022-08-06 06:22:54.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.187 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.187 | DEBUG    | __main__:run_benchmark:432 - for i, label in enumerate(dfin['labels']):
2022-08-06 06:22:54.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.188 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.188 | DEBUG    | __main__:run_benchmark:432 - for i, v in enumerate(dfin['labels']):
2022-08-06 06:22:54.188 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.188 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.188 | DEBUG    | __main__:run_benchmark:432 - for i, label in enumerate(dfin['labels']):
2022-08-06 06:22:54.188 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.188 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.188 | DEBUG    | __main__:run_benchmark:432 - for i, v in enumerate(dfin['labels']):
2022-08-06 06:22:54.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.189 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.189 | DEBUG    | __main__:run_benchmark:432 - for i, v in enumerate(dfin['labels']):
2022-08-06 06:22:54.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.189 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.189 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].unique()
2022-08-06 06:22:54.197 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.197 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.197 | DEBUG    | __main__:run_benchmark:432 - for i, label in enumerate(dfin['labels']):
2022-08-06 06:22:54.197 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.197 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.198 | DEBUG    | __main__:run_benchmark:432 - for i, v in dfin['labels'].items():
2022-08-06 06:22:54.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.198 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.198 | DEBUG    | __main__:run_benchmark:432 - for i, v in dfin['labels'].iteritems():
2022-08-06 06:22:54.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.198 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.198 | DEBUG    | __main__:run_benchmark:432 - for index, value in dfin['labels'].items():
2022-08-06 06:22:54.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.199 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.199 | DEBUG    | __main__:run_benchmark:432 - for index, value in dfin.iterrows():
2022-08-06 06:22:54.199 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.199 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.199 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].apply(enumerate)
2022-08-06 06:22:54.207 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:54.207 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:22:54.207 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].map({'class_a': 0, 'class_b': 1, 'class_c': 2})
2022-08-06 06:22:54.215 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:22:54.238 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 06:22:55.743 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.744 | DEBUG    | __main__:run_benchmark:432 - #  store the result in a new column called 'GoldTarget_encoded'
2022-08-06 06:22:55.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.745 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.746 | DEBUG    | __main__:run_benchmark:432 - #  use the following code as a guide
2022-08-06 06:22:55.746 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.747 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.748 | DEBUG    | __main__:run_benchmark:432 - #  use the following code as a guide
2022-08-06 06:22:55.748 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.749 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.750 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.get_dummies(dfin['GoldTarget'])
2022-08-06 06:22:55.758 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.758 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.759 | DEBUG    | __main__:run_benchmark:432 - #  use the following code as a guide
2022-08-06 06:22:55.760 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.761 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.761 | DEBUG    | __main__:run_benchmark:432 - #  use the following code as a guide
2022-08-06 06:22:55.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.762 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.763 | DEBUG    | __main__:run_benchmark:432 - #  use the following code as a guide
2022-08-06 06:22:55.764 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.764 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.765 | DEBUG    | __main__:run_benchmark:432 - #  store the result in a new column 'GoldTarget_encoded'
2022-08-06 06:22:55.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.766 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.767 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin['GoldTarget'])
2022-08-06 06:22:55.790 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.790 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.791 | DEBUG    | __main__:run_benchmark:432 - #  prepend the column names with 'GoldTarget'
2022-08-06 06:22:55.791 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.791 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.791 | DEBUG    | __main__:run_benchmark:432 - #  store the result in a new dataframe called 'dfout'
2022-08-06 06:22:55.791 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.792 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.792 | DEBUG    | __main__:run_benchmark:432 - #  use the following code as a guide
2022-08-06 06:22:55.792 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.792 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.793 | DEBUG    | __main__:run_benchmark:432 - #  use the following code as a guide
2022-08-06 06:22:55.793 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.793 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.793 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = encoders[cat].transform(dfin['GoldTarget'])
2022-08-06 06:22:55.795 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.795 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.796 | DEBUG    | __main__:run_benchmark:432 - #  store the result in a new dataframe called 'dfout'
2022-08-06 06:22:55.796 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.796 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.796 | DEBUG    | __main__:run_benchmark:432 - #  store the result in a variable called 'one_hot_encoded'
2022-08-06 06:22:55.796 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.797 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.797 | DEBUG    | __main__:run_benchmark:432 - #  use the following code example as a guide to write code for the comment below
2022-08-06 06:22:55.797 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.797 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.797 | DEBUG    | __main__:run_benchmark:432 - #  store the result in a dataframe called 'dfout'
2022-08-06 06:22:55.798 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.798 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.798 | DEBUG    | __main__:run_benchmark:432 - #  use the following code as a guide
2022-08-06 06:22:55.798 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:55.798 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:22:55.798 | DEBUG    | __main__:run_benchmark:432 - #  use the following code as a guide
2022-08-06 06:22:55.799 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.538 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.538 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:22:57.577 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.578 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.578 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'])
2022-08-06 06:22:57.593 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.593 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.593 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'], ordered=False)
2022-08-06 06:22:57.604 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.604 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.604 | DEBUG    | __main__:run_benchmark:432 - pd.Categorical(dfin['GoldTarget'])
2022-08-06 06:22:57.613 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.613 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.613 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical.from_array(dfin['GoldTarget'])
2022-08-06 06:22:57.614 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.614 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.614 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'].astype('category', inplace=True)
2022-08-06 06:22:57.615 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.616 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.616 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:22:57.624 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.624 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.624 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'], categories=dfin['GoldTarget'].unique())
2022-08-06 06:22:57.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.632 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.632 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:22:57.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.641 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.641 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:22:57.649 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.649 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.649 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:22:57.657 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.657 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.657 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:22:57.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.666 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.666 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:22:57.674 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.674 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.674 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:22:57.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.682 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.682 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:22:57.690 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.690 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.690 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'])
2022-08-06 06:22:57.698 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.699 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.699 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:22:57.707 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.707 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.707 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'], categories=['classA', 'classB', 'classC'])
2022-08-06 06:22:57.715 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.715 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.715 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'].values)
2022-08-06 06:22:57.723 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:57.723 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:22:57.723 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:22:57.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:59.554 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' in 'dfin' to numeric codes
2022-08-06 06:22:59.554 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Series(preprocessing.LabelEncoder().fit(dfin['GoldTarget']).transform(dfin['GoldTarget']))
2022-08-06 06:22:59.556 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:22:59.556 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' in 'dfin' to numeric codes
2022-08-06 06:22:59.557 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.factorize(dfin['GoldTarget'].values)[0]
2022-08-06 06:22:59.570 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:23:01.376 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 06:23:01.377 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category').cat.codes
2022-08-06 06:23:01.385 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:23:02.994 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to numeric codes
2022-08-06 06:23:02.995 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Series(preprocessing.LabelEncoder().fit(dfin['GoldTarget']).transform(dfin['GoldTarget']))
2022-08-06 06:23:02.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:02.998 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to numeric codes
2022-08-06 06:23:02.998 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.factorize(dfin['GoldTarget'].values)[0]
2022-08-06 06:23:03.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:23:04.494 | DEBUG    | __main__:run_benchmark:431 - Query: encode values in 'GoldTarget' column to numeric
2022-08-06 06:23:04.494 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].map({'classA': 0, 'classB': 1, 'classC': 2})
2022-08-06 06:23:04.502 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:23:06.238 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.239 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype(np.number)
2022-08-06 06:23:06.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.241 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.241 | DEBUG    | __main__:run_benchmark:432 - pd.to_numeric(dfin['GoldTarget'].values)
2022-08-06 06:23:06.242 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.242 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.243 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].apply(pd.to_numeric, errors='coerce')
2022-08-06 06:23:06.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.251 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.251 | DEBUG    | __main__:run_benchmark:432 - pd.to_numeric(dfin['GoldTarget'])
2022-08-06 06:23:06.252 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.252 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.252 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 06:23:06.253 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.254 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.254 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 06:23:06.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.255 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.255 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype(int)
2022-08-06 06:23:06.256 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.256 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.256 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype(np.float64)
2022-08-06 06:23:06.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.258 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.258 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 06:23:06.259 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.259 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.259 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('int64')
2022-08-06 06:23:06.260 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.260 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.261 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].convert_objects(convert_numeric=True)
2022-08-06 06:23:06.262 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.262 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.262 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'], errors='coerce')
2022-08-06 06:23:06.270 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.270 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.270 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype(np.float64)
2022-08-06 06:23:06.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.271 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.271 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype(np.float32)
2022-08-06 06:23:06.273 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.273 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.273 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 06:23:06.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.274 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.274 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 06:23:06.276 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.276 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.276 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].apply(pd.to_numeric)
2022-08-06 06:23:06.277 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.277 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.277 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype(np.float64)
2022-08-06 06:23:06.279 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.279 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.279 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype(np.float)
2022-08-06 06:23:06.280 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:06.280 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:23:06.280 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 06:23:06.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:07.771 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to category and encode to numeric
2022-08-06 06:23:07.772 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:23:07.812 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:07.812 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to category and encode to numeric
2022-08-06 06:23:07.812 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:23:07.828 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:07.828 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to category and encode to numeric
2022-08-06 06:23:07.828 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:23:07.839 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:07.839 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to category and encode to numeric
2022-08-06 06:23:07.839 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category').cat.codes
2022-08-06 06:23:07.847 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:23:07.868 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:23:10.083 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'Label' with integers
2022-08-06 06:23:10.084 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'class1': 0, 'class2': 1, 'class3': 2})
2022-08-06 06:23:10.095 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:23:10.277 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "replace 'Label' with integers", 'user': 'u7'}, {'query': "replace string in 'Label' with encoded inte...
    │               └ {'queries': [{'query': "replace 'Label' with integers", 'user': 'u7'}, {'query': "replace string in 'Label' with encoded inte...
    └ {'query': "Replace 'Label' with categorical numbers", 'user': 'u7'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a series containing the value...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2a1b210>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:23:10 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:23:10 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e1f0da50>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:23:10.303 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:23:42.146 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 06:23:42.147 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:23:42.156 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:42.156 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 06:23:42.156 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:23:42.164 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:42.164 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 06:23:42.165 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'].replace({'class1': 1, 'class2': 2, 'class3': 3})
2022-08-06 06:23:42.173 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:42.173 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 06:23:42.173 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'].replace(list(dfin['Label'].unique()), range(0, len(list(dfin['Label'].unique()))))
2022-08-06 06:23:42.181 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:42.181 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 06:23:42.181 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:23:42.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:42.189 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 06:23:42.190 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:23:42.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:42.198 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 06:23:42.198 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:23:42.206 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:42.206 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 06:23:42.206 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = pd.Categorical(dfin['Label'])
2022-08-06 06:23:42.214 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:42.215 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 06:23:42.215 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].map({'class1': 0, 'class2': 1, 'class3': 2})
2022-08-06 06:23:42.222 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:23:43.763 | DEBUG    | __main__:run_benchmark:431 - Query: Replace strings in 'Label' with categorical numbers
2022-08-06 06:23:43.764 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].map({'class1': 0, 'class2': 1, 'class3': 2})
2022-08-06 06:23:43.772 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:23:45.289 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:23:45.289 | DEBUG    | __main__:run_benchmark:432 - label = LabelEncoderExt()
2022-08-06 06:23:45.292 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:45.292 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:23:45.292 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:23:45.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:45.301 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:23:45.301 | DEBUG    | __main__:run_benchmark:432 - labelEnc = []
2022-08-06 06:23:45.308 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:45.308 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:23:45.309 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:23:45.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:45.317 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:23:45.317 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:23:45.325 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:45.325 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:23:45.326 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:23:45.334 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:45.334 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:23:45.334 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:23:45.342 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:45.342 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:23:45.342 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:23:45.350 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:45.350 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:23:45.351 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:23:45.359 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:45.359 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:23:45.359 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:23:45.367 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:45.367 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:23:45.367 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category').cat.codes
2022-08-06 06:23:45.375 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:23:45.395 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 06:23:45.395 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:23:45.395 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 06:23:46.955 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:46.955 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 06:23:46.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:46.958 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:46.958 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:46.961 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:46.961 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:46.961 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:23:46.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:46.964 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:46.964 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:46.966 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:46.966 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:46.966 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=0)
2022-08-06 06:23:46.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:46.969 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:46.969 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 06:23:46.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:46.971 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:46.971 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:46.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:46.973 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:46.974 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:46.976 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:46.976 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:46.976 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:46.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:46.978 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:46.978 | DEBUG    | __main__:run_benchmark:432 - len(dfin[['inp1', 'inp2', 'inp3']].drop_duplicates())
2022-08-06 06:23:46.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:46.981 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:46.981 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:46.983 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:46.983 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:46.983 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:46.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:46.985 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:46.986 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:46.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:46.988 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:46.988 | DEBUG    | __main__:run_benchmark:432 - dfin.index.value_counts()
2022-08-06 06:23:46.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:46.990 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:46.990 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:46.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:46.992 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:46.992 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=1)
2022-08-06 06:23:46.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:46.995 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:46.995 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:23:46.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:46.998 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:46.998 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:47.000 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:47.000 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:47.000 | DEBUG    | __main__:run_benchmark:432 - len(dfin.groupby(list(dfin.columns)).size())
2022-08-06 06:23:47.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:47.003 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:23:47.003 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:47.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:48.716 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:48.716 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique() - dfin.count()
2022-08-06 06:23:48.721 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:48.722 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:48.722 | DEBUG    | __main__:run_benchmark:432 - #  to get the number of rows with duplicates
2022-08-06 06:23:48.722 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:48.722 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:48.722 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:48.725 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:48.725 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:48.725 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:48.727 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:48.727 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:48.727 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:48.730 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:48.730 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:48.730 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:48.732 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:48.733 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:48.733 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:48.735 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:48.735 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:48.736 | DEBUG    | __main__:run_benchmark:432 - #  This will give the count of duplicate rows in the dataframe
2022-08-06 06:23:48.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:48.736 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:48.736 | DEBUG    | __main__:run_benchmark:432 - #  this will give us the number of duplicates in the dataframe
2022-08-06 06:23:48.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:48.736 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:48.736 | DEBUG    | __main__:run_benchmark:432 - #  This will give the number of duplicate rows in the dataframe
2022-08-06 06:23:48.737 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:48.737 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:48.737 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:48.739 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:48.739 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:48.740 | DEBUG    | __main__:run_benchmark:432 - #  This will give us the count of duplicate rows in the dataframe
2022-08-06 06:23:48.740 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:48.740 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:48.740 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:23:48.740 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:48.740 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:48.740 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:23:48.741 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:23:50.407 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:50.408 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby('inp1').count() - dfin.groupby('inp1').nunique()
2022-08-06 06:23:50.415 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:50.416 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:50.416 | DEBUG    | __main__:run_benchmark:432 - dfin['target'].value_counts(normalize=True)
2022-08-06 06:23:50.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:50.418 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:50.418 | DEBUG    | __main__:run_benchmark:432 - #  This will give us the number of rows with unique values in each column
2022-08-06 06:23:50.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:50.418 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:50.418 | DEBUG    | __main__:run_benchmark:432 - #  This will give the number of rows with missing values
2022-08-06 06:23:50.419 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:50.419 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:50.419 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:50.421 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:50.421 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:50.421 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:50.423 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:50.423 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:50.423 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:50.425 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:50.426 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:50.426 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:50.428 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:50.428 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:50.428 | DEBUG    | __main__:run_benchmark:432 - #  this will give the number of duplicates in the dataframe
2022-08-06 06:23:50.428 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:50.428 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:50.428 | DEBUG    | __main__:run_benchmark:432 - #  This will give the number of duplicates in the dataframe
2022-08-06 06:23:50.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:50.429 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:50.429 | DEBUG    | __main__:run_benchmark:432 - #  This will give the number of duplicates in the dataframe
2022-08-06 06:23:50.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:50.429 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:50.429 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:23:50.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:50.429 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:50.430 | DEBUG    | __main__:run_benchmark:432 - #  This will give the number of duplicate rows in the dataframe
2022-08-06 06:23:50.430 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:50.430 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:50.430 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:23:50.432 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:50.433 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:50.433 | DEBUG    | __main__:run_benchmark:432 - #  This will give the number of duplicates in the dataframe
2022-08-06 06:23:50.433 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:50.433 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 06:23:50.433 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:23:50.434 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:23:52.335 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.336 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().count() - dfin.count()
2022-08-06 06:23:52.358 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.359 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.359 | DEBUG    | __main__:run_benchmark:432 - #  assign the value to variable 'dup_rows'
2022-08-06 06:23:52.359 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.360 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.360 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().count() - dfin.count()
2022-08-06 06:23:52.371 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.371 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.371 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().count() - dfin.count()
2022-08-06 06:23:52.378 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.379 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.379 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 06:23:52.382 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.382 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.382 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:23:52.382 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.383 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.383 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 06:23:52.386 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.386 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.386 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 06:23:52.389 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.389 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.389 | DEBUG    | __main__:run_benchmark:432 - #  this will give the number of rows that are duplicates
2022-08-06 06:23:52.389 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.389 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.389 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 06:23:52.392 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.392 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.392 | DEBUG    | __main__:run_benchmark:432 - #  drop duplicate rows from dataframe 'dfin'
2022-08-06 06:23:52.392 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.392 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.392 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().count() - dfin.count()
2022-08-06 06:23:52.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.397 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.397 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:23:52.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.397 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.398 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().count() - dfin.count()
2022-08-06 06:23:52.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.402 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.402 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:23:52.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.402 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.402 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:23:52.403 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.403 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.403 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False).count()
2022-08-06 06:23:52.406 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.406 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.406 | DEBUG    | __main__:run_benchmark:432 - #  divide the result by total number of rows in 'dfin'
2022-08-06 06:23:52.407 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.407 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.407 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False).shape[0] - dfin.shape[0]
2022-08-06 06:23:52.409 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:52.409 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:23:52.410 | DEBUG    | __main__:run_benchmark:432 - #  This is the number of rows that will be used to calculate the percent change
2022-08-06 06:23:52.410 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.248 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.249 | DEBUG    | __main__:run_benchmark:432 - dfin['count'] = dfin.groupby(dfin.index).cumcount()
2022-08-06 06:23:54.252 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.252 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.252 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).size()
2022-08-06 06:23:54.254 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.255 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.255 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['inp1', 'inp2', 'inp3']).size()
2022-08-06 06:23:54.257 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.257 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.257 | DEBUG    | __main__:run_benchmark:432 - dfin['count'] = dfin.groupby(dfin.index).cumcount()
2022-08-06 06:23:54.259 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.260 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.260 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['inp1', 'inp2', 'inp3']).size()
2022-08-06 06:23:54.262 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.262 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.262 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).size()
2022-08-06 06:23:54.264 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.264 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.264 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['inp1', 'inp2', 'inp3']).size()
2022-08-06 06:23:54.266 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.266 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.267 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(pd.value_counts)
2022-08-06 06:23:54.277 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.277 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.278 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['inp1', 'inp2', 'inp3']).size()
2022-08-06 06:23:54.280 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.280 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.280 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).size()
2022-08-06 06:23:54.282 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.282 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.282 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).size()
2022-08-06 06:23:54.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.284 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.285 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).size()
2022-08-06 06:23:54.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.287 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.287 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['inp1', 'inp2', 'inp3']).size().reset_index(name='counts')
2022-08-06 06:23:54.292 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.292 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.292 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['inp1', 'inp2', 'inp3']).size()
2022-08-06 06:23:54.294 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.294 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.294 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['inp1', 'inp2', 'inp3']).size()
2022-08-06 06:23:54.296 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.297 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.297 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby('target').count()
2022-08-06 06:23:54.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.301 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.301 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['inp1', 'inp2', 'inp3']).size()
2022-08-06 06:23:54.303 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.303 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.303 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).size()
2022-08-06 06:23:54.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.305 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.305 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).count()
2022-08-06 06:23:54.312 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:54.312 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:23:54.312 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['inp1', 'inp2', 'inp3']).size().reset_index(name='counts')
2022-08-06 06:23:54.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.051 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.051 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).cumcount()
2022-08-06 06:23:56.055 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.055 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.055 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['inp1', 'inp2', 'inp3']).size()
2022-08-06 06:23:56.057 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.058 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.058 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).size()
2022-08-06 06:23:56.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.060 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.060 | DEBUG    | __main__:run_benchmark:432 - #  Hint: use the groupby method
2022-08-06 06:23:56.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.060 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.060 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).size()
2022-08-06 06:23:56.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.063 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.063 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['inp1', 'inp2', 'inp3']).size()
2022-08-06 06:23:56.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.065 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.065 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(list(dfin.columns)).size()
2022-08-06 06:23:56.068 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.069 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.069 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby('target').count()
2022-08-06 06:23:56.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.073 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.073 | DEBUG    | __main__:run_benchmark:432 - dfin.index.value_counts()
2022-08-06 06:23:56.075 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.075 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.075 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).size()
2022-08-06 06:23:56.078 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.078 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.078 | DEBUG    | __main__:run_benchmark:432 - pd.value_counts(dfin.values.ravel())
2022-08-06 06:23:56.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.080 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.080 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).size()
2022-08-06 06:23:56.082 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.082 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.082 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).size()
2022-08-06 06:23:56.085 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.085 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.085 | DEBUG    | __main__:run_benchmark:432 - Counter(dfin)
2022-08-06 06:23:56.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.086 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.086 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['inp1', 'inp2', 'inp3']).size()
2022-08-06 06:23:56.088 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.088 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.088 | DEBUG    | __main__:run_benchmark:432 - dfin.count()
2022-08-06 06:23:56.091 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.091 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.091 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(pd.value_counts)
2022-08-06 06:23:56.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.102 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.102 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['inp1', 'inp2', 'inp3']).size()
2022-08-06 06:23:56.104 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.104 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.105 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(pd.value_counts)
2022-08-06 06:23:56.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:56.115 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:23:56.115 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['inp1', 'inp2', 'inp3']).size()
2022-08-06 06:23:56.118 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:57.687 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of duplicates in dataframe dfin
2022-08-06 06:23:57.688 | DEBUG    | __main__:run_benchmark:432 - len(dfin[dfin.duplicated()])
2022-08-06 06:23:57.690 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:23:59.472 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 06:23:59.473 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.duplicated()].sum().sum()
2022-08-06 06:23:59.478 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:23:59.478 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 06:23:59.478 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:23:59.479 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:24:01.237 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of duplicates in dataframe dfin and add them
2022-08-06 06:24:01.238 | DEBUG    | __main__:run_benchmark:432 - dfin['inp1'].duplicated().sum()
2022-08-06 06:24:01.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:24:02.615 | DEBUG    | __main__:run_benchmark:431 - Query: number of duplicate rows in 'dfin' table; number of True values
2022-08-06 06:24:02.616 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:24:02.618 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:24:02.640 | DEBUG    | __main__:run:515 - Number of queries: 22
2022-08-06 06:24:04.070 | DEBUG    | __main__:run_benchmark:431 - Query: Find the number of duplicate rows in dataframe 'dfin'
2022-08-06 06:24:04.071 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:24:04.072 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:24:05.460 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.461 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 06:24:05.464 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.464 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.464 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 06:24:05.467 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.467 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.467 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:24:05.469 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.469 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.470 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=0)
2022-08-06 06:24:05.472 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.472 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.472 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 06:24:05.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.475 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.475 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:24:05.477 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.477 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.477 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:24:05.479 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.479 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.479 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:24:05.482 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.482 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.482 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:24:05.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.484 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.484 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:24:05.486 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.486 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.486 | DEBUG    | __main__:run_benchmark:432 - len(dfin[['f1', 'f2', 'f3']].drop_duplicates())
2022-08-06 06:24:05.489 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.489 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.489 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:24:05.491 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.491 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.491 | DEBUG    | __main__:run_benchmark:432 - print(dfin.nunique())
2022-08-06 06:24:05.492 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.nunique()

2022-08-06 06:24:05.493 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.nunique()

2022-08-06 06:24:05.494 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.494 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.495 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:24:05.497 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.497 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.497 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:24:05.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.500 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.500 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(pd.Series.nunique, axis=1)
2022-08-06 06:24:05.502 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.502 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.503 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=1)
2022-08-06 06:24:05.505 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.505 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.506 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:24:05.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.508 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.508 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:24:05.510 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:05.510 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 06:24:05.511 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:24:05.513 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:06.488 | DEBUG    | __main__:run_benchmark:431 - Query: How many rows in dataframe 'dfin' are dupliate
2022-08-06 06:24:06.489 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:24:06.491 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:24:08.058 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.059 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:24:08.062 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.062 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.062 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 06:24:08.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.065 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.065 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:24:08.067 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.067 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.068 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:24:08.070 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.070 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.070 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:24:08.072 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.072 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.073 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 06:24:08.075 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.075 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.075 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:24:08.077 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.077 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.078 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:24:08.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.080 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.080 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:24:08.082 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.082 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.083 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:24:08.085 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.085 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.085 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['f1', 'f2', 'f3']).size().reset_index(name='counts')
2022-08-06 06:24:08.090 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.091 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.091 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:24:08.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.093 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.094 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:24:08.096 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.096 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.096 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:24:08.098 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.099 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.099 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:24:08.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.101 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.101 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:24:08.104 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.104 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.104 | DEBUG    | __main__:run_benchmark:432 - len(dfin[['f1', 'f2', 'f3']].drop_duplicates())
2022-08-06 06:24:08.106 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.106 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.107 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:24:08.109 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.109 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.109 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:24:08.111 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:08.112 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:24:08.112 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=0)
2022-08-06 06:24:08.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:10.331 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and number of unique rows
2022-08-06 06:24:10.332 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum() - dfin.shape[0]
2022-08-06 06:24:10.335 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:10.335 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and number of unique rows
2022-08-06 06:24:10.335 | DEBUG    | __main__:run_benchmark:432 - (dfin.shape[0] - dfin.drop_duplicates().shape[0])
2022-08-06 06:24:10.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:24:11.573 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and unique number of rows
2022-08-06 06:24:11.574 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique() - dfin.shape[0]
2022-08-06 06:24:11.577 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:11.578 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and unique number of rows
2022-08-06 06:24:11.578 | DEBUG    | __main__:run_benchmark:432 - (len(dfin) - len(dfin.drop_duplicates()))
2022-08-06 06:24:11.579 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:24:13.263 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and number of 'unique rows'
2022-08-06 06:24:13.264 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:24:13.267 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:24:14.415 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and number of distinct rows
2022-08-06 06:24:14.416 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.drop_duplicates().shape[0]
2022-08-06 06:24:14.417 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:24:16.110 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.110 | DEBUG    | __main__:run_benchmark:432 - #  in df
2022-08-06 06:24:16.111 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.112 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.112 | DEBUG    | __main__:run_benchmark:432 - #  in df1 and df2
2022-08-06 06:24:16.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.112 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.113 | DEBUG    | __main__:run_benchmark:432 - #  in df1 where "Zip" is not in "Zip_Code" in "df2"
2022-08-06 06:24:16.113 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.113 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.113 | DEBUG    | __main__:run_benchmark:432 - #  in df1 where ImageId is not in df2
2022-08-06 06:24:16.113 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.113 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.113 | DEBUG    | __main__:run_benchmark:432 - #  in df after drop_duplicates
2022-08-06 06:24:16.113 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.113 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.114 | DEBUG    | __main__:run_benchmark:432 - #  in df1 and df2
2022-08-06 06:24:16.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.114 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.114 | DEBUG    | __main__:run_benchmark:432 - #  in df
2022-08-06 06:24:16.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.114 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.114 | DEBUG    | __main__:run_benchmark:432 - (dfin.drop_duplicates().shape[0] - dfin.shape[0])
2022-08-06 06:24:16.117 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.117 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.117 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 06:24:16.119 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.120 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.120 | DEBUG    | __main__:run_benchmark:432 - #  in df2
2022-08-06 06:24:16.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.120 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.120 | DEBUG    | __main__:run_benchmark:432 - (len(dfin.drop_duplicates()) - len(dfin))
2022-08-06 06:24:16.122 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.123 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.123 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=dfin.columns[1:]).shape[0] - dfin.shape[0]
2022-08-06 06:24:16.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.125 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.125 | DEBUG    | __main__:run_benchmark:432 - #  in original dataframe
2022-08-06 06:24:16.126 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.126 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.126 | DEBUG    | __main__:run_benchmark:432 - #  in df
2022-08-06 06:24:16.126 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.126 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.126 | DEBUG    | __main__:run_benchmark:432 - #  in the dataframe
2022-08-06 06:24:16.126 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.126 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.126 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 06:24:16.129 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.129 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.129 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 06:24:16.131 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.132 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.132 | DEBUG    | __main__:run_benchmark:432 - #  in original dataframe
2022-08-06 06:24:16.132 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.132 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.132 | DEBUG    | __main__:run_benchmark:432 - #  in the original dataframe
2022-08-06 06:24:16.132 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.132 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:24:16.132 | DEBUG    | __main__:run_benchmark:432 - #  in df
2022-08-06 06:24:16.132 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:16.156 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:24:17.681 | DEBUG    | __main__:run_benchmark:431 - Query: find number of duplicate rows in dfin
2022-08-06 06:24:17.682 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:24:17.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:24:18.631 | DEBUG    | __main__:run_benchmark:431 - Query: find count of duplicate rows in dfin
2022-08-06 06:24:18.632 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:24:18.634 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:24:20.201 | DEBUG    | __main__:run_benchmark:431 - Query: find number of non unique rows in the table
2022-08-06 06:24:20.202 | DEBUG    | __main__:run_benchmark:432 - len(dfin[['ftr1', 'ftr2', 'ftr3']].drop_duplicates())
2022-08-06 06:24:20.205 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:20.205 | DEBUG    | __main__:run_benchmark:431 - Query: find number of non unique rows in the table
2022-08-06 06:24:20.206 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr1'].nunique(dropna=False)
2022-08-06 06:24:20.207 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:20.207 | DEBUG    | __main__:run_benchmark:431 - Query: find number of non unique rows in the table
2022-08-06 06:24:20.207 | DEBUG    | __main__:run_benchmark:432 - #  Hint: use the drop_duplicates() method
2022-08-06 06:24:20.207 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:20.207 | DEBUG    | __main__:run_benchmark:431 - Query: find number of non unique rows in the table
2022-08-06 06:24:20.208 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:24:20.209 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:24:21.878 | DEBUG    | __main__:run_benchmark:431 - Query: find number of rows which occur more than once in the table
2022-08-06 06:24:21.879 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:24:21.881 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:24:21.906 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:24:22.070 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Count the number of repeated rows', 'user': 'u9'}, {'query': 'Count the number of duplicate rows', 'u...
    │               └ {'queries': [{'query': 'Count the number of repeated rows', 'user': 'u9'}, {'query': 'Count the number of duplicate rows', 'u...
    └ {'query': 'Drop the duplicate rows in dfin', 'user': 'u9'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Drop all duplicate rows in "df" and ...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e1efa090>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:24:22 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:24:22 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e1f1e290>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:24:22.096 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:24:53.622 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.623 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 06:24:53.631 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.631 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.631 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:24:53.633 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.634 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.634 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:24:53.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.641 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.641 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:24:53.647 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.647 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.647 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, keep='first')
2022-08-06 06:24:53.649 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.650 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.650 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:24:53.652 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.652 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.652 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:24:53.659 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.659 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.659 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:24:53.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.666 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.666 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:24:53.673 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.673 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.673 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:24:53.679 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.679 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.679 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:24:53.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.686 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.686 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:24:53.693 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.693 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.693 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:24:53.699 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.700 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.700 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 06:24:53.708 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.709 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.709 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 06:24:53.715 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.716 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.716 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:24:53.718 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.718 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.718 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 06:24:53.726 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.726 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.726 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:24:53.733 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.733 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.733 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:24:53.739 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:53.740 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:24:53.740 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:24:53.747 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.016 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.017 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape
2022-08-06 06:24:55.020 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.020 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.021 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False).shape
2022-08-06 06:24:55.023 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.023 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.023 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape
2022-08-06 06:24:55.025 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.026 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.026 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape
2022-08-06 06:24:55.028 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.028 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.028 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:24:55.030 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.031 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.031 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:24:55.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.033 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.033 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:24:55.035 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.036 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.036 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:24:55.038 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.038 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.038 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:24:55.040 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.040 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.041 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:24:55.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.043 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.043 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:24:55.045 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.045 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.046 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:24:55.048 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.048 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.048 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 06:24:55.051 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.051 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.051 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape
2022-08-06 06:24:55.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.053 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.054 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:24:55.057 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.057 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.057 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:24:55.061 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.061 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.061 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False).shape
2022-08-06 06:24:55.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.064 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.064 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:24:55.066 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.066 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.067 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:24:55.069 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:55.069 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:24:55.069 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:24:55.071 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:56.199 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows
2022-08-06 06:24:56.199 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:24:56.201 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:24:57.245 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.246 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:24:57.247 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.248 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.248 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:24:57.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.250 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.250 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:24:57.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.251 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.252 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:24:57.253 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.253 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.254 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:24:57.254 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.255 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.256 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:24:57.256 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.257 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.257 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:24:57.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.259 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.259 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:24:57.260 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.260 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.261 | DEBUG    | __main__:run_benchmark:432 - df.duplicated().sum()
2022-08-06 06:24:57.267 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.268 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.269 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated(keep=False).sum()
2022-08-06 06:24:57.279 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.280 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.280 | DEBUG    | __main__:run_benchmark:432 - df.duplicated().sum()
2022-08-06 06:24:57.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.284 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.284 | DEBUG    | __main__:run_benchmark:432 - def count_dups(df):
2022-08-06 06:24:57.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.285 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.285 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:24:57.286 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.286 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.286 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:24:57.286 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.287 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.287 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:24:57.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.287 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.288 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:24:57.288 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.288 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.288 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:24:57.289 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.289 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.289 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:24:57.289 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.289 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.289 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:24:57.290 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:57.290 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:24:57.290 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:24:57.290 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:58.599 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 06:24:58.600 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.duplicated()].sum()
2022-08-06 06:24:58.604 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:58.604 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 06:24:58.605 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:24:58.605 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:58.605 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 06:24:58.605 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:24:58.605 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:58.605 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 06:24:58.605 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:24:58.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:24:58.631 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:24:59.988 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:24:59.989 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, keep=False)
2022-08-06 06:24:59.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:24:59.993 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:24:59.993 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 06:24:59.999 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:00.000 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:25:00.000 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:25:00.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:00.003 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:25:00.003 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:25:00.010 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:00.010 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:25:00.010 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:25:00.017 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:00.017 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:25:00.017 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:25:00.023 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:00.024 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:25:00.024 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:25:00.030 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:00.031 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:25:00.031 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(inplace=True)
2022-08-06 06:25:00.032 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:00.032 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:25:00.032 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:25:00.039 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:00.039 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:25:00.039 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:25:00.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:00.046 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:25:00.046 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:25:00.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:00.053 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:25:00.053 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:25:00.059 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:00.060 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:25:00.060 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:25:00.066 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:00.067 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:25:00.067 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:25:00.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:00.073 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:25:00.074 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:25:00.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:00.080 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:25:00.080 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:25:00.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:00.087 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:25:00.087 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:25:00.094 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:00.094 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:25:00.094 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:25:00.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:00.101 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:25:00.101 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:25:00.107 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:00.108 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:25:00.108 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:25:00.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:01.526 | DEBUG    | __main__:run_benchmark:431 - Query: return the number of duplicate rows
2022-08-06 06:25:01.527 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.duplicated()].shape[0]
2022-08-06 06:25:01.528 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:25:03.326 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - unique rows
2022-08-06 06:25:03.326 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.nunique().sum()
2022-08-06 06:25:03.329 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:03.329 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - unique rows
2022-08-06 06:25:03.329 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'].nunique() - dfin['GoldTarget'].count()
2022-08-06 06:25:03.330 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:03.330 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - unique rows
2022-08-06 06:25:03.330 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.nunique()
2022-08-06 06:25:03.333 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:03.333 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - unique rows
2022-08-06 06:25:03.333 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:25:03.334 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:25:04.782 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - duplicate rows
2022-08-06 06:25:04.783 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin[dfin.duplicated()].shape[0]
2022-08-06 06:25:04.786 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:04.787 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - duplicate rows
2022-08-06 06:25:04.787 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin[dfin.duplicated()].shape[0]
2022-08-06 06:25:04.789 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:04.789 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - duplicate rows
2022-08-06 06:25:04.789 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.duplicated().sum()
2022-08-06 06:25:04.791 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:04.791 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - duplicate rows
2022-08-06 06:25:04.792 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:25:04.793 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:25:04.979 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Count number of duplicate rows', 'user': 'u5'}, {'query': 'output number of duplicate rows in dfin', ...
    │               └ {'queries': [{'query': 'Count number of duplicate rows', 'user': 'u5'}, {'query': 'output number of duplicate rows in dfin', ...
    └ {'query': 'return total rows of dfin - unique rows of dfin', 'user': 'u16'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return the sum of unique values acro...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e1f167d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:25:04 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:25:04 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e1f1fa90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:25:05.004 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:25:36.695 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows of dfin - unique rows of dfin
2022-08-06 06:25:36.696 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.nunique().sum()
2022-08-06 06:25:36.699 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:36.699 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows of dfin - unique rows of dfin
2022-08-06 06:25:36.699 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.drop_duplicates().shape[0]
2022-08-06 06:25:36.701 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:25:38.096 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows of 'dfin' - unique rows of 'dfin'
2022-08-06 06:25:38.096 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.nunique().sum()
2022-08-06 06:25:38.098 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:38.098 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows of 'dfin' - unique rows of 'dfin'
2022-08-06 06:25:38.099 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin['GoldTarget'].nunique()
2022-08-06 06:25:38.100 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:38.100 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows of 'dfin' - unique rows of 'dfin'
2022-08-06 06:25:38.100 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.drop_duplicates().shape[0]
2022-08-06 06:25:38.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:25:39.582 | DEBUG    | __main__:run_benchmark:431 - Query: return number of nonunique rows
2022-08-06 06:25:39.583 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 06:25:39.586 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:39.587 | DEBUG    | __main__:run_benchmark:431 - Query: return number of nonunique rows
2022-08-06 06:25:39.587 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:25:39.588 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:25:41.084 | DEBUG    | __main__:run_benchmark:431 - Query: return length - length of drop duplicates
2022-08-06 06:25:41.085 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False, subset=dfin.columns[1:]).shape[0] - dfin.shape[0]
2022-08-06 06:25:41.089 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:41.089 | DEBUG    | __main__:run_benchmark:431 - Query: return length - length of drop duplicates
2022-08-06 06:25:41.089 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 06:25:41.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:41.092 | DEBUG    | __main__:run_benchmark:431 - Query: return length - length of drop duplicates
2022-08-06 06:25:41.092 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=dfin.columns[1:]).shape[0] - dfin.shape[0]
2022-08-06 06:25:41.094 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:41.094 | DEBUG    | __main__:run_benchmark:431 - Query: return length - length of drop duplicates
2022-08-06 06:25:41.094 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 06:25:41.097 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:41.097 | DEBUG    | __main__:run_benchmark:431 - Query: return length - length of drop duplicates
2022-08-06 06:25:41.097 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.drop_duplicates().shape[0]
2022-08-06 06:25:41.098 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:25:42.472 | DEBUG    | __main__:run_benchmark:431 - Query: return length of din - length of drop duplicates of dfin
2022-08-06 06:25:42.472 | DEBUG    | __main__:run_benchmark:432 - len(dfin) - len(dfin.drop_duplicates())
2022-08-06 06:25:42.475 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:25:43.977 | DEBUG    | __main__:run_benchmark:431 - Query: find the number of repeated columns in 'dfin'
2022-08-06 06:25:43.978 | DEBUG    | __main__:run_benchmark:432 - dfin.columns.duplicated().sum()
2022-08-06 06:25:43.980 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:43.981 | DEBUG    | __main__:run_benchmark:431 - Query: find the number of repeated columns in 'dfin'
2022-08-06 06:25:43.981 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated(subset=['inputA', 'inputB', 'inputC']).sum()
2022-08-06 06:25:43.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:25:44.005 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 06:25:44.006 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 06:25:44.006 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:25:45.655 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.656 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 06:25:45.710 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:45.710 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.711 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 06:25:45.732 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:45.732 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.733 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 06:25:45.752 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:45.752 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.752 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['f2'], keep='first')
2022-08-06 06:25:45.771 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:45.771 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.771 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset='f2')
2022-08-06 06:25:45.785 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:45.785 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.785 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset=['f2'])
2022-08-06 06:25:45.799 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:45.799 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.799 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset='f2')
2022-08-06 06:25:45.813 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:45.813 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.814 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset='f2', keep='first')
2022-08-06 06:25:45.827 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:45.827 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.828 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset=['f2'])
2022-08-06 06:25:45.841 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:45.841 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.842 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset='f2')
2022-08-06 06:25:45.855 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:45.856 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.856 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['f2'], keep='first', inplace=True)
2022-08-06 06:25:45.870 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:45.870 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.870 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['f2'], keep='first')
2022-08-06 06:25:45.889 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:45.889 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.889 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset=['f2'])
2022-08-06 06:25:45.903 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:45.903 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.903 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 06:25:45.922 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:45.922 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.922 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2', keep='first')
2022-08-06 06:25:45.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:45.941 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.941 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset=['f2'])
2022-08-06 06:25:45.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:45.955 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.956 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2', keep='first', inplace=True)
2022-08-06 06:25:45.969 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:45.970 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.970 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset='f2')
2022-08-06 06:25:45.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:45.984 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:45.984 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['f2'])
2022-08-06 06:25:46.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:46.003 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:25:46.003 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 06:25:46.022 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:46.045 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:25:47.802 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, drop all rows that are duplicated for column 'feat2' and keep the last occurence unmarked
2022-08-06 06:25:47.803 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='feat2', inplace=True, keep='last')
2022-08-06 06:25:47.812 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:25:47.836 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:25:49.605 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 06:25:49.606 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 06:25:49.626 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:49.626 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 06:25:49.626 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset=['inputB'])
2022-08-06 06:25:49.639 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:25:49.639 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 06:25:49.639 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset ='inputB', keep = False, inplace = True)
2022-08-06 06:25:49.647 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:25:49.837 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "remove rows where element of column 'inputB' is not unique", 'user': 'u5'}, {'query': "remove rows wh...
    │               └ {'queries': [{'query': "remove rows where element of column 'inputB' is not unique", 'user': 'u5'}, {'query': "remove rows wh...
    └ {'query': "remove rows where values in 'inputB' are duplicates", 'user': 'u14'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Drop duplicate rows from "series"\ns...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2a1c950>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:25:49 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:25:49 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e1f1f290>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:25:49.843 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:26:21.374 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 06:26:21.375 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:26:21.394 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:21.394 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 06:26:21.394 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 06:26:21.412 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:21.412 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 06:26:21.412 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[~dfin['inputB'].duplicated()]
2022-08-06 06:26:21.425 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:21.425 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 06:26:21.425 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:26:21.443 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:21.444 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 06:26:21.444 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB', inplace=True)
2022-08-06 06:26:21.457 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:21.457 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 06:26:21.457 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:26:21.475 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:21.476 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 06:26:21.476 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, subset='inputB')
2022-08-06 06:26:21.489 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:21.489 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 06:26:21.489 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first', subset='inputB')
2022-08-06 06:26:21.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:21.508 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 06:26:21.508 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first', subset='inputB')
2022-08-06 06:26:21.526 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:21.526 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 06:26:21.527 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep='first')
2022-08-06 06:26:21.545 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:21.545 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 06:26:21.545 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[~dfin['inputB'].duplicated(keep=False)]
2022-08-06 06:26:21.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:26:23.023 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:26:23.023 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep='first', inplace=True)
2022-08-06 06:26:23.037 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:23.037 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:26:23.037 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 06:26:23.056 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:23.056 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:26:23.056 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:26:23.074 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:23.074 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:26:23.075 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB', keep='first')
2022-08-06 06:26:23.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:23.093 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:26:23.094 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 06:26:23.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:23.112 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:26:23.112 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep='first')
2022-08-06 06:26:23.130 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:23.131 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:26:23.131 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 06:26:23.149 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:23.149 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:26:23.149 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep='first')
2022-08-06 06:26:23.168 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:23.168 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:26:23.168 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, (~ dfin.columns.duplicated())]
2022-08-06 06:26:23.186 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:23.186 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:26:23.186 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset ="inputB", keep = False, inplace = True)
2022-08-06 06:26:23.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:26:24.452 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB' without keeping first
2022-08-06 06:26:24.453 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='inputB', keep='first', inplace=True)
2022-08-06 06:26:24.456 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:24.456 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB' without keeping first
2022-08-06 06:26:24.457 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep='first')
2022-08-06 06:26:24.475 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:24.475 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB' without keeping first
2022-08-06 06:26:24.475 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB', keep=False)
2022-08-06 06:26:24.485 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:26:25.896 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB' dont keep first or last
2022-08-06 06:26:25.897 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep=False, inplace=True)
2022-08-06 06:26:25.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:26:25.931 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:26:27.596 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:26:27.597 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:26:27.616 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:27.617 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:26:27.617 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:26:27.635 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:27.635 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:26:27.635 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:26:27.653 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:27.654 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:26:27.654 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:26:27.672 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:27.672 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:26:27.672 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', inplace=True)
2022-08-06 06:26:27.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:27.686 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:26:27.686 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', inplace=True)
2022-08-06 06:26:27.699 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:27.699 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:26:27.699 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first')
2022-08-06 06:26:27.717 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:27.718 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:26:27.718 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:26:27.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:27.736 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:26:27.736 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 06:26:27.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:27.755 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:26:27.755 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 06:26:27.773 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:27.773 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:26:27.773 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first', inplace=True)
2022-08-06 06:26:27.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:27.787 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:26:27.787 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 06:26:27.806 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:27.807 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:26:27.807 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 06:26:27.826 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:27.826 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:26:27.827 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first', inplace=True)
2022-08-06 06:26:27.840 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:27.840 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:26:27.840 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, keep=False, subset='inp2')
2022-08-06 06:26:27.848 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:26:29.581 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:26:29.581 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first')
2022-08-06 06:26:29.600 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:29.600 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:26:29.600 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'], keep=False)
2022-08-06 06:26:29.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:26:30.853 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:30.854 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first')
2022-08-06 06:26:30.874 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:30.874 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:30.874 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 06:26:30.892 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:30.892 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:30.893 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:26:30.911 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:30.911 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:30.911 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', inplace=True)
2022-08-06 06:26:30.924 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:30.924 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:30.925 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:26:30.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:30.943 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:30.943 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, subset='inp2')
2022-08-06 06:26:30.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:30.957 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:30.957 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset = ['inp2'])
2022-08-06 06:26:30.975 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:30.975 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:30.975 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:26:30.993 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:30.993 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:30.994 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', inplace=True, keep='first')
2022-08-06 06:26:31.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:31.007 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:31.007 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 06:26:31.025 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:31.026 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:31.026 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 06:26:31.044 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:31.044 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:31.044 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first')
2022-08-06 06:26:31.062 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:31.062 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:31.063 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:26:31.081 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:31.081 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:31.081 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:26:31.099 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:31.099 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:31.100 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:26:31.118 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:31.118 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:31.118 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:26:31.136 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:31.137 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:31.137 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset = ['inp2'])
2022-08-06 06:26:31.155 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:31.155 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:31.155 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 06:26:31.173 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:31.173 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:31.174 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:26:31.192 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:31.192 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:26:31.192 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:26:31.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:31.237 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 06:26:31.237 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:26:31.237 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:26:32.878 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:32.878 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin['f1'] > 10, 10)
2022-08-06 06:26:32.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:32.890 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:32.890 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:32.898 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:32.898 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:32.898 | DEBUG    | __main__:run_benchmark:432 - dfin.mask((dfin < 10), 10)
2022-08-06 06:26:32.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:32.909 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:32.909 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:32.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:32.917 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:32.917 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin['f1'] > 10, 10)
2022-08-06 06:26:32.928 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:32.928 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:32.928 | DEBUG    | __main__:run_benchmark:432 - dfin['f1'].map((lambda x: (10 if (x < 10) else x)))
2022-08-06 06:26:32.935 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:32.936 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:32.936 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:32.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:32.943 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:32.943 | DEBUG    | __main__:run_benchmark:432 - #  In dataframe 'dfin' change values larger than 20 to 20
2022-08-06 06:26:32.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:32.944 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:32.944 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:32.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:32.951 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:32.951 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:32.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:32.959 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:32.959 | DEBUG    | __main__:run_benchmark:432 - dfin['f1'].apply((lambda x: (10 if (x < 10) else x)))
2022-08-06 06:26:32.966 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:32.966 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:32.967 | DEBUG    | __main__:run_benchmark:432 - np.where((dfin < 10), 10, dfin)
2022-08-06 06:26:32.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:32.975 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:32.975 | DEBUG    | __main__:run_benchmark:432 - dfin['f1'].map((lambda x: (10 if (x < 10) else x)))
2022-08-06 06:26:32.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:32.982 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:32.983 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:32.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:32.990 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:32.990 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin['f1'] >= 10, 10)
2022-08-06 06:26:33.002 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:33.002 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:33.002 | DEBUG    | __main__:run_benchmark:432 - dfin['f1'].apply((lambda x: (10 if (x < 10) else x)))
2022-08-06 06:26:33.010 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:33.010 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:33.010 | DEBUG    | __main__:run_benchmark:432 - dfin['f1'].apply((lambda x: (10 if (x < 10) else x)))
2022-08-06 06:26:33.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:33.018 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:33.018 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:33.025 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:33.026 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:33.026 | DEBUG    | __main__:run_benchmark:432 - #  In dataframe 'dfin' change values larger than 20 to 20
2022-08-06 06:26:33.026 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:33.026 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:26:33.026 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin['f1'] >= 10, 10, inplace=True)
2022-08-06 06:26:33.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:34.872 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:34.872 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:34.881 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:34.881 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:34.881 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:34.888 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:34.888 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:34.889 | DEBUG    | __main__:run_benchmark:432 - np.where((dfin < 10), 10, dfin)
2022-08-06 06:26:34.896 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:34.896 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:34.896 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin['f1'] >= 10, 10)
2022-08-06 06:26:34.907 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:34.907 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:34.907 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:34.915 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:34.915 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:34.915 | DEBUG    | __main__:run_benchmark:432 - dfin.mask((dfin < 10), 10)
2022-08-06 06:26:34.926 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:34.926 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:34.926 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:34.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:34.933 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:34.934 | DEBUG    | __main__:run_benchmark:432 - dfin['f1'].map((lambda x: (10 if (x < 10) else x)))
2022-08-06 06:26:34.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:34.941 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:34.941 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin['f1'] >= 10, 10)
2022-08-06 06:26:34.952 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:34.952 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:34.953 | DEBUG    | __main__:run_benchmark:432 - dfin['f1'].map((lambda x: (10) if (x < 10) else x))
2022-08-06 06:26:34.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:34.960 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:34.960 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin['f1'] > 10, 10)
2022-08-06 06:26:34.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:34.971 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:34.971 | DEBUG    | __main__:run_benchmark:432 - #  Replace values greater than 20 to 20
2022-08-06 06:26:34.972 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:34.972 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:34.972 | DEBUG    | __main__:run_benchmark:432 - dfin['f1'].apply((lambda x: (10 if (x < 10) else x)))
2022-08-06 06:26:34.979 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:34.979 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:34.979 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:34.986 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:34.987 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:34.987 | DEBUG    | __main__:run_benchmark:432 - dfin.apply((lambda x: (10 if (x < 10) else x)))
2022-08-06 06:26:34.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:34.988 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:34.988 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:34.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:34.995 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:34.995 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin['f1'] > 10, 10)
2022-08-06 06:26:35.006 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:35.006 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:35.007 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:35.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:35.014 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:35.014 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin > 10, 10)
2022-08-06 06:26:35.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:35.025 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:26:35.025 | DEBUG    | __main__:run_benchmark:432 - dfin['f1'].apply((lambda x: (10 if (x < 10) else x)))
2022-08-06 06:26:35.032 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.508 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.509 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:36.518 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.518 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.518 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:36.525 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.525 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.526 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:36.533 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.533 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.533 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:26:36.540 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.541 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.541 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:36.548 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.548 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.548 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:26:36.555 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.555 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.556 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:26:36.563 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.563 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.563 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:26:36.571 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.571 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.571 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['f1'] < 10)] = 10
2022-08-06 06:26:36.578 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.578 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.578 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:26:36.586 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.586 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.586 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:26:36.593 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.593 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.593 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin > 10).dropna()
2022-08-06 06:26:36.602 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.602 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.602 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:26:36.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.610 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.610 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:36.617 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.617 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.617 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:36.624 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.624 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.625 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:26:36.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.632 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.632 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:36.639 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.640 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.640 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:36.647 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.647 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.647 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:36.655 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:36.655 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:26:36.655 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:26:36.662 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:38.115 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'f2' in dataframe 'dfin' set values that are smaller than 10 to 10 inplace
2022-08-06 06:26:38.115 | DEBUG    | __main__:run_benchmark:432 - dfin['f2'].clip_lower(10, inplace=True)
2022-08-06 06:26:38.117 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:38.117 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'f2' in dataframe 'dfin' set values that are smaller than 10 to 10 inplace
2022-08-06 06:26:38.117 | DEBUG    | __main__:run_benchmark:432 - dfin['f2'].where(dfin['f2'] > 10, 10, inplace=True)
2022-08-06 06:26:38.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:26:38.152 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 06:26:39.682 | DEBUG    | __main__:run_benchmark:431 - Query: if "ftr2" value is less than 5 then change it to 5 and return all rows
2022-08-06 06:26:39.682 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['ftr2'] < 5, 'ftr2'] = 5
2022-08-06 06:26:39.690 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:26:41.259 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.260 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=5 if val>5
2022-08-06 06:26:41.261 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.261 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.261 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (5 if (x < 5) else x)))
2022-08-06 06:26:41.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.269 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.269 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (x if (x < 5) else 5)))
2022-08-06 06:26:41.277 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.277 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.278 | DEBUG    | __main__:run_benchmark:432 - dfin['ft2'].mask(dfin['ft2'] < 5, 5)
2022-08-06 06:26:41.279 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.279 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.279 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=0 if val<5
2022-08-06 06:26:41.279 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.279 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.279 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].where(dfin['ftr2'] < 5, 5)
2022-08-06 06:26:41.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.287 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.288 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.288 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.288 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.288 | DEBUG    | __main__:run_benchmark:432 - dfin.ft2.mask(dfin.ft2 < 5, 5)
2022-08-06 06:26:41.289 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.289 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.289 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=0 if val>5
2022-08-06 06:26:41.289 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.289 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.290 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=12 if val>5
2022-08-06 06:26:41.290 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.290 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.290 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (x if (x < 5) else (x * 1.0))))
2022-08-06 06:26:41.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.298 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.298 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (5 if (x < 5) else x)))
2022-08-06 06:26:41.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.305 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.305 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=5 if val>5
2022-08-06 06:26:41.306 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.306 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.306 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (5 if (x < 5) else x)))
2022-08-06 06:26:41.314 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.314 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.314 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=12 if val>5
2022-08-06 06:26:41.314 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.314 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.314 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (1 if (x < 5) else x)))
2022-08-06 06:26:41.322 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.322 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.322 | DEBUG    | __main__:run_benchmark:432 - #  return val
2022-08-06 06:26:41.322 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.322 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.323 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=0 if val<5
2022-08-06 06:26:41.323 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.323 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.323 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=5 if val>5
2022-08-06 06:26:41.323 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:41.323 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:26:41.323 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=5 if val>5
2022-08-06 06:26:41.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:42.811 | DEBUG    | __main__:run_benchmark:431 - Query: if val of "ftr2" <5 then val=5
2022-08-06 06:26:42.812 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (5 if (x < 5) else x)))
2022-08-06 06:26:42.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:42.821 | DEBUG    | __main__:run_benchmark:431 - Query: if val of "ftr2" <5 then val=5
2022-08-06 06:26:42.821 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'] = np.where((dfin['ftr2'] < 5), 5, dfin['ftr2'])
2022-08-06 06:26:42.829 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:26:42.855 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:26:44.639 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, if 'feat2' is greater than 10, replace the cell value to 10
2022-08-06 06:26:44.639 | DEBUG    | __main__:run_benchmark:432 - #  If 'feat2' is less than -10, replace the cell value to -10
2022-08-06 06:26:44.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:44.641 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, if 'feat2' is greater than 10, replace the cell value to 10
2022-08-06 06:26:44.641 | DEBUG    | __main__:run_benchmark:432 - #  If 'feat2' is less than 10, replace the cell value to -10
2022-08-06 06:26:44.641 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:44.641 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, if 'feat2' is greater than 10, replace the cell value to 10
2022-08-06 06:26:44.641 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['feat2'] > 10, 'feat2'] = 10
2022-08-06 06:26:44.649 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:26:45.848 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, if 'feat2' is greater than 10 replace the cell value to 10
2022-08-06 06:26:45.849 | DEBUG    | __main__:run_benchmark:432 - #  If 'feat2' is less than -10 replace the cell value to -10
2022-08-06 06:26:45.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:45.850 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, if 'feat2' is greater than 10 replace the cell value to 10
2022-08-06 06:26:45.850 | DEBUG    | __main__:run_benchmark:432 - #  If 'feat2' is less than 10, replace the cell value to 0
2022-08-06 06:26:45.851 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:45.852 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, if 'feat2' is greater than 10 replace the cell value to 10
2022-08-06 06:26:45.852 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['feat2'] > 10, 'feat2'] = 10
2022-08-06 06:26:45.887 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:26:45.922 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 06:26:47.229 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.230 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.241 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.242 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.252 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.252 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.253 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.263 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.263 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.274 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.274 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.284 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.285 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.295 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.295 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.295 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.306 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.306 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.306 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.316 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.317 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.317 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.327 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.327 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.327 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.338 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.338 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.338 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.349 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.349 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.349 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.359 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.360 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.360 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.370 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.370 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.370 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.381 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.381 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.381 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.391 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.392 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.392 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.402 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.402 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.413 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.413 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.413 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.423 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.423 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.424 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.434 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.434 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:26:47.434 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:26:47.445 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:26:47.469 | DEBUG    | __main__:run:515 - Number of queries: 25
2022-08-06 06:26:47.626 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "replace elements that are greater than 0 with 0 in column 'inputB'", 'user': 'u5'}, {'query': "replac...
    │               └ {'queries': [{'query': "replace elements that are greater than 0 with 0 in column 'inputB'", 'user': 'u5'}, {'query': "replac...
    └ {'query': 'Set inputB=0 if inputB<0', 'user': 'u16'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a series containing the "Tick...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e2a93090>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:26:47 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:26:47 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e1ef3710>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:26:47.652 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:27:19.305 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.306 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].mask(dfin['inputB'] < 0, 0)
2022-08-06 06:27:19.314 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.315 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.315 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] < 0, 0, dfin['inputB'])
2022-08-06 06:27:19.322 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.322 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.322 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply((lambda x: (0 if (x < 0) else x)))
2022-08-06 06:27:19.330 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.330 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.330 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply((lambda x: (0 if (x < 0) else x)))
2022-08-06 06:27:19.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.338 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.338 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where((dfin['inputB'] < 0), 0, dfin['inputB'])
2022-08-06 06:27:19.345 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.345 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.345 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'].apply((lambda x: (0 if (x < 0) else x)))
2022-08-06 06:27:19.353 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.353 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.353 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where((dfin['inputB'] < 0), 0, dfin['inputB'])
2022-08-06 06:27:19.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.361 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.361 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where((dfin['inputB'] < 0), 0, dfin['inputB'])
2022-08-06 06:27:19.368 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.368 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.368 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'].map((lambda x: (0 if (x < 0) else x)))
2022-08-06 06:27:19.376 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.376 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.376 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] < 0, 0, dfin['inputB'])
2022-08-06 06:27:19.384 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.384 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.384 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] < 0, 0, dfin['inputB'])
2022-08-06 06:27:19.391 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.391 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.391 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'].apply((lambda x: (0 if (x < 0) else x)))
2022-08-06 06:27:19.399 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.399 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.399 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply(lambda x: 0 if x < 0 else x)
2022-08-06 06:27:19.406 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.406 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.406 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] < 0, 0, dfin['inputB'])
2022-08-06 06:27:19.414 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.414 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.414 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'].apply((lambda x: (x if (x > 0) else 0)))
2022-08-06 06:27:19.421 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.421 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.422 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] < 0, 0, dfin['inputB'])
2022-08-06 06:27:19.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.429 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.429 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].where(dfin['inputB'] >= 0, 0)
2022-08-06 06:27:19.437 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.437 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.437 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] < 0, 0, dfin['inputB'])
2022-08-06 06:27:19.444 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.444 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.444 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] < 0, 0, dfin['inputB'])
2022-08-06 06:27:19.452 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:19.452 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:27:19.452 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply(lambda x: 0 if x < 0 else x)
2022-08-06 06:27:19.459 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:21.351 | DEBUG    | __main__:run_benchmark:431 - Query: 'inputB' = 0 if 'inputB' > 0 in dfin
2022-08-06 06:27:21.352 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] > 0, 0, dfin['inputB'])
2022-08-06 06:27:21.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:27:21.386 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 06:27:21.386 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 06:27:21.386 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:27:23.215 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-06 06:27:23.216 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin.eq('-')].any(1), inplace=True)
2022-08-06 06:27:23.221 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:23.221 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-06 06:27:23.222 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '-')].index)
2022-08-06 06:27:23.239 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:23.239 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-06 06:27:23.240 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.index[dfin.isin(['-']).any(axis=1)])
2022-08-06 06:27:23.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:27:24.798 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:24.799 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 06:27:24.822 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:24.822 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:24.822 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 06:27:24.844 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:24.844 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:24.844 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin.astype(str) == '-')]
2022-08-06 06:27:24.868 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:24.868 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:24.868 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'].str.contains('-')]
2022-08-06 06:27:24.871 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:24.871 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:24.871 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] == '-']
2022-08-06 06:27:24.893 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:24.894 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:24.894 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'].str.contains('-', case=False)]
2022-08-06 06:27:24.896 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:24.897 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:24.897 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin.iloc[:, 2] == '-')]
2022-08-06 06:27:24.919 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:24.919 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:24.919 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['B'] == '-')]
2022-08-06 06:27:24.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:24.941 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:24.941 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-')]
2022-08-06 06:27:24.965 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:24.965 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:24.965 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['B'].str.contains('-') == True)]
2022-08-06 06:27:24.987 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:24.988 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:24.988 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['B'] == '-')]
2022-08-06 06:27:25.010 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:25.010 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:25.010 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-')]
2022-08-06 06:27:25.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:25.033 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:25.033 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 06:27:25.055 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:25.055 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:25.055 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] == '-']
2022-08-06 06:27:25.077 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:25.077 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:25.077 | DEBUG    | __main__:run_benchmark:432 - dfin.query('B == "-")')
2022-08-06 06:27:25.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:25.081 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:25.081 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 06:27:25.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:25.103 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:25.103 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 06:27:25.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:25.125 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:25.125 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 06:27:25.147 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:25.147 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:25.147 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 06:27:25.169 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:25.169 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:27:25.169 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] == '-']
2022-08-06 06:27:25.191 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.374 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.374 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin.iloc[:, 2] == '-')]
2022-08-06 06:27:27.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.398 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.398 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin({'A': '-', 'B': '-', 'C': '-', 'D': '-'}).any(axis=1)]
2022-08-06 06:27:27.400 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.400 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.401 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin({'A': ['-', 0], 'B': ['-', 0], 'C': ['-', 0], 'D': ['-', 0]}).any(axis=1)]
2022-08-06 06:27:27.425 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.425 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.426 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 06:27:27.448 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.448 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.448 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin.isin(['-']).any(axis=1))]
2022-08-06 06:27:27.470 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.470 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.470 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 06:27:27.492 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.493 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.493 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 06:27:27.515 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.515 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.515 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 06:27:27.537 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.537 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.538 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin({'A': '-', 'B': '-', 'C': '-', 'D': '-'}).any(axis=1)]
2022-08-06 06:27:27.540 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.540 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.540 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 06:27:27.562 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.563 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.563 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])]
2022-08-06 06:27:27.586 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.586 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.586 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 06:27:27.608 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.608 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.609 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 06:27:27.631 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.631 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.631 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.isin(['-']).any(axis=1)]
2022-08-06 06:27:27.653 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.653 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.653 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 06:27:27.676 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.676 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.676 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 06:27:27.698 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.698 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.699 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 06:27:27.721 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.721 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.721 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 06:27:27.743 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.743 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.744 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 06:27:27.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:27.766 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:27:27.766 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])]
2022-08-06 06:27:27.789 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.418 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.419 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index)
2022-08-06 06:27:29.443 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.443 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.443 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:29.466 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.466 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.466 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:29.489 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.489 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.489 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index)
2022-08-06 06:27:29.511 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.512 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.512 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(~ (dfin['B'] == '-'))]
2022-08-06 06:27:29.528 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.528 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.528 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:29.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.553 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.553 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:29.576 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.577 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.577 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:29.601 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.601 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.601 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:29.624 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.624 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.624 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:29.647 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.647 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.648 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:29.670 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.671 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.671 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:29.694 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.694 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.694 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index, inplace=True)
2022-08-06 06:27:29.711 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.711 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.711 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:29.734 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.734 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.734 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:29.757 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.757 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.757 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:29.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.780 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.780 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:29.803 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.803 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.803 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index).reset_index(drop=True)
2022-08-06 06:27:29.826 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.826 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.826 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '-']
2022-08-06 06:27:29.842 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:29.842 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 06:27:29.842 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:29.865 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.415 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.416 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:31.439 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.440 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.440 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:31.462 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.462 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.463 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index).reset_index(drop=True)
2022-08-06 06:27:31.485 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.485 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.485 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:31.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.508 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.508 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['B'] != '-')].reset_index(drop=True)
2022-08-06 06:27:31.530 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.531 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.531 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:31.553 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.554 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.554 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index, inplace=True)
2022-08-06 06:27:31.570 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.571 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.571 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:31.594 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.594 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.594 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:31.617 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.617 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.617 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:31.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.640 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.640 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '-')]
2022-08-06 06:27:31.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.656 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.657 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:31.679 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.679 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.679 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index, inplace=True)
2022-08-06 06:27:31.696 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.696 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.696 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '-')].index)
2022-08-06 06:27:31.714 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.714 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.714 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index)
2022-08-06 06:27:31.737 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.737 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.737 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index)
2022-08-06 06:27:31.760 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.760 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.760 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:31.782 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.783 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.783 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:31.805 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.805 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.805 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:31.828 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:31.828 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 06:27:31.828 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:31.851 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.113 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.114 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:33.138 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.139 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.139 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index, inplace=True)
2022-08-06 06:27:33.155 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.155 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.156 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:33.178 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.178 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.178 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index)
2022-08-06 06:27:33.201 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.201 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.201 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '-']
2022-08-06 06:27:33.217 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.217 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.218 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index, inplace=True)
2022-08-06 06:27:33.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.234 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.235 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:33.257 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.258 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.258 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:33.280 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.280 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.281 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:33.303 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.303 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.304 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:33.326 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.326 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.326 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:33.349 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.349 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.349 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:33.372 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.372 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.372 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '-')]
2022-08-06 06:27:33.388 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.388 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.389 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:33.411 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.411 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.411 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:33.434 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.434 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.434 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 06:27:33.457 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.458 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.458 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 06:27:33.480 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.480 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.481 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index)
2022-08-06 06:27:33.503 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.503 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.503 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index)
2022-08-06 06:27:33.526 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.526 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:27:33.526 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '-')].index)
2022-08-06 06:27:33.544 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:33.572 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:27:35.111 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?' in any column
2022-08-06 06:27:35.112 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:27:35.135 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:35.135 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?' in any column
2022-08-06 06:27:35.136 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(~ (dfin['B'] == '?'))]
2022-08-06 06:27:35.152 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:35.152 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?' in any column
2022-08-06 06:27:35.152 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:27:35.174 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:35.175 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?' in any column
2022-08-06 06:27:35.175 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?')].index)
2022-08-06 06:27:35.197 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:35.197 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?' in any column
2022-08-06 06:27:35.198 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?')].index)
2022-08-06 06:27:35.220 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:35.220 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?' in any column
2022-08-06 06:27:35.220 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '?').all(axis=1)]
2022-08-06 06:27:35.229 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:27:36.851 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:36.852 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:27:36.869 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:36.869 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:36.869 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(~ (dfin['B'] == '?'))]
2022-08-06 06:27:36.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:36.885 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:36.886 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:27:36.901 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:36.902 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:36.902 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?')].index)
2022-08-06 06:27:36.924 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:36.924 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:36.925 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?')].index)
2022-08-06 06:27:36.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:36.947 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:36.947 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:27:36.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:36.964 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:36.964 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:27:36.980 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:36.980 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:36.980 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:27:36.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:36.996 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:36.996 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:37.020 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:37.020 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:37.020 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:27:37.036 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:37.036 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:37.036 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:27:37.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:37.053 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:37.053 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:27:37.069 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:37.069 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:37.069 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '?')]
2022-08-06 06:27:37.085 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:37.085 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:37.085 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '?')]
2022-08-06 06:27:37.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:37.101 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:37.102 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 06:27:37.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:37.120 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:37.120 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] != '?']
2022-08-06 06:27:37.142 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:37.142 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:37.142 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 06:27:37.160 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:37.160 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:37.160 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:27:37.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:37.177 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:37.177 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '?')]
2022-08-06 06:27:37.193 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:37.193 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:27:37.193 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '?')]
2022-08-06 06:27:37.209 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:38.774 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 06:27:38.774 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 06:27:38.799 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:38.799 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 06:27:38.799 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?')].index)
2022-08-06 06:27:38.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:38.817 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 06:27:38.817 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:27:38.833 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:38.833 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 06:27:38.833 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 06:27:38.851 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:38.852 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 06:27:38.852 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '?').all(1)]
2022-08-06 06:27:38.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:27:40.899 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with ? in any column of dfin
2022-08-06 06:27:40.899 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?')].index)
2022-08-06 06:27:40.920 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:40.920 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with ? in any column of dfin
2022-08-06 06:27:40.920 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '?').all(axis=1)]
2022-08-06 06:27:40.929 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:27:42.646 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with 'NaN' and Remove rows which has any column value missing
2022-08-06 06:27:42.647 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 06:27:42.661 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:27:44.388 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with 'NaN' and then drop rows which has any column value missing
2022-08-06 06:27:44.388 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 06:27:44.414 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:27:45.680 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with 'NaN' in dfin and then drop rows which has any column value missing
2022-08-06 06:27:45.681 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 06:27:45.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:27:46.970 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with numpy NaN in dfin and then drop rows which has any column value missing
2022-08-06 06:27:46.971 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 06:27:46.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:27:48.197 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with numpy NaN in dfin and then drop rows which has any missing value
2022-08-06 06:27:48.198 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 06:27:48.212 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:27:49.202 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with numpy NaN in dfin and drop rows which has any missing value
2022-08-06 06:27:49.203 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 06:27:49.253 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:27:50.741 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 06:27:50.741 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?')].index)
2022-08-06 06:27:50.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:50.766 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 06:27:50.766 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:27:50.789 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:50.789 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 06:27:50.789 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:27:50.811 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:50.812 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 06:27:50.812 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index, inplace=True)
2022-08-06 06:27:50.828 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:50.829 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 06:27:50.829 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:27:50.851 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:50.852 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 06:27:50.852 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index).reset_index(drop=True)
2022-08-06 06:27:50.874 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:50.874 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 06:27:50.875 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:27:50.891 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:50.891 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 06:27:50.891 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(~ (dfin['B'] == '?'))]
2022-08-06 06:27:50.907 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:50.908 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 06:27:50.908 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:27:50.932 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:50.932 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 06:27:50.932 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:27:50.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:50.956 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 06:27:50.956 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any')
2022-08-06 06:27:50.980 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:50.980 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 06:27:50.980 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?')].index)
2022-08-06 06:27:50.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:50.998 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 06:27:50.999 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:51.022 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:51.022 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 06:27:51.022 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '?').all(axis=1)]
2022-08-06 06:27:51.031 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:27:52.520 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where values are '?'
2022-08-06 06:27:52.521 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?')].index)
2022-08-06 06:27:52.540 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:52.540 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where values are '?'
2022-08-06 06:27:52.540 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 06:27:52.553 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:27:54.499 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 06:27:54.499 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=dfin.columns[dfin.dtypes == 'object'], how='all')
2022-08-06 06:27:54.524 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:54.524 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 06:27:54.524 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.index[dfin['B'] == '?'])
2022-08-06 06:27:54.547 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:54.547 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 06:27:54.547 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.index[dfin['B'] == '?'])
2022-08-06 06:27:54.569 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:54.569 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 06:27:54.570 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B', 'C'])
2022-08-06 06:27:54.593 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:54.593 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 06:27:54.593 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:27:54.616 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:54.616 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 06:27:54.616 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?')].index)
2022-08-06 06:27:54.638 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:54.638 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 06:27:54.639 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ['A', 'B', 'C', 'D']].dropna()
2022-08-06 06:27:54.662 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:54.662 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 06:27:54.663 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:27:54.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:54.685 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 06:27:54.685 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:54.708 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:54.709 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 06:27:54.709 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:27:54.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:54.731 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 06:27:54.732 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:54.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:54.755 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 06:27:54.755 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B', 'C'])[train_cols]
2022-08-06 06:27:54.758 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:54.758 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 06:27:54.759 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:54.781 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:54.782 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 06:27:54.782 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin.values == '?'].index)
2022-08-06 06:27:54.793 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:27:56.243 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 06:27:56.244 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '?').all(axis=1)]
2022-08-06 06:27:56.253 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:27:58.033 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.034 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 06:27:58.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.053 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.053 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 06:27:58.071 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.071 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.071 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 06:27:58.088 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.088 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.088 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 06:27:58.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.106 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.106 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 06:27:58.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.123 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.123 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 06:27:58.141 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.141 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.141 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 06:27:58.158 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.158 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.158 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 06:27:58.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.176 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.176 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 06:27:58.193 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.193 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.193 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', subset=['B', 'C'], inplace=True)
2022-08-06 06:27:58.211 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.211 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.211 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 06:27:58.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.229 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.229 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 06:27:58.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.246 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.246 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False)
2022-08-06 06:27:58.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.269 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.269 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 06:27:58.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.287 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.287 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 06:27:58.304 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.304 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.304 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 06:27:58.322 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.322 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.322 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 06:27:58.339 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.339 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.339 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.loc[dfin['B'] == '?'].index)
2022-08-06 06:27:58.362 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.362 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.362 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, inplace=True)
2022-08-06 06:27:58.379 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:58.379 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:27:58.379 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 06:27:58.396 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.320 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.321 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?')].index)
2022-08-06 06:27:59.344 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.345 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.345 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:59.368 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.368 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.368 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:59.391 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.391 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.391 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:59.414 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.415 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.415 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:59.438 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.438 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.438 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any')
2022-08-06 06:27:59.461 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.461 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.461 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:59.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.485 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.485 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:27:59.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.508 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.508 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:59.531 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.531 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.531 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:59.554 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.554 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.555 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:59.578 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.578 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.578 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:59.601 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.601 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.601 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:59.624 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.624 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.624 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:59.647 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.648 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.648 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:27:59.670 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.671 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.671 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:59.694 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.694 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.694 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:59.717 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.717 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.717 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:59.740 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.741 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.741 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:27:59.764 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.764 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 06:27:59.764 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:27:59.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:27:59.816 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:27:59.980 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Remove rows having '?'", 'user': 'u16'}, {'query': "drop rows having '?'", 'user': 'u16'}, {'query': ...
    │               └ {'queries': [{'query': "Remove rows having '?'", 'user': 'u16'}, {'query': "drop rows having '?'", 'user': 'u16'}, {'query': ...
    └ {'query': "Remove rows having '?'", 'user': 'u16'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Drop rows in "df" where "comment" is...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e5ea0ad0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:27:59 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:27:59 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e1e6ee90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:28:00.005 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:28:31.137 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 06:28:31.138 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?')].index)
2022-08-06 06:28:31.162 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:31.162 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 06:28:31.162 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(~ (dfin['B'] == '?'))]
2022-08-06 06:28:31.178 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:31.178 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 06:28:31.178 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:28:31.201 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:31.201 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 06:28:31.201 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:28:31.217 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:31.217 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 06:28:31.217 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '?')]
2022-08-06 06:28:31.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:31.233 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 06:28:31.234 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 06:28:31.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:31.252 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 06:28:31.252 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '?')]
2022-08-06 06:28:31.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:31.268 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 06:28:31.268 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '?')]
2022-08-06 06:28:31.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:31.284 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 06:28:31.284 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '?') & (dfin['C'] != '?')]
2022-08-06 06:28:31.293 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:28:32.507 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 06:28:32.507 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?')].index)
2022-08-06 06:28:32.531 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:32.531 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 06:28:32.531 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:28:32.554 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:32.554 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 06:28:32.554 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(~ (dfin['B'] == '?'))]
2022-08-06 06:28:32.571 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:32.571 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 06:28:32.571 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index, inplace=True)
2022-08-06 06:28:32.588 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:32.588 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 06:28:32.588 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 06:28:32.601 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:28:34.188 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.189 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?')].index)
2022-08-06 06:28:34.213 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.213 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.213 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:28:34.235 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.235 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.236 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:28:34.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.258 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.258 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:28:34.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.281 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.281 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:28:34.304 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.304 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.304 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index, inplace=True)
2022-08-06 06:28:34.321 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.321 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.321 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.index[dfin['B'] == '?'])
2022-08-06 06:28:34.344 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.344 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.344 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:28:34.366 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.367 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.367 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index).reset_index(drop=True)
2022-08-06 06:28:34.389 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.390 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.390 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:28:34.412 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.413 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.413 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:28:34.435 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.435 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.435 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:28:34.458 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.458 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.458 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:28:34.481 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.481 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.481 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:28:34.504 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.504 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.504 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?')].index)
2022-08-06 06:28:34.521 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.522 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.522 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any')
2022-08-06 06:28:34.545 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.545 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.545 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 06:28:34.568 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.568 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.568 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.index[dfin['B'] == '?'])
2022-08-06 06:28:34.590 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.591 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.591 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 06:28:34.614 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:34.614 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:28:34.614 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?') | (dfin['C'] == '?') | (dfin['D'] == '?')].index, inplace=True)
2022-08-06 06:28:34.623 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:28:35.939 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:35.939 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] != '?']
2022-08-06 06:28:35.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:35.962 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:35.962 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] != '?']
2022-08-06 06:28:35.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:35.984 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:35.984 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] != '?']
2022-08-06 06:28:36.006 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:36.007 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:36.007 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] != '?']
2022-08-06 06:28:36.029 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:36.029 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:36.029 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['B'] != '?')]
2022-08-06 06:28:36.051 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:36.051 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:36.052 | DEBUG    | __main__:run_benchmark:432 - dfin[(~ dfin['B'].str.contains('?'))]
2022-08-06 06:28:36.054 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:36.054 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:36.054 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] != '?']
2022-08-06 06:28:36.076 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:36.076 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:36.076 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['B'] != '?')]
2022-08-06 06:28:36.099 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:36.099 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:36.099 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] != '?']
2022-08-06 06:28:36.121 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:36.121 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:36.121 | DEBUG    | __main__:run_benchmark:432 - dfin[(~ dfin['B'].isin('?'))]
2022-08-06 06:28:36.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:36.124 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:36.124 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] != '?']
2022-08-06 06:28:36.146 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:36.146 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:36.146 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] != '?']
2022-08-06 06:28:36.168 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:36.168 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:36.169 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['B'] != '?')]
2022-08-06 06:28:36.191 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:36.191 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:36.191 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] != '?']
2022-08-06 06:28:36.213 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:36.213 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:36.214 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?')].index)
2022-08-06 06:28:36.236 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:36.236 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:36.236 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['B'] != '?')]
2022-08-06 06:28:36.259 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:36.259 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:36.259 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] != '?']
2022-08-06 06:28:36.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:36.281 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:36.281 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] != '?']
2022-08-06 06:28:36.304 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:36.304 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:36.304 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] != '?']
2022-08-06 06:28:36.326 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:36.326 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:28:36.327 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] != '?']
2022-08-06 06:28:36.349 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:37.779 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 06:28:37.780 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '?').all(axis=1)]
2022-08-06 06:28:37.789 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:28:39.088 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 06:28:39.089 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?')].index)
2022-08-06 06:28:39.113 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:39.113 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 06:28:39.113 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:28:39.129 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:39.129 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 06:28:39.129 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:28:39.145 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:39.145 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 06:28:39.146 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(~ (dfin['B'] == '?'))]
2022-08-06 06:28:39.162 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:39.162 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 06:28:39.162 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:28:39.178 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:39.178 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 06:28:39.178 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '?')]
2022-08-06 06:28:39.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:39.195 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 06:28:39.195 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:28:39.211 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:39.211 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 06:28:39.211 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '?')]
2022-08-06 06:28:39.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:39.227 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 06:28:39.227 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:28:39.243 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:39.244 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 06:28:39.244 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['B'] != '?')].reset_index(drop=True)
2022-08-06 06:28:39.266 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:39.266 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 06:28:39.266 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:28:39.282 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:39.282 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 06:28:39.283 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?')].index)
2022-08-06 06:28:39.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:39.300 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 06:28:39.300 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '?')]
2022-08-06 06:28:39.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:39.317 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 06:28:39.317 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '?').all(axis=1)]
2022-08-06 06:28:39.326 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:28:40.507 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 06:28:40.508 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?')].index)
2022-08-06 06:28:40.532 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:40.532 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 06:28:40.532 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:28:40.548 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:40.548 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 06:28:40.549 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:28:40.565 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:40.565 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 06:28:40.565 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(~ (dfin['B'] == '?'))]
2022-08-06 06:28:40.581 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:40.581 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 06:28:40.582 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 06:28:40.597 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:28:40.598 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 06:28:40.598 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '?').all(axis=1)]
2022-08-06 06:28:40.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:28:40.793 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Remove rows having '?'", 'user': 'u16'}, {'query': "drop rows having '?'", 'user': 'u16'}, {'query': ...
    │               └ {'queries': [{'query': "Remove rows having '?'", 'user': 'u16'}, {'query': "drop rows having '?'", 'user': 'u16'}, {'query': ...
    └ {'query': "drop rows from 'dfin' that contain ?", 'user': 'u3'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Drop rows in "df" where "Id" is equa...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e1ee1610>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:28:40 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:28:40 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e1edde50>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:28:40.819 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:29:12.073 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 06:29:12.074 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?')].index)
2022-08-06 06:29:12.098 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:12.098 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 06:29:12.098 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '?').all(axis=1)]
2022-08-06 06:29:12.107 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:29:12.137 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 06:29:12.137 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:29:12.137 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:29:12.138 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:29:14.625 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows from "data" that are not present in "test"
2022-08-06 06:29:14.626 | DEBUG    | __main__:run_benchmark:432 - data.loc[~data.index.isin(test.index)]
2022-08-06 06:29:14.641 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:29:16.835 | DEBUG    | __main__:run_benchmark:431 - Query: remove all common rows that "data" and "test" contain
2022-08-06 06:29:16.836 | DEBUG    | __main__:run_benchmark:432 - data.loc[(~ data.index.isin(test.index))]
2022-08-06 06:29:16.851 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:29:16.880 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:29:18.588 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:29:18.588 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 06:29:18.618 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:18.618 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:29:18.618 | DEBUG    | __main__:run_benchmark:432 - data = data.append(test)
2022-08-06 06:29:18.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:18.640 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:29:18.640 | DEBUG    | __main__:run_benchmark:432 - data = data.append(test)
2022-08-06 06:29:18.661 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:18.661 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:29:18.662 | DEBUG    | __main__:run_benchmark:432 - data = data.append(test)
2022-08-06 06:29:18.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:18.683 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:29:18.683 | DEBUG    | __main__:run_benchmark:432 - data = data.append(test)
2022-08-06 06:29:18.704 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:18.704 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:29:18.705 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 06:29:18.733 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:18.734 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:29:18.734 | DEBUG    | __main__:run_benchmark:432 - test - data
2022-08-06 06:29:18.763 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:18.763 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:29:18.763 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 06:29:18.792 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:18.792 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:29:18.793 | DEBUG    | __main__:run_benchmark:432 - data = data.append(test)
2022-08-06 06:29:18.814 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:18.814 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:29:18.814 | DEBUG    | __main__:run_benchmark:432 - data = data.append(test)
2022-08-06 06:29:18.835 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:18.835 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:29:18.836 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 06:29:18.864 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:18.865 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:29:18.865 | DEBUG    | __main__:run_benchmark:432 - data = data.append(test)
2022-08-06 06:29:18.886 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:18.886 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:29:18.887 | DEBUG    | __main__:run_benchmark:432 - data = data.append(test)
2022-08-06 06:29:18.908 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:18.908 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:29:18.908 | DEBUG    | __main__:run_benchmark:432 - data = data.append(test)
2022-08-06 06:29:18.929 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:18.929 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:29:18.930 | DEBUG    | __main__:run_benchmark:432 - data = data.append(test)
2022-08-06 06:29:18.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:18.951 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:29:18.951 | DEBUG    | __main__:run_benchmark:432 - data.loc[(~ data.index.isin(test.index))]
2022-08-06 06:29:18.965 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:29:21.159 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:29:21.160 | DEBUG    | __main__:run_benchmark:432 - test = data.sub(test)
2022-08-06 06:29:21.185 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:21.185 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:29:21.185 | DEBUG    | __main__:run_benchmark:432 - sub = data[['inp1', 'inp2', 'inp3']]
2022-08-06 06:29:21.211 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:21.211 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:29:21.212 | DEBUG    | __main__:run_benchmark:432 - test = data[['inp1', 'inp2', 'inp3']].loc[[6]]
2022-08-06 06:29:21.232 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:21.232 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:29:21.232 | DEBUG    | __main__:run_benchmark:432 - test = data.sub(data.mean(axis=0), axis=1)
2022-08-06 06:29:21.256 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:21.256 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:29:21.256 | DEBUG    | __main__:run_benchmark:432 - test = data.loc[data['target'] == 0]
2022-08-06 06:29:21.277 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:21.277 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:29:21.277 | DEBUG    | __main__:run_benchmark:432 - test = data.iloc[5:7]
2022-08-06 06:29:21.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:21.298 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:29:21.298 | DEBUG    | __main__:run_benchmark:432 - sub = data[['inp1', 'inp2', 'inp3']]
2022-08-06 06:29:21.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:21.324 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:29:21.324 | DEBUG    | __main__:run_benchmark:432 - test = data.sub(data.mean(axis=0), axis=1)
2022-08-06 06:29:21.348 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:21.348 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:29:21.348 | DEBUG    | __main__:run_benchmark:432 - test = data[['inp1', 'inp2', 'inp3']].sub(data[['inp1', 'inp2', 'inp3']].shift((- 1)))
2022-08-06 06:29:21.372 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:21.372 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:29:21.372 | DEBUG    | __main__:run_benchmark:432 - sub = data.drop(data.index[[0, 1, 2, 3, 4, 5]])
2022-08-06 06:29:21.398 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:21.398 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:29:21.399 | DEBUG    | __main__:run_benchmark:432 - test = data.iloc[5:7]
2022-08-06 06:29:21.419 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:21.419 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:29:21.419 | DEBUG    | __main__:run_benchmark:432 - test = data.loc[0:5, :]
2022-08-06 06:29:21.430 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:29:23.837 | DEBUG    | __main__:run_benchmark:431 - Query: Choose row from 'data' which is not in 'test'
2022-08-06 06:29:23.838 | DEBUG    | __main__:run_benchmark:432 - #  Hint: use the isin() function
2022-08-06 06:29:23.839 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:23.839 | DEBUG    | __main__:run_benchmark:431 - Query: Choose row from 'data' which is not in 'test'
2022-08-06 06:29:23.839 | DEBUG    | __main__:run_benchmark:432 - data[(~ data['inp1'].isin(test['inp1'].values)) & (~ data['inp2'].isin(test['inp2'].values)) & (~ data['inp3'].isin(test['inp3'].values))]
2022-08-06 06:29:23.867 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:23.867 | DEBUG    | __main__:run_benchmark:431 - Query: Choose row from 'data' which is not in 'test'
2022-08-06 06:29:23.867 | DEBUG    | __main__:run_benchmark:432 - data.loc[(~ data.index.isin(test.index))]
2022-08-06 06:29:23.881 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:29:23.909 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 06:29:25.848 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:25.849 | DEBUG    | __main__:run_benchmark:432 - test_index = test.index
2022-08-06 06:29:25.871 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:25.871 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:25.871 | DEBUG    | __main__:run_benchmark:432 - data.index.intersection(test.index)
2022-08-06 06:29:25.892 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:25.892 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:25.892 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:29:25.892 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:25.892 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:25.892 | DEBUG    | __main__:run_benchmark:432 - test_index = test.index[test['labels'].isin(data['labels'])].tolist()
2022-08-06 06:29:25.913 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:25.913 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:25.913 | DEBUG    | __main__:run_benchmark:432 - test_index = test.index
2022-08-06 06:29:25.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:25.934 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:25.934 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:25.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:25.960 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:25.960 | DEBUG    | __main__:run_benchmark:432 - test_index = test.index
2022-08-06 06:29:25.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:25.981 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:25.981 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:26.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:26.007 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:26.007 | DEBUG    | __main__:run_benchmark:432 - data_filter = data.loc[np.where(test)[0]]
2022-08-06 06:29:26.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:26.034 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:26.034 | DEBUG    | __main__:run_benchmark:432 - data.index[data.index.isin(test.index)]
2022-08-06 06:29:26.055 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:26.055 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:26.055 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:26.081 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:26.081 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:26.081 | DEBUG    | __main__:run_benchmark:432 - test_ids = test.index
2022-08-06 06:29:26.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:26.101 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:26.102 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:26.128 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:26.128 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:26.128 | DEBUG    | __main__:run_benchmark:432 - test_index = test.index
2022-08-06 06:29:26.148 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:26.148 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:26.148 | DEBUG    | __main__:run_benchmark:432 - data_filter = data[data.index.isin(test.index)]
2022-08-06 06:29:26.174 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:26.174 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:26.175 | DEBUG    | __main__:run_benchmark:432 - data.loc[test.index]
2022-08-06 06:29:26.201 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:26.201 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:26.201 | DEBUG    | __main__:run_benchmark:432 - test_index = data[data.index.isin(test.index)].index.tolist()
2022-08-06 06:29:26.221 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:26.222 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:26.222 | DEBUG    | __main__:run_benchmark:432 - test_index = test.index
2022-08-06 06:29:26.242 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:26.242 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:26.242 | DEBUG    | __main__:run_benchmark:432 - test_index = test.index
2022-08-06 06:29:26.262 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:26.263 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:29:26.263 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:26.289 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.487 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.487 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:27.515 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.515 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.516 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:27.541 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.542 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.542 | DEBUG    | __main__:run_benchmark:432 - data.index[~data.index.isin(test.index)]
2022-08-06 06:29:27.562 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.562 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.563 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:29:27.563 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.563 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.563 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:27.589 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.589 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.589 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:27.615 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.615 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.616 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:27.641 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.642 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.642 | DEBUG    | __main__:run_benchmark:432 - data.index.intersection(test.index)
2022-08-06 06:29:27.662 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.662 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.663 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:27.689 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.689 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.689 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:27.715 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.715 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.715 | DEBUG    | __main__:run_benchmark:432 - rows_to_drop = np.setdiff1d(data.index, test.index)
2022-08-06 06:29:27.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.736 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.736 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:27.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.762 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.762 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:27.788 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.788 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.788 | DEBUG    | __main__:run_benchmark:432 - data.index[~data.index.isin(test.index)]
2022-08-06 06:29:27.809 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.809 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.809 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:27.835 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.835 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.835 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:27.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.861 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.861 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:27.887 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.887 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.888 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:27.913 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:27.913 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 06:29:27.914 | DEBUG    | __main__:run_benchmark:432 - data[~data.index.isin(test.index)]
2022-08-06 06:29:27.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:29:29.640 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:29.641 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:29.668 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:29.668 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:29.669 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:29.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:29.695 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:29.695 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:29.721 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:29.721 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:29.721 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:29.747 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:29.747 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:29.747 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:29.773 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:29.773 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:29.774 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:29.799 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:29.800 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:29.800 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:29.826 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:29.826 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:29.826 | DEBUG    | __main__:run_benchmark:432 - data[True]
2022-08-06 06:29:29.829 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:29.829 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:29.829 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:29.855 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:29.855 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:29.856 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:29.882 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:29.882 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:29.882 | DEBUG    | __main__:run_benchmark:432 - data.loc[(data.index.isin(test.index))]
2022-08-06 06:29:29.908 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:29.908 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:29.908 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:29.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:29.934 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:29.935 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:29.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:29.961 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:29.961 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:29.987 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:29.987 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:29.987 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:30.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:30.013 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:30.013 | DEBUG    | __main__:run_benchmark:432 - data.loc[test.index]
2022-08-06 06:29:30.039 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:30.039 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:30.039 | DEBUG    | __main__:run_benchmark:432 - data = data[data.index.isin(test.index)]
2022-08-06 06:29:30.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:30.060 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:30.060 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:30.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:30.086 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:30.086 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:30.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:30.112 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 06:29:30.112 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:29:30.138 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:31.471 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows in df data that are in df test
2022-08-06 06:29:31.472 | DEBUG    | __main__:run_benchmark:432 - df = df[~df.isin(test)].dropna()
2022-08-06 06:29:31.476 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:31.477 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows in df data that are in df test
2022-08-06 06:29:31.477 | DEBUG    | __main__:run_benchmark:432 - df = df[~df.isin(test)].dropna()
2022-08-06 06:29:31.480 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:31.481 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows in df data that are in df test
2022-08-06 06:29:31.481 | DEBUG    | __main__:run_benchmark:432 - df = df[~df.isin(test)].dropna()
2022-08-06 06:29:31.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:31.484 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows in df data that are in df test
2022-08-06 06:29:31.484 | DEBUG    | __main__:run_benchmark:432 - df = data.drop(test.index)
2022-08-06 06:29:31.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:29:33.552 | DEBUG    | __main__:run_benchmark:431 - Query: Given data and test, return all rows in data which are not in test
2022-08-06 06:29:33.553 | DEBUG    | __main__:run_benchmark:432 - data[~data.isin(test).all(1)]
2022-08-06 06:29:33.584 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:29:34.795 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return all rows in data which are not in test
2022-08-06 06:29:34.796 | DEBUG    | __main__:run_benchmark:432 - data[~data.isin(test).all(1)]
2022-08-06 06:29:34.812 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:29:36.650 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.651 | DEBUG    | __main__:run_benchmark:432 - def get_difference(data, test):
2022-08-06 06:29:36.652 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.652 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.653 | DEBUG    | __main__:run_benchmark:432 - data.subtract(test)
2022-08-06 06:29:36.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.682 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.682 | DEBUG    | __main__:run_benchmark:432 - def diff(data, test):
2022-08-06 06:29:36.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.682 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.682 | DEBUG    | __main__:run_benchmark:432 - def data_test_diff(data, test):
2022-08-06 06:29:36.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.683 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.683 | DEBUG    | __main__:run_benchmark:432 - def diff_df(data, test):
2022-08-06 06:29:36.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.683 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.683 | DEBUG    | __main__:run_benchmark:432 - def diff(data, test):
2022-08-06 06:29:36.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.683 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.683 | DEBUG    | __main__:run_benchmark:432 - def data_test_diff(data, test):
2022-08-06 06:29:36.684 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.684 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.684 | DEBUG    | __main__:run_benchmark:432 - def subtract_df(data, test):
2022-08-06 06:29:36.684 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.684 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.684 | DEBUG    | __main__:run_benchmark:432 - def data_test_diff(data, test):
2022-08-06 06:29:36.684 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.685 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.685 | DEBUG    | __main__:run_benchmark:432 - def diff(data, test):
2022-08-06 06:29:36.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.685 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.685 | DEBUG    | __main__:run_benchmark:432 - def data_test_diff(data, test):
2022-08-06 06:29:36.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.685 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.685 | DEBUG    | __main__:run_benchmark:432 - def data_test_diff(data, test):
2022-08-06 06:29:36.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.686 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.686 | DEBUG    | __main__:run_benchmark:432 - def data_test_diff(data, test):
2022-08-06 06:29:36.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.686 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.686 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 06:29:36.715 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.715 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.715 | DEBUG    | __main__:run_benchmark:432 - def diff(data, test):
2022-08-06 06:29:36.716 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.716 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.716 | DEBUG    | __main__:run_benchmark:432 - def data_test_diff(data, test):
2022-08-06 06:29:36.716 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.716 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.716 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:29:36.716 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.716 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.717 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 06:29:36.746 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.746 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.746 | DEBUG    | __main__:run_benchmark:432 - (data - test)
2022-08-06 06:29:36.775 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.775 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:29:36.775 | DEBUG    | __main__:run_benchmark:432 - def diff(data, test):
2022-08-06 06:29:36.775 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:36.803 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:29:39.276 | DEBUG    | __main__:run_benchmark:431 - Query: remove similar rows between dataframe 'data' and dataframe 'test'
2022-08-06 06:29:39.277 | DEBUG    | __main__:run_benchmark:432 - data.loc[(~ data.index.isin(test.index))]
2022-08-06 06:29:39.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:29:40.789 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:40.790 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 06:29:40.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:40.821 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:40.821 | DEBUG    | __main__:run_benchmark:432 - diff = data - test
2022-08-06 06:29:40.850 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:40.850 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:40.850 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 06:29:40.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:40.879 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:40.879 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 06:29:40.908 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:40.908 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:40.909 | DEBUG    | __main__:run_benchmark:432 - data_test = data - test
2022-08-06 06:29:40.937 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:40.938 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:40.938 | DEBUG    | __main__:run_benchmark:432 - diff = data - test
2022-08-06 06:29:40.967 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:40.967 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:40.967 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 06:29:40.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:40.996 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:40.997 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 06:29:41.026 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:41.026 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:41.026 | DEBUG    | __main__:run_benchmark:432 - diff = data - test
2022-08-06 06:29:41.055 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:41.055 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:41.055 | DEBUG    | __main__:run_benchmark:432 - data.subtract(test)
2022-08-06 06:29:41.084 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:41.084 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:41.084 | DEBUG    | __main__:run_benchmark:432 - diff = data - test
2022-08-06 06:29:41.113 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:41.114 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:41.114 | DEBUG    | __main__:run_benchmark:432 - data_test = data - test
2022-08-06 06:29:41.143 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:41.143 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:41.143 | DEBUG    | __main__:run_benchmark:432 - (data - test)
2022-08-06 06:29:41.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:41.172 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:41.172 | DEBUG    | __main__:run_benchmark:432 - diff = data - test
2022-08-06 06:29:41.201 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:41.202 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:41.202 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 06:29:41.230 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:41.231 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:41.231 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 06:29:41.260 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:41.260 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:41.260 | DEBUG    | __main__:run_benchmark:432 - diff = data - test
2022-08-06 06:29:41.289 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:41.289 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:41.289 | DEBUG    | __main__:run_benchmark:432 - diff = data - test
2022-08-06 06:29:41.319 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:41.319 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:41.319 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 06:29:41.348 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:41.348 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 06:29:41.348 | DEBUG    | __main__:run_benchmark:432 - data.subtract(test)
2022-08-06 06:29:41.377 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:43.091 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'train' from 'data'
2022-08-06 06:29:43.091 | DEBUG    | __main__:run_benchmark:432 - data = data.drop(['train'])
2022-08-06 06:29:43.096 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:43.096 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'train' from 'data'
2022-08-06 06:29:43.096 | DEBUG    | __main__:run_benchmark:432 - data = data.drop('train', axis=1)
2022-08-06 06:29:43.100 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:43.100 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'train' from 'data'
2022-08-06 06:29:43.100 | DEBUG    | __main__:run_benchmark:432 - data = data.drop(['train'])
2022-08-06 06:29:43.104 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:43.104 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'train' from 'data'
2022-08-06 06:29:43.104 | DEBUG    | __main__:run_benchmark:432 - data = data[:-1]
2022-08-06 06:29:43.116 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:29:44.963 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 06:29:44.963 | DEBUG    | __main__:run_benchmark:432 - train = data.drop(data.index[0, 1, 5])
2022-08-06 06:29:44.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:44.968 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 06:29:44.968 | DEBUG    | __main__:run_benchmark:432 - data = data[~data.isin(test)].dropna()
2022-08-06 06:29:44.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:29:45.011 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 06:29:45.011 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:29:45.011 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:29:46.871 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 06:29:46.872 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[[0, 1, 2]].idxmax(axis=1)
2022-08-06 06:29:46.883 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:29:48.851 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 06:29:48.851 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[[0, 1, 2]].idxmax(axis=1)
2022-08-06 06:29:48.863 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:29:50.812 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 06:29:50.812 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 06:29:50.815 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:50.815 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 06:29:50.815 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 06:29:50.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:50.817 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 06:29:50.817 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 06:29:50.818 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:50.818 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 06:29:50.819 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 06:29:50.820 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:50.820 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 06:29:50.820 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 06:29:50.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:50.822 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 06:29:50.822 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 06:29:50.823 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:50.823 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 06:29:50.823 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.iloc[:, 0:3].idxmax(axis=1)
2022-08-06 06:29:50.834 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:29:50.863 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:29:53.007 | DEBUG    | __main__:run_benchmark:431 - Query: find maximum value of first three columns of row and add its column name to a new column "output"
2022-08-06 06:29:53.008 | DEBUG    | __main__:run_benchmark:432 - dfin['output'] = dfin.iloc[:, 0:3].idxmax(axis=1)
2022-08-06 06:29:53.020 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:29:53.048 | DEBUG    | __main__:run:515 - Number of queries: 17
2022-08-06 06:29:55.081 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 06:29:55.082 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 06:29:55.098 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:55.098 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 06:29:55.098 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 06:29:55.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:55.112 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 06:29:55.112 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(max, axis=1)
2022-08-06 06:29:55.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:55.126 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 06:29:55.126 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.argmax(dfin.drop('target', axis=1).values, axis=1)
2022-08-06 06:29:55.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:29:57.230 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.231 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, 0:5].max(axis=1)
2022-08-06 06:29:57.245 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.245 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.246 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.max(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 06:29:57.247 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.247 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.247 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].values.max(1)
2022-08-06 06:29:57.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.249 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.249 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:57.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.251 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.251 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:57.252 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.253 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.253 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:57.254 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.254 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.254 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:57.256 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.256 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.256 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].max(axis=1)
2022-08-06 06:29:57.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.258 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.259 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(max, axis=1)
2022-08-06 06:29:57.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.272 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.272 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].max(axis=1)
2022-08-06 06:29:57.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.274 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.274 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:57.275 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.276 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.276 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:57.277 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.277 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.277 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].apply(np.max, axis=1)
2022-08-06 06:29:57.279 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.279 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.279 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:57.280 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.281 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.281 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:57.282 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.282 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.282 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:57.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.284 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.284 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:57.286 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.286 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.286 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.max(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 06:29:57.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.287 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.287 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:57.289 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:57.289 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:57.289 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.max(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 06:29:57.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:58.979 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:58.979 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.max(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 06:29:58.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:58.981 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:58.981 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, 0:ncol].max(axis=1)
2022-08-06 06:29:58.983 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:58.983 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:58.983 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:58.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:58.985 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:58.985 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.max(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 06:29:58.987 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:58.987 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:58.987 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:58.989 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:58.989 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:58.989 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, 0:5].max(axis=1)
2022-08-06 06:29:59.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:59.007 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:59.007 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:59.009 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:59.009 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:59.009 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:59.011 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:59.011 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:59.011 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:59.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:59.013 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:59.013 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:59.015 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:59.015 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:59.015 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].max(axis=1)
2022-08-06 06:29:59.017 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:59.017 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:59.017 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:59.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:59.019 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:59.019 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(np.max, axis=1)
2022-08-06 06:29:59.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:59.033 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:59.033 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:59.035 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:59.035 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:59.035 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:59.037 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:59.037 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:59.037 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(max, axis=1)
2022-08-06 06:29:59.050 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:59.051 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:59.051 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:59.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:59.052 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:59.053 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:59.054 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:59.054 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:59.054 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:29:59.056 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:29:59.056 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:29:59.056 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(1)
2022-08-06 06:29:59.058 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.329 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.330 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].max(axis=1)
2022-08-06 06:30:01.333 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.333 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.333 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.max(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 06:30:01.335 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.335 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.335 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].values.max(1)
2022-08-06 06:30:01.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.337 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.337 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:30:01.338 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.339 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.339 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:30:01.340 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.340 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.340 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:30:01.342 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.342 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.342 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(max, axis=1)
2022-08-06 06:30:01.357 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.357 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.358 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:30:01.359 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.359 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.359 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.max(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 06:30:01.361 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.361 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.361 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:30:01.363 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.363 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.363 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(np.max, axis=1)
2022-08-06 06:30:01.377 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.377 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.377 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:30:01.379 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.379 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.379 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.max(dfin, axis=0)
2022-08-06 06:30:01.393 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.393 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.393 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:30:01.395 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.395 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.395 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:30:01.396 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.397 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.397 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:30:01.398 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.398 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.398 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:30:01.400 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.400 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.400 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:30:01.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.402 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.402 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 06:30:01.404 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:01.404 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:01.404 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].max(axis=1)
2022-08-06 06:30:01.405 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.221 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.222 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:03.225 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.225 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.225 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:03.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.227 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.227 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(np.argmax, axis=1)
2022-08-06 06:30:03.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.241 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.241 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:03.243 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.243 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.243 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:03.244 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.245 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.245 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:03.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.246 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.247 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, 0:ncol].values.argmax(axis=1)
2022-08-06 06:30:03.248 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.248 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.248 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:03.250 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.250 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.250 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:03.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.251 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.251 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].values.argmax(1)
2022-08-06 06:30:03.253 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.253 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.253 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:03.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.255 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.255 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].apply(np.argmax, axis=1)
2022-08-06 06:30:03.256 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.257 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.257 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:03.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.258 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.259 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:03.260 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.260 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.260 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:03.262 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.262 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.262 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:03.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.264 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.264 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:03.265 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.265 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.266 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:03.267 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.267 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.267 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:03.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:03.269 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 06:30:03.269 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:03.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:04.745 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 06:30:04.746 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:04.750 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:04.750 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 06:30:04.750 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:04.751 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:04.752 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 06:30:04.752 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(np.argmax, axis=1)
2022-08-06 06:30:04.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:04.766 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 06:30:04.767 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:04.768 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:04.768 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 06:30:04.768 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:04.770 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:04.770 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 06:30:04.770 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.argmax(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 06:30:04.771 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:04.771 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 06:30:04.772 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, 0:ncol].values.argmax(axis=1)
2022-08-06 06:30:04.773 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:04.773 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 06:30:04.773 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].values.argmax(1)
2022-08-06 06:30:04.774 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:04.775 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 06:30:04.775 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:04.776 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:04.776 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 06:30:04.776 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:04.778 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:04.778 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 06:30:04.778 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(np.argmax, axis=1)
2022-08-06 06:30:04.792 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:04.792 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 06:30:04.792 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, :5].idxmax(axis=1)
2022-08-06 06:30:04.805 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:30:07.291 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.292 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:07.295 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.295 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.295 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:07.297 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.297 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.297 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:07.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.299 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.299 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:07.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.300 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.301 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:07.302 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.302 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.302 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:07.304 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.304 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.304 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:07.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.305 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.306 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:30:07.306 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.306 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.306 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:07.307 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.307 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.308 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:30:07.308 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.308 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.308 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:07.309 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.310 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.310 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:07.311 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.311 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.311 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:07.313 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.313 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.313 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:07.314 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.315 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.315 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:07.316 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.316 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.316 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:30:07.316 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.317 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.317 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:07.318 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.318 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.318 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:07.320 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.320 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.320 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:07.322 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:07.322 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 06:30:07.322 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:07.323 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:09.853 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 06:30:09.854 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:09.856 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:09.856 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 06:30:09.856 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:09.858 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:09.858 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 06:30:09.858 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:09.860 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:09.860 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 06:30:09.860 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:09.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:09.862 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 06:30:09.862 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:09.863 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:09.863 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 06:30:09.864 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[[0, 1, 2, 3, 4]].idxmax(axis=1)
2022-08-06 06:30:09.877 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:30:12.201 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.201 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:12.204 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.204 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.204 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:12.206 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.206 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.206 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:30:12.206 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.207 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.207 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:12.208 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.208 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.208 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:12.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.210 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.210 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:12.212 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.212 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.212 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:30:12.212 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.212 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.212 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:30:12.212 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.212 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.213 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:12.214 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.214 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.214 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:12.216 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.216 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.216 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:12.218 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.218 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.218 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:30:12.218 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.218 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.218 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:12.220 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.220 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.220 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:12.221 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.222 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.222 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:30:12.222 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.222 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.222 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:12.223 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.224 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.224 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:12.225 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.225 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.225 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:30:12.226 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.226 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.226 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:12.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.227 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 06:30:12.228 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:12.229 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:12.668 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f49898f57a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f4989a758c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f48f4a8f7d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Get maximum value of rows and store in a new column 'prediction'", 'user': 'u6'}, {'query': "Get maxi...
    │               └ {'queries': [{'query': "Get maximum value of rows and store in a new column 'prediction'", 'user': 'u6'}, {'query': "Get maxi...
    └ {'query': 'Get the index of maximum value among columns 0, 1, 2, 3 and 4 and store it as column name prediction', 'user': 'u15'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a series with the index of th...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f48f4a8f7d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f48f4ba8dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f48e1e79390>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:30:12 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f497d416f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:30:12 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f48e1e3da90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:30:12.694 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:30:44.787 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among columns 0, 1, 2, 3 and 4 and store it as column name prediction
2022-08-06 06:30:44.788 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 06:30:44.791 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:44.791 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among columns 0, 1, 2, 3 and 4 and store it as column name prediction
2022-08-06 06:30:44.791 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[0:5].idxmax(axis=1)
2022-08-06 06:30:44.806 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:44.806 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among columns 0, 1, 2, 3 and 4 and store it as column name prediction
2022-08-06 06:30:44.806 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[list(dfin.columns[:-1])].apply(np.argmax, axis=1)
2022-08-06 06:30:44.820 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:30:46.922 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 06:30:46.922 | DEBUG    | __main__:run_benchmark:432 - prediction = dfin.iloc[:, :5].idxmax(axis=1)
2022-08-06 06:30:46.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:46.971 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 06:30:46.971 | DEBUG    | __main__:run_benchmark:432 - prediction = dfin.iloc[:, :5].idxmax(axis=1)
2022-08-06 06:30:46.989 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:46.989 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 06:30:46.989 | DEBUG    | __main__:run_benchmark:432 - prediction = dfin.iloc[:, 0:5].values.argmax(axis=1)
2022-08-06 06:30:47.001 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:47.001 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 06:30:47.001 | DEBUG    | __main__:run_benchmark:432 - prediction = dfin.idxmax(axis=1, skipna=True)
2022-08-06 06:30:47.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:47.013 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 06:30:47.013 | DEBUG    | __main__:run_benchmark:432 - prediction = dfin.idxmax(axis=1)
2022-08-06 06:30:47.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:47.025 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 06:30:47.025 | DEBUG    | __main__:run_benchmark:432 - prediction = dfin.iloc[:, :5].idxmax(axis=1)
2022-08-06 06:30:47.036 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:47.036 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 06:30:47.037 | DEBUG    | __main__:run_benchmark:432 - prediction = dfin.idxmax(axis=1)[0:5]
2022-08-06 06:30:47.048 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:47.048 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 06:30:47.048 | DEBUG    | __main__:run_benchmark:432 - prediction = dfin.iloc[:,:5].idxmax(axis=1)
2022-08-06 06:30:47.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:47.060 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 06:30:47.060 | DEBUG    | __main__:run_benchmark:432 - prediction = dfin.iloc[:, :5].idxmax(axis=1)
2022-08-06 06:30:47.072 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:47.072 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 06:30:47.072 | DEBUG    | __main__:run_benchmark:432 - prediction = dfin.iloc[:,:5].idxmax(axis=1)
2022-08-06 06:30:47.083 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:47.083 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 06:30:47.084 | DEBUG    | __main__:run_benchmark:432 - prediction = dfin.iloc[:,:5].idxmax(axis=1)
2022-08-06 06:30:47.095 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:47.095 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 06:30:47.095 | DEBUG    | __main__:run_benchmark:432 - prediction = dfin.iloc[:, :5].idxmax(axis=1)
2022-08-06 06:30:47.107 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:47.107 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 06:30:47.107 | DEBUG    | __main__:run_benchmark:432 - prediction = dfin.iloc[:,:5].idxmax(axis=1)
2022-08-06 06:30:47.119 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:47.119 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 06:30:47.119 | DEBUG    | __main__:run_benchmark:432 - prediction = dfin.iloc[:, :5].idxmax(axis=1)
2022-08-06 06:30:47.130 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:47.130 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 06:30:47.130 | DEBUG    | __main__:run_benchmark:432 - prediction = dfin.iloc[:, :(-1)].idxmax(axis=1)
2022-08-06 06:30:47.142 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:47.142 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 06:30:47.142 | DEBUG    | __main__:run_benchmark:432 - prediction = dfin.iloc[:,:5].idxmax(axis=1)
2022-08-06 06:30:47.154 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:47.154 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 06:30:47.154 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, :5].idxmax(axis=1)
2022-08-06 06:30:47.167 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:30:47.196 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:30:47.196 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:30:49.595 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 06:30:49.596 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:30:49.596 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:49.597 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 06:30:49.597 | DEBUG    | __main__:run_benchmark:432 - dfin['OurPred'] = dfin.apply(lambda x: x.index[x.values.argmax()], axis=1)
2022-08-06 06:30:49.612 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:49.612 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 06:30:49.612 | DEBUG    | __main__:run_benchmark:432 - dfin['OurPred'] = dfin.apply(lambda x: x.idxmax() if x.name != 'GoldTarget' else x.name, axis=1)
2022-08-06 06:30:49.627 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:49.627 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 06:30:49.627 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:30:49.628 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:30:49.628 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 06:30:49.628 | DEBUG    | __main__:run_benchmark:432 - dfin['OurPred'] = dfin.apply(lambda x: np.argmax(x[~(x.index == 'GoldTarget')]), axis=1)
2022-08-06 06:30:49.642 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:38:42.099 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval1
2022-08-06 06:38:42.099 | DEBUG    | __main__:run:495 - Found 68 benchmarks in PandasEval1
2022-08-06 06:38:42.099 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 06:38:42.100 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.100 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.100 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 06:38:42.100 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.100 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.101 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 06:38:42.101 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.101 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.101 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 06:38:42.101 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.102 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.102 | DEBUG    | __main__:run:525 - Skipping benchmark 3:A0 as result already exists
2022-08-06 06:38:42.102 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 06:38:42.102 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.102 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.103 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 06:38:42.103 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.103 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.103 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 06:38:42.103 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.103 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.104 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 06:38:42.104 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.104 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.104 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 06:38:42.104 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.104 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.105 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 06:38:42.105 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.105 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.105 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 06:38:42.105 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.105 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.106 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 06:38:42.106 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.106 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.106 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A0 as result already exists
2022-08-06 06:38:42.106 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 06:38:42.106 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.106 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.107 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 06:38:42.107 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.107 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.107 | DEBUG    | __main__:run:525 - Skipping benchmark 13:A0 as result already exists
2022-08-06 06:38:42.107 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 06:38:42.107 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.107 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.108 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 06:38:42.108 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.108 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.108 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 06:38:42.108 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.108 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.108 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 06:38:42.109 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.109 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.109 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 06:38:42.109 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.109 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.109 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A0 as result already exists
2022-08-06 06:38:42.110 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 06:38:42.110 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.110 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.110 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 06:38:42.110 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.110 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.110 | DEBUG    | __main__:run:508 - Running benchmark 21
2022-08-06 06:38:42.110 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.111 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.111 | DEBUG    | __main__:run:508 - Running benchmark 22
2022-08-06 06:38:42.111 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.111 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.111 | DEBUG    | __main__:run:525 - Skipping benchmark 22:A0 as result already exists
2022-08-06 06:38:42.111 | DEBUG    | __main__:run:508 - Running benchmark 23
2022-08-06 06:38:42.112 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.112 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.112 | DEBUG    | __main__:run:508 - Running benchmark 24
2022-08-06 06:38:42.112 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.112 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.112 | DEBUG    | __main__:run:508 - Running benchmark 25
2022-08-06 06:38:42.112 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.113 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.113 | DEBUG    | __main__:run:508 - Running benchmark 26
2022-08-06 06:38:42.113 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.113 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.113 | DEBUG    | __main__:run:525 - Skipping benchmark 26:A0 as result already exists
2022-08-06 06:38:42.113 | DEBUG    | __main__:run:508 - Running benchmark 27
2022-08-06 06:38:42.114 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.114 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.114 | DEBUG    | __main__:run:508 - Running benchmark 28
2022-08-06 06:38:42.114 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.114 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.114 | DEBUG    | __main__:run:525 - Skipping benchmark 28:A0 as result already exists
2022-08-06 06:38:42.114 | DEBUG    | __main__:run:508 - Running benchmark 29
2022-08-06 06:38:42.115 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.115 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.115 | DEBUG    | __main__:run:508 - Running benchmark 30
2022-08-06 06:38:42.115 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.115 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.115 | DEBUG    | __main__:run:525 - Skipping benchmark 30:A0 as result already exists
2022-08-06 06:38:42.116 | DEBUG    | __main__:run:508 - Running benchmark 31
2022-08-06 06:38:42.116 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.116 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.116 | DEBUG    | __main__:run:508 - Running benchmark 32
2022-08-06 06:38:42.116 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.116 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.116 | DEBUG    | __main__:run:508 - Running benchmark 33
2022-08-06 06:38:42.117 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.117 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.117 | DEBUG    | __main__:run:508 - Running benchmark 34
2022-08-06 06:38:42.117 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.117 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.117 | DEBUG    | __main__:run:525 - Skipping benchmark 34:A0 as result already exists
2022-08-06 06:38:42.117 | DEBUG    | __main__:run:508 - Running benchmark 35
2022-08-06 06:38:42.118 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.118 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.118 | DEBUG    | __main__:run:525 - Skipping benchmark 35:A0 as result already exists
2022-08-06 06:38:42.118 | DEBUG    | __main__:run:508 - Running benchmark 36
2022-08-06 06:38:42.118 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.118 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.119 | DEBUG    | __main__:run:525 - Skipping benchmark 36:A0 as result already exists
2022-08-06 06:38:42.119 | DEBUG    | __main__:run:508 - Running benchmark 37
2022-08-06 06:38:42.119 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.119 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.119 | DEBUG    | __main__:run:525 - Skipping benchmark 37:A0 as result already exists
2022-08-06 06:38:42.119 | DEBUG    | __main__:run:508 - Running benchmark 38
2022-08-06 06:38:42.119 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.120 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.120 | DEBUG    | __main__:run:508 - Running benchmark 39
2022-08-06 06:38:42.120 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.120 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.120 | DEBUG    | __main__:run:508 - Running benchmark 40
2022-08-06 06:38:42.120 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.120 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.121 | DEBUG    | __main__:run:525 - Skipping benchmark 40:A0 as result already exists
2022-08-06 06:38:42.121 | DEBUG    | __main__:run:508 - Running benchmark 41
2022-08-06 06:38:42.121 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.121 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.121 | DEBUG    | __main__:run:525 - Skipping benchmark 41:A0 as result already exists
2022-08-06 06:38:42.121 | DEBUG    | __main__:run:508 - Running benchmark 42
2022-08-06 06:38:42.122 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.122 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.122 | DEBUG    | __main__:run:525 - Skipping benchmark 42:A0 as result already exists
2022-08-06 06:38:42.122 | DEBUG    | __main__:run:508 - Running benchmark 43
2022-08-06 06:38:42.122 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.122 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.122 | DEBUG    | __main__:run:525 - Skipping benchmark 43:A0 as result already exists
2022-08-06 06:38:42.123 | DEBUG    | __main__:run:508 - Running benchmark 44
2022-08-06 06:38:42.123 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.123 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.123 | DEBUG    | __main__:run:508 - Running benchmark 45
2022-08-06 06:38:42.123 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.123 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.123 | DEBUG    | __main__:run:525 - Skipping benchmark 45:A0 as result already exists
2022-08-06 06:38:42.124 | DEBUG    | __main__:run:508 - Running benchmark 46
2022-08-06 06:38:42.124 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.124 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.124 | DEBUG    | __main__:run:508 - Running benchmark 47
2022-08-06 06:38:42.124 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.124 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.125 | DEBUG    | __main__:run:508 - Running benchmark 48
2022-08-06 06:38:42.125 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.125 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.125 | DEBUG    | __main__:run:525 - Skipping benchmark 48:A0 as result already exists
2022-08-06 06:38:42.125 | DEBUG    | __main__:run:508 - Running benchmark 49
2022-08-06 06:38:42.125 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.125 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.126 | DEBUG    | __main__:run:525 - Skipping benchmark 49:A0 as result already exists
2022-08-06 06:38:42.126 | DEBUG    | __main__:run:508 - Running benchmark 50
2022-08-06 06:38:42.126 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.126 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.126 | DEBUG    | __main__:run:525 - Skipping benchmark 50:A0 as result already exists
2022-08-06 06:38:42.126 | DEBUG    | __main__:run:508 - Running benchmark 51
2022-08-06 06:38:42.126 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.127 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.127 | DEBUG    | __main__:run:508 - Running benchmark 52
2022-08-06 06:38:42.127 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.127 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.127 | DEBUG    | __main__:run:508 - Running benchmark 53
2022-08-06 06:38:42.127 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.127 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.128 | DEBUG    | __main__:run:508 - Running benchmark 54
2022-08-06 06:38:42.128 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.128 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.128 | DEBUG    | __main__:run:525 - Skipping benchmark 54:A0 as result already exists
2022-08-06 06:38:42.128 | DEBUG    | __main__:run:508 - Running benchmark 55
2022-08-06 06:38:42.128 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.128 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.129 | DEBUG    | __main__:run:508 - Running benchmark 56
2022-08-06 06:38:42.129 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.129 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.129 | DEBUG    | __main__:run:508 - Running benchmark 57
2022-08-06 06:38:42.129 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.129 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.129 | DEBUG    | __main__:run:508 - Running benchmark 58
2022-08-06 06:38:42.130 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.130 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.130 | DEBUG    | __main__:run:508 - Running benchmark 59
2022-08-06 06:38:42.130 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.130 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.130 | DEBUG    | __main__:run:525 - Skipping benchmark 59:A0 as result already exists
2022-08-06 06:38:42.130 | DEBUG    | __main__:run:508 - Running benchmark 60
2022-08-06 06:38:42.131 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.131 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.131 | DEBUG    | __main__:run:525 - Skipping benchmark 60:A0 as result already exists
2022-08-06 06:38:42.131 | DEBUG    | __main__:run:508 - Running benchmark 62
2022-08-06 06:38:42.131 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.131 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.131 | DEBUG    | __main__:run:525 - Skipping benchmark 62:A0 as result already exists
2022-08-06 06:38:42.132 | DEBUG    | __main__:run:508 - Running benchmark 63
2022-08-06 06:38:42.132 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.132 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.132 | DEBUG    | __main__:run:525 - Skipping benchmark 63:A0 as result already exists
2022-08-06 06:38:42.132 | DEBUG    | __main__:run:508 - Running benchmark 64
2022-08-06 06:38:42.132 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.133 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.133 | DEBUG    | __main__:run:508 - Running benchmark 65
2022-08-06 06:38:42.133 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.133 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.133 | DEBUG    | __main__:run:525 - Skipping benchmark 65:A0 as result already exists
2022-08-06 06:38:42.133 | DEBUG    | __main__:run:508 - Running benchmark 66
2022-08-06 06:38:42.133 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.134 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.134 | DEBUG    | __main__:run:525 - Skipping benchmark 66:A0 as result already exists
2022-08-06 06:38:42.134 | DEBUG    | __main__:run:508 - Running benchmark 67
2022-08-06 06:38:42.134 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:38:42.134 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.134 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval2
2022-08-06 06:38:42.134 | DEBUG    | __main__:run:495 - Found 21 benchmarks in PandasEval2
2022-08-06 06:38:42.135 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 06:38:42.135 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:38:42.135 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:38:42.135 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:38:42.135 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.135 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:38:42.135 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:38:42.136 | DEBUG    | __main__:run:525 - Skipping benchmark 0:E2 as result already exists
2022-08-06 06:38:42.136 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 06:38:42.136 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:38:42.136 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:38:42.136 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:38:42.136 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:38:42.136 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:38:42.137 | DEBUG    | __main__:run:525 - Skipping benchmark 1:C3 as result already exists
2022-08-06 06:38:42.137 | DEBUG    | __main__:run:525 - Skipping benchmark 1:C5 as result already exists
2022-08-06 06:38:42.137 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:38:42.137 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 06:38:42.137 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:38:42.137 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:38:42.137 | DEBUG    | __main__:run:525 - Skipping benchmark 2:A2 as result already exists
2022-08-06 06:38:42.138 | DEBUG    | __main__:run:525 - Skipping benchmark 2:A5 as result already exists
2022-08-06 06:38:42.138 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 06:38:42.138 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D0 as result already exists
2022-08-06 06:38:42.138 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D1 as result already exists
2022-08-06 06:38:42.138 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D3 as result already exists
2022-08-06 06:38:42.138 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D4 as result already exists
2022-08-06 06:38:42.138 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D5 as result already exists
2022-08-06 06:38:42.139 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D6 as result already exists
2022-08-06 06:38:42.139 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D7 as result already exists
2022-08-06 06:38:42.139 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D8 as result already exists
2022-08-06 06:38:42.139 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D9 as result already exists
2022-08-06 06:38:42.139 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D10 as result already exists
2022-08-06 06:38:42.139 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D11 as result already exists
2022-08-06 06:38:42.139 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:38:42.140 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B1 as result already exists
2022-08-06 06:38:42.140 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B2 as result already exists
2022-08-06 06:38:42.140 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B3 as result already exists
2022-08-06 06:38:42.140 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B4 as result already exists
2022-08-06 06:38:42.140 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B6 as result already exists
2022-08-06 06:38:42.140 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B7 as result already exists
2022-08-06 06:38:42.141 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B8 as result already exists
2022-08-06 06:38:42.141 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B9 as result already exists
2022-08-06 06:38:42.141 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 06:38:42.141 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C0 as result already exists
2022-08-06 06:38:42.141 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C1 as result already exists
2022-08-06 06:38:42.141 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C2 as result already exists
2022-08-06 06:38:42.141 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C3 as result already exists
2022-08-06 06:38:42.142 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C4 as result already exists
2022-08-06 06:38:42.142 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C5 as result already exists
2022-08-06 06:38:42.142 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C8 as result already exists
2022-08-06 06:38:42.142 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C9 as result already exists
2022-08-06 06:38:42.142 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:38:42.142 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E0 as result already exists
2022-08-06 06:38:42.143 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E1 as result already exists
2022-08-06 06:38:42.143 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E2 as result already exists
2022-08-06 06:38:42.143 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E3 as result already exists
2022-08-06 06:38:42.143 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E4 as result already exists
2022-08-06 06:38:42.143 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E5 as result already exists
2022-08-06 06:38:42.143 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E6 as result already exists
2022-08-06 06:38:42.143 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E7 as result already exists
2022-08-06 06:38:42.144 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E13 as result already exists
2022-08-06 06:38:42.144 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E14 as result already exists
2022-08-06 06:38:42.144 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E15 as result already exists
2022-08-06 06:38:42.144 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 06:38:42.144 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:38:42.144 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:38:42.144 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 06:38:42.145 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D1 as result already exists
2022-08-06 06:38:42.145 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D4 as result already exists
2022-08-06 06:38:42.145 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D7 as result already exists
2022-08-06 06:38:42.145 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D10 as result already exists
2022-08-06 06:38:42.145 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:38:42.145 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 06:38:42.145 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:38:42.146 | DEBUG    | __main__:run:525 - Skipping benchmark 3:E2 as result already exists
2022-08-06 06:38:42.146 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 06:38:42.146 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:38:42.146 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:38:42.146 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A0 as result already exists
2022-08-06 06:38:42.146 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A3 as result already exists
2022-08-06 06:38:42.146 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A4 as result already exists
2022-08-06 06:38:42.147 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:38:42.147 | DEBUG    | __main__:run:525 - Skipping benchmark 4:D1 as result already exists
2022-08-06 06:38:42.147 | DEBUG    | __main__:run:525 - Skipping benchmark 4:D2 as result already exists
2022-08-06 06:38:42.147 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:38:42.147 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:38:42.147 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C1 as result already exists
2022-08-06 06:38:42.147 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C2 as result already exists
2022-08-06 06:38:42.148 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C3 as result already exists
2022-08-06 06:38:42.148 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C4 as result already exists
2022-08-06 06:38:42.148 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C5 as result already exists
2022-08-06 06:38:42.148 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C6 as result already exists
2022-08-06 06:38:42.148 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:38:42.148 | DEBUG    | __main__:run:525 - Skipping benchmark 4:E2 as result already exists
2022-08-06 06:38:42.149 | DEBUG    | __main__:run:525 - Skipping benchmark 4:E4 as result already exists
2022-08-06 06:38:42.149 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 06:38:42.149 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:38:42.149 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:38:42.149 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A0 as result already exists
2022-08-06 06:38:42.149 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A1 as result already exists
2022-08-06 06:38:42.150 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A2 as result already exists
2022-08-06 06:38:42.150 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A3 as result already exists
2022-08-06 06:38:42.150 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:38:42.150 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D0 as result already exists
2022-08-06 06:38:42.150 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D1 as result already exists
2022-08-06 06:38:42.150 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D2 as result already exists
2022-08-06 06:38:42.150 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D3 as result already exists
2022-08-06 06:38:42.151 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D4 as result already exists
2022-08-06 06:38:42.151 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D5 as result already exists
2022-08-06 06:38:42.151 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D6 as result already exists
2022-08-06 06:38:42.151 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D7 as result already exists
2022-08-06 06:38:42.151 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D8 as result already exists
2022-08-06 06:38:42.151 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D9 as result already exists
2022-08-06 06:38:42.152 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D10 as result already exists
2022-08-06 06:38:42.152 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D11 as result already exists
2022-08-06 06:38:42.152 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D12 as result already exists
2022-08-06 06:38:42.152 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D13 as result already exists
2022-08-06 06:38:42.152 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D14 as result already exists
2022-08-06 06:38:42.152 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D15 as result already exists
2022-08-06 06:38:42.153 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:38:42.153 | DEBUG    | __main__:run:525 - Skipping benchmark 5:B4 as result already exists
2022-08-06 06:38:42.153 | DEBUG    | __main__:run:525 - Skipping benchmark 5:B5 as result already exists
2022-08-06 06:38:42.153 | DEBUG    | __main__:run:525 - Skipping benchmark 5:B6 as result already exists
2022-08-06 06:38:42.153 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:38:42.153 | DEBUG    | __main__:run:525 - Skipping benchmark 5:C0 as result already exists
2022-08-06 06:38:42.154 | DEBUG    | __main__:run:525 - Skipping benchmark 5:C1 as result already exists
2022-08-06 06:38:42.154 | DEBUG    | __main__:run:525 - Skipping benchmark 5:C2 as result already exists
2022-08-06 06:38:42.154 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:38:42.154 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E2 as result already exists
2022-08-06 06:38:42.154 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E3 as result already exists
2022-08-06 06:38:42.154 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E4 as result already exists
2022-08-06 06:38:42.154 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E5 as result already exists
2022-08-06 06:38:42.155 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E6 as result already exists
2022-08-06 06:38:42.155 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E8 as result already exists
2022-08-06 06:38:42.155 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E9 as result already exists
2022-08-06 06:38:42.155 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 06:38:42.155 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 06:38:42.155 | DEBUG    | __main__:run:515 - Number of queries: 27
2022-08-06 06:38:42.155 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D0 as result already exists
2022-08-06 06:38:42.156 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D1 as result already exists
2022-08-06 06:38:42.156 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D4 as result already exists
2022-08-06 06:38:42.156 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D7 as result already exists
2022-08-06 06:38:42.156 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D9 as result already exists
2022-08-06 06:38:42.156 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D10 as result already exists
2022-08-06 06:38:42.156 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D11 as result already exists
2022-08-06 06:38:42.157 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D12 as result already exists
2022-08-06 06:38:42.157 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D13 as result already exists
2022-08-06 06:38:42.157 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D18 as result already exists
2022-08-06 06:38:42.157 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D19 as result already exists
2022-08-06 06:38:42.157 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D20 as result already exists
2022-08-06 06:38:42.157 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D21 as result already exists
2022-08-06 06:38:42.158 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D22 as result already exists
2022-08-06 06:38:42.158 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D23 as result already exists
2022-08-06 06:38:42.158 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D24 as result already exists
2022-08-06 06:38:42.158 | DEBUG    | __main__:run:515 - Number of queries: 26
2022-08-06 06:38:42.158 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B17 as result already exists
2022-08-06 06:38:42.158 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B18 as result already exists
2022-08-06 06:38:42.158 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B24 as result already exists
2022-08-06 06:38:42.159 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B25 as result already exists
2022-08-06 06:38:42.159 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:38:42.159 | DEBUG    | __main__:run:525 - Skipping benchmark 6:E5 as result already exists
2022-08-06 06:38:42.159 | DEBUG    | __main__:run:525 - Skipping benchmark 6:E6 as result already exists
2022-08-06 06:38:42.159 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:38:42.159 | DEBUG    | __main__:run:525 - Skipping benchmark 6:C1 as result already exists
2022-08-06 06:38:42.159 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 06:38:42.160 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 06:38:42.160 | DEBUG    | __main__:run:515 - Number of queries: 21
2022-08-06 06:38:42.160 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D0 as result already exists
2022-08-06 06:38:42.160 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D1 as result already exists
2022-08-06 06:38:42.160 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D2 as result already exists
2022-08-06 06:38:42.160 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D3 as result already exists
2022-08-06 06:38:42.161 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D4 as result already exists
2022-08-06 06:38:42.161 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D5 as result already exists
2022-08-06 06:38:42.161 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D6 as result already exists
2022-08-06 06:38:42.161 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D7 as result already exists
2022-08-06 06:38:42.161 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D9 as result already exists
2022-08-06 06:38:42.161 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D10 as result already exists
2022-08-06 06:38:42.162 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D11 as result already exists
2022-08-06 06:38:42.162 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D12 as result already exists
2022-08-06 06:38:42.162 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D13 as result already exists
2022-08-06 06:38:42.162 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D14 as result already exists
2022-08-06 06:38:42.162 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D15 as result already exists
2022-08-06 06:38:42.162 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D16 as result already exists
2022-08-06 06:38:42.162 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D17 as result already exists
2022-08-06 06:38:42.163 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D18 as result already exists
2022-08-06 06:38:42.163 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D19 as result already exists
2022-08-06 06:38:42.163 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D20 as result already exists
2022-08-06 06:38:42.163 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:38:42.163 | DEBUG    | __main__:run:525 - Skipping benchmark 7:A0 as result already exists
2022-08-06 06:38:42.163 | DEBUG    | __main__:run:525 - Skipping benchmark 7:A1 as result already exists
2022-08-06 06:38:42.163 | DEBUG    | __main__:run:525 - Skipping benchmark 7:A2 as result already exists
2022-08-06 06:38:42.164 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:38:42.164 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E0 as result already exists
2022-08-06 06:38:42.164 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E2 as result already exists
2022-08-06 06:38:42.164 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E3 as result already exists
2022-08-06 06:38:42.164 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 06:38:42.164 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 06:38:42.164 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:38:42.165 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C0 as result already exists
2022-08-06 06:38:42.165 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C1 as result already exists
2022-08-06 06:38:42.165 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C2 as result already exists
2022-08-06 06:38:42.165 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C3 as result already exists
2022-08-06 06:38:42.165 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:38:42.165 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A0 as result already exists
2022-08-06 06:38:42.165 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A2 as result already exists
2022-08-06 06:38:42.166 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A3 as result already exists
2022-08-06 06:38:42.166 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A4 as result already exists
2022-08-06 06:38:42.166 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 06:38:42.166 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D3 as result already exists
2022-08-06 06:38:42.166 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D6 as result already exists
2022-08-06 06:38:42.166 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D7 as result already exists
2022-08-06 06:38:42.166 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D8 as result already exists
2022-08-06 06:38:42.167 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 06:38:42.167 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:38:42.167 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:38:42.167 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D0 as result already exists
2022-08-06 06:38:42.167 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D1 as result already exists
2022-08-06 06:38:42.167 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D2 as result already exists
2022-08-06 06:38:42.167 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D3 as result already exists
2022-08-06 06:38:42.168 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D6 as result already exists
2022-08-06 06:38:42.168 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:38:42.168 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:38:42.168 | DEBUG    | __main__:run:525 - Skipping benchmark 9:C2 as result already exists
2022-08-06 06:38:42.168 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:38:42.168 | DEBUG    | __main__:run:525 - Skipping benchmark 9:A2 as result already exists
2022-08-06 06:38:42.168 | DEBUG    | __main__:run:525 - Skipping benchmark 9:A3 as result already exists
2022-08-06 06:38:42.168 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:38:42.169 | DEBUG    | __main__:run:525 - Skipping benchmark 9:E0 as result already exists
2022-08-06 06:38:42.169 | DEBUG    | __main__:run:525 - Skipping benchmark 9:E2 as result already exists
2022-08-06 06:38:42.169 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 06:38:42.169 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:38:42.169 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.169 | DEBUG    | __main__:run:525 - Skipping benchmark 10:C0 as result already exists
2022-08-06 06:38:42.170 | DEBUG    | __main__:run:515 - Number of queries: 23
2022-08-06 06:38:42.170 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D0 as result already exists
2022-08-06 06:38:42.170 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D1 as result already exists
2022-08-06 06:38:42.170 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D5 as result already exists
2022-08-06 06:38:42.170 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D6 as result already exists
2022-08-06 06:38:42.170 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D7 as result already exists
2022-08-06 06:38:42.170 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D8 as result already exists
2022-08-06 06:38:42.171 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D9 as result already exists
2022-08-06 06:38:42.171 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D10 as result already exists
2022-08-06 06:38:42.171 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D11 as result already exists
2022-08-06 06:38:42.171 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D13 as result already exists
2022-08-06 06:38:42.171 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D14 as result already exists
2022-08-06 06:38:42.171 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D15 as result already exists
2022-08-06 06:38:42.171 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D18 as result already exists
2022-08-06 06:38:42.171 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D19 as result already exists
2022-08-06 06:38:42.172 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D21 as result already exists
2022-08-06 06:38:42.172 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D22 as result already exists
2022-08-06 06:38:42.172 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.172 | DEBUG    | __main__:run:525 - Skipping benchmark 10:A0 as result already exists
2022-08-06 06:38:42.172 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 06:38:42.172 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E0 as result already exists
2022-08-06 06:38:42.172 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E1 as result already exists
2022-08-06 06:38:42.173 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E3 as result already exists
2022-08-06 06:38:42.173 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E4 as result already exists
2022-08-06 06:38:42.173 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E5 as result already exists
2022-08-06 06:38:42.173 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E6 as result already exists
2022-08-06 06:38:42.173 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E7 as result already exists
2022-08-06 06:38:42.173 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E8 as result already exists
2022-08-06 06:38:42.173 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E9 as result already exists
2022-08-06 06:38:42.174 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E10 as result already exists
2022-08-06 06:38:42.174 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E11 as result already exists
2022-08-06 06:38:42.174 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.174 | DEBUG    | __main__:run:525 - Skipping benchmark 10:B0 as result already exists
2022-08-06 06:38:42.174 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 06:38:42.174 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:38:42.174 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:38:42.174 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D0 as result already exists
2022-08-06 06:38:42.175 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D1 as result already exists
2022-08-06 06:38:42.175 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D4 as result already exists
2022-08-06 06:38:42.175 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D6 as result already exists
2022-08-06 06:38:42.175 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D7 as result already exists
2022-08-06 06:38:42.175 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.175 | DEBUG    | __main__:run:525 - Skipping benchmark 11:C0 as result already exists
2022-08-06 06:38:42.175 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:38:42.175 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A0 as result already exists
2022-08-06 06:38:42.176 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A1 as result already exists
2022-08-06 06:38:42.176 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A2 as result already exists
2022-08-06 06:38:42.176 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A3 as result already exists
2022-08-06 06:38:42.176 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:38:42.176 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:38:42.176 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B0 as result already exists
2022-08-06 06:38:42.176 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B1 as result already exists
2022-08-06 06:38:42.177 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B2 as result already exists
2022-08-06 06:38:42.177 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B3 as result already exists
2022-08-06 06:38:42.177 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B4 as result already exists
2022-08-06 06:38:42.177 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 06:38:42.177 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:38:42.177 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:38:42.177 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.177 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:38:42.178 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:38:42.178 | DEBUG    | __main__:run:525 - Skipping benchmark 12:A3 as result already exists
2022-08-06 06:38:42.178 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:38:42.178 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 06:38:42.178 | DEBUG    | __main__:run:509 - Number of Sets: 2
2022-08-06 06:38:42.178 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:38:42.178 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.179 | DEBUG    | __main__:run:525 - Skipping benchmark 13:A0 as result already exists
2022-08-06 06:38:42.179 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 06:38:42.179 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:38:42.179 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:38:42.179 | DEBUG    | __main__:run:525 - Skipping benchmark 14:D0 as result already exists
2022-08-06 06:38:42.179 | DEBUG    | __main__:run:525 - Skipping benchmark 14:D1 as result already exists
2022-08-06 06:38:42.179 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 06:38:42.179 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C0 as result already exists
2022-08-06 06:38:42.180 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C1 as result already exists
2022-08-06 06:38:42.180 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C2 as result already exists
2022-08-06 06:38:42.180 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C3 as result already exists
2022-08-06 06:38:42.180 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C5 as result already exists
2022-08-06 06:38:42.180 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C6 as result already exists
2022-08-06 06:38:42.180 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C7 as result already exists
2022-08-06 06:38:42.180 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C8 as result already exists
2022-08-06 06:38:42.180 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:38:42.181 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A0 as result already exists
2022-08-06 06:38:42.181 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A1 as result already exists
2022-08-06 06:38:42.181 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A2 as result already exists
2022-08-06 06:38:42.181 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A4 as result already exists
2022-08-06 06:38:42.181 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 06:38:42.181 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E0 as result already exists
2022-08-06 06:38:42.181 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E1 as result already exists
2022-08-06 06:38:42.182 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E4 as result already exists
2022-08-06 06:38:42.182 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E6 as result already exists
2022-08-06 06:38:42.182 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E7 as result already exists
2022-08-06 06:38:42.182 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E10 as result already exists
2022-08-06 06:38:42.182 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E11 as result already exists
2022-08-06 06:38:42.182 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E12 as result already exists
2022-08-06 06:38:42.182 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:38:42.182 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B0 as result already exists
2022-08-06 06:38:42.183 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B3 as result already exists
2022-08-06 06:38:42.183 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B4 as result already exists
2022-08-06 06:38:42.183 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B5 as result already exists
2022-08-06 06:38:42.183 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 06:38:42.183 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:38:42.183 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 06:38:42.183 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D2 as result already exists
2022-08-06 06:38:42.183 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D3 as result already exists
2022-08-06 06:38:42.184 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D4 as result already exists
2022-08-06 06:38:42.184 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D5 as result already exists
2022-08-06 06:38:42.184 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D7 as result already exists
2022-08-06 06:38:42.184 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D8 as result already exists
2022-08-06 06:38:42.184 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D9 as result already exists
2022-08-06 06:38:42.184 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D10 as result already exists
2022-08-06 06:38:42.184 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D11 as result already exists
2022-08-06 06:38:42.185 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D15 as result already exists
2022-08-06 06:38:42.185 | DEBUG    | __main__:run:515 - Number of queries: 22
2022-08-06 06:38:42.185 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B0 as result already exists
2022-08-06 06:38:42.185 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B2 as result already exists
2022-08-06 06:38:42.185 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B7 as result already exists
2022-08-06 06:38:42.185 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B11 as result already exists
2022-08-06 06:38:42.185 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B12 as result already exists
2022-08-06 06:38:42.185 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B14 as result already exists
2022-08-06 06:38:42.186 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B15 as result already exists
2022-08-06 06:38:42.186 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B16 as result already exists
2022-08-06 06:38:42.186 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B18 as result already exists
2022-08-06 06:38:42.186 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:38:42.186 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C0 as result already exists
2022-08-06 06:38:42.186 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C1 as result already exists
2022-08-06 06:38:42.186 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C2 as result already exists
2022-08-06 06:38:42.187 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C3 as result already exists
2022-08-06 06:38:42.187 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:38:42.187 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A2 as result already exists
2022-08-06 06:38:42.187 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A3 as result already exists
2022-08-06 06:38:42.187 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A4 as result already exists
2022-08-06 06:38:42.187 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A5 as result already exists
2022-08-06 06:38:42.187 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A6 as result already exists
2022-08-06 06:38:42.187 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:38:42.188 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E4 as result already exists
2022-08-06 06:38:42.188 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E6 as result already exists
2022-08-06 06:38:42.188 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E7 as result already exists
2022-08-06 06:38:42.188 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E8 as result already exists
2022-08-06 06:38:42.188 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E9 as result already exists
2022-08-06 06:38:42.188 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E10 as result already exists
2022-08-06 06:38:42.188 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E11 as result already exists
2022-08-06 06:38:42.188 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E12 as result already exists
2022-08-06 06:38:42.189 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E13 as result already exists
2022-08-06 06:38:42.189 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E14 as result already exists
2022-08-06 06:38:42.189 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 06:38:42.189 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 06:38:42.189 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:38:42.189 | DEBUG    | __main__:run:525 - Skipping benchmark 16:B0 as result already exists
2022-08-06 06:38:42.189 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.190 | DEBUG    | __main__:run:525 - Skipping benchmark 16:A0 as result already exists
2022-08-06 06:38:42.190 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:38:42.190 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E0 as result already exists
2022-08-06 06:38:42.190 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E1 as result already exists
2022-08-06 06:38:42.190 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E2 as result already exists
2022-08-06 06:38:42.190 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E3 as result already exists
2022-08-06 06:38:42.190 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E4 as result already exists
2022-08-06 06:38:42.190 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:38:42.191 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D0 as result already exists
2022-08-06 06:38:42.191 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D2 as result already exists
2022-08-06 06:38:42.191 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D3 as result already exists
2022-08-06 06:38:42.191 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 06:38:42.191 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:38:42.191 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:38:42.191 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B0 as result already exists
2022-08-06 06:38:42.192 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B1 as result already exists
2022-08-06 06:38:42.192 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B2 as result already exists
2022-08-06 06:38:42.192 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B4 as result already exists
2022-08-06 06:38:42.192 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 06:38:42.192 | DEBUG    | __main__:run:525 - Skipping benchmark 17:C5 as result already exists
2022-08-06 06:38:42.192 | DEBUG    | __main__:run:525 - Skipping benchmark 17:C6 as result already exists
2022-08-06 06:38:42.192 | DEBUG    | __main__:run:525 - Skipping benchmark 17:C7 as result already exists
2022-08-06 06:38:42.192 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:38:42.193 | DEBUG    | __main__:run:525 - Skipping benchmark 17:A3 as result already exists
2022-08-06 06:38:42.193 | DEBUG    | __main__:run:525 - Skipping benchmark 17:A4 as result already exists
2022-08-06 06:38:42.193 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 06:38:42.193 | DEBUG    | __main__:run:525 - Skipping benchmark 17:D11 as result already exists
2022-08-06 06:38:42.193 | DEBUG    | __main__:run:515 - Number of queries: 25
2022-08-06 06:38:42.193 | DEBUG    | __main__:run:525 - Skipping benchmark 17:E14 as result already exists
2022-08-06 06:38:42.193 | DEBUG    | __main__:run:525 - Skipping benchmark 17:E24 as result already exists
2022-08-06 06:38:42.193 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 06:38:42.194 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 06:38:42.194 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:38:42.194 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A0 as result already exists
2022-08-06 06:38:42.194 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A1 as result already exists
2022-08-06 06:38:42.194 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A2 as result already exists
2022-08-06 06:38:42.194 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A3 as result already exists
2022-08-06 06:38:42.194 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A4 as result already exists
2022-08-06 06:38:42.195 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A5 as result already exists
2022-08-06 06:38:42.195 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:38:42.195 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D0 as result already exists
2022-08-06 06:38:42.195 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D1 as result already exists
2022-08-06 06:38:42.195 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D2 as result already exists
2022-08-06 06:38:42.195 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D3 as result already exists
2022-08-06 06:38:42.195 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D4 as result already exists
2022-08-06 06:38:42.195 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D5 as result already exists
2022-08-06 06:38:42.196 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D6 as result already exists
2022-08-06 06:38:42.196 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D7 as result already exists
2022-08-06 06:38:42.196 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D8 as result already exists
2022-08-06 06:38:42.196 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D9 as result already exists
2022-08-06 06:38:42.196 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D10 as result already exists
2022-08-06 06:38:42.196 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D11 as result already exists
2022-08-06 06:38:42.196 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D12 as result already exists
2022-08-06 06:38:42.196 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D13 as result already exists
2022-08-06 06:38:42.197 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D14 as result already exists
2022-08-06 06:38:42.197 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D15 as result already exists
2022-08-06 06:38:42.197 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:38:42.197 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E0 as result already exists
2022-08-06 06:38:42.197 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E1 as result already exists
2022-08-06 06:38:42.197 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E2 as result already exists
2022-08-06 06:38:42.197 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E3 as result already exists
2022-08-06 06:38:42.198 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E4 as result already exists
2022-08-06 06:38:42.198 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E5 as result already exists
2022-08-06 06:38:42.198 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E6 as result already exists
2022-08-06 06:38:42.198 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E7 as result already exists
2022-08-06 06:38:42.198 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 06:38:42.198 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:38:42.198 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:38:42.198 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:38:42.199 | DEBUG    | __main__:run:525 - Skipping benchmark 19:C0 as result already exists
2022-08-06 06:38:42.199 | DEBUG    | __main__:run:525 - Skipping benchmark 19:C3 as result already exists
2022-08-06 06:38:42.199 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:38:42.199 | DEBUG    | __main__:run:525 - Skipping benchmark 19:D1 as result already exists
2022-08-06 06:38:42.199 | DEBUG    | __main__:run:525 - Skipping benchmark 19:D2 as result already exists
2022-08-06 06:38:42.199 | DEBUG    | __main__:run:525 - Skipping benchmark 19:D5 as result already exists
2022-08-06 06:38:42.199 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 06:38:42.199 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A1 as result already exists
2022-08-06 06:38:42.200 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A2 as result already exists
2022-08-06 06:38:42.200 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A4 as result already exists
2022-08-06 06:38:42.200 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A8 as result already exists
2022-08-06 06:38:42.200 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A10 as result already exists
2022-08-06 06:38:42.200 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A11 as result already exists
2022-08-06 06:38:42.200 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A14 as result already exists
2022-08-06 06:38:42.200 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:38:42.201 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E1 as result already exists
2022-08-06 06:38:42.201 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E2 as result already exists
2022-08-06 06:38:42.201 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E3 as result already exists
2022-08-06 06:38:42.201 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E4 as result already exists
2022-08-06 06:38:42.201 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 06:38:42.201 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:38:42.201 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:38:42.201 | DEBUG    | __main__:run:525 - Skipping benchmark 20:B1 as result already exists
2022-08-06 06:38:42.202 | DEBUG    | __main__:run:525 - Skipping benchmark 20:B2 as result already exists
2022-08-06 06:38:42.202 | DEBUG    | __main__:run:525 - Skipping benchmark 20:B3 as result already exists
2022-08-06 06:38:42.202 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:38:42.202 | DEBUG    | __main__:run:525 - Skipping benchmark 20:C0 as result already exists
2022-08-06 06:38:42.202 | DEBUG    | __main__:run:515 - Number of queries: 17
2022-08-06 06:38:42.202 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D0 as result already exists
2022-08-06 06:38:42.202 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D2 as result already exists
2022-08-06 06:38:42.202 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D3 as result already exists
2022-08-06 06:38:42.203 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D5 as result already exists
2022-08-06 06:38:42.203 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D6 as result already exists
2022-08-06 06:38:42.203 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D7 as result already exists
2022-08-06 06:38:42.203 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D10 as result already exists
2022-08-06 06:38:42.203 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D11 as result already exists
2022-08-06 06:38:42.203 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D12 as result already exists
2022-08-06 06:38:42.203 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D13 as result already exists
2022-08-06 06:38:42.204 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D14 as result already exists
2022-08-06 06:38:42.204 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:38:42.204 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:38:42.204 | DEBUG    | __main__:run:525 - Skipping benchmark 20:E0 as result already exists
2022-08-06 06:39:02.133 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval1
2022-08-06 06:39:02.133 | DEBUG    | __main__:run:495 - Found 68 benchmarks in PandasEval1
2022-08-06 06:39:02.134 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 06:39:02.134 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.134 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.134 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 06:39:02.134 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.134 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.135 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 06:39:02.135 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.135 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.135 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 06:39:02.135 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.135 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.135 | DEBUG    | __main__:run:525 - Skipping benchmark 3:A0 as result already exists
2022-08-06 06:39:02.136 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 06:39:02.136 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.136 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.136 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 06:39:02.136 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.136 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.136 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 06:39:02.137 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.137 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.137 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 06:39:02.137 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.137 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.137 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 06:39:02.137 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.137 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.137 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 06:39:02.137 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.138 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.138 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 06:39:02.138 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.138 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.138 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 06:39:02.138 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.138 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.138 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A0 as result already exists
2022-08-06 06:39:02.138 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 06:39:02.139 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.139 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.139 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 06:39:02.139 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.139 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.139 | DEBUG    | __main__:run:525 - Skipping benchmark 13:A0 as result already exists
2022-08-06 06:39:02.139 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 06:39:02.139 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.139 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.139 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 06:39:02.140 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.140 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.140 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 06:39:02.140 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.140 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.140 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 06:39:02.140 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.140 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.141 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 06:39:02.141 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.141 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.141 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A0 as result already exists
2022-08-06 06:39:02.141 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 06:39:02.141 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.141 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.141 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 06:39:02.141 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.142 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.142 | DEBUG    | __main__:run:508 - Running benchmark 21
2022-08-06 06:39:02.142 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.142 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.142 | DEBUG    | __main__:run:508 - Running benchmark 22
2022-08-06 06:39:02.142 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.142 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.142 | DEBUG    | __main__:run:525 - Skipping benchmark 22:A0 as result already exists
2022-08-06 06:39:02.142 | DEBUG    | __main__:run:508 - Running benchmark 23
2022-08-06 06:39:02.143 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.143 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.143 | DEBUG    | __main__:run:508 - Running benchmark 24
2022-08-06 06:39:02.143 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.143 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.143 | DEBUG    | __main__:run:508 - Running benchmark 25
2022-08-06 06:39:02.143 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.143 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.143 | DEBUG    | __main__:run:508 - Running benchmark 26
2022-08-06 06:39:02.144 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.144 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.144 | DEBUG    | __main__:run:525 - Skipping benchmark 26:A0 as result already exists
2022-08-06 06:39:02.144 | DEBUG    | __main__:run:508 - Running benchmark 27
2022-08-06 06:39:02.144 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.144 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.144 | DEBUG    | __main__:run:508 - Running benchmark 28
2022-08-06 06:39:02.145 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.145 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.145 | DEBUG    | __main__:run:525 - Skipping benchmark 28:A0 as result already exists
2022-08-06 06:39:02.145 | DEBUG    | __main__:run:508 - Running benchmark 29
2022-08-06 06:39:02.145 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.145 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.145 | DEBUG    | __main__:run:508 - Running benchmark 30
2022-08-06 06:39:02.145 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.145 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.145 | DEBUG    | __main__:run:525 - Skipping benchmark 30:A0 as result already exists
2022-08-06 06:39:02.146 | DEBUG    | __main__:run:508 - Running benchmark 31
2022-08-06 06:39:02.146 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.146 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.146 | DEBUG    | __main__:run:508 - Running benchmark 32
2022-08-06 06:39:02.146 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.146 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.146 | DEBUG    | __main__:run:508 - Running benchmark 33
2022-08-06 06:39:02.146 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.146 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.147 | DEBUG    | __main__:run:508 - Running benchmark 34
2022-08-06 06:39:02.147 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.147 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.147 | DEBUG    | __main__:run:525 - Skipping benchmark 34:A0 as result already exists
2022-08-06 06:39:02.147 | DEBUG    | __main__:run:508 - Running benchmark 35
2022-08-06 06:39:02.147 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.147 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.147 | DEBUG    | __main__:run:525 - Skipping benchmark 35:A0 as result already exists
2022-08-06 06:39:02.147 | DEBUG    | __main__:run:508 - Running benchmark 36
2022-08-06 06:39:02.147 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.148 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.148 | DEBUG    | __main__:run:525 - Skipping benchmark 36:A0 as result already exists
2022-08-06 06:39:02.148 | DEBUG    | __main__:run:508 - Running benchmark 37
2022-08-06 06:39:02.148 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.148 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.148 | DEBUG    | __main__:run:525 - Skipping benchmark 37:A0 as result already exists
2022-08-06 06:39:02.148 | DEBUG    | __main__:run:508 - Running benchmark 38
2022-08-06 06:39:02.148 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.149 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.149 | DEBUG    | __main__:run:508 - Running benchmark 39
2022-08-06 06:39:02.149 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.149 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.149 | DEBUG    | __main__:run:508 - Running benchmark 40
2022-08-06 06:39:02.149 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.149 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.149 | DEBUG    | __main__:run:525 - Skipping benchmark 40:A0 as result already exists
2022-08-06 06:39:02.149 | DEBUG    | __main__:run:508 - Running benchmark 41
2022-08-06 06:39:02.149 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.150 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.150 | DEBUG    | __main__:run:525 - Skipping benchmark 41:A0 as result already exists
2022-08-06 06:39:02.150 | DEBUG    | __main__:run:508 - Running benchmark 42
2022-08-06 06:39:02.150 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.150 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.150 | DEBUG    | __main__:run:525 - Skipping benchmark 42:A0 as result already exists
2022-08-06 06:39:02.150 | DEBUG    | __main__:run:508 - Running benchmark 43
2022-08-06 06:39:02.150 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.150 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.151 | DEBUG    | __main__:run:525 - Skipping benchmark 43:A0 as result already exists
2022-08-06 06:39:02.151 | DEBUG    | __main__:run:508 - Running benchmark 44
2022-08-06 06:39:02.151 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.151 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.151 | DEBUG    | __main__:run:508 - Running benchmark 45
2022-08-06 06:39:02.151 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.151 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.151 | DEBUG    | __main__:run:525 - Skipping benchmark 45:A0 as result already exists
2022-08-06 06:39:02.151 | DEBUG    | __main__:run:508 - Running benchmark 46
2022-08-06 06:39:02.151 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.152 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.152 | DEBUG    | __main__:run:508 - Running benchmark 47
2022-08-06 06:39:02.152 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.152 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.152 | DEBUG    | __main__:run:508 - Running benchmark 48
2022-08-06 06:39:02.152 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.152 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.152 | DEBUG    | __main__:run:525 - Skipping benchmark 48:A0 as result already exists
2022-08-06 06:39:02.152 | DEBUG    | __main__:run:508 - Running benchmark 49
2022-08-06 06:39:02.153 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.153 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.153 | DEBUG    | __main__:run:525 - Skipping benchmark 49:A0 as result already exists
2022-08-06 06:39:02.153 | DEBUG    | __main__:run:508 - Running benchmark 50
2022-08-06 06:39:02.153 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.153 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.153 | DEBUG    | __main__:run:525 - Skipping benchmark 50:A0 as result already exists
2022-08-06 06:39:02.153 | DEBUG    | __main__:run:508 - Running benchmark 51
2022-08-06 06:39:02.153 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.154 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.154 | DEBUG    | __main__:run:508 - Running benchmark 52
2022-08-06 06:39:02.154 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.154 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.154 | DEBUG    | __main__:run:508 - Running benchmark 53
2022-08-06 06:39:02.154 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.154 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.154 | DEBUG    | __main__:run:508 - Running benchmark 54
2022-08-06 06:39:02.154 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.154 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.155 | DEBUG    | __main__:run:525 - Skipping benchmark 54:A0 as result already exists
2022-08-06 06:39:02.155 | DEBUG    | __main__:run:508 - Running benchmark 55
2022-08-06 06:39:02.155 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.155 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.155 | DEBUG    | __main__:run:508 - Running benchmark 56
2022-08-06 06:39:02.155 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.155 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.155 | DEBUG    | __main__:run:508 - Running benchmark 57
2022-08-06 06:39:02.155 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.156 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.156 | DEBUG    | __main__:run:508 - Running benchmark 58
2022-08-06 06:39:02.156 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.156 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.156 | DEBUG    | __main__:run:508 - Running benchmark 59
2022-08-06 06:39:02.156 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.156 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.156 | DEBUG    | __main__:run:525 - Skipping benchmark 59:A0 as result already exists
2022-08-06 06:39:02.157 | DEBUG    | __main__:run:508 - Running benchmark 60
2022-08-06 06:39:02.157 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.157 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.157 | DEBUG    | __main__:run:525 - Skipping benchmark 60:A0 as result already exists
2022-08-06 06:39:02.157 | DEBUG    | __main__:run:508 - Running benchmark 62
2022-08-06 06:39:02.157 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.157 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.157 | DEBUG    | __main__:run:525 - Skipping benchmark 62:A0 as result already exists
2022-08-06 06:39:02.157 | DEBUG    | __main__:run:508 - Running benchmark 63
2022-08-06 06:39:02.157 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.158 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.158 | DEBUG    | __main__:run:525 - Skipping benchmark 63:A0 as result already exists
2022-08-06 06:39:02.158 | DEBUG    | __main__:run:508 - Running benchmark 64
2022-08-06 06:39:02.158 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.158 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.158 | DEBUG    | __main__:run:508 - Running benchmark 65
2022-08-06 06:39:02.158 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.158 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.158 | DEBUG    | __main__:run:525 - Skipping benchmark 65:A0 as result already exists
2022-08-06 06:39:02.159 | DEBUG    | __main__:run:508 - Running benchmark 66
2022-08-06 06:39:02.159 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.159 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.159 | DEBUG    | __main__:run:525 - Skipping benchmark 66:A0 as result already exists
2022-08-06 06:39:02.159 | DEBUG    | __main__:run:508 - Running benchmark 67
2022-08-06 06:39:02.159 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:02.159 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.159 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval2
2022-08-06 06:39:02.159 | DEBUG    | __main__:run:495 - Found 21 benchmarks in PandasEval2
2022-08-06 06:39:02.160 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 06:39:02.160 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:02.160 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:39:02.160 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:39:02.160 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.160 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:39:02.160 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:39:02.160 | DEBUG    | __main__:run:525 - Skipping benchmark 0:E2 as result already exists
2022-08-06 06:39:02.160 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 06:39:02.161 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:02.161 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:39:02.161 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:39:02.161 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:39:02.161 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:02.161 | DEBUG    | __main__:run:525 - Skipping benchmark 1:C3 as result already exists
2022-08-06 06:39:02.161 | DEBUG    | __main__:run:525 - Skipping benchmark 1:C5 as result already exists
2022-08-06 06:39:02.161 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:39:02.161 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 06:39:02.161 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:02.162 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:02.162 | DEBUG    | __main__:run:525 - Skipping benchmark 2:A2 as result already exists
2022-08-06 06:39:02.162 | DEBUG    | __main__:run:525 - Skipping benchmark 2:A5 as result already exists
2022-08-06 06:39:02.162 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 06:39:02.162 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D0 as result already exists
2022-08-06 06:39:02.162 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D1 as result already exists
2022-08-06 06:39:02.162 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D3 as result already exists
2022-08-06 06:39:02.162 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D4 as result already exists
2022-08-06 06:39:02.162 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D5 as result already exists
2022-08-06 06:39:02.163 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D6 as result already exists
2022-08-06 06:39:02.163 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D7 as result already exists
2022-08-06 06:39:02.163 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D8 as result already exists
2022-08-06 06:39:02.163 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D9 as result already exists
2022-08-06 06:39:02.163 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D10 as result already exists
2022-08-06 06:39:02.163 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D11 as result already exists
2022-08-06 06:39:02.163 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:39:02.163 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B1 as result already exists
2022-08-06 06:39:02.163 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B2 as result already exists
2022-08-06 06:39:02.164 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B3 as result already exists
2022-08-06 06:39:02.164 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B4 as result already exists
2022-08-06 06:39:02.164 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B6 as result already exists
2022-08-06 06:39:02.164 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B7 as result already exists
2022-08-06 06:39:02.164 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B8 as result already exists
2022-08-06 06:39:02.164 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B9 as result already exists
2022-08-06 06:39:02.164 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 06:39:02.164 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C0 as result already exists
2022-08-06 06:39:02.165 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C1 as result already exists
2022-08-06 06:39:02.165 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C2 as result already exists
2022-08-06 06:39:02.165 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C3 as result already exists
2022-08-06 06:39:02.165 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C4 as result already exists
2022-08-06 06:39:02.165 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C5 as result already exists
2022-08-06 06:39:02.165 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C8 as result already exists
2022-08-06 06:39:02.165 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C9 as result already exists
2022-08-06 06:39:02.165 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:39:02.165 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E0 as result already exists
2022-08-06 06:39:02.165 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E1 as result already exists
2022-08-06 06:39:02.166 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E2 as result already exists
2022-08-06 06:39:02.166 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E3 as result already exists
2022-08-06 06:39:02.166 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E4 as result already exists
2022-08-06 06:39:02.166 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E5 as result already exists
2022-08-06 06:39:02.166 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E6 as result already exists
2022-08-06 06:39:02.166 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E7 as result already exists
2022-08-06 06:39:02.166 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E13 as result already exists
2022-08-06 06:39:02.166 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E14 as result already exists
2022-08-06 06:39:02.166 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E15 as result already exists
2022-08-06 06:39:02.167 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 06:39:02.167 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:02.167 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:39:02.167 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 06:39:02.167 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D1 as result already exists
2022-08-06 06:39:02.167 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D4 as result already exists
2022-08-06 06:39:02.167 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D7 as result already exists
2022-08-06 06:39:02.167 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D10 as result already exists
2022-08-06 06:39:02.167 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:02.168 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 06:39:02.168 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:02.168 | DEBUG    | __main__:run:525 - Skipping benchmark 3:E2 as result already exists
2022-08-06 06:39:02.168 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 06:39:02.168 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:02.168 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:02.168 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A0 as result already exists
2022-08-06 06:39:02.168 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A3 as result already exists
2022-08-06 06:39:02.168 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A4 as result already exists
2022-08-06 06:39:02.169 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:39:02.169 | DEBUG    | __main__:run:525 - Skipping benchmark 4:D1 as result already exists
2022-08-06 06:39:02.169 | DEBUG    | __main__:run:525 - Skipping benchmark 4:D2 as result already exists
2022-08-06 06:39:02.169 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:39:02.169 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:39:02.169 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C1 as result already exists
2022-08-06 06:39:02.169 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C2 as result already exists
2022-08-06 06:39:02.170 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C3 as result already exists
2022-08-06 06:39:02.170 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C4 as result already exists
2022-08-06 06:39:02.170 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C5 as result already exists
2022-08-06 06:39:02.170 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C6 as result already exists
2022-08-06 06:39:02.170 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:02.170 | DEBUG    | __main__:run:525 - Skipping benchmark 4:E2 as result already exists
2022-08-06 06:39:02.170 | DEBUG    | __main__:run:525 - Skipping benchmark 4:E4 as result already exists
2022-08-06 06:39:02.170 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 06:39:02.170 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:02.171 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:39:02.171 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A0 as result already exists
2022-08-06 06:39:02.171 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A1 as result already exists
2022-08-06 06:39:02.171 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A2 as result already exists
2022-08-06 06:39:02.171 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A3 as result already exists
2022-08-06 06:39:02.171 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:39:02.171 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D0 as result already exists
2022-08-06 06:39:02.171 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D1 as result already exists
2022-08-06 06:39:02.171 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D2 as result already exists
2022-08-06 06:39:02.171 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D3 as result already exists
2022-08-06 06:39:02.172 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D4 as result already exists
2022-08-06 06:39:02.172 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D5 as result already exists
2022-08-06 06:39:02.172 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D6 as result already exists
2022-08-06 06:39:02.172 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D7 as result already exists
2022-08-06 06:39:02.172 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D8 as result already exists
2022-08-06 06:39:02.172 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D9 as result already exists
2022-08-06 06:39:02.172 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D10 as result already exists
2022-08-06 06:39:02.172 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D11 as result already exists
2022-08-06 06:39:02.172 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D12 as result already exists
2022-08-06 06:39:02.173 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D13 as result already exists
2022-08-06 06:39:02.173 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D14 as result already exists
2022-08-06 06:39:02.173 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D15 as result already exists
2022-08-06 06:39:02.173 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:39:02.173 | DEBUG    | __main__:run:525 - Skipping benchmark 5:B4 as result already exists
2022-08-06 06:39:02.173 | DEBUG    | __main__:run:525 - Skipping benchmark 5:B5 as result already exists
2022-08-06 06:39:02.173 | DEBUG    | __main__:run:525 - Skipping benchmark 5:B6 as result already exists
2022-08-06 06:39:02.173 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:02.173 | DEBUG    | __main__:run:525 - Skipping benchmark 5:C0 as result already exists
2022-08-06 06:39:02.173 | DEBUG    | __main__:run:525 - Skipping benchmark 5:C1 as result already exists
2022-08-06 06:39:02.174 | DEBUG    | __main__:run:525 - Skipping benchmark 5:C2 as result already exists
2022-08-06 06:39:02.174 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:39:02.174 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E2 as result already exists
2022-08-06 06:39:02.174 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E3 as result already exists
2022-08-06 06:39:02.174 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E4 as result already exists
2022-08-06 06:39:02.174 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E5 as result already exists
2022-08-06 06:39:02.174 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E6 as result already exists
2022-08-06 06:39:02.174 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E8 as result already exists
2022-08-06 06:39:02.174 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E9 as result already exists
2022-08-06 06:39:02.175 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 06:39:02.175 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 06:39:02.175 | DEBUG    | __main__:run:515 - Number of queries: 27
2022-08-06 06:39:02.175 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D0 as result already exists
2022-08-06 06:39:02.175 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D1 as result already exists
2022-08-06 06:39:02.175 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D4 as result already exists
2022-08-06 06:39:02.175 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D7 as result already exists
2022-08-06 06:39:02.175 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D9 as result already exists
2022-08-06 06:39:02.175 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D10 as result already exists
2022-08-06 06:39:02.175 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D11 as result already exists
2022-08-06 06:39:02.176 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D12 as result already exists
2022-08-06 06:39:02.176 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D13 as result already exists
2022-08-06 06:39:02.176 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D18 as result already exists
2022-08-06 06:39:02.176 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D19 as result already exists
2022-08-06 06:39:02.176 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D20 as result already exists
2022-08-06 06:39:02.176 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D21 as result already exists
2022-08-06 06:39:02.176 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D22 as result already exists
2022-08-06 06:39:02.176 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D23 as result already exists
2022-08-06 06:39:02.176 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D24 as result already exists
2022-08-06 06:39:02.177 | DEBUG    | __main__:run:515 - Number of queries: 26
2022-08-06 06:39:02.177 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B17 as result already exists
2022-08-06 06:39:02.177 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B18 as result already exists
2022-08-06 06:39:02.177 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B24 as result already exists
2022-08-06 06:39:02.177 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B25 as result already exists
2022-08-06 06:39:02.177 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:39:02.177 | DEBUG    | __main__:run:525 - Skipping benchmark 6:E5 as result already exists
2022-08-06 06:39:02.177 | DEBUG    | __main__:run:525 - Skipping benchmark 6:E6 as result already exists
2022-08-06 06:39:02.177 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:39:02.177 | DEBUG    | __main__:run:525 - Skipping benchmark 6:C1 as result already exists
2022-08-06 06:39:02.178 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 06:39:02.178 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 06:39:02.178 | DEBUG    | __main__:run:515 - Number of queries: 21
2022-08-06 06:39:02.178 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D0 as result already exists
2022-08-06 06:39:02.178 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D1 as result already exists
2022-08-06 06:39:02.178 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D2 as result already exists
2022-08-06 06:39:02.178 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D3 as result already exists
2022-08-06 06:39:02.178 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D4 as result already exists
2022-08-06 06:39:02.178 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D5 as result already exists
2022-08-06 06:39:02.178 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D6 as result already exists
2022-08-06 06:39:02.179 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D7 as result already exists
2022-08-06 06:39:02.179 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D9 as result already exists
2022-08-06 06:39:02.179 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D10 as result already exists
2022-08-06 06:39:02.179 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D11 as result already exists
2022-08-06 06:39:02.179 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D12 as result already exists
2022-08-06 06:39:02.179 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D13 as result already exists
2022-08-06 06:39:02.179 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D14 as result already exists
2022-08-06 06:39:02.179 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D15 as result already exists
2022-08-06 06:39:02.179 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D16 as result already exists
2022-08-06 06:39:02.179 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D17 as result already exists
2022-08-06 06:39:02.180 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D18 as result already exists
2022-08-06 06:39:02.180 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D19 as result already exists
2022-08-06 06:39:02.180 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D20 as result already exists
2022-08-06 06:39:02.180 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:39:02.180 | DEBUG    | __main__:run:525 - Skipping benchmark 7:A0 as result already exists
2022-08-06 06:39:02.180 | DEBUG    | __main__:run:525 - Skipping benchmark 7:A1 as result already exists
2022-08-06 06:39:02.180 | DEBUG    | __main__:run:525 - Skipping benchmark 7:A2 as result already exists
2022-08-06 06:39:02.180 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:39:02.180 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E0 as result already exists
2022-08-06 06:39:02.181 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E2 as result already exists
2022-08-06 06:39:02.181 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E3 as result already exists
2022-08-06 06:39:02.181 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 06:39:02.181 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 06:39:02.181 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:39:02.181 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C0 as result already exists
2022-08-06 06:39:02.181 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C1 as result already exists
2022-08-06 06:39:02.181 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C2 as result already exists
2022-08-06 06:39:02.181 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C3 as result already exists
2022-08-06 06:39:02.181 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:02.182 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A0 as result already exists
2022-08-06 06:39:02.182 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A2 as result already exists
2022-08-06 06:39:02.182 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A3 as result already exists
2022-08-06 06:39:02.182 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A4 as result already exists
2022-08-06 06:39:02.182 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 06:39:02.182 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D3 as result already exists
2022-08-06 06:39:02.182 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D6 as result already exists
2022-08-06 06:39:02.182 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D7 as result already exists
2022-08-06 06:39:02.182 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D8 as result already exists
2022-08-06 06:39:02.182 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 06:39:02.183 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:02.183 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:39:02.183 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D0 as result already exists
2022-08-06 06:39:02.183 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D1 as result already exists
2022-08-06 06:39:02.183 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D2 as result already exists
2022-08-06 06:39:02.183 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D3 as result already exists
2022-08-06 06:39:02.183 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D6 as result already exists
2022-08-06 06:39:02.183 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:39:02.183 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:39:02.184 | DEBUG    | __main__:run:525 - Skipping benchmark 9:C2 as result already exists
2022-08-06 06:39:02.184 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:39:02.184 | DEBUG    | __main__:run:525 - Skipping benchmark 9:A2 as result already exists
2022-08-06 06:39:02.184 | DEBUG    | __main__:run:525 - Skipping benchmark 9:A3 as result already exists
2022-08-06 06:39:02.184 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:39:02.184 | DEBUG    | __main__:run:525 - Skipping benchmark 9:E0 as result already exists
2022-08-06 06:39:02.184 | DEBUG    | __main__:run:525 - Skipping benchmark 9:E2 as result already exists
2022-08-06 06:39:02.184 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 06:39:02.184 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:02.184 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.185 | DEBUG    | __main__:run:525 - Skipping benchmark 10:C0 as result already exists
2022-08-06 06:39:02.185 | DEBUG    | __main__:run:515 - Number of queries: 23
2022-08-06 06:39:02.185 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D0 as result already exists
2022-08-06 06:39:02.185 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D1 as result already exists
2022-08-06 06:39:02.185 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D5 as result already exists
2022-08-06 06:39:02.185 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D6 as result already exists
2022-08-06 06:39:02.185 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D7 as result already exists
2022-08-06 06:39:02.185 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D8 as result already exists
2022-08-06 06:39:02.185 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D9 as result already exists
2022-08-06 06:39:02.185 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D10 as result already exists
2022-08-06 06:39:02.186 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D11 as result already exists
2022-08-06 06:39:02.186 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D13 as result already exists
2022-08-06 06:39:02.186 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D14 as result already exists
2022-08-06 06:39:02.186 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D15 as result already exists
2022-08-06 06:39:02.186 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D18 as result already exists
2022-08-06 06:39:02.186 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D19 as result already exists
2022-08-06 06:39:02.186 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D21 as result already exists
2022-08-06 06:39:02.186 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D22 as result already exists
2022-08-06 06:39:02.186 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.186 | DEBUG    | __main__:run:525 - Skipping benchmark 10:A0 as result already exists
2022-08-06 06:39:02.187 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 06:39:02.187 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E0 as result already exists
2022-08-06 06:39:02.187 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E1 as result already exists
2022-08-06 06:39:02.187 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E3 as result already exists
2022-08-06 06:39:02.187 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E4 as result already exists
2022-08-06 06:39:02.187 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E5 as result already exists
2022-08-06 06:39:02.187 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E6 as result already exists
2022-08-06 06:39:02.187 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E7 as result already exists
2022-08-06 06:39:02.187 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E8 as result already exists
2022-08-06 06:39:02.188 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E9 as result already exists
2022-08-06 06:39:02.188 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E10 as result already exists
2022-08-06 06:39:02.188 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E11 as result already exists
2022-08-06 06:39:02.188 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.188 | DEBUG    | __main__:run:525 - Skipping benchmark 10:B0 as result already exists
2022-08-06 06:39:02.188 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 06:39:02.188 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:02.188 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:39:02.188 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D0 as result already exists
2022-08-06 06:39:02.188 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D1 as result already exists
2022-08-06 06:39:02.189 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D4 as result already exists
2022-08-06 06:39:02.189 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D6 as result already exists
2022-08-06 06:39:02.189 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D7 as result already exists
2022-08-06 06:39:02.189 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.189 | DEBUG    | __main__:run:525 - Skipping benchmark 11:C0 as result already exists
2022-08-06 06:39:02.189 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:39:02.189 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A0 as result already exists
2022-08-06 06:39:02.189 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A1 as result already exists
2022-08-06 06:39:02.189 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A2 as result already exists
2022-08-06 06:39:02.189 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A3 as result already exists
2022-08-06 06:39:02.190 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:39:02.190 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:39:02.190 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B0 as result already exists
2022-08-06 06:39:02.190 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B1 as result already exists
2022-08-06 06:39:02.190 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B2 as result already exists
2022-08-06 06:39:02.190 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B3 as result already exists
2022-08-06 06:39:02.190 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B4 as result already exists
2022-08-06 06:39:02.190 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 06:39:02.190 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:02.191 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:39:02.191 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.191 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:39:02.191 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:39:02.191 | DEBUG    | __main__:run:525 - Skipping benchmark 12:A3 as result already exists
2022-08-06 06:39:02.191 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:39:02.191 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 06:39:02.191 | DEBUG    | __main__:run:509 - Number of Sets: 2
2022-08-06 06:39:02.191 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:39:02.191 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.192 | DEBUG    | __main__:run:525 - Skipping benchmark 13:A0 as result already exists
2022-08-06 06:39:02.192 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 06:39:02.192 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:02.192 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:39:02.192 | DEBUG    | __main__:run:525 - Skipping benchmark 14:D0 as result already exists
2022-08-06 06:39:02.192 | DEBUG    | __main__:run:525 - Skipping benchmark 14:D1 as result already exists
2022-08-06 06:39:02.192 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 06:39:02.192 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C0 as result already exists
2022-08-06 06:39:02.192 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C1 as result already exists
2022-08-06 06:39:02.193 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C2 as result already exists
2022-08-06 06:39:02.193 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C3 as result already exists
2022-08-06 06:39:02.193 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C5 as result already exists
2022-08-06 06:39:02.193 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C6 as result already exists
2022-08-06 06:39:02.193 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C7 as result already exists
2022-08-06 06:39:02.193 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C8 as result already exists
2022-08-06 06:39:02.193 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:39:02.193 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A0 as result already exists
2022-08-06 06:39:02.193 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A1 as result already exists
2022-08-06 06:39:02.193 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A2 as result already exists
2022-08-06 06:39:02.194 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A4 as result already exists
2022-08-06 06:39:02.194 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 06:39:02.194 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E0 as result already exists
2022-08-06 06:39:02.194 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E1 as result already exists
2022-08-06 06:39:02.194 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E4 as result already exists
2022-08-06 06:39:02.194 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E6 as result already exists
2022-08-06 06:39:02.194 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E7 as result already exists
2022-08-06 06:39:02.194 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E10 as result already exists
2022-08-06 06:39:02.194 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E11 as result already exists
2022-08-06 06:39:02.194 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E12 as result already exists
2022-08-06 06:39:02.195 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:02.195 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B0 as result already exists
2022-08-06 06:39:02.195 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B3 as result already exists
2022-08-06 06:39:02.195 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B4 as result already exists
2022-08-06 06:39:02.195 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B5 as result already exists
2022-08-06 06:39:02.195 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 06:39:02.195 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:02.195 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 06:39:02.195 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D2 as result already exists
2022-08-06 06:39:02.196 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D3 as result already exists
2022-08-06 06:39:02.196 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D4 as result already exists
2022-08-06 06:39:02.196 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D5 as result already exists
2022-08-06 06:39:02.196 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D7 as result already exists
2022-08-06 06:39:02.196 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D8 as result already exists
2022-08-06 06:39:02.196 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D9 as result already exists
2022-08-06 06:39:02.196 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D10 as result already exists
2022-08-06 06:39:02.196 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D11 as result already exists
2022-08-06 06:39:02.196 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D15 as result already exists
2022-08-06 06:39:02.196 | DEBUG    | __main__:run:515 - Number of queries: 22
2022-08-06 06:39:02.197 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B0 as result already exists
2022-08-06 06:39:02.197 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B2 as result already exists
2022-08-06 06:39:02.197 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B7 as result already exists
2022-08-06 06:39:02.197 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B11 as result already exists
2022-08-06 06:39:02.197 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B12 as result already exists
2022-08-06 06:39:02.197 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B14 as result already exists
2022-08-06 06:39:02.197 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B15 as result already exists
2022-08-06 06:39:02.197 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B16 as result already exists
2022-08-06 06:39:02.197 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B18 as result already exists
2022-08-06 06:39:02.197 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:39:02.198 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C0 as result already exists
2022-08-06 06:39:02.198 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C1 as result already exists
2022-08-06 06:39:02.198 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C2 as result already exists
2022-08-06 06:39:02.198 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C3 as result already exists
2022-08-06 06:39:02.198 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:39:02.198 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A2 as result already exists
2022-08-06 06:39:02.198 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A3 as result already exists
2022-08-06 06:39:02.198 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A4 as result already exists
2022-08-06 06:39:02.198 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A5 as result already exists
2022-08-06 06:39:02.199 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A6 as result already exists
2022-08-06 06:39:02.199 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:39:02.199 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E4 as result already exists
2022-08-06 06:39:02.199 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E6 as result already exists
2022-08-06 06:39:02.199 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E7 as result already exists
2022-08-06 06:39:02.199 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E8 as result already exists
2022-08-06 06:39:02.199 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E9 as result already exists
2022-08-06 06:39:02.199 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E10 as result already exists
2022-08-06 06:39:02.199 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E11 as result already exists
2022-08-06 06:39:02.199 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E12 as result already exists
2022-08-06 06:39:02.200 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E13 as result already exists
2022-08-06 06:39:02.200 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E14 as result already exists
2022-08-06 06:39:02.200 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 06:39:02.200 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 06:39:02.200 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:39:02.200 | DEBUG    | __main__:run:525 - Skipping benchmark 16:B0 as result already exists
2022-08-06 06:39:02.200 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.200 | DEBUG    | __main__:run:525 - Skipping benchmark 16:A0 as result already exists
2022-08-06 06:39:02.200 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:02.200 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E0 as result already exists
2022-08-06 06:39:02.201 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E1 as result already exists
2022-08-06 06:39:02.201 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E2 as result already exists
2022-08-06 06:39:02.201 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E3 as result already exists
2022-08-06 06:39:02.201 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E4 as result already exists
2022-08-06 06:39:02.201 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:39:02.201 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D0 as result already exists
2022-08-06 06:39:02.201 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D2 as result already exists
2022-08-06 06:39:02.201 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D3 as result already exists
2022-08-06 06:39:02.201 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 06:39:02.201 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:02.202 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:39:02.202 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B0 as result already exists
2022-08-06 06:39:02.202 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B1 as result already exists
2022-08-06 06:39:02.202 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B2 as result already exists
2022-08-06 06:39:02.202 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B4 as result already exists
2022-08-06 06:39:02.202 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 06:39:02.202 | DEBUG    | __main__:run:525 - Skipping benchmark 17:C5 as result already exists
2022-08-06 06:39:02.202 | DEBUG    | __main__:run:525 - Skipping benchmark 17:C6 as result already exists
2022-08-06 06:39:02.202 | DEBUG    | __main__:run:525 - Skipping benchmark 17:C7 as result already exists
2022-08-06 06:39:02.203 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:39:02.203 | DEBUG    | __main__:run:525 - Skipping benchmark 17:A3 as result already exists
2022-08-06 06:39:02.203 | DEBUG    | __main__:run:525 - Skipping benchmark 17:A4 as result already exists
2022-08-06 06:39:02.203 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 06:39:02.203 | DEBUG    | __main__:run:525 - Skipping benchmark 17:D11 as result already exists
2022-08-06 06:39:02.203 | DEBUG    | __main__:run:515 - Number of queries: 25
2022-08-06 06:39:02.203 | DEBUG    | __main__:run:525 - Skipping benchmark 17:E14 as result already exists
2022-08-06 06:39:02.203 | DEBUG    | __main__:run:525 - Skipping benchmark 17:E24 as result already exists
2022-08-06 06:39:02.203 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 06:39:02.203 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 06:39:02.204 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:02.204 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A0 as result already exists
2022-08-06 06:39:02.204 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A1 as result already exists
2022-08-06 06:39:02.204 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A2 as result already exists
2022-08-06 06:39:02.204 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A3 as result already exists
2022-08-06 06:39:02.204 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A4 as result already exists
2022-08-06 06:39:02.204 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A5 as result already exists
2022-08-06 06:39:02.204 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:39:02.204 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D0 as result already exists
2022-08-06 06:39:02.204 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D1 as result already exists
2022-08-06 06:39:02.205 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D2 as result already exists
2022-08-06 06:39:02.205 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D3 as result already exists
2022-08-06 06:39:02.205 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D4 as result already exists
2022-08-06 06:39:02.205 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D5 as result already exists
2022-08-06 06:39:02.205 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D6 as result already exists
2022-08-06 06:39:02.205 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D7 as result already exists
2022-08-06 06:39:02.205 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D8 as result already exists
2022-08-06 06:39:02.205 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D9 as result already exists
2022-08-06 06:39:02.205 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D10 as result already exists
2022-08-06 06:39:02.205 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D11 as result already exists
2022-08-06 06:39:02.206 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D12 as result already exists
2022-08-06 06:39:02.206 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D13 as result already exists
2022-08-06 06:39:02.206 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D14 as result already exists
2022-08-06 06:39:02.206 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D15 as result already exists
2022-08-06 06:39:02.206 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:39:02.206 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E0 as result already exists
2022-08-06 06:39:02.206 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E1 as result already exists
2022-08-06 06:39:02.206 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E2 as result already exists
2022-08-06 06:39:02.206 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E3 as result already exists
2022-08-06 06:39:02.207 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E4 as result already exists
2022-08-06 06:39:02.207 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E5 as result already exists
2022-08-06 06:39:02.207 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E6 as result already exists
2022-08-06 06:39:02.207 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E7 as result already exists
2022-08-06 06:39:02.207 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 06:39:02.207 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:02.207 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:39:02.207 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:39:02.207 | DEBUG    | __main__:run:525 - Skipping benchmark 19:C0 as result already exists
2022-08-06 06:39:02.207 | DEBUG    | __main__:run:525 - Skipping benchmark 19:C3 as result already exists
2022-08-06 06:39:02.208 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:39:02.208 | DEBUG    | __main__:run:525 - Skipping benchmark 19:D1 as result already exists
2022-08-06 06:39:02.208 | DEBUG    | __main__:run:525 - Skipping benchmark 19:D2 as result already exists
2022-08-06 06:39:02.208 | DEBUG    | __main__:run:525 - Skipping benchmark 19:D5 as result already exists
2022-08-06 06:39:02.208 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 06:39:02.208 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A1 as result already exists
2022-08-06 06:39:02.208 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A2 as result already exists
2022-08-06 06:39:02.208 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A4 as result already exists
2022-08-06 06:39:02.208 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A8 as result already exists
2022-08-06 06:39:02.209 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A10 as result already exists
2022-08-06 06:39:02.209 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A11 as result already exists
2022-08-06 06:39:02.209 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A14 as result already exists
2022-08-06 06:39:02.209 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:39:02.209 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E1 as result already exists
2022-08-06 06:39:02.209 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E2 as result already exists
2022-08-06 06:39:02.209 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E3 as result already exists
2022-08-06 06:39:02.209 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E4 as result already exists
2022-08-06 06:39:02.209 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 06:39:02.209 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:02.210 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:39:02.210 | DEBUG    | __main__:run:525 - Skipping benchmark 20:B1 as result already exists
2022-08-06 06:39:02.210 | DEBUG    | __main__:run:525 - Skipping benchmark 20:B2 as result already exists
2022-08-06 06:39:02.210 | DEBUG    | __main__:run:525 - Skipping benchmark 20:B3 as result already exists
2022-08-06 06:39:02.210 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:02.210 | DEBUG    | __main__:run:525 - Skipping benchmark 20:C0 as result already exists
2022-08-06 06:39:02.210 | DEBUG    | __main__:run:515 - Number of queries: 17
2022-08-06 06:39:02.210 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D0 as result already exists
2022-08-06 06:39:02.210 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D2 as result already exists
2022-08-06 06:39:02.210 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D3 as result already exists
2022-08-06 06:39:02.211 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D5 as result already exists
2022-08-06 06:39:02.211 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D6 as result already exists
2022-08-06 06:39:02.211 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D7 as result already exists
2022-08-06 06:39:02.211 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D10 as result already exists
2022-08-06 06:39:02.211 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D11 as result already exists
2022-08-06 06:39:02.211 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D12 as result already exists
2022-08-06 06:39:02.211 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D13 as result already exists
2022-08-06 06:39:02.211 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D14 as result already exists
2022-08-06 06:39:02.211 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:39:02.212 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:39:02.212 | DEBUG    | __main__:run:525 - Skipping benchmark 20:E0 as result already exists
2022-08-06 06:39:53.673 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval1
2022-08-06 06:39:53.674 | DEBUG    | __main__:run:495 - Found 68 benchmarks in PandasEval1
2022-08-06 06:39:53.674 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 06:39:53.674 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.674 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.674 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 06:39:53.675 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.675 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.675 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 06:39:53.675 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.675 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.675 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 06:39:53.675 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.675 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.675 | DEBUG    | __main__:run:525 - Skipping benchmark 3:A0 as result already exists
2022-08-06 06:39:53.676 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 06:39:53.676 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.676 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.676 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 06:39:53.676 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.676 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.676 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 06:39:53.676 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.677 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.677 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 06:39:53.677 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.677 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.677 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 06:39:53.677 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.677 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.677 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 06:39:53.677 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.678 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.678 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 06:39:53.678 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.678 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.678 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 06:39:53.678 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.678 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.678 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A0 as result already exists
2022-08-06 06:39:53.678 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 06:39:53.679 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.679 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.679 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 06:39:53.679 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.679 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.679 | DEBUG    | __main__:run:525 - Skipping benchmark 13:A0 as result already exists
2022-08-06 06:39:53.679 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 06:39:53.679 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.679 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.679 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 06:39:53.680 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.680 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.680 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 06:39:53.680 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.680 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.680 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 06:39:53.680 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.680 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.680 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 06:39:53.681 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.681 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.681 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A0 as result already exists
2022-08-06 06:39:53.681 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 06:39:53.681 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.681 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.681 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 06:39:53.681 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.681 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.682 | DEBUG    | __main__:run:508 - Running benchmark 21
2022-08-06 06:39:53.682 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.682 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.682 | DEBUG    | __main__:run:508 - Running benchmark 22
2022-08-06 06:39:53.682 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.682 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.682 | DEBUG    | __main__:run:525 - Skipping benchmark 22:A0 as result already exists
2022-08-06 06:39:53.682 | DEBUG    | __main__:run:508 - Running benchmark 23
2022-08-06 06:39:53.682 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.682 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.683 | DEBUG    | __main__:run:508 - Running benchmark 24
2022-08-06 06:39:53.683 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.683 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.683 | DEBUG    | __main__:run:508 - Running benchmark 25
2022-08-06 06:39:53.683 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.683 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.683 | DEBUG    | __main__:run:508 - Running benchmark 26
2022-08-06 06:39:53.683 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.683 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.683 | DEBUG    | __main__:run:525 - Skipping benchmark 26:A0 as result already exists
2022-08-06 06:39:53.684 | DEBUG    | __main__:run:508 - Running benchmark 27
2022-08-06 06:39:53.684 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.684 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.684 | DEBUG    | __main__:run:508 - Running benchmark 28
2022-08-06 06:39:53.684 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.684 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.684 | DEBUG    | __main__:run:525 - Skipping benchmark 28:A0 as result already exists
2022-08-06 06:39:53.684 | DEBUG    | __main__:run:508 - Running benchmark 29
2022-08-06 06:39:53.685 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.685 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.685 | DEBUG    | __main__:run:508 - Running benchmark 30
2022-08-06 06:39:53.685 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.685 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.685 | DEBUG    | __main__:run:525 - Skipping benchmark 30:A0 as result already exists
2022-08-06 06:39:53.685 | DEBUG    | __main__:run:508 - Running benchmark 31
2022-08-06 06:39:53.685 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.685 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.685 | DEBUG    | __main__:run:508 - Running benchmark 32
2022-08-06 06:39:53.686 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.686 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.686 | DEBUG    | __main__:run:508 - Running benchmark 33
2022-08-06 06:39:53.686 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.686 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.686 | DEBUG    | __main__:run:508 - Running benchmark 34
2022-08-06 06:39:53.686 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.686 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.686 | DEBUG    | __main__:run:525 - Skipping benchmark 34:A0 as result already exists
2022-08-06 06:39:53.687 | DEBUG    | __main__:run:508 - Running benchmark 35
2022-08-06 06:39:53.687 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.687 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.687 | DEBUG    | __main__:run:525 - Skipping benchmark 35:A0 as result already exists
2022-08-06 06:39:53.687 | DEBUG    | __main__:run:508 - Running benchmark 36
2022-08-06 06:39:53.687 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.687 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.687 | DEBUG    | __main__:run:525 - Skipping benchmark 36:A0 as result already exists
2022-08-06 06:39:53.687 | DEBUG    | __main__:run:508 - Running benchmark 37
2022-08-06 06:39:53.687 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.688 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.688 | DEBUG    | __main__:run:525 - Skipping benchmark 37:A0 as result already exists
2022-08-06 06:39:53.688 | DEBUG    | __main__:run:508 - Running benchmark 38
2022-08-06 06:39:53.688 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.688 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.688 | DEBUG    | __main__:run:508 - Running benchmark 39
2022-08-06 06:39:53.688 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.688 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.688 | DEBUG    | __main__:run:508 - Running benchmark 40
2022-08-06 06:39:53.688 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.689 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.689 | DEBUG    | __main__:run:525 - Skipping benchmark 40:A0 as result already exists
2022-08-06 06:39:53.689 | DEBUG    | __main__:run:508 - Running benchmark 41
2022-08-06 06:39:53.689 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.689 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.689 | DEBUG    | __main__:run:525 - Skipping benchmark 41:A0 as result already exists
2022-08-06 06:39:53.689 | DEBUG    | __main__:run:508 - Running benchmark 42
2022-08-06 06:39:53.689 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.689 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.689 | DEBUG    | __main__:run:525 - Skipping benchmark 42:A0 as result already exists
2022-08-06 06:39:53.690 | DEBUG    | __main__:run:508 - Running benchmark 43
2022-08-06 06:39:53.690 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.690 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.690 | DEBUG    | __main__:run:525 - Skipping benchmark 43:A0 as result already exists
2022-08-06 06:39:53.690 | DEBUG    | __main__:run:508 - Running benchmark 44
2022-08-06 06:39:53.690 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.690 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.690 | DEBUG    | __main__:run:508 - Running benchmark 45
2022-08-06 06:39:53.690 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.691 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.691 | DEBUG    | __main__:run:525 - Skipping benchmark 45:A0 as result already exists
2022-08-06 06:39:53.691 | DEBUG    | __main__:run:508 - Running benchmark 46
2022-08-06 06:39:53.691 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.691 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.691 | DEBUG    | __main__:run:508 - Running benchmark 47
2022-08-06 06:39:53.691 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.691 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.691 | DEBUG    | __main__:run:508 - Running benchmark 48
2022-08-06 06:39:53.691 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.692 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.692 | DEBUG    | __main__:run:525 - Skipping benchmark 48:A0 as result already exists
2022-08-06 06:39:53.692 | DEBUG    | __main__:run:508 - Running benchmark 49
2022-08-06 06:39:53.692 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.692 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.692 | DEBUG    | __main__:run:525 - Skipping benchmark 49:A0 as result already exists
2022-08-06 06:39:53.692 | DEBUG    | __main__:run:508 - Running benchmark 50
2022-08-06 06:39:53.692 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.692 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.692 | DEBUG    | __main__:run:525 - Skipping benchmark 50:A0 as result already exists
2022-08-06 06:39:53.693 | DEBUG    | __main__:run:508 - Running benchmark 51
2022-08-06 06:39:53.693 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.693 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.693 | DEBUG    | __main__:run:508 - Running benchmark 52
2022-08-06 06:39:53.693 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.693 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.693 | DEBUG    | __main__:run:508 - Running benchmark 53
2022-08-06 06:39:53.693 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.693 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.693 | DEBUG    | __main__:run:508 - Running benchmark 54
2022-08-06 06:39:53.694 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.694 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.694 | DEBUG    | __main__:run:525 - Skipping benchmark 54:A0 as result already exists
2022-08-06 06:39:53.694 | DEBUG    | __main__:run:508 - Running benchmark 55
2022-08-06 06:39:53.694 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.694 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.694 | DEBUG    | __main__:run:508 - Running benchmark 56
2022-08-06 06:39:53.694 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.694 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.694 | DEBUG    | __main__:run:508 - Running benchmark 57
2022-08-06 06:39:53.695 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.695 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.695 | DEBUG    | __main__:run:508 - Running benchmark 58
2022-08-06 06:39:53.695 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.695 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.695 | DEBUG    | __main__:run:508 - Running benchmark 59
2022-08-06 06:39:53.695 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.695 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.695 | DEBUG    | __main__:run:525 - Skipping benchmark 59:A0 as result already exists
2022-08-06 06:39:53.696 | DEBUG    | __main__:run:508 - Running benchmark 60
2022-08-06 06:39:53.696 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.696 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.696 | DEBUG    | __main__:run:525 - Skipping benchmark 60:A0 as result already exists
2022-08-06 06:39:53.696 | DEBUG    | __main__:run:508 - Running benchmark 62
2022-08-06 06:39:53.696 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.696 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.696 | DEBUG    | __main__:run:525 - Skipping benchmark 62:A0 as result already exists
2022-08-06 06:39:53.696 | DEBUG    | __main__:run:508 - Running benchmark 63
2022-08-06 06:39:53.696 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.697 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.697 | DEBUG    | __main__:run:525 - Skipping benchmark 63:A0 as result already exists
2022-08-06 06:39:53.697 | DEBUG    | __main__:run:508 - Running benchmark 64
2022-08-06 06:39:53.697 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.697 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.697 | DEBUG    | __main__:run:508 - Running benchmark 65
2022-08-06 06:39:53.697 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.697 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.697 | DEBUG    | __main__:run:525 - Skipping benchmark 65:A0 as result already exists
2022-08-06 06:39:53.697 | DEBUG    | __main__:run:508 - Running benchmark 66
2022-08-06 06:39:53.698 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.698 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.698 | DEBUG    | __main__:run:525 - Skipping benchmark 66:A0 as result already exists
2022-08-06 06:39:53.698 | DEBUG    | __main__:run:508 - Running benchmark 67
2022-08-06 06:39:53.698 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:53.698 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.698 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval2
2022-08-06 06:39:53.698 | DEBUG    | __main__:run:495 - Found 21 benchmarks in PandasEval2
2022-08-06 06:39:53.698 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 06:39:53.699 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:53.699 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:39:53.699 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:39:53.699 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.699 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:39:53.699 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:39:53.699 | DEBUG    | __main__:run:525 - Skipping benchmark 0:E2 as result already exists
2022-08-06 06:39:53.699 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 06:39:53.699 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:53.699 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:39:53.700 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:39:53.700 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:39:53.700 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:53.700 | DEBUG    | __main__:run:525 - Skipping benchmark 1:C3 as result already exists
2022-08-06 06:39:53.700 | DEBUG    | __main__:run:525 - Skipping benchmark 1:C5 as result already exists
2022-08-06 06:39:53.700 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:39:53.700 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 06:39:53.700 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:53.700 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:53.700 | DEBUG    | __main__:run:525 - Skipping benchmark 2:A2 as result already exists
2022-08-06 06:39:53.701 | DEBUG    | __main__:run:525 - Skipping benchmark 2:A5 as result already exists
2022-08-06 06:39:53.701 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 06:39:53.701 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D0 as result already exists
2022-08-06 06:39:53.701 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D1 as result already exists
2022-08-06 06:39:53.701 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D3 as result already exists
2022-08-06 06:39:53.701 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D4 as result already exists
2022-08-06 06:39:53.701 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D5 as result already exists
2022-08-06 06:39:53.701 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D6 as result already exists
2022-08-06 06:39:53.701 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D7 as result already exists
2022-08-06 06:39:53.702 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D8 as result already exists
2022-08-06 06:39:53.702 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D9 as result already exists
2022-08-06 06:39:53.702 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D10 as result already exists
2022-08-06 06:39:53.702 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D11 as result already exists
2022-08-06 06:39:53.702 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:39:53.702 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B1 as result already exists
2022-08-06 06:39:53.702 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B2 as result already exists
2022-08-06 06:39:53.702 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B3 as result already exists
2022-08-06 06:39:53.702 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B4 as result already exists
2022-08-06 06:39:53.702 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B6 as result already exists
2022-08-06 06:39:53.703 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B7 as result already exists
2022-08-06 06:39:53.703 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B8 as result already exists
2022-08-06 06:39:53.703 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B9 as result already exists
2022-08-06 06:39:53.703 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 06:39:53.703 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C0 as result already exists
2022-08-06 06:39:53.703 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C1 as result already exists
2022-08-06 06:39:53.703 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C2 as result already exists
2022-08-06 06:39:53.703 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C3 as result already exists
2022-08-06 06:39:53.703 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C4 as result already exists
2022-08-06 06:39:53.703 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C5 as result already exists
2022-08-06 06:39:53.704 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C8 as result already exists
2022-08-06 06:39:53.704 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C9 as result already exists
2022-08-06 06:39:53.704 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:39:53.704 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E0 as result already exists
2022-08-06 06:39:53.704 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E1 as result already exists
2022-08-06 06:39:53.704 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E2 as result already exists
2022-08-06 06:39:53.704 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E3 as result already exists
2022-08-06 06:39:53.704 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E4 as result already exists
2022-08-06 06:39:53.704 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E5 as result already exists
2022-08-06 06:39:53.705 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E6 as result already exists
2022-08-06 06:39:53.705 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E7 as result already exists
2022-08-06 06:39:53.705 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E13 as result already exists
2022-08-06 06:39:53.705 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E14 as result already exists
2022-08-06 06:39:53.705 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E15 as result already exists
2022-08-06 06:39:53.705 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 06:39:53.705 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:53.705 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:39:53.705 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 06:39:53.705 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D1 as result already exists
2022-08-06 06:39:53.706 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D4 as result already exists
2022-08-06 06:39:53.706 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D7 as result already exists
2022-08-06 06:39:53.706 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D10 as result already exists
2022-08-06 06:39:53.706 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:53.706 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 06:39:53.706 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:53.706 | DEBUG    | __main__:run:525 - Skipping benchmark 3:E2 as result already exists
2022-08-06 06:39:53.706 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 06:39:53.706 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:53.706 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:53.707 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A0 as result already exists
2022-08-06 06:39:53.707 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A3 as result already exists
2022-08-06 06:39:53.707 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A4 as result already exists
2022-08-06 06:39:53.707 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:39:53.707 | DEBUG    | __main__:run:525 - Skipping benchmark 4:D1 as result already exists
2022-08-06 06:39:53.707 | DEBUG    | __main__:run:525 - Skipping benchmark 4:D2 as result already exists
2022-08-06 06:39:53.707 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:39:53.707 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:39:53.707 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C1 as result already exists
2022-08-06 06:39:53.708 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C2 as result already exists
2022-08-06 06:39:53.708 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C3 as result already exists
2022-08-06 06:39:53.708 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C4 as result already exists
2022-08-06 06:39:53.708 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C5 as result already exists
2022-08-06 06:39:53.708 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C6 as result already exists
2022-08-06 06:39:53.708 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:53.708 | DEBUG    | __main__:run:525 - Skipping benchmark 4:E2 as result already exists
2022-08-06 06:39:53.708 | DEBUG    | __main__:run:525 - Skipping benchmark 4:E4 as result already exists
2022-08-06 06:39:53.708 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 06:39:53.708 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:53.709 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:39:53.709 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A0 as result already exists
2022-08-06 06:39:53.709 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A1 as result already exists
2022-08-06 06:39:53.709 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A2 as result already exists
2022-08-06 06:39:53.709 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A3 as result already exists
2022-08-06 06:39:53.709 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:39:53.709 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D0 as result already exists
2022-08-06 06:39:53.709 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D1 as result already exists
2022-08-06 06:39:53.709 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D2 as result already exists
2022-08-06 06:39:53.709 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D3 as result already exists
2022-08-06 06:39:53.710 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D4 as result already exists
2022-08-06 06:39:53.710 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D5 as result already exists
2022-08-06 06:39:53.710 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D6 as result already exists
2022-08-06 06:39:53.710 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D7 as result already exists
2022-08-06 06:39:53.710 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D8 as result already exists
2022-08-06 06:39:53.710 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D9 as result already exists
2022-08-06 06:39:53.710 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D10 as result already exists
2022-08-06 06:39:53.710 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D11 as result already exists
2022-08-06 06:39:53.710 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D12 as result already exists
2022-08-06 06:39:53.710 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D13 as result already exists
2022-08-06 06:39:53.711 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D14 as result already exists
2022-08-06 06:39:53.711 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D15 as result already exists
2022-08-06 06:39:53.711 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:39:53.711 | DEBUG    | __main__:run:525 - Skipping benchmark 5:B4 as result already exists
2022-08-06 06:39:53.711 | DEBUG    | __main__:run:525 - Skipping benchmark 5:B5 as result already exists
2022-08-06 06:39:53.711 | DEBUG    | __main__:run:525 - Skipping benchmark 5:B6 as result already exists
2022-08-06 06:39:53.711 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:53.711 | DEBUG    | __main__:run:525 - Skipping benchmark 5:C0 as result already exists
2022-08-06 06:39:53.711 | DEBUG    | __main__:run:525 - Skipping benchmark 5:C1 as result already exists
2022-08-06 06:39:53.712 | DEBUG    | __main__:run:525 - Skipping benchmark 5:C2 as result already exists
2022-08-06 06:39:53.712 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:39:53.712 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E2 as result already exists
2022-08-06 06:39:53.712 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E3 as result already exists
2022-08-06 06:39:53.712 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E4 as result already exists
2022-08-06 06:39:53.712 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E5 as result already exists
2022-08-06 06:39:53.712 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E6 as result already exists
2022-08-06 06:39:53.712 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E8 as result already exists
2022-08-06 06:39:53.712 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E9 as result already exists
2022-08-06 06:39:53.712 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 06:39:53.713 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 06:39:53.713 | DEBUG    | __main__:run:515 - Number of queries: 27
2022-08-06 06:39:53.713 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D0 as result already exists
2022-08-06 06:39:53.713 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D1 as result already exists
2022-08-06 06:39:53.713 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D4 as result already exists
2022-08-06 06:39:53.713 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D7 as result already exists
2022-08-06 06:39:53.713 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D9 as result already exists
2022-08-06 06:39:53.713 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D10 as result already exists
2022-08-06 06:39:53.713 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D11 as result already exists
2022-08-06 06:39:53.713 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D12 as result already exists
2022-08-06 06:39:53.714 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D13 as result already exists
2022-08-06 06:39:53.714 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D18 as result already exists
2022-08-06 06:39:53.714 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D19 as result already exists
2022-08-06 06:39:53.714 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D20 as result already exists
2022-08-06 06:39:53.714 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D21 as result already exists
2022-08-06 06:39:53.714 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D22 as result already exists
2022-08-06 06:39:53.714 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D23 as result already exists
2022-08-06 06:39:53.714 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D24 as result already exists
2022-08-06 06:39:53.714 | DEBUG    | __main__:run:515 - Number of queries: 26
2022-08-06 06:39:53.715 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B17 as result already exists
2022-08-06 06:39:53.715 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B18 as result already exists
2022-08-06 06:39:53.715 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B24 as result already exists
2022-08-06 06:39:53.715 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B25 as result already exists
2022-08-06 06:39:53.715 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:39:53.715 | DEBUG    | __main__:run:525 - Skipping benchmark 6:E5 as result already exists
2022-08-06 06:39:53.715 | DEBUG    | __main__:run:525 - Skipping benchmark 6:E6 as result already exists
2022-08-06 06:39:53.715 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:39:53.715 | DEBUG    | __main__:run:525 - Skipping benchmark 6:C1 as result already exists
2022-08-06 06:39:53.715 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 06:39:53.716 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 06:39:53.716 | DEBUG    | __main__:run:515 - Number of queries: 21
2022-08-06 06:39:53.716 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D0 as result already exists
2022-08-06 06:39:53.716 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D1 as result already exists
2022-08-06 06:39:53.716 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D2 as result already exists
2022-08-06 06:39:53.716 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D3 as result already exists
2022-08-06 06:39:53.716 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D4 as result already exists
2022-08-06 06:39:53.716 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D5 as result already exists
2022-08-06 06:39:53.716 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D6 as result already exists
2022-08-06 06:39:53.716 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D7 as result already exists
2022-08-06 06:39:53.717 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D9 as result already exists
2022-08-06 06:39:53.717 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D10 as result already exists
2022-08-06 06:39:53.717 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D11 as result already exists
2022-08-06 06:39:53.717 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D12 as result already exists
2022-08-06 06:39:53.717 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D13 as result already exists
2022-08-06 06:39:53.717 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D14 as result already exists
2022-08-06 06:39:53.717 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D15 as result already exists
2022-08-06 06:39:53.717 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D16 as result already exists
2022-08-06 06:39:53.717 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D17 as result already exists
2022-08-06 06:39:53.717 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D18 as result already exists
2022-08-06 06:39:53.718 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D19 as result already exists
2022-08-06 06:39:53.718 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D20 as result already exists
2022-08-06 06:39:53.718 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:39:53.718 | DEBUG    | __main__:run:525 - Skipping benchmark 7:A0 as result already exists
2022-08-06 06:39:53.718 | DEBUG    | __main__:run:525 - Skipping benchmark 7:A1 as result already exists
2022-08-06 06:39:53.718 | DEBUG    | __main__:run:525 - Skipping benchmark 7:A2 as result already exists
2022-08-06 06:39:53.718 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:39:53.718 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E0 as result already exists
2022-08-06 06:39:53.718 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E2 as result already exists
2022-08-06 06:39:53.718 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E3 as result already exists
2022-08-06 06:39:53.719 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 06:39:53.719 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 06:39:53.719 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:39:53.719 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C0 as result already exists
2022-08-06 06:39:53.719 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C1 as result already exists
2022-08-06 06:39:53.719 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C2 as result already exists
2022-08-06 06:39:53.719 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C3 as result already exists
2022-08-06 06:39:53.719 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:53.719 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A0 as result already exists
2022-08-06 06:39:53.720 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A2 as result already exists
2022-08-06 06:39:53.720 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A3 as result already exists
2022-08-06 06:39:53.720 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A4 as result already exists
2022-08-06 06:39:53.720 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 06:39:53.720 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D3 as result already exists
2022-08-06 06:39:53.720 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D6 as result already exists
2022-08-06 06:39:53.720 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D7 as result already exists
2022-08-06 06:39:53.720 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D8 as result already exists
2022-08-06 06:39:53.720 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 06:39:53.720 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:53.721 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:39:53.721 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D0 as result already exists
2022-08-06 06:39:53.721 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D1 as result already exists
2022-08-06 06:39:53.721 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D2 as result already exists
2022-08-06 06:39:53.721 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D3 as result already exists
2022-08-06 06:39:53.721 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D6 as result already exists
2022-08-06 06:39:53.721 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:39:53.721 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:39:53.721 | DEBUG    | __main__:run:525 - Skipping benchmark 9:C2 as result already exists
2022-08-06 06:39:53.722 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:39:53.722 | DEBUG    | __main__:run:525 - Skipping benchmark 9:A2 as result already exists
2022-08-06 06:39:53.722 | DEBUG    | __main__:run:525 - Skipping benchmark 9:A3 as result already exists
2022-08-06 06:39:53.722 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:39:53.722 | DEBUG    | __main__:run:525 - Skipping benchmark 9:E0 as result already exists
2022-08-06 06:39:53.722 | DEBUG    | __main__:run:525 - Skipping benchmark 9:E2 as result already exists
2022-08-06 06:39:53.722 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 06:39:53.722 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:53.722 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.722 | DEBUG    | __main__:run:525 - Skipping benchmark 10:C0 as result already exists
2022-08-06 06:39:53.723 | DEBUG    | __main__:run:515 - Number of queries: 23
2022-08-06 06:39:53.723 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D0 as result already exists
2022-08-06 06:39:53.723 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D1 as result already exists
2022-08-06 06:39:53.723 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D5 as result already exists
2022-08-06 06:39:53.723 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D6 as result already exists
2022-08-06 06:39:53.723 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D7 as result already exists
2022-08-06 06:39:53.723 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D8 as result already exists
2022-08-06 06:39:53.723 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D9 as result already exists
2022-08-06 06:39:53.723 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D10 as result already exists
2022-08-06 06:39:53.723 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D11 as result already exists
2022-08-06 06:39:53.724 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D13 as result already exists
2022-08-06 06:39:53.724 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D14 as result already exists
2022-08-06 06:39:53.724 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D15 as result already exists
2022-08-06 06:39:53.724 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D18 as result already exists
2022-08-06 06:39:53.724 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D19 as result already exists
2022-08-06 06:39:53.724 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D21 as result already exists
2022-08-06 06:39:53.724 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D22 as result already exists
2022-08-06 06:39:53.724 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.724 | DEBUG    | __main__:run:525 - Skipping benchmark 10:A0 as result already exists
2022-08-06 06:39:53.724 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 06:39:53.725 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E0 as result already exists
2022-08-06 06:39:53.725 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E1 as result already exists
2022-08-06 06:39:53.725 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E3 as result already exists
2022-08-06 06:39:53.725 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E4 as result already exists
2022-08-06 06:39:53.725 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E5 as result already exists
2022-08-06 06:39:53.725 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E6 as result already exists
2022-08-06 06:39:53.725 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E7 as result already exists
2022-08-06 06:39:53.725 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E8 as result already exists
2022-08-06 06:39:53.725 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E9 as result already exists
2022-08-06 06:39:53.726 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E10 as result already exists
2022-08-06 06:39:53.726 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E11 as result already exists
2022-08-06 06:39:53.726 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.726 | DEBUG    | __main__:run:525 - Skipping benchmark 10:B0 as result already exists
2022-08-06 06:39:53.726 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 06:39:53.726 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:53.726 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:39:53.726 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D0 as result already exists
2022-08-06 06:39:53.726 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D1 as result already exists
2022-08-06 06:39:53.726 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D4 as result already exists
2022-08-06 06:39:53.727 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D6 as result already exists
2022-08-06 06:39:53.727 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D7 as result already exists
2022-08-06 06:39:53.727 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.727 | DEBUG    | __main__:run:525 - Skipping benchmark 11:C0 as result already exists
2022-08-06 06:39:53.727 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:39:53.727 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A0 as result already exists
2022-08-06 06:39:53.727 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A1 as result already exists
2022-08-06 06:39:53.727 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A2 as result already exists
2022-08-06 06:39:53.727 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A3 as result already exists
2022-08-06 06:39:53.727 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:39:53.728 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:39:53.728 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B0 as result already exists
2022-08-06 06:39:53.728 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B1 as result already exists
2022-08-06 06:39:53.728 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B2 as result already exists
2022-08-06 06:39:53.728 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B3 as result already exists
2022-08-06 06:39:53.728 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B4 as result already exists
2022-08-06 06:39:53.728 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 06:39:53.728 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:53.728 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:39:53.729 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.729 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:39:53.729 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:39:53.729 | DEBUG    | __main__:run:525 - Skipping benchmark 12:A3 as result already exists
2022-08-06 06:39:53.729 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:39:53.729 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 06:39:53.729 | DEBUG    | __main__:run:509 - Number of Sets: 2
2022-08-06 06:39:53.729 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:39:53.729 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.729 | DEBUG    | __main__:run:525 - Skipping benchmark 13:A0 as result already exists
2022-08-06 06:39:53.730 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 06:39:53.730 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:53.730 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:39:53.730 | DEBUG    | __main__:run:525 - Skipping benchmark 14:D0 as result already exists
2022-08-06 06:39:53.730 | DEBUG    | __main__:run:525 - Skipping benchmark 14:D1 as result already exists
2022-08-06 06:39:53.730 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 06:39:53.730 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C0 as result already exists
2022-08-06 06:39:53.730 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C1 as result already exists
2022-08-06 06:39:53.730 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C2 as result already exists
2022-08-06 06:39:53.730 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C3 as result already exists
2022-08-06 06:39:53.731 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C5 as result already exists
2022-08-06 06:39:53.731 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C6 as result already exists
2022-08-06 06:39:53.731 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C7 as result already exists
2022-08-06 06:39:53.731 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C8 as result already exists
2022-08-06 06:39:53.731 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:39:53.731 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A0 as result already exists
2022-08-06 06:39:53.731 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A1 as result already exists
2022-08-06 06:39:53.731 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A2 as result already exists
2022-08-06 06:39:53.731 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A4 as result already exists
2022-08-06 06:39:53.732 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 06:39:53.732 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E0 as result already exists
2022-08-06 06:39:53.732 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E1 as result already exists
2022-08-06 06:39:53.732 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E4 as result already exists
2022-08-06 06:39:53.732 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E6 as result already exists
2022-08-06 06:39:53.732 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E7 as result already exists
2022-08-06 06:39:53.732 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E10 as result already exists
2022-08-06 06:39:53.732 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E11 as result already exists
2022-08-06 06:39:53.732 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E12 as result already exists
2022-08-06 06:39:53.732 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:53.733 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B0 as result already exists
2022-08-06 06:39:53.733 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B3 as result already exists
2022-08-06 06:39:53.733 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B4 as result already exists
2022-08-06 06:39:53.733 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B5 as result already exists
2022-08-06 06:39:53.733 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 06:39:53.733 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:53.733 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 06:39:53.733 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D2 as result already exists
2022-08-06 06:39:53.733 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D3 as result already exists
2022-08-06 06:39:53.734 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D4 as result already exists
2022-08-06 06:39:53.734 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D5 as result already exists
2022-08-06 06:39:53.734 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D7 as result already exists
2022-08-06 06:39:53.734 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D8 as result already exists
2022-08-06 06:39:53.734 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D9 as result already exists
2022-08-06 06:39:53.734 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D10 as result already exists
2022-08-06 06:39:53.734 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D11 as result already exists
2022-08-06 06:39:53.734 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D15 as result already exists
2022-08-06 06:39:53.734 | DEBUG    | __main__:run:515 - Number of queries: 22
2022-08-06 06:39:53.734 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B0 as result already exists
2022-08-06 06:39:53.735 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B2 as result already exists
2022-08-06 06:39:53.735 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B7 as result already exists
2022-08-06 06:39:53.735 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B11 as result already exists
2022-08-06 06:39:53.735 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B12 as result already exists
2022-08-06 06:39:53.735 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B14 as result already exists
2022-08-06 06:39:53.735 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B15 as result already exists
2022-08-06 06:39:53.735 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B16 as result already exists
2022-08-06 06:39:53.735 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B18 as result already exists
2022-08-06 06:39:53.735 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:39:53.735 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C0 as result already exists
2022-08-06 06:39:53.736 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C1 as result already exists
2022-08-06 06:39:53.736 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C2 as result already exists
2022-08-06 06:39:53.736 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C3 as result already exists
2022-08-06 06:39:53.736 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:39:53.736 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A2 as result already exists
2022-08-06 06:39:53.736 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A3 as result already exists
2022-08-06 06:39:53.736 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A4 as result already exists
2022-08-06 06:39:53.736 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A5 as result already exists
2022-08-06 06:39:53.736 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A6 as result already exists
2022-08-06 06:39:53.736 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:39:53.737 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E4 as result already exists
2022-08-06 06:39:53.737 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E6 as result already exists
2022-08-06 06:39:53.737 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E7 as result already exists
2022-08-06 06:39:53.737 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E8 as result already exists
2022-08-06 06:39:53.737 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E9 as result already exists
2022-08-06 06:39:53.737 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E10 as result already exists
2022-08-06 06:39:53.737 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E11 as result already exists
2022-08-06 06:39:53.737 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E12 as result already exists
2022-08-06 06:39:53.737 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E13 as result already exists
2022-08-06 06:39:53.737 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E14 as result already exists
2022-08-06 06:39:53.738 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 06:39:53.738 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 06:39:53.738 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:39:53.738 | DEBUG    | __main__:run:525 - Skipping benchmark 16:B0 as result already exists
2022-08-06 06:39:53.738 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.738 | DEBUG    | __main__:run:525 - Skipping benchmark 16:A0 as result already exists
2022-08-06 06:39:53.738 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:53.738 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E0 as result already exists
2022-08-06 06:39:53.738 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E1 as result already exists
2022-08-06 06:39:53.738 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E2 as result already exists
2022-08-06 06:39:53.739 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E3 as result already exists
2022-08-06 06:39:53.739 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E4 as result already exists
2022-08-06 06:39:53.739 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:39:53.739 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D0 as result already exists
2022-08-06 06:39:53.739 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D2 as result already exists
2022-08-06 06:39:53.739 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D3 as result already exists
2022-08-06 06:39:53.739 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 06:39:53.739 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:53.739 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:39:53.739 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B0 as result already exists
2022-08-06 06:39:53.740 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B1 as result already exists
2022-08-06 06:39:53.740 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B2 as result already exists
2022-08-06 06:39:53.740 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B4 as result already exists
2022-08-06 06:39:53.740 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 06:39:53.740 | DEBUG    | __main__:run:525 - Skipping benchmark 17:C5 as result already exists
2022-08-06 06:39:53.740 | DEBUG    | __main__:run:525 - Skipping benchmark 17:C6 as result already exists
2022-08-06 06:39:53.740 | DEBUG    | __main__:run:525 - Skipping benchmark 17:C7 as result already exists
2022-08-06 06:39:53.740 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:39:53.740 | DEBUG    | __main__:run:525 - Skipping benchmark 17:A3 as result already exists
2022-08-06 06:39:53.741 | DEBUG    | __main__:run:525 - Skipping benchmark 17:A4 as result already exists
2022-08-06 06:39:53.741 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 06:39:53.741 | DEBUG    | __main__:run:525 - Skipping benchmark 17:D11 as result already exists
2022-08-06 06:39:53.741 | DEBUG    | __main__:run:515 - Number of queries: 25
2022-08-06 06:39:53.741 | DEBUG    | __main__:run:525 - Skipping benchmark 17:E14 as result already exists
2022-08-06 06:39:53.741 | DEBUG    | __main__:run:525 - Skipping benchmark 17:E24 as result already exists
2022-08-06 06:39:53.741 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 06:39:53.741 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 06:39:53.741 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:39:53.741 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A0 as result already exists
2022-08-06 06:39:53.742 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A1 as result already exists
2022-08-06 06:39:53.742 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A2 as result already exists
2022-08-06 06:39:53.742 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A3 as result already exists
2022-08-06 06:39:53.742 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A4 as result already exists
2022-08-06 06:39:53.742 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A5 as result already exists
2022-08-06 06:39:53.742 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:39:53.742 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D0 as result already exists
2022-08-06 06:39:53.742 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D1 as result already exists
2022-08-06 06:39:53.742 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D2 as result already exists
2022-08-06 06:39:53.742 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D3 as result already exists
2022-08-06 06:39:53.743 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D4 as result already exists
2022-08-06 06:39:53.743 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D5 as result already exists
2022-08-06 06:39:53.743 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D6 as result already exists
2022-08-06 06:39:53.743 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D7 as result already exists
2022-08-06 06:39:53.743 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D8 as result already exists
2022-08-06 06:39:53.743 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D9 as result already exists
2022-08-06 06:39:53.743 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D10 as result already exists
2022-08-06 06:39:53.743 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D11 as result already exists
2022-08-06 06:39:53.743 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D12 as result already exists
2022-08-06 06:39:53.743 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D13 as result already exists
2022-08-06 06:39:53.743 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D14 as result already exists
2022-08-06 06:39:53.744 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D15 as result already exists
2022-08-06 06:39:53.744 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:39:53.744 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E0 as result already exists
2022-08-06 06:39:53.744 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E1 as result already exists
2022-08-06 06:39:53.744 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E2 as result already exists
2022-08-06 06:39:53.744 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E3 as result already exists
2022-08-06 06:39:53.744 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E4 as result already exists
2022-08-06 06:39:53.744 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E5 as result already exists
2022-08-06 06:39:53.744 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E6 as result already exists
2022-08-06 06:39:53.745 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E7 as result already exists
2022-08-06 06:39:53.745 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 06:39:53.745 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:53.745 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:39:53.745 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:39:53.745 | DEBUG    | __main__:run:525 - Skipping benchmark 19:C0 as result already exists
2022-08-06 06:39:53.745 | DEBUG    | __main__:run:525 - Skipping benchmark 19:C3 as result already exists
2022-08-06 06:39:53.745 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:39:53.745 | DEBUG    | __main__:run:525 - Skipping benchmark 19:D1 as result already exists
2022-08-06 06:39:53.746 | DEBUG    | __main__:run:525 - Skipping benchmark 19:D2 as result already exists
2022-08-06 06:39:53.746 | DEBUG    | __main__:run:525 - Skipping benchmark 19:D5 as result already exists
2022-08-06 06:39:53.746 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 06:39:53.746 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A1 as result already exists
2022-08-06 06:39:53.746 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A2 as result already exists
2022-08-06 06:39:53.746 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A4 as result already exists
2022-08-06 06:39:53.746 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A8 as result already exists
2022-08-06 06:39:53.746 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A10 as result already exists
2022-08-06 06:39:53.747 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A11 as result already exists
2022-08-06 06:39:53.747 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A14 as result already exists
2022-08-06 06:39:53.747 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:39:53.747 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E1 as result already exists
2022-08-06 06:39:53.747 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E2 as result already exists
2022-08-06 06:39:53.747 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E3 as result already exists
2022-08-06 06:39:53.747 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E4 as result already exists
2022-08-06 06:39:53.747 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 06:39:53.747 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:39:53.747 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:39:53.748 | DEBUG    | __main__:run:525 - Skipping benchmark 20:B1 as result already exists
2022-08-06 06:39:53.748 | DEBUG    | __main__:run:525 - Skipping benchmark 20:B2 as result already exists
2022-08-06 06:39:53.748 | DEBUG    | __main__:run:525 - Skipping benchmark 20:B3 as result already exists
2022-08-06 06:39:53.748 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:53.748 | DEBUG    | __main__:run:525 - Skipping benchmark 20:C0 as result already exists
2022-08-06 06:39:53.748 | DEBUG    | __main__:run:515 - Number of queries: 17
2022-08-06 06:39:53.748 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D0 as result already exists
2022-08-06 06:39:53.748 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D2 as result already exists
2022-08-06 06:39:53.748 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D3 as result already exists
2022-08-06 06:39:53.749 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D5 as result already exists
2022-08-06 06:39:53.749 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D6 as result already exists
2022-08-06 06:39:53.749 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D7 as result already exists
2022-08-06 06:39:53.749 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D10 as result already exists
2022-08-06 06:39:53.749 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D11 as result already exists
2022-08-06 06:39:53.749 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D12 as result already exists
2022-08-06 06:39:53.749 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D13 as result already exists
2022-08-06 06:39:53.749 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D14 as result already exists
2022-08-06 06:39:53.749 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:39:53.749 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:39:53.750 | DEBUG    | __main__:run:525 - Skipping benchmark 20:E0 as result already exists
2022-08-06 08:20:55.239 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval1
2022-08-06 08:20:55.240 | DEBUG    | __main__:run:495 - Found 68 benchmarks in PandasEval1
2022-08-06 08:20:55.240 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 08:20:55.240 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.240 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.240 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 08:20:55.241 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.241 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.241 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 08:20:55.241 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.241 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.242 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 08:20:55.242 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.242 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.242 | DEBUG    | __main__:run:525 - Skipping benchmark 3:A0 as result already exists
2022-08-06 08:20:55.242 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 08:20:55.243 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.243 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.243 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 08:20:55.243 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.243 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.243 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 08:20:55.244 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.244 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.244 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 08:20:55.244 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.244 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.245 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 08:20:55.245 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.245 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.245 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 08:20:55.245 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.245 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.246 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 08:20:55.246 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.246 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.246 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 08:20:55.246 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.246 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.247 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A0 as result already exists
2022-08-06 08:20:55.247 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 08:20:55.247 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.247 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.247 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 08:20:55.248 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.248 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.248 | DEBUG    | __main__:run:525 - Skipping benchmark 13:A0 as result already exists
2022-08-06 08:20:55.248 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 08:20:55.248 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.248 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.249 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 08:20:55.249 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.249 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.249 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 08:20:55.249 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.249 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.250 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 08:20:55.250 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.250 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.250 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 08:20:55.250 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.251 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.251 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A0 as result already exists
2022-08-06 08:20:55.251 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 08:20:55.252 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.252 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.252 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 08:20:55.252 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.252 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.253 | DEBUG    | __main__:run:508 - Running benchmark 21
2022-08-06 08:20:55.253 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.253 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.253 | DEBUG    | __main__:run:508 - Running benchmark 22
2022-08-06 08:20:55.254 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.254 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.254 | DEBUG    | __main__:run:525 - Skipping benchmark 22:A0 as result already exists
2022-08-06 08:20:55.254 | DEBUG    | __main__:run:508 - Running benchmark 23
2022-08-06 08:20:55.254 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.255 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.255 | DEBUG    | __main__:run:508 - Running benchmark 24
2022-08-06 08:20:55.255 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.255 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.255 | DEBUG    | __main__:run:508 - Running benchmark 25
2022-08-06 08:20:55.256 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.256 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.256 | DEBUG    | __main__:run:508 - Running benchmark 26
2022-08-06 08:20:55.256 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.256 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.256 | DEBUG    | __main__:run:525 - Skipping benchmark 26:A0 as result already exists
2022-08-06 08:20:55.257 | DEBUG    | __main__:run:508 - Running benchmark 27
2022-08-06 08:20:55.257 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.257 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.257 | DEBUG    | __main__:run:508 - Running benchmark 28
2022-08-06 08:20:55.257 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.258 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.258 | DEBUG    | __main__:run:525 - Skipping benchmark 28:A0 as result already exists
2022-08-06 08:20:55.258 | DEBUG    | __main__:run:508 - Running benchmark 29
2022-08-06 08:20:55.258 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.258 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.258 | DEBUG    | __main__:run:508 - Running benchmark 30
2022-08-06 08:20:55.258 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.259 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.259 | DEBUG    | __main__:run:525 - Skipping benchmark 30:A0 as result already exists
2022-08-06 08:20:55.259 | DEBUG    | __main__:run:508 - Running benchmark 31
2022-08-06 08:20:55.259 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.259 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.259 | DEBUG    | __main__:run:508 - Running benchmark 32
2022-08-06 08:20:55.260 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.260 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.260 | DEBUG    | __main__:run:508 - Running benchmark 33
2022-08-06 08:20:55.260 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.260 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.260 | DEBUG    | __main__:run:508 - Running benchmark 34
2022-08-06 08:20:55.261 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.261 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.261 | DEBUG    | __main__:run:525 - Skipping benchmark 34:A0 as result already exists
2022-08-06 08:20:55.261 | DEBUG    | __main__:run:508 - Running benchmark 35
2022-08-06 08:20:55.261 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.261 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.262 | DEBUG    | __main__:run:525 - Skipping benchmark 35:A0 as result already exists
2022-08-06 08:20:55.262 | DEBUG    | __main__:run:508 - Running benchmark 36
2022-08-06 08:20:55.262 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.262 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.262 | DEBUG    | __main__:run:525 - Skipping benchmark 36:A0 as result already exists
2022-08-06 08:20:55.262 | DEBUG    | __main__:run:508 - Running benchmark 37
2022-08-06 08:20:55.262 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.263 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.263 | DEBUG    | __main__:run:525 - Skipping benchmark 37:A0 as result already exists
2022-08-06 08:20:55.263 | DEBUG    | __main__:run:508 - Running benchmark 38
2022-08-06 08:20:55.263 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.263 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.263 | DEBUG    | __main__:run:508 - Running benchmark 39
2022-08-06 08:20:55.264 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.264 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.264 | DEBUG    | __main__:run:508 - Running benchmark 40
2022-08-06 08:20:55.264 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.264 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.264 | DEBUG    | __main__:run:525 - Skipping benchmark 40:A0 as result already exists
2022-08-06 08:20:55.264 | DEBUG    | __main__:run:508 - Running benchmark 41
2022-08-06 08:20:55.265 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.265 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.265 | DEBUG    | __main__:run:525 - Skipping benchmark 41:A0 as result already exists
2022-08-06 08:20:55.265 | DEBUG    | __main__:run:508 - Running benchmark 42
2022-08-06 08:20:55.265 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.265 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.266 | DEBUG    | __main__:run:525 - Skipping benchmark 42:A0 as result already exists
2022-08-06 08:20:55.266 | DEBUG    | __main__:run:508 - Running benchmark 43
2022-08-06 08:20:55.266 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.266 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.266 | DEBUG    | __main__:run:525 - Skipping benchmark 43:A0 as result already exists
2022-08-06 08:20:55.267 | DEBUG    | __main__:run:508 - Running benchmark 44
2022-08-06 08:20:55.267 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.267 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.267 | DEBUG    | __main__:run:508 - Running benchmark 45
2022-08-06 08:20:55.267 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.267 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.267 | DEBUG    | __main__:run:525 - Skipping benchmark 45:A0 as result already exists
2022-08-06 08:20:55.268 | DEBUG    | __main__:run:508 - Running benchmark 46
2022-08-06 08:20:55.268 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.268 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.268 | DEBUG    | __main__:run:508 - Running benchmark 47
2022-08-06 08:20:55.268 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.268 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.269 | DEBUG    | __main__:run:508 - Running benchmark 48
2022-08-06 08:20:55.269 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.269 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.269 | DEBUG    | __main__:run:525 - Skipping benchmark 48:A0 as result already exists
2022-08-06 08:20:55.269 | DEBUG    | __main__:run:508 - Running benchmark 49
2022-08-06 08:20:55.269 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.270 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.270 | DEBUG    | __main__:run:525 - Skipping benchmark 49:A0 as result already exists
2022-08-06 08:20:55.270 | DEBUG    | __main__:run:508 - Running benchmark 50
2022-08-06 08:20:55.270 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.270 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.270 | DEBUG    | __main__:run:525 - Skipping benchmark 50:A0 as result already exists
2022-08-06 08:20:55.271 | DEBUG    | __main__:run:508 - Running benchmark 51
2022-08-06 08:20:55.271 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.271 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.271 | DEBUG    | __main__:run:508 - Running benchmark 52
2022-08-06 08:20:55.271 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.271 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.272 | DEBUG    | __main__:run:508 - Running benchmark 53
2022-08-06 08:20:55.272 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.272 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.272 | DEBUG    | __main__:run:508 - Running benchmark 54
2022-08-06 08:20:55.272 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.272 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.273 | DEBUG    | __main__:run:525 - Skipping benchmark 54:A0 as result already exists
2022-08-06 08:20:55.273 | DEBUG    | __main__:run:508 - Running benchmark 55
2022-08-06 08:20:55.273 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.273 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.273 | DEBUG    | __main__:run:508 - Running benchmark 56
2022-08-06 08:20:55.273 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.273 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.274 | DEBUG    | __main__:run:508 - Running benchmark 57
2022-08-06 08:20:55.274 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.274 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.274 | DEBUG    | __main__:run:508 - Running benchmark 58
2022-08-06 08:20:55.274 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.274 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.274 | DEBUG    | __main__:run:508 - Running benchmark 59
2022-08-06 08:20:55.275 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.275 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.275 | DEBUG    | __main__:run:525 - Skipping benchmark 59:A0 as result already exists
2022-08-06 08:20:55.275 | DEBUG    | __main__:run:508 - Running benchmark 60
2022-08-06 08:20:55.275 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.275 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.276 | DEBUG    | __main__:run:525 - Skipping benchmark 60:A0 as result already exists
2022-08-06 08:20:55.276 | DEBUG    | __main__:run:508 - Running benchmark 62
2022-08-06 08:20:55.276 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.276 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.276 | DEBUG    | __main__:run:525 - Skipping benchmark 62:A0 as result already exists
2022-08-06 08:20:55.276 | DEBUG    | __main__:run:508 - Running benchmark 63
2022-08-06 08:20:55.277 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.277 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.277 | DEBUG    | __main__:run:525 - Skipping benchmark 63:A0 as result already exists
2022-08-06 08:20:55.277 | DEBUG    | __main__:run:508 - Running benchmark 64
2022-08-06 08:20:55.277 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.277 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.277 | DEBUG    | __main__:run:508 - Running benchmark 65
2022-08-06 08:20:55.278 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.278 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.278 | DEBUG    | __main__:run:525 - Skipping benchmark 65:A0 as result already exists
2022-08-06 08:20:55.278 | DEBUG    | __main__:run:508 - Running benchmark 66
2022-08-06 08:20:55.278 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.278 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.278 | DEBUG    | __main__:run:525 - Skipping benchmark 66:A0 as result already exists
2022-08-06 08:20:55.279 | DEBUG    | __main__:run:508 - Running benchmark 67
2022-08-06 08:20:55.279 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:55.279 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.279 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval2
2022-08-06 08:20:55.279 | DEBUG    | __main__:run:495 - Found 21 benchmarks in PandasEval2
2022-08-06 08:20:55.279 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 08:20:55.280 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:55.280 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 08:20:55.280 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 08:20:55.280 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.280 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 08:20:55.280 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 08:20:55.281 | DEBUG    | __main__:run:525 - Skipping benchmark 0:E2 as result already exists
2022-08-06 08:20:55.281 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 08:20:55.281 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:55.281 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 08:20:55.281 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 08:20:55.282 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 08:20:55.282 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:55.282 | DEBUG    | __main__:run:525 - Skipping benchmark 1:C3 as result already exists
2022-08-06 08:20:55.282 | DEBUG    | __main__:run:525 - Skipping benchmark 1:C5 as result already exists
2022-08-06 08:20:55.282 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 08:20:55.282 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 08:20:55.283 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:55.283 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:55.283 | DEBUG    | __main__:run:525 - Skipping benchmark 2:A2 as result already exists
2022-08-06 08:20:55.283 | DEBUG    | __main__:run:525 - Skipping benchmark 2:A5 as result already exists
2022-08-06 08:20:55.283 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 08:20:55.283 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D0 as result already exists
2022-08-06 08:20:55.284 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D1 as result already exists
2022-08-06 08:20:55.284 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D3 as result already exists
2022-08-06 08:20:55.284 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D4 as result already exists
2022-08-06 08:20:55.284 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D5 as result already exists
2022-08-06 08:20:55.284 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D6 as result already exists
2022-08-06 08:20:55.284 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D7 as result already exists
2022-08-06 08:20:55.284 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D8 as result already exists
2022-08-06 08:20:55.285 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D9 as result already exists
2022-08-06 08:20:55.285 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D10 as result already exists
2022-08-06 08:20:55.285 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D11 as result already exists
2022-08-06 08:20:55.285 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 08:20:55.285 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B1 as result already exists
2022-08-06 08:20:55.285 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B2 as result already exists
2022-08-06 08:20:55.286 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B3 as result already exists
2022-08-06 08:20:55.286 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B4 as result already exists
2022-08-06 08:20:55.286 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B6 as result already exists
2022-08-06 08:20:55.286 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B7 as result already exists
2022-08-06 08:20:55.286 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B8 as result already exists
2022-08-06 08:20:55.286 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B9 as result already exists
2022-08-06 08:20:55.287 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 08:20:55.287 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C0 as result already exists
2022-08-06 08:20:55.287 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C1 as result already exists
2022-08-06 08:20:55.287 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C2 as result already exists
2022-08-06 08:20:55.287 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C3 as result already exists
2022-08-06 08:20:55.287 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C4 as result already exists
2022-08-06 08:20:55.288 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C5 as result already exists
2022-08-06 08:20:55.288 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C8 as result already exists
2022-08-06 08:20:55.288 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C9 as result already exists
2022-08-06 08:20:55.288 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 08:20:55.288 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E0 as result already exists
2022-08-06 08:20:55.288 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E1 as result already exists
2022-08-06 08:20:55.289 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E2 as result already exists
2022-08-06 08:20:55.289 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E3 as result already exists
2022-08-06 08:20:55.289 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E4 as result already exists
2022-08-06 08:20:55.289 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E5 as result already exists
2022-08-06 08:20:55.289 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E6 as result already exists
2022-08-06 08:20:55.289 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E7 as result already exists
2022-08-06 08:20:55.289 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E13 as result already exists
2022-08-06 08:20:55.290 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E14 as result already exists
2022-08-06 08:20:55.290 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E15 as result already exists
2022-08-06 08:20:55.290 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 08:20:55.290 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:55.290 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 08:20:55.290 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 08:20:55.290 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D1 as result already exists
2022-08-06 08:20:55.291 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D4 as result already exists
2022-08-06 08:20:55.291 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D7 as result already exists
2022-08-06 08:20:55.291 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D10 as result already exists
2022-08-06 08:20:55.291 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:55.291 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 08:20:55.291 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:55.292 | DEBUG    | __main__:run:525 - Skipping benchmark 3:E2 as result already exists
2022-08-06 08:20:55.292 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 08:20:55.292 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:55.292 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:55.292 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A0 as result already exists
2022-08-06 08:20:55.292 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A3 as result already exists
2022-08-06 08:20:55.293 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A4 as result already exists
2022-08-06 08:20:55.293 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 08:20:55.293 | DEBUG    | __main__:run:525 - Skipping benchmark 4:D1 as result already exists
2022-08-06 08:20:55.293 | DEBUG    | __main__:run:525 - Skipping benchmark 4:D2 as result already exists
2022-08-06 08:20:55.293 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 08:20:55.293 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 08:20:55.294 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C1 as result already exists
2022-08-06 08:20:55.294 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C2 as result already exists
2022-08-06 08:20:55.294 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C3 as result already exists
2022-08-06 08:20:55.294 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C4 as result already exists
2022-08-06 08:20:55.294 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C5 as result already exists
2022-08-06 08:20:55.294 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C6 as result already exists
2022-08-06 08:20:55.294 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:55.295 | DEBUG    | __main__:run:525 - Skipping benchmark 4:E2 as result already exists
2022-08-06 08:20:55.295 | DEBUG    | __main__:run:525 - Skipping benchmark 4:E4 as result already exists
2022-08-06 08:20:55.295 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 08:20:55.295 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:55.295 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 08:20:55.295 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A0 as result already exists
2022-08-06 08:20:55.295 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A1 as result already exists
2022-08-06 08:20:55.296 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A2 as result already exists
2022-08-06 08:20:55.296 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A3 as result already exists
2022-08-06 08:20:55.296 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 08:20:55.296 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D0 as result already exists
2022-08-06 08:20:55.296 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D1 as result already exists
2022-08-06 08:20:55.296 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D2 as result already exists
2022-08-06 08:20:55.297 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D3 as result already exists
2022-08-06 08:20:55.297 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D4 as result already exists
2022-08-06 08:20:55.297 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D5 as result already exists
2022-08-06 08:20:55.297 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D6 as result already exists
2022-08-06 08:20:55.297 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D7 as result already exists
2022-08-06 08:20:55.297 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D8 as result already exists
2022-08-06 08:20:55.298 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D9 as result already exists
2022-08-06 08:20:55.298 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D10 as result already exists
2022-08-06 08:20:55.298 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D11 as result already exists
2022-08-06 08:20:55.298 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D12 as result already exists
2022-08-06 08:20:55.298 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D13 as result already exists
2022-08-06 08:20:55.298 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D14 as result already exists
2022-08-06 08:20:55.298 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D15 as result already exists
2022-08-06 08:20:55.299 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 08:20:55.299 | DEBUG    | __main__:run:525 - Skipping benchmark 5:B4 as result already exists
2022-08-06 08:20:55.299 | DEBUG    | __main__:run:525 - Skipping benchmark 5:B5 as result already exists
2022-08-06 08:20:55.299 | DEBUG    | __main__:run:525 - Skipping benchmark 5:B6 as result already exists
2022-08-06 08:20:55.299 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:55.299 | DEBUG    | __main__:run:525 - Skipping benchmark 5:C0 as result already exists
2022-08-06 08:20:55.299 | DEBUG    | __main__:run:525 - Skipping benchmark 5:C1 as result already exists
2022-08-06 08:20:55.300 | DEBUG    | __main__:run:525 - Skipping benchmark 5:C2 as result already exists
2022-08-06 08:20:55.300 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 08:20:55.300 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E2 as result already exists
2022-08-06 08:20:55.300 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E3 as result already exists
2022-08-06 08:20:55.300 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E4 as result already exists
2022-08-06 08:20:55.300 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E5 as result already exists
2022-08-06 08:20:55.300 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E6 as result already exists
2022-08-06 08:20:55.301 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E8 as result already exists
2022-08-06 08:20:55.301 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E9 as result already exists
2022-08-06 08:20:55.301 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 08:20:55.301 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 08:20:55.301 | DEBUG    | __main__:run:515 - Number of queries: 27
2022-08-06 08:20:55.301 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D0 as result already exists
2022-08-06 08:20:55.301 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D1 as result already exists
2022-08-06 08:20:55.301 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D4 as result already exists
2022-08-06 08:20:55.302 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D7 as result already exists
2022-08-06 08:20:55.302 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D9 as result already exists
2022-08-06 08:20:55.302 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D10 as result already exists
2022-08-06 08:20:55.302 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D11 as result already exists
2022-08-06 08:20:55.302 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D12 as result already exists
2022-08-06 08:20:55.302 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D13 as result already exists
2022-08-06 08:20:55.302 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D18 as result already exists
2022-08-06 08:20:55.303 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D19 as result already exists
2022-08-06 08:20:55.303 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D20 as result already exists
2022-08-06 08:20:55.303 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D21 as result already exists
2022-08-06 08:20:55.303 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D22 as result already exists
2022-08-06 08:20:55.303 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D23 as result already exists
2022-08-06 08:20:55.303 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D24 as result already exists
2022-08-06 08:20:55.303 | DEBUG    | __main__:run:515 - Number of queries: 26
2022-08-06 08:20:55.304 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B17 as result already exists
2022-08-06 08:20:55.304 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B18 as result already exists
2022-08-06 08:20:55.304 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B24 as result already exists
2022-08-06 08:20:55.304 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B25 as result already exists
2022-08-06 08:20:55.304 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 08:20:55.304 | DEBUG    | __main__:run:525 - Skipping benchmark 6:E5 as result already exists
2022-08-06 08:20:55.304 | DEBUG    | __main__:run:525 - Skipping benchmark 6:E6 as result already exists
2022-08-06 08:20:55.305 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 08:20:55.305 | DEBUG    | __main__:run:525 - Skipping benchmark 6:C1 as result already exists
2022-08-06 08:20:55.305 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 08:20:55.305 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 08:20:55.305 | DEBUG    | __main__:run:515 - Number of queries: 21
2022-08-06 08:20:55.305 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D0 as result already exists
2022-08-06 08:20:55.305 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D1 as result already exists
2022-08-06 08:20:55.305 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D2 as result already exists
2022-08-06 08:20:55.306 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D3 as result already exists
2022-08-06 08:20:55.306 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D4 as result already exists
2022-08-06 08:20:55.306 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D5 as result already exists
2022-08-06 08:20:55.306 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D6 as result already exists
2022-08-06 08:20:55.306 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D7 as result already exists
2022-08-06 08:20:55.306 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D9 as result already exists
2022-08-06 08:20:55.306 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D10 as result already exists
2022-08-06 08:20:55.307 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D11 as result already exists
2022-08-06 08:20:55.307 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D12 as result already exists
2022-08-06 08:20:55.307 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D13 as result already exists
2022-08-06 08:20:55.307 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D14 as result already exists
2022-08-06 08:20:55.307 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D15 as result already exists
2022-08-06 08:20:55.307 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D16 as result already exists
2022-08-06 08:20:55.307 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D17 as result already exists
2022-08-06 08:20:55.308 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D18 as result already exists
2022-08-06 08:20:55.308 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D19 as result already exists
2022-08-06 08:20:55.308 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D20 as result already exists
2022-08-06 08:20:55.308 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 08:20:55.308 | DEBUG    | __main__:run:525 - Skipping benchmark 7:A0 as result already exists
2022-08-06 08:20:55.308 | DEBUG    | __main__:run:525 - Skipping benchmark 7:A1 as result already exists
2022-08-06 08:20:55.308 | DEBUG    | __main__:run:525 - Skipping benchmark 7:A2 as result already exists
2022-08-06 08:20:55.309 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 08:20:55.309 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E0 as result already exists
2022-08-06 08:20:55.309 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E2 as result already exists
2022-08-06 08:20:55.309 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E3 as result already exists
2022-08-06 08:20:55.309 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 08:20:55.309 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 08:20:55.309 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 08:20:55.310 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C0 as result already exists
2022-08-06 08:20:55.310 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C1 as result already exists
2022-08-06 08:20:55.310 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C2 as result already exists
2022-08-06 08:20:55.310 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C3 as result already exists
2022-08-06 08:20:55.310 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:55.310 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A0 as result already exists
2022-08-06 08:20:55.310 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A2 as result already exists
2022-08-06 08:20:55.310 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A3 as result already exists
2022-08-06 08:20:55.311 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A4 as result already exists
2022-08-06 08:20:55.311 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 08:20:55.311 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D3 as result already exists
2022-08-06 08:20:55.311 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D6 as result already exists
2022-08-06 08:20:55.311 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D7 as result already exists
2022-08-06 08:20:55.311 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D8 as result already exists
2022-08-06 08:20:55.311 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 08:20:55.312 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:55.312 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 08:20:55.312 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D0 as result already exists
2022-08-06 08:20:55.312 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D1 as result already exists
2022-08-06 08:20:55.312 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D2 as result already exists
2022-08-06 08:20:55.312 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D3 as result already exists
2022-08-06 08:20:55.312 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D6 as result already exists
2022-08-06 08:20:55.313 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 08:20:55.313 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 08:20:55.313 | DEBUG    | __main__:run:525 - Skipping benchmark 9:C2 as result already exists
2022-08-06 08:20:55.313 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 08:20:55.313 | DEBUG    | __main__:run:525 - Skipping benchmark 9:A2 as result already exists
2022-08-06 08:20:55.313 | DEBUG    | __main__:run:525 - Skipping benchmark 9:A3 as result already exists
2022-08-06 08:20:55.313 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 08:20:55.314 | DEBUG    | __main__:run:525 - Skipping benchmark 9:E0 as result already exists
2022-08-06 08:20:55.314 | DEBUG    | __main__:run:525 - Skipping benchmark 9:E2 as result already exists
2022-08-06 08:20:55.314 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 08:20:55.314 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:55.314 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.314 | DEBUG    | __main__:run:525 - Skipping benchmark 10:C0 as result already exists
2022-08-06 08:20:55.314 | DEBUG    | __main__:run:515 - Number of queries: 23
2022-08-06 08:20:55.315 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D0 as result already exists
2022-08-06 08:20:55.315 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D1 as result already exists
2022-08-06 08:20:55.315 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D5 as result already exists
2022-08-06 08:20:55.315 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D6 as result already exists
2022-08-06 08:20:55.315 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D7 as result already exists
2022-08-06 08:20:55.315 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D8 as result already exists
2022-08-06 08:20:55.315 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D9 as result already exists
2022-08-06 08:20:55.316 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D10 as result already exists
2022-08-06 08:20:55.316 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D11 as result already exists
2022-08-06 08:20:55.316 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D13 as result already exists
2022-08-06 08:20:55.316 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D14 as result already exists
2022-08-06 08:20:55.316 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D15 as result already exists
2022-08-06 08:20:55.316 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D18 as result already exists
2022-08-06 08:20:55.316 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D19 as result already exists
2022-08-06 08:20:55.317 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D21 as result already exists
2022-08-06 08:20:55.317 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D22 as result already exists
2022-08-06 08:20:55.317 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.317 | DEBUG    | __main__:run:525 - Skipping benchmark 10:A0 as result already exists
2022-08-06 08:20:55.317 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 08:20:55.317 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E0 as result already exists
2022-08-06 08:20:55.317 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E1 as result already exists
2022-08-06 08:20:55.318 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E3 as result already exists
2022-08-06 08:20:55.318 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E4 as result already exists
2022-08-06 08:20:55.318 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E5 as result already exists
2022-08-06 08:20:55.318 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E6 as result already exists
2022-08-06 08:20:55.318 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E7 as result already exists
2022-08-06 08:20:55.318 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E8 as result already exists
2022-08-06 08:20:55.318 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E9 as result already exists
2022-08-06 08:20:55.318 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E10 as result already exists
2022-08-06 08:20:55.319 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E11 as result already exists
2022-08-06 08:20:55.319 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.319 | DEBUG    | __main__:run:525 - Skipping benchmark 10:B0 as result already exists
2022-08-06 08:20:55.319 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 08:20:55.319 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:55.319 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 08:20:55.319 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D0 as result already exists
2022-08-06 08:20:55.320 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D1 as result already exists
2022-08-06 08:20:55.320 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D4 as result already exists
2022-08-06 08:20:55.320 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D6 as result already exists
2022-08-06 08:20:55.320 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D7 as result already exists
2022-08-06 08:20:55.320 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.320 | DEBUG    | __main__:run:525 - Skipping benchmark 11:C0 as result already exists
2022-08-06 08:20:55.320 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 08:20:55.321 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A0 as result already exists
2022-08-06 08:20:55.321 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A1 as result already exists
2022-08-06 08:20:55.321 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A2 as result already exists
2022-08-06 08:20:55.321 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A3 as result already exists
2022-08-06 08:20:55.321 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 08:20:55.321 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 08:20:55.321 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B0 as result already exists
2022-08-06 08:20:55.322 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B1 as result already exists
2022-08-06 08:20:55.322 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B2 as result already exists
2022-08-06 08:20:55.322 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B3 as result already exists
2022-08-06 08:20:55.322 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B4 as result already exists
2022-08-06 08:20:55.322 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 08:20:55.322 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:55.322 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 08:20:55.323 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.323 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 08:20:55.323 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 08:20:55.323 | DEBUG    | __main__:run:525 - Skipping benchmark 12:A3 as result already exists
2022-08-06 08:20:55.323 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 08:20:55.323 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 08:20:55.323 | DEBUG    | __main__:run:509 - Number of Sets: 2
2022-08-06 08:20:55.323 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 08:20:55.324 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.324 | DEBUG    | __main__:run:525 - Skipping benchmark 13:A0 as result already exists
2022-08-06 08:20:55.324 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 08:20:55.324 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:55.324 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 08:20:55.324 | DEBUG    | __main__:run:525 - Skipping benchmark 14:D0 as result already exists
2022-08-06 08:20:55.324 | DEBUG    | __main__:run:525 - Skipping benchmark 14:D1 as result already exists
2022-08-06 08:20:55.325 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 08:20:55.325 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C0 as result already exists
2022-08-06 08:20:55.325 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C1 as result already exists
2022-08-06 08:20:55.325 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C2 as result already exists
2022-08-06 08:20:55.325 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C3 as result already exists
2022-08-06 08:20:55.325 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C5 as result already exists
2022-08-06 08:20:55.325 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C6 as result already exists
2022-08-06 08:20:55.326 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C7 as result already exists
2022-08-06 08:20:55.326 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C8 as result already exists
2022-08-06 08:20:55.326 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 08:20:55.326 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A0 as result already exists
2022-08-06 08:20:55.326 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A1 as result already exists
2022-08-06 08:20:55.326 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A2 as result already exists
2022-08-06 08:20:55.326 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A4 as result already exists
2022-08-06 08:20:55.327 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 08:20:55.327 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E0 as result already exists
2022-08-06 08:20:55.327 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E1 as result already exists
2022-08-06 08:20:55.327 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E4 as result already exists
2022-08-06 08:20:55.327 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E6 as result already exists
2022-08-06 08:20:55.327 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E7 as result already exists
2022-08-06 08:20:55.327 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E10 as result already exists
2022-08-06 08:20:55.328 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E11 as result already exists
2022-08-06 08:20:55.328 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E12 as result already exists
2022-08-06 08:20:55.328 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:55.328 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B0 as result already exists
2022-08-06 08:20:55.328 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B3 as result already exists
2022-08-06 08:20:55.328 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B4 as result already exists
2022-08-06 08:20:55.328 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B5 as result already exists
2022-08-06 08:20:55.328 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 08:20:55.329 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:55.329 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 08:20:55.329 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D2 as result already exists
2022-08-06 08:20:55.329 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D3 as result already exists
2022-08-06 08:20:55.329 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D4 as result already exists
2022-08-06 08:20:55.329 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D5 as result already exists
2022-08-06 08:20:55.329 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D7 as result already exists
2022-08-06 08:20:55.330 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D8 as result already exists
2022-08-06 08:20:55.330 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D9 as result already exists
2022-08-06 08:20:55.330 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D10 as result already exists
2022-08-06 08:20:55.330 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D11 as result already exists
2022-08-06 08:20:55.330 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D15 as result already exists
2022-08-06 08:20:55.330 | DEBUG    | __main__:run:515 - Number of queries: 22
2022-08-06 08:20:55.330 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B0 as result already exists
2022-08-06 08:20:55.331 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B2 as result already exists
2022-08-06 08:20:55.331 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B7 as result already exists
2022-08-06 08:20:55.331 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B11 as result already exists
2022-08-06 08:20:55.331 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B12 as result already exists
2022-08-06 08:20:55.331 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B14 as result already exists
2022-08-06 08:20:55.331 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B15 as result already exists
2022-08-06 08:20:55.331 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B16 as result already exists
2022-08-06 08:20:55.332 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B18 as result already exists
2022-08-06 08:20:55.332 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 08:20:55.332 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C0 as result already exists
2022-08-06 08:20:55.332 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C1 as result already exists
2022-08-06 08:20:55.332 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C2 as result already exists
2022-08-06 08:20:55.332 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C3 as result already exists
2022-08-06 08:20:55.332 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 08:20:55.333 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A2 as result already exists
2022-08-06 08:20:55.333 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A3 as result already exists
2022-08-06 08:20:55.333 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A4 as result already exists
2022-08-06 08:20:55.333 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A5 as result already exists
2022-08-06 08:20:55.333 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A6 as result already exists
2022-08-06 08:20:55.333 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 08:20:55.333 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E4 as result already exists
2022-08-06 08:20:55.333 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E6 as result already exists
2022-08-06 08:20:55.333 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E7 as result already exists
2022-08-06 08:20:55.333 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E8 as result already exists
2022-08-06 08:20:55.334 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E9 as result already exists
2022-08-06 08:20:55.334 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E10 as result already exists
2022-08-06 08:20:55.334 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E11 as result already exists
2022-08-06 08:20:55.334 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E12 as result already exists
2022-08-06 08:20:55.334 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E13 as result already exists
2022-08-06 08:20:55.334 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E14 as result already exists
2022-08-06 08:20:55.334 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 08:20:55.334 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 08:20:55.334 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 08:20:55.335 | DEBUG    | __main__:run:525 - Skipping benchmark 16:B0 as result already exists
2022-08-06 08:20:55.335 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.335 | DEBUG    | __main__:run:525 - Skipping benchmark 16:A0 as result already exists
2022-08-06 08:20:55.335 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:55.335 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E0 as result already exists
2022-08-06 08:20:55.335 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E1 as result already exists
2022-08-06 08:20:55.335 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E2 as result already exists
2022-08-06 08:20:55.335 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E3 as result already exists
2022-08-06 08:20:55.335 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E4 as result already exists
2022-08-06 08:20:55.336 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 08:20:55.336 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D0 as result already exists
2022-08-06 08:20:55.336 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D2 as result already exists
2022-08-06 08:20:55.336 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D3 as result already exists
2022-08-06 08:20:55.336 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 08:20:55.336 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:55.336 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 08:20:55.336 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B0 as result already exists
2022-08-06 08:20:55.336 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B1 as result already exists
2022-08-06 08:20:55.336 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B2 as result already exists
2022-08-06 08:20:55.337 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B4 as result already exists
2022-08-06 08:20:55.337 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 08:20:55.337 | DEBUG    | __main__:run:525 - Skipping benchmark 17:C5 as result already exists
2022-08-06 08:20:55.337 | DEBUG    | __main__:run:525 - Skipping benchmark 17:C6 as result already exists
2022-08-06 08:20:55.337 | DEBUG    | __main__:run:525 - Skipping benchmark 17:C7 as result already exists
2022-08-06 08:20:55.337 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 08:20:55.337 | DEBUG    | __main__:run:525 - Skipping benchmark 17:A3 as result already exists
2022-08-06 08:20:55.337 | DEBUG    | __main__:run:525 - Skipping benchmark 17:A4 as result already exists
2022-08-06 08:20:55.337 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 08:20:55.337 | DEBUG    | __main__:run:525 - Skipping benchmark 17:D11 as result already exists
2022-08-06 08:20:55.338 | DEBUG    | __main__:run:515 - Number of queries: 25
2022-08-06 08:20:55.338 | DEBUG    | __main__:run:525 - Skipping benchmark 17:E14 as result already exists
2022-08-06 08:20:55.338 | DEBUG    | __main__:run:525 - Skipping benchmark 17:E24 as result already exists
2022-08-06 08:20:55.338 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 08:20:55.338 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 08:20:55.338 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:55.338 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A0 as result already exists
2022-08-06 08:20:55.338 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A1 as result already exists
2022-08-06 08:20:55.338 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A2 as result already exists
2022-08-06 08:20:55.339 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A3 as result already exists
2022-08-06 08:20:55.339 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A4 as result already exists
2022-08-06 08:20:55.339 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A5 as result already exists
2022-08-06 08:20:55.339 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 08:20:55.339 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D0 as result already exists
2022-08-06 08:20:55.339 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D1 as result already exists
2022-08-06 08:20:55.339 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D2 as result already exists
2022-08-06 08:20:55.339 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D3 as result already exists
2022-08-06 08:20:55.339 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D4 as result already exists
2022-08-06 08:20:55.339 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D5 as result already exists
2022-08-06 08:20:55.340 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D6 as result already exists
2022-08-06 08:20:55.340 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D7 as result already exists
2022-08-06 08:20:55.340 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D8 as result already exists
2022-08-06 08:20:55.340 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D9 as result already exists
2022-08-06 08:20:55.340 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D10 as result already exists
2022-08-06 08:20:55.340 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D11 as result already exists
2022-08-06 08:20:55.340 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D12 as result already exists
2022-08-06 08:20:55.340 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D13 as result already exists
2022-08-06 08:20:55.340 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D14 as result already exists
2022-08-06 08:20:55.341 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D15 as result already exists
2022-08-06 08:20:55.341 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 08:20:55.341 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E0 as result already exists
2022-08-06 08:20:55.341 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E1 as result already exists
2022-08-06 08:20:55.341 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E2 as result already exists
2022-08-06 08:20:55.341 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E3 as result already exists
2022-08-06 08:20:55.341 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E4 as result already exists
2022-08-06 08:20:55.341 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E5 as result already exists
2022-08-06 08:20:55.341 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E6 as result already exists
2022-08-06 08:20:55.341 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E7 as result already exists
2022-08-06 08:20:55.342 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 08:20:55.342 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:55.342 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 08:20:55.342 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 08:20:55.342 | DEBUG    | __main__:run:525 - Skipping benchmark 19:C0 as result already exists
2022-08-06 08:20:55.342 | DEBUG    | __main__:run:525 - Skipping benchmark 19:C3 as result already exists
2022-08-06 08:20:55.342 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 08:20:55.342 | DEBUG    | __main__:run:525 - Skipping benchmark 19:D1 as result already exists
2022-08-06 08:20:55.342 | DEBUG    | __main__:run:525 - Skipping benchmark 19:D2 as result already exists
2022-08-06 08:20:55.342 | DEBUG    | __main__:run:525 - Skipping benchmark 19:D5 as result already exists
2022-08-06 08:20:55.343 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 08:20:55.343 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A1 as result already exists
2022-08-06 08:20:55.343 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A2 as result already exists
2022-08-06 08:20:55.343 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A4 as result already exists
2022-08-06 08:20:55.343 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A8 as result already exists
2022-08-06 08:20:55.343 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A10 as result already exists
2022-08-06 08:20:55.343 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A11 as result already exists
2022-08-06 08:20:55.343 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A14 as result already exists
2022-08-06 08:20:55.343 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 08:20:55.344 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E1 as result already exists
2022-08-06 08:20:55.344 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E2 as result already exists
2022-08-06 08:20:55.344 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E3 as result already exists
2022-08-06 08:20:55.344 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E4 as result already exists
2022-08-06 08:20:55.344 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 08:20:55.344 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:55.344 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 08:20:55.344 | DEBUG    | __main__:run:525 - Skipping benchmark 20:B1 as result already exists
2022-08-06 08:20:55.344 | DEBUG    | __main__:run:525 - Skipping benchmark 20:B2 as result already exists
2022-08-06 08:20:55.344 | DEBUG    | __main__:run:525 - Skipping benchmark 20:B3 as result already exists
2022-08-06 08:20:55.345 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:55.345 | DEBUG    | __main__:run:525 - Skipping benchmark 20:C0 as result already exists
2022-08-06 08:20:55.345 | DEBUG    | __main__:run:515 - Number of queries: 17
2022-08-06 08:20:55.345 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D0 as result already exists
2022-08-06 08:20:55.345 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D2 as result already exists
2022-08-06 08:20:55.345 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D3 as result already exists
2022-08-06 08:20:55.345 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D5 as result already exists
2022-08-06 08:20:55.345 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D6 as result already exists
2022-08-06 08:20:55.345 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D7 as result already exists
2022-08-06 08:20:55.345 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D10 as result already exists
2022-08-06 08:20:55.346 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D11 as result already exists
2022-08-06 08:20:55.346 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D12 as result already exists
2022-08-06 08:20:55.346 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D13 as result already exists
2022-08-06 08:20:55.346 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D14 as result already exists
2022-08-06 08:20:55.346 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 08:20:55.346 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 08:20:55.346 | DEBUG    | __main__:run:525 - Skipping benchmark 20:E0 as result already exists

2022-08-06 09:03:35.281 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval1
2022-08-06 09:03:35.282 | DEBUG    | __main__:run:495 - Found 68 benchmarks in PandasEval1
2022-08-06 09:03:35.282 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 09:03:35.282 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:35.282 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:35.282 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 09:03:35.283 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:35.283 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:35.283 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 09:03:35.283 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:35.283 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:35.283 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 09:03:35.283 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:35.283 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:47.790 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 09:03:47.790 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, {'id': 1005, 'idnew': -1005})
2022-08-06 09:03:47.805 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:47.805 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 09:03:47.805 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, {'id': 1005, 'idnew': -1005})
2022-08-06 09:03:47.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:47.817 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 09:03:47.817 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, {'id': 1005, 'idnew': -1005})
2022-08-06 09:03:47.829 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:47.829 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 09:03:47.830 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, 1005)
2022-08-06 09:03:47.842 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:47.842 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 09:03:47.842 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, {'id': 1005, 'idnew': -1005})
2022-08-06 09:03:47.854 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:47.854 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 09:03:47.854 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, {'id': 1005, 'idnew': -1005})
2022-08-06 09:03:47.866 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:47.866 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 09:03:47.867 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, 1005)
2022-08-06 09:03:47.878 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:47.879 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 09:03:47.879 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, {'id': 1005, 'idnew': -1005})
2022-08-06 09:03:47.891 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:47.891 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 09:03:47.891 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.copy()
2022-08-06 09:03:47.902 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:47.903 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 09:03:47.903 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -5}, {'id': 1005, 'idnew': -1005})
2022-08-06 09:03:47.915 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:47.915 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 09:03:47.915 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, 1005)
2022-08-06 09:03:47.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:47.927 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 09:03:47.927 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': 5}, {'id': 1005, 'idnew': -1005})
2022-08-06 09:03:47.939 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:03:47.939 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 09:03:47.939 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:47.939 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:47.940 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 09:03:47.940 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:47.940 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:47.940 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 09:03:47.940 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:47.940 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:47.940 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 09:03:47.940 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:47.941 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:47.941 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 09:03:47.941 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:47.941 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:47.941 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 09:03:47.941 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:47.941 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:47.941 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 09:03:47.942 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:47.942 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:47.942 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 09:03:47.942 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:47.942 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:49.373 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 09:03:49.374 | DEBUG    | __main__:run_benchmark:432 - df1['score'].notna().mean()
2022-08-06 09:03:49.375 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:49.375 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 09:03:49.375 | DEBUG    | __main__:run_benchmark:432 - df1['score'].count() / len(df1)
2022-08-06 09:03:49.376 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:49.376 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 09:03:49.376 | DEBUG    | __main__:run_benchmark:432 - df1['score'].count() / len(df1)
2022-08-06 09:03:49.377 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:49.377 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 09:03:49.377 | DEBUG    | __main__:run_benchmark:432 - df1['score'].mean()
2022-08-06 09:03:49.378 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:49.379 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 09:03:49.379 | DEBUG    | __main__:run_benchmark:432 - df1['score'].count()
2022-08-06 09:03:49.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:49.380 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 09:03:49.380 | DEBUG    | __main__:run_benchmark:432 - df1['score'].count()/df1['score'].count().max()
2022-08-06 09:03:49.381 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:49.381 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 09:03:49.381 | DEBUG    | __main__:run_benchmark:432 - #  The result should be a series
2022-08-06 09:03:49.381 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:49.381 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 09:03:49.381 | DEBUG    | __main__:run_benchmark:432 - #  Hint: Use the .mean() method
2022-08-06 09:03:49.382 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:49.382 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 09:03:49.382 | DEBUG    | __main__:run_benchmark:432 - np.count_nonzero(df1['score']) / len(df1['score'])
2022-08-06 09:03:49.383 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:03:49.383 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 09:03:49.383 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:49.384 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:49.384 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 09:03:49.384 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:49.384 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:50.872 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:50.873 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 09:03:50.881 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:50.881 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:50.881 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max().sort_index()
2022-08-06 09:03:50.888 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:50.888 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:50.888 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').Earnings.max()
2022-08-06 09:03:50.894 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:50.895 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:50.895 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 09:03:50.901 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:50.901 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:50.901 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').Earnings.max()
2022-08-06 09:03:50.908 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:50.908 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:50.908 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 09:03:50.915 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:50.915 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:50.915 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').Earnings.max()
2022-08-06 09:03:50.922 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:50.922 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:50.922 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').Earnings.idxmax()
2022-08-06 09:03:50.929 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:50.929 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:50.929 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x.nlargest(1, 'Earnings'))
2022-08-06 09:03:50.940 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:50.941 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:50.941 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').Earnings.idxmax()
2022-08-06 09:03:50.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:50.948 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:50.948 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').Earnings.max()
2022-08-06 09:03:50.954 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:50.954 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:50.955 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].transform(np.max)
2022-08-06 09:03:50.961 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:50.961 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:50.962 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x.nlargest(1, 'Earnings'))
2022-08-06 09:03:50.972 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:50.973 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:50.973 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 09:03:50.979 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:50.980 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:50.980 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 09:03:50.986 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:50.986 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:50.987 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].idxmax().dropna()
2022-08-06 09:03:50.993 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:50.994 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:50.994 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x.nlargest(1, 'Earnings'))
2022-08-06 09:03:51.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:51.005 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:51.005 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').Earnings.max()
2022-08-06 09:03:51.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:51.012 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:51.012 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').Earnings.max()
2022-08-06 09:03:51.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:51.018 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 09:03:51.019 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').Earnings.max()
2022-08-06 09:03:51.025 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:51.026 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 09:03:51.026 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:51.026 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:51.026 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 09:03:51.026 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:51.026 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:51.026 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 09:03:51.027 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:51.027 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:51.027 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 09:03:51.027 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:51.027 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:51.027 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 09:03:51.027 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:51.027 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:52.066 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.067 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.loc[2]
2022-08-06 09:03:52.069 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.069 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.069 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 09:03:52.075 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.075 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.075 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 09:03:52.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.080 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.081 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 09:03:52.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.086 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.086 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.loc[2, :]
2022-08-06 09:03:52.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.087 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.087 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 09:03:52.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.093 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.093 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 09:03:52.098 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.098 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.098 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 09:03:52.103 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.104 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.104 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 09:03:52.109 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.109 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.109 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 09:03:52.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.115 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.115 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 09:03:52.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.120 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.120 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 09:03:52.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.125 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.125 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 09:03:52.131 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.131 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.131 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 09:03:52.136 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.136 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.136 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 09:03:52.141 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.141 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.142 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 09:03:52.147 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.147 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.147 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 09:03:52.152 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.152 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.152 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 09:03:52.158 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.158 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.158 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.iloc[2]
2022-08-06 09:03:52.163 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.163 | DEBUG    | __main__:run_benchmark:431 - Query: put third row of df1 in dfout
2022-08-06 09:03:52.163 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.loc[2, :]
2022-08-06 09:03:52.164 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:52.165 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 09:03:52.165 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:52.165 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:52.165 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 09:03:52.165 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:52.165 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:52.166 | DEBUG    | __main__:run:508 - Running benchmark 21
2022-08-06 09:03:52.166 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:52.166 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:52.166 | DEBUG    | __main__:run:508 - Running benchmark 22
2022-08-06 09:03:52.166 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:52.166 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:53.463 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.463 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum().sum()
2022-08-06 09:03:53.466 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.466 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.467 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 09:03:53.469 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.470 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.470 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 09:03:53.472 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.473 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.473 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum().to_frame('nulls')
2022-08-06 09:03:53.476 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.477 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.477 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 09:03:53.479 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.480 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.480 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 09:03:53.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.483 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.484 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum().sum()
2022-08-06 09:03:53.486 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.487 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.487 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 09:03:53.490 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.490 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.490 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 09:03:53.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.493 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.493 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum().sum()
2022-08-06 09:03:53.495 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.496 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.496 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 09:03:53.498 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.498 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.498 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.isna(df1).sum()
2022-08-06 09:03:53.500 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.500 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.501 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum().values
2022-08-06 09:03:53.502 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.503 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.503 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 09:03:53.504 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.505 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.505 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 09:03:53.506 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.506 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.507 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum(axis=0)
2022-08-06 09:03:53.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.508 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.508 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().any().value_counts()
2022-08-06 09:03:53.510 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.510 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.510 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 09:03:53.512 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.512 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.512 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum(axis=1).astype(np.int8)
2022-08-06 09:03:53.513 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.513 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 09:03:53.513 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum()
2022-08-06 09:03:53.515 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:53.516 | DEBUG    | __main__:run:508 - Running benchmark 23
2022-08-06 09:03:53.516 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:53.516 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:53.516 | DEBUG    | __main__:run:508 - Running benchmark 24
2022-08-06 09:03:53.516 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:53.516 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:53.517 | DEBUG    | __main__:run:508 - Running benchmark 25
2022-08-06 09:03:53.517 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:53.517 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:53.517 | DEBUG    | __main__:run:508 - Running benchmark 26
2022-08-06 09:03:53.517 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:53.517 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:55.522 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.523 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame({'mean': df1.mean(), 'median': df1.median()})
2022-08-06 09:03:55.564 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.564 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.564 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.groupby('A').agg({'B': ['mean', 'median']})
2022-08-06 09:03:55.581 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.581 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.581 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 09:03:55.588 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.588 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.588 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 09:03:55.598 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.598 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.598 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame({'A': {0: 5, 1: 0, 2: 2, 3: 1, 4: 9, 5: -5, 6: 3}, 'B': {0: 2, 1: 4, 2: 6, 3: 1, 4
2022-08-06 09:03:55.598 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.598 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.599 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 09:03:55.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.607 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.608 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame({'mean': df1.mean(), 'median': df1.median()})
2022-08-06 09:03:55.616 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.616 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.616 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 09:03:55.625 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.625 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.625 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame({'mean': df1.mean(), 'median': df1.median()})
2022-08-06 09:03:55.633 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.633 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.633 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame({'mean': df1.mean(axis=0), 'median': df1.median(axis=0)})
2022-08-06 09:03:55.641 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.642 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.642 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 09:03:55.650 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.650 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.650 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 09:03:55.659 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.659 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.659 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 09:03:55.664 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.664 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.665 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame({'mean': df1.mean(), 'median': df1.median()})
2022-08-06 09:03:55.673 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.673 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.673 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 09:03:55.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.678 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.678 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([df1.mean(), df1.median()], axis=1)
2022-08-06 09:03:55.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.687 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.687 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 09:03:55.692 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.692 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.692 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.mean()
2022-08-06 09:03:55.699 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.699 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.699 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame({'mean': df1.mean(), 'median': df1.median()})
2022-08-06 09:03:55.707 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.707 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 09:03:55.707 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 09:03:55.716 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:55.716 | DEBUG    | __main__:run:508 - Running benchmark 27
2022-08-06 09:03:55.717 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:55.717 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:55.717 | DEBUG    | __main__:run:508 - Running benchmark 28
2022-08-06 09:03:55.717 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:55.717 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:56.819 | DEBUG    | __main__:run_benchmark:431 - Query: Set 'A' as 5 in 6th row of df1
2022-08-06 09:03:56.820 | DEBUG    | __main__:run_benchmark:432 - df1.loc[5, 'A'] = 5
2022-08-06 09:03:56.852 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:03:56.856 | DEBUG    | __main__:run:508 - Running benchmark 29
2022-08-06 09:03:56.857 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:56.857 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:56.858 | DEBUG    | __main__:run:508 - Running benchmark 30
2022-08-06 09:03:56.858 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:56.858 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:58.321 | DEBUG    | __main__:run_benchmark:431 - Query: Concatenate two data frames and drop duplicates
2022-08-06 09:03:58.322 | DEBUG    | __main__:run_benchmark:432 - pd.concat([df1, df2], axis=0, ignore_index=True).drop_duplicates()
2022-08-06 09:03:58.333 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:03:58.334 | DEBUG    | __main__:run:508 - Running benchmark 31
2022-08-06 09:03:58.334 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:58.334 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:58.335 | DEBUG    | __main__:run:508 - Running benchmark 32
2022-08-06 09:03:58.335 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:58.335 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:58.335 | DEBUG    | __main__:run:508 - Running benchmark 33
2022-08-06 09:03:58.335 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:58.335 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:58.335 | DEBUG    | __main__:run:508 - Running benchmark 34
2022-08-06 09:03:58.336 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:58.336 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:03:59.514 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.514 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 09:03:59.546 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.547 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.547 | DEBUG    | __main__:run_benchmark:432 - df1.loc[:, (df1.dtypes == float)]
2022-08-06 09:03:59.568 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.569 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.569 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 09:03:59.588 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.588 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.589 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=['float64'])
2022-08-06 09:03:59.608 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.608 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.608 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=['float64'])
2022-08-06 09:03:59.628 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.628 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.628 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=['float64'])
2022-08-06 09:03:59.648 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.648 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.648 | DEBUG    | __main__:run_benchmark:432 - df1.loc[:, (df1.dtypes == float)]
2022-08-06 09:03:59.667 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.667 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.668 | DEBUG    | __main__:run_benchmark:432 - df1.dtypes[(df1.dtypes == np.float64)]
2022-08-06 09:03:59.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.682 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.682 | DEBUG    | __main__:run_benchmark:432 - df1.columns[(df1.dtypes == 'float64')]
2022-08-06 09:03:59.696 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.696 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.697 | DEBUG    | __main__:run_benchmark:432 - df1.loc[:, (df1.dtypes == 'float64')]
2022-08-06 09:03:59.716 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.716 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.716 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 09:03:59.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.736 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.736 | DEBUG    | __main__:run_benchmark:432 - df1.dtypes[(df1.dtypes == 'float64')]
2022-08-06 09:03:59.750 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.751 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.751 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(i)
2022-08-06 09:03:59.753 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.753 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.753 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 09:03:59.772 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.773 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.773 | DEBUG    | __main__:run_benchmark:432 - filtre = df1.dtypes == 'float64'
2022-08-06 09:03:59.786 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.787 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.787 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=['float64'])
2022-08-06 09:03:59.806 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.806 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.807 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=['float64'])
2022-08-06 09:03:59.826 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.826 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.826 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=['float64'])
2022-08-06 09:03:59.846 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.846 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.846 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 09:03:59.866 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.866 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 09:03:59.866 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=['float64'])
2022-08-06 09:03:59.886 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:03:59.887 | DEBUG    | __main__:run:508 - Running benchmark 35
2022-08-06 09:03:59.887 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:03:59.887 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:01.751 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.752 | DEBUG    | __main__:run_benchmark:432 - #  If yes, return True, else return False
2022-08-06 09:04:01.752 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.753 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.754 | DEBUG    | __main__:run_benchmark:432 - #  Return True if all values are 1, 2 or 3. Otherwise, return False
2022-08-06 09:04:01.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.755 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.756 | DEBUG    | __main__:run_benchmark:432 - #  Return a series of boolean values
2022-08-06 09:04:01.756 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.757 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.758 | DEBUG    | __main__:run_benchmark:432 - #  If yes, return True, else return False
2022-08-06 09:04:01.758 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.759 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.759 | DEBUG    | __main__:run_benchmark:432 - #  If yes, then replace the values of column 'C1' with 0, 1, and 2 respectively.
2022-08-06 09:04:01.760 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.761 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.761 | DEBUG    | __main__:run_benchmark:432 - #  Return a series with boolean values of whether the values in the "C1" column contains 1, 2 or 3
2022-08-06 09:04:01.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.763 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.763 | DEBUG    | __main__:run_benchmark:432 - #  If yes, then replace the value of column 'C2' with 'E3'
2022-08-06 09:04:01.764 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.764 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.765 | DEBUG    | __main__:run_benchmark:432 - df1['C1'].isin([1, 2, 3]).all()
2022-08-06 09:04:01.772 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.773 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.774 | DEBUG    | __main__:run_benchmark:432 - #  If not, replace the values with 0
2022-08-06 09:04:01.774 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.775 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.776 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:04:01.776 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.777 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.778 | DEBUG    | __main__:run_benchmark:432 - #  If yes, return 1, else return 0
2022-08-06 09:04:01.778 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.779 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.779 | DEBUG    | __main__:run_benchmark:432 - #  Return a series containing the boolean values for whether the values of the 'C1' column are 1, 2 or 3
2022-08-06 09:04:01.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.781 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.781 | DEBUG    | __main__:run_benchmark:432 - #  Return a series of True/False values for the "C1" column in "df1" where the value is 1, 2 or 3.
2022-08-06 09:04:01.782 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.782 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.783 | DEBUG    | __main__:run_benchmark:432 - #  Return a series containing True or False for each value in the "C1" column of "df1" if the value is 1, 2 or 3
2022-08-06 09:04:01.783 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.784 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.784 | DEBUG    | __main__:run_benchmark:432 - #  If all the values are 1, 2 or 3, return True, else return False
2022-08-06 09:04:01.785 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.785 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.785 | DEBUG    | __main__:run_benchmark:432 - #  Return a series of boolean values for the "C1" column in "df1" by checking if the column contains the value of "1", "2" or "3"
2022-08-06 09:04:01.786 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.786 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.787 | DEBUG    | __main__:run_benchmark:432 - #  Return a series containing True or False values if the values in the "C1" column are 1, 2 or 3
2022-08-06 09:04:01.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.788 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.788 | DEBUG    | __main__:run_benchmark:432 - #  Return a series containing boolean values of "C1" column in "df1" where the value is 1, 2 or 3
2022-08-06 09:04:01.788 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.788 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.789 | DEBUG    | __main__:run_benchmark:432 - np.isin(df1['C1'], [1, 2, 3])
2022-08-06 09:04:01.792 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.792 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 09:04:01.792 | DEBUG    | __main__:run_benchmark:432 - #  Return a series with boolean values for the "C1" column in "df1"
2022-08-06 09:04:01.793 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:01.796 | DEBUG    | __main__:run:508 - Running benchmark 36
2022-08-06 09:04:01.796 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:01.796 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:03.218 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-06 09:04:03.219 | DEBUG    | __main__:run_benchmark:432 - df1['foo'] = pd.to_numeric(df1['foo'], errors='coerce')
2022-08-06 09:04:03.225 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:04:03.227 | DEBUG    | __main__:run:508 - Running benchmark 37
2022-08-06 09:04:03.227 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:03.227 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:04.567 | DEBUG    | __main__:run_benchmark:431 - Query: Convert the 'foo' column in the dataframe to numeric
2022-08-06 09:04:04.567 | DEBUG    | __main__:run_benchmark:432 - df1['foo'] = pd.to_numeric(df1['foo'], errors='coerce')
2022-08-06 09:04:04.575 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:04:04.577 | DEBUG    | __main__:run:508 - Running benchmark 38
2022-08-06 09:04:04.577 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:04.577 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:04.577 | DEBUG    | __main__:run:508 - Running benchmark 39
2022-08-06 09:04:04.578 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:04.578 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:04.578 | DEBUG    | __main__:run:508 - Running benchmark 40
2022-08-06 09:04:04.578 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:04.578 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:06.599 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.600 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 09:04:06.613 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.614 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.614 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 09:04:06.627 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.628 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.628 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 09:04:06.639 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.639 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.639 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 09:04:06.648 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.648 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.648 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 09:04:06.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.656 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.656 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 09:04:06.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.665 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.665 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 09:04:06.673 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.674 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.674 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 09:04:06.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.682 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.682 | DEBUG    | __main__:run_benchmark:432 - df = df[~df.time.diff().eq(0)]
2022-08-06 09:04:06.688 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.688 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.689 | DEBUG    | __main__:run_benchmark:432 - df = df[~df.index.duplicated(keep='last')]
2022-08-06 09:04:06.694 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.695 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.695 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 09:04:06.703 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.703 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.703 | DEBUG    | __main__:run_benchmark:432 - df.loc[(~ df.index.isin(df.index + 1))]
2022-08-06 09:04:06.711 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.711 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.711 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 09:04:06.719 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.720 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.720 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 09:04:06.728 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.728 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.728 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 09:04:06.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.736 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.737 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 09:04:06.745 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.745 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.745 | DEBUG    | __main__:run_benchmark:432 - df = df.loc[~df.duplicated(keep='first')]
2022-08-06 09:04:06.751 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.751 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.751 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first')
2022-08-06 09:04:06.759 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.760 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.760 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 09:04:06.768 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.768 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-06 09:04:06.768 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 09:04:06.776 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:06.778 | DEBUG    | __main__:run:508 - Running benchmark 41
2022-08-06 09:04:06.778 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:06.778 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:08.923 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:08.923 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:04:08.924 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:08.925 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:08.925 | DEBUG    | __main__:run_benchmark:432 - df.drop(df[df['time'].diff() < pd.Timedelta('10 minutes')].index, inplace=True)
2022-08-06 09:04:08.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:08.973 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:08.974 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:04:08.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:08.974 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:08.974 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 09:04:08.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:08.991 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:08.992 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 09:04:09.004 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:09.004 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:09.005 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:04:09.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:09.005 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:09.005 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last', inplace=True)
2022-08-06 09:04:09.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:09.018 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:09.018 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset=['time'], keep='last', inplace=True)
2022-08-06 09:04:09.030 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:09.030 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:09.030 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:04:09.031 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:09.031 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:09.031 | DEBUG    | __main__:run_benchmark:432 - df.drop(df[df['time'].diff() < pd.Timedelta('10 minutes')].index)
2022-08-06 09:04:09.047 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:09.048 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:09.048 | DEBUG    | __main__:run_benchmark:432 - df.drop(df[df['time'] < 10].index, inplace=True)
2022-08-06 09:04:09.050 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:09.050 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:09.051 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 09:04:09.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:09.063 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:09.063 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 09:04:09.075 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:09.076 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:09.076 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 09:04:09.088 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:09.088 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:09.088 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 09:04:09.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:09.101 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:09.101 | DEBUG    | __main__:run_benchmark:432 - df.dropna(axis=0, thresh=8)
2022-08-06 09:04:09.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:09.115 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:09.115 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:04:09.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:09.115 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:09.116 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 09:04:09.128 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:09.128 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:09.128 | DEBUG    | __main__:run_benchmark:432 - df.dropna(thresh=8)
2022-08-06 09:04:09.141 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:09.141 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 09:04:09.141 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 09:04:09.153 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:09.155 | DEBUG    | __main__:run:508 - Running benchmark 42
2022-08-06 09:04:09.155 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:09.155 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:11.013 | DEBUG    | __main__:run_benchmark:431 - Query: Group df1 on column 'b' and keep half of the elements at random
2022-08-06 09:04:11.014 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('b').apply(lambda x: x.sample(frac=0.5))
2022-08-06 09:04:11.026 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:11.026 | DEBUG    | __main__:run_benchmark:431 - Query: Group df1 on column 'b' and keep half of the elements at random
2022-08-06 09:04:11.026 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('b').apply(lambda x: x.sample(frac=0.5))
2022-08-06 09:04:11.036 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:11.036 | DEBUG    | __main__:run_benchmark:431 - Query: Group df1 on column 'b' and keep half of the elements at random
2022-08-06 09:04:11.036 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('b').apply(lambda x: x.sample(frac=0.5))
2022-08-06 09:04:11.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:11.047 | DEBUG    | __main__:run_benchmark:431 - Query: Group df1 on column 'b' and keep half of the elements at random
2022-08-06 09:04:11.047 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('b').apply(lambda x: x.sample(frac=0.5))
2022-08-06 09:04:11.057 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:04:11.059 | DEBUG    | __main__:run:508 - Running benchmark 43
2022-08-06 09:04:11.059 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:11.059 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:12.899 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 09:04:12.900 | DEBUG    | __main__:run_benchmark:432 - df['X'].replace(15, 1015).replace(-15, -1015)
2022-08-06 09:04:12.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:12.935 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 09:04:12.935 | DEBUG    | __main__:run_benchmark:432 - df['X'].replace({15: 1015, -15: -1015})
2022-08-06 09:04:12.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:12.951 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 09:04:12.951 | DEBUG    | __main__:run_benchmark:432 - df['X'] = df['X'].replace(15, 1015).replace(-15, -1015)
2022-08-06 09:04:12.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:04:12.963 | DEBUG    | __main__:run:508 - Running benchmark 44
2022-08-06 09:04:12.963 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:12.963 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:12.963 | DEBUG    | __main__:run:508 - Running benchmark 45
2022-08-06 09:04:12.963 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:12.964 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:14.828 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:14.829 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].str.split(' ').str[0]
2022-08-06 09:04:14.869 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:14.869 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:14.870 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].str.split(' ').str[0]
2022-08-06 09:04:14.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:14.885 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:14.885 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].str.split(' ').str[0]
2022-08-06 09:04:14.896 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:14.896 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:14.897 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].str.split(' ').str[0]
2022-08-06 09:04:14.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:14.906 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:14.906 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].str.split(' ').str[0]
2022-08-06 09:04:14.914 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:14.914 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:14.914 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].str.split(' ').str[0]
2022-08-06 09:04:14.923 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:14.923 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:14.923 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].str.split(' ').str[0]
2022-08-06 09:04:14.932 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:14.932 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:14.932 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].str.split(' ').str[0]
2022-08-06 09:04:14.940 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:14.940 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:14.941 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].str.split(' ').str[0]
2022-08-06 09:04:14.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:14.949 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:14.949 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].str.split(' ').str[0]
2022-08-06 09:04:14.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:14.958 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:14.958 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].str.split(' ').str[0]
2022-08-06 09:04:14.966 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:14.967 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:14.967 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].str.split(' ').str[0]
2022-08-06 09:04:14.975 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:14.975 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:14.975 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].str.split(' ').str[0]
2022-08-06 09:04:14.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:14.984 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:14.984 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].str.split(' ').str[0]
2022-08-06 09:04:14.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:14.993 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:14.993 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].str.split(' ').str[0]
2022-08-06 09:04:15.001 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:15.001 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:15.002 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].apply(lambda x: x.split(' ')[0])
2022-08-06 09:04:15.010 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:15.010 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:15.010 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].apply(lambda x: x.split(' ')[0])
2022-08-06 09:04:15.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:15.018 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:15.018 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].str.split(' ').str[0]
2022-08-06 09:04:15.027 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:15.027 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:15.027 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:04:15.027 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:15.027 | DEBUG    | __main__:run_benchmark:431 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-06 09:04:15.027 | DEBUG    | __main__:run_benchmark:432 - df['First Name'] = df['Name'].str.split(' ').str[0]
2022-08-06 09:04:15.036 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:15.037 | DEBUG    | __main__:run:508 - Running benchmark 46
2022-08-06 09:04:15.038 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:15.038 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:15.038 | DEBUG    | __main__:run:508 - Running benchmark 47
2022-08-06 09:04:15.038 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:15.038 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:15.038 | DEBUG    | __main__:run:508 - Running benchmark 48
2022-08-06 09:04:15.038 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:15.038 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:16.130 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.131 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 09:04:16.147 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.147 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.147 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 09:04:16.163 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.163 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.163 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 09:04:16.178 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.178 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.179 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 09:04:16.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.194 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.194 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 09:04:16.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.210 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.210 | DEBUG    | __main__:run_benchmark:432 - alpha.add(beta)
2022-08-06 09:04:16.225 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.225 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.226 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 09:04:16.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.241 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.241 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 09:04:16.257 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.257 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.257 | DEBUG    | __main__:run_benchmark:432 - alpha.add(beta)
2022-08-06 09:04:16.273 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.273 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.273 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 09:04:16.289 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.289 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.289 | DEBUG    | __main__:run_benchmark:432 - alpha.add(beta)
2022-08-06 09:04:16.304 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.304 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.305 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 09:04:16.320 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.320 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.320 | DEBUG    | __main__:run_benchmark:432 - alpha.add(beta)
2022-08-06 09:04:16.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.336 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.336 | DEBUG    | __main__:run_benchmark:432 - alpha.add(beta)
2022-08-06 09:04:16.352 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.352 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.352 | DEBUG    | __main__:run_benchmark:432 - alpha.add(beta)
2022-08-06 09:04:16.367 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.368 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.368 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 09:04:16.383 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.383 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.383 | DEBUG    | __main__:run_benchmark:432 - alpha.add(beta)
2022-08-06 09:04:16.399 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.399 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.399 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 09:04:16.415 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.415 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.415 | DEBUG    | __main__:run_benchmark:432 - alpha.add(beta)
2022-08-06 09:04:16.430 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.431 | DEBUG    | __main__:run_benchmark:431 - Query: add all columns in beta to alpha
2022-08-06 09:04:16.431 | DEBUG    | __main__:run_benchmark:432 - alpha + beta
2022-08-06 09:04:16.446 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:16.448 | DEBUG    | __main__:run:508 - Running benchmark 49
2022-08-06 09:04:16.449 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:16.449 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:17.975 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:17.976 | DEBUG    | __main__:run_benchmark:432 - #  for each student, get the average score
2022-08-06 09:04:17.976 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:17.977 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:17.978 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 09:04:17.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:17.991 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:17.992 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 09:04:18.004 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:18.005 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:18.005 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 09:04:18.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:18.014 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:18.015 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 09:04:18.020 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:18.021 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:18.021 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list).values
2022-08-06 09:04:18.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:18.025 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:18.025 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 09:04:18.029 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:18.029 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:18.029 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 09:04:18.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:18.033 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:18.033 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 09:04:18.036 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:18.036 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:18.036 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 09:04:18.039 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:18.039 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:18.040 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 09:04:18.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:18.043 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:18.043 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 09:04:18.045 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:18.045 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:18.045 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list).reset_index()
2022-08-06 09:04:18.050 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:18.051 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:18.051 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 09:04:18.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:18.053 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:18.053 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 09:04:18.055 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:18.055 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:18.055 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 09:04:18.058 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:18.058 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:18.058 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 09:04:18.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:18.060 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:18.060 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 09:04:18.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:18.063 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:18.063 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 09:04:18.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:18.065 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 09:04:18.066 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list).tolist()
2022-08-06 09:04:18.067 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:04:18.070 | DEBUG    | __main__:run:508 - Running benchmark 50
2022-08-06 09:04:18.070 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:18.070 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:19.460 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.461 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform('max')
2022-08-06 09:04:19.464 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.464 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.464 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 09:04:19.466 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.466 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.466 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 09:04:19.468 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.468 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.468 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').max()
2022-08-06 09:04:19.473 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.473 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.473 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 09:04:19.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.475 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.475 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').score.max()
2022-08-06 09:04:19.476 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.476 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.476 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].idxmax()
2022-08-06 09:04:19.478 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.478 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.478 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').max()
2022-08-06 09:04:19.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.483 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.483 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform(np.max)
2022-08-06 09:04:19.485 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.485 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.485 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').score.max()
2022-08-06 09:04:19.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.487 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.487 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').score.max()
2022-08-06 09:04:19.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.489 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.489 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').max()
2022-08-06 09:04:19.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.493 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.493 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg({'score': 'max'}).reset_index()
2022-08-06 09:04:19.497 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.497 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.497 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').score.max()
2022-08-06 09:04:19.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.499 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.499 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').score.max()
2022-08-06 09:04:19.501 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.501 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.501 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform(np.max)
2022-08-06 09:04:19.503 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.503 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.503 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').score.max()
2022-08-06 09:04:19.505 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.505 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.505 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 09:04:19.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.507 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.507 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').max()
2022-08-06 09:04:19.511 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.512 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 09:04:19.512 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 09:04:19.513 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:19.515 | DEBUG    | __main__:run:508 - Running benchmark 51
2022-08-06 09:04:19.516 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:19.516 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:19.516 | DEBUG    | __main__:run:508 - Running benchmark 52
2022-08-06 09:04:19.516 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:19.516 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:19.516 | DEBUG    | __main__:run:508 - Running benchmark 53
2022-08-06 09:04:19.516 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:19.516 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:19.516 | DEBUG    | __main__:run:508 - Running benchmark 54
2022-08-06 09:04:19.516 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:19.517 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:21.709 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 09:04:21.710 | DEBUG    | __main__:run_benchmark:432 - for i in range(len(df1)):
2022-08-06 09:04:21.711 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:21.711 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 09:04:21.712 | DEBUG    | __main__:run_benchmark:432 - #  For every row in df1, update 'common' column to False if value in column 'A' of df1 does not lie in column 'B' of df2
2022-08-06 09:04:21.712 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:21.712 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 09:04:21.712 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:04:21.712 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:21.712 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 09:04:21.712 | DEBUG    | __main__:run_benchmark:432 - for i in range(len(df1)):
2022-08-06 09:04:21.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:21.713 | DEBUG    | __main__:run_benchmark:431 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-06 09:04:21.713 | DEBUG    | __main__:run_benchmark:432 - df1['common'] = df1['A'].isin(df2['B'])
2022-08-06 09:04:21.722 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:04:21.724 | DEBUG    | __main__:run:508 - Running benchmark 55
2022-08-06 09:04:21.725 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:21.725 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:21.725 | DEBUG    | __main__:run:508 - Running benchmark 56
2022-08-06 09:04:21.725 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:21.725 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:21.725 | DEBUG    | __main__:run:508 - Running benchmark 57
2022-08-06 09:04:21.726 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:21.726 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:21.726 | DEBUG    | __main__:run:508 - Running benchmark 58
2022-08-06 09:04:21.726 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:21.726 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:21.726 | DEBUG    | __main__:run:508 - Running benchmark 59
2022-08-06 09:04:21.727 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:21.727 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:24.039 | DEBUG    | __main__:run_benchmark:431 - Query: Increase 'count' column by 1 when column 'pet' contains substring 'dog' or 'cat'
2022-08-06 09:04:24.040 | DEBUG    | __main__:run_benchmark:432 - df['count'] = np.where((df['pet'].str.contains('dog')) | (df['pet'].str.contains('cat')), df['count'] + 1, df['count'])
2022-08-06 09:04:24.074 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:04:24.080 | DEBUG    | __main__:run:508 - Running benchmark 60
2022-08-06 09:04:24.080 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:24.081 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:25.901 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.902 | DEBUG    | __main__:run_benchmark:432 - data.unstack()
2022-08-06 09:04:25.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.906 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.907 | DEBUG    | __main__:run_benchmark:432 - data.unstack()
2022-08-06 09:04:25.910 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.911 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.912 | DEBUG    | __main__:run_benchmark:432 - data = pd.Series([1, 2, 3, 4],
2022-08-06 09:04:25.912 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.913 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.914 | DEBUG    | __main__:run_benchmark:432 - #  and the following names for the columns "const", "Economy", "Social Support", "Life Expectancy", "Freedom", "Government Trust", "Generosity"
2022-08-06 09:04:25.914 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.915 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.916 | DEBUG    | __main__:run_benchmark:432 - data.unstack()
2022-08-06 09:04:25.919 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.920 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.920 | DEBUG    | __main__:run_benchmark:432 - data = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])
2022-08-06 09:04:25.935 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.935 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.936 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}, index=['x', 'y', 'z'])
2022-08-06 09:04:25.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.949 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.950 | DEBUG    | __main__:run_benchmark:432 - data = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])
2022-08-06 09:04:25.954 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.955 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.955 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]])
2022-08-06 09:04:25.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.963 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.964 | DEBUG    | __main__:run_benchmark:432 - data.unstack()
2022-08-06 09:04:25.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.964 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.965 | DEBUG    | __main__:run_benchmark:432 - #  and indices as the innermost level of index
2022-08-06 09:04:25.965 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.965 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.965 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index = [['a', 'a', 'b', 'b'], [1, 2, 1, 2]])
2022-08-06 09:04:25.972 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.972 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.972 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=['a', 'b', 'c', 'd'])
2022-08-06 09:04:25.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.977 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.977 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[[1, 1, 2, 2], ['a', 'b', 'c', 'd']])
2022-08-06 09:04:25.983 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.983 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.983 | DEBUG    | __main__:run_benchmark:432 - data.unstack()
2022-08-06 09:04:25.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.984 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.984 | DEBUG    | __main__:run_benchmark:432 - #  and the innermost level of index as the values of the dataframe
2022-08-06 09:04:25.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.984 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.984 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data.values, index=[[1, 1, 2, 2], ['a', 'b', 'c', 'd']])
2022-08-06 09:04:25.989 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.989 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.989 | DEBUG    | __main__:run_benchmark:432 - #  and indices as the innermost level of index
2022-08-06 09:04:25.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.990 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.990 | DEBUG    | __main__:run_benchmark:432 - #  and the series data as the second level of index
2022-08-06 09:04:25.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.990 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 09:04:25.990 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[[1, 1, 2, 2], ['a', 'b', 'c', 'd']])
2022-08-06 09:04:25.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:25.998 | DEBUG    | __main__:run:508 - Running benchmark 62
2022-08-06 09:04:25.999 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:25.999 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:27.424 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.425 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:04:27.426 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.426 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.427 | DEBUG    | __main__:run_benchmark:432 - df.isin('mouse').sum()
2022-08-06 09:04:27.427 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.428 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.428 | DEBUG    | __main__:run_benchmark:432 - mouse_count = df['pet1'].value_counts()['mouse']
2022-08-06 09:04:27.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.429 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.429 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].value_counts()['mouse']
2022-08-06 09:04:27.430 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.430 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.430 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].value_counts()['mouse']
2022-08-06 09:04:27.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.431 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.431 | DEBUG    | __main__:run_benchmark:432 - mouse_count = df['pet1'].value_counts()['mouse']
2022-08-06 09:04:27.432 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.432 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.432 | DEBUG    | __main__:run_benchmark:432 - df.pet1.value_counts()
2022-08-06 09:04:27.433 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.434 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.434 | DEBUG    | __main__:run_benchmark:432 - mouse_count = df['pet1'].value_counts()['mouse']
2022-08-06 09:04:27.435 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.435 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.435 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].value_counts()['mouse']
2022-08-06 09:04:27.436 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.436 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.436 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].str.contains('mouse').value_counts()
2022-08-06 09:04:27.437 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.438 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.438 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].value_counts()['mouse']
2022-08-06 09:04:27.439 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.439 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.439 | DEBUG    | __main__:run_benchmark:432 - df.pet1.value_counts()
2022-08-06 09:04:27.440 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.440 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.440 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].value_counts()
2022-08-06 09:04:27.441 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.442 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.442 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].value_counts()['mouse']
2022-08-06 09:04:27.443 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.443 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.443 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].value_counts()['mouse']
2022-08-06 09:04:27.444 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.444 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.444 | DEBUG    | __main__:run_benchmark:432 - df['pet1'][(df['pet1'] == 'mouse')].count()
2022-08-06 09:04:27.445 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.445 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.445 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].value_counts()
2022-08-06 09:04:27.446 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.447 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.447 | DEBUG    | __main__:run_benchmark:432 - df.pet1.str.count('mouse')
2022-08-06 09:04:27.448 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.448 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.448 | DEBUG    | __main__:run_benchmark:432 - df.pet1.str.count('mouse').sum()
2022-08-06 09:04:27.449 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.449 | DEBUG    | __main__:run_benchmark:431 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-06 09:04:27.449 | DEBUG    | __main__:run_benchmark:432 - df.pet1.str.count('mouse').sum()
2022-08-06 09:04:27.450 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:27.453 | DEBUG    | __main__:run:508 - Running benchmark 63
2022-08-06 09:04:27.453 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:27.453 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:28.948 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:28.949 | DEBUG    | __main__:run_benchmark:432 - df.loc[df['pet1'] == 'mouse'].shape[0]
2022-08-06 09:04:28.954 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:28.955 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:28.956 | DEBUG    | __main__:run_benchmark:432 - df[df['pet1'] == 'mouse'].shape[0]
2022-08-06 09:04:28.961 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:28.961 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:28.962 | DEBUG    | __main__:run_benchmark:432 - df[df['pet1'].str.contains('mouse')]
2022-08-06 09:04:28.979 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:28.980 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:28.980 | DEBUG    | __main__:run_benchmark:432 - df[df['pet1'].str.contains('mouse')].shape[0]
2022-08-06 09:04:28.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:28.984 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:28.984 | DEBUG    | __main__:run_benchmark:432 - df.loc[df['pet1'].str.contains('mouse')].shape[0]
2022-08-06 09:04:28.987 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:28.987 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:28.988 | DEBUG    | __main__:run_benchmark:432 - df[df['pet1'].str.contains('mouse')].shape[0]
2022-08-06 09:04:28.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:28.990 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:28.991 | DEBUG    | __main__:run_benchmark:432 - df.loc[df['pet1'] == 'mouse'].shape[0]
2022-08-06 09:04:28.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:28.993 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:28.993 | DEBUG    | __main__:run_benchmark:432 - df[df['pet1'] == 'mouse'].shape[0]
2022-08-06 09:04:28.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:28.995 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:28.995 | DEBUG    | __main__:run_benchmark:432 - df[df['pet1'].str.contains('mouse')].shape[0]
2022-08-06 09:04:28.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:28.997 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:28.997 | DEBUG    | __main__:run_benchmark:432 - df[df['pet1'].str.contains('mouse')]
2022-08-06 09:04:29.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:29.003 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:29.003 | DEBUG    | __main__:run_benchmark:432 - df.loc[df['pet1'] == 'mouse'].shape[0]
2022-08-06 09:04:29.004 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:29.004 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:29.005 | DEBUG    | __main__:run_benchmark:432 - df[df['pet1'].str.contains('mouse', case=False)].shape[0]
2022-08-06 09:04:29.006 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:29.006 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:29.006 | DEBUG    | __main__:run_benchmark:432 - df[df['pet1'] == 'mouse'].shape[0]
2022-08-06 09:04:29.008 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:29.008 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:29.008 | DEBUG    | __main__:run_benchmark:432 - df.loc[df['pet1'] == 'mouse'].shape[0]
2022-08-06 09:04:29.009 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:29.009 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:29.009 | DEBUG    | __main__:run_benchmark:432 - mouse_rows = df['pet1'].str.contains('mouse')
2022-08-06 09:04:29.010 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:29.011 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:29.011 | DEBUG    | __main__:run_benchmark:432 - df.loc[df['pet1'] == 'mouse'].shape[0]
2022-08-06 09:04:29.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:29.012 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:29.012 | DEBUG    | __main__:run_benchmark:432 - df[df['pet1'] == 'mouse'].shape[0]
2022-08-06 09:04:29.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:29.013 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:29.013 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:04:29.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:29.014 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:29.014 | DEBUG    | __main__:run_benchmark:432 - df[df['pet1'].str.contains('mouse')]
2022-08-06 09:04:29.017 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:29.018 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 09:04:29.018 | DEBUG    | __main__:run_benchmark:432 - df.loc[df['pet1'] == 'mouse'].shape[0]
2022-08-06 09:04:29.019 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:29.022 | DEBUG    | __main__:run:508 - Running benchmark 64
2022-08-06 09:04:29.022 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:29.022 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:29.022 | DEBUG    | __main__:run:508 - Running benchmark 65
2022-08-06 09:04:29.022 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:29.022 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:30.756 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:30.757 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 09:04:30.774 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:30.774 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:30.774 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 09:04:30.789 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:30.790 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:30.790 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 09:04:30.805 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:30.805 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:30.805 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 09:04:30.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:30.821 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:30.821 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 09:04:30.840 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:30.840 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:30.840 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 09:04:30.855 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:30.856 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:30.856 | DEBUG    | __main__:run_benchmark:432 - df[(df.iloc[:, 0] >= 4) & (df.iloc[:, 0] <= 10)]
2022-08-06 09:04:30.871 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:30.872 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:30.872 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 09:04:30.887 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:30.887 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:30.887 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 09:04:30.903 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:30.903 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:30.903 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 09:04:30.919 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:30.919 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:30.919 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 09:04:30.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:30.935 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:30.935 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 09:04:30.950 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:30.950 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:30.950 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 09:04:30.966 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:30.966 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:30.966 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 09:04:30.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:30.982 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:30.982 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 09:04:30.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:30.997 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:30.997 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 09:04:31.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:31.013 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:31.013 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 09:04:31.029 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:31.029 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:31.029 | DEBUG    | __main__:run_benchmark:432 - df.loc[((df['X'] >= 4) & (df['X'] <= 10)), :]
2022-08-06 09:04:31.044 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:31.044 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:31.044 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 09:04:31.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:31.060 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 09:04:31.060 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 09:04:31.076 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:31.079 | DEBUG    | __main__:run:508 - Running benchmark 66
2022-08-06 09:04:31.079 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:31.079 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:33.290 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.291 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 09:04:33.308 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.308 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.308 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 09:04:33.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.325 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.325 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 09:04:33.341 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.341 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.341 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | (df['Y'] >= 14) & (df['Y'] <= 20)]
2022-08-06 09:04:33.358 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.358 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.358 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | (df['Y'] == 14)]
2022-08-06 09:04:33.374 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.375 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.375 | DEBUG    | __main__:run_benchmark:432 - df[(df['Y'] >= 4) & (df['Y'] <= 10) | (df['Y'] >= 14) & (df['Y'] <= 20)]
2022-08-06 09:04:33.391 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.391 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.391 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 09:04:33.407 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.408 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.408 | DEBUG    | __main__:run_benchmark:432 - df[(df['Y'] >= 4) & (df['Y'] <= 10) | (df['Y'] >= 14) & (df['Y'] <= 20)]
2022-08-06 09:04:33.424 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.424 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.424 | DEBUG    | __main__:run_benchmark:432 - df[(df['Y'] >= 4) & (df['Y'] <= 10) | (df['Y'] >= 14) & (df['Y'] <= 20)]
2022-08-06 09:04:33.441 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.441 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.441 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 09:04:33.458 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.458 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.458 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 09:04:33.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.474 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.475 | DEBUG    | __main__:run_benchmark:432 - df[(df['Y'] >= 4) & (df['Y'] <= 10) | (df['Y'] >= 14) & (df['Y'] <= 20)]
2022-08-06 09:04:33.491 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.491 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.491 | DEBUG    | __main__:run_benchmark:432 - df[(df['Y'] >= 4) & (df['Y'] <= 10) | (df['Y'] >= 14) & (df['Y'] <= 20)]
2022-08-06 09:04:33.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.508 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.508 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:04:33.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.508 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.508 | DEBUG    | __main__:run_benchmark:432 - df[(df['Y'] >= 4) & (df['Y'] <= 10) | (df['Y'] >= 14) & (df['Y'] <= 20)]
2022-08-06 09:04:33.525 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.525 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.525 | DEBUG    | __main__:run_benchmark:432 - df.loc[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20)), :]
2022-08-06 09:04:33.542 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.542 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.542 | DEBUG    | __main__:run_benchmark:432 - df[(df['Y'] >= 4) & (df['Y'] <= 10) | (df['Y'] >= 14) & (df['Y'] <= 20)]
2022-08-06 09:04:33.558 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.558 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.558 | DEBUG    | __main__:run_benchmark:432 - df[(df['Y'] >= 4) & (df['Y'] <= 10) | (df['Y'] >= 14) & (df['Y'] <= 20)]
2022-08-06 09:04:33.575 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.575 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.575 | DEBUG    | __main__:run_benchmark:432 - df[(df['Y'] >= 4) & (df['Y'] <= 10) | (df['Y'] >= 14) & (df['Y'] <= 20)]
2022-08-06 09:04:33.591 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.591 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 09:04:33.591 | DEBUG    | __main__:run_benchmark:432 - df.loc[(((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20)))]
2022-08-06 09:04:33.608 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:33.611 | DEBUG    | __main__:run:508 - Running benchmark 67
2022-08-06 09:04:33.611 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 09:04:33.611 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:33.611 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval2
2022-08-06 09:04:33.611 | DEBUG    | __main__:run:495 - Found 21 benchmarks in PandasEval2
2022-08-06 09:04:33.612 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 09:04:33.612 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 09:04:33.612 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 09:04:33.612 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 09:04:33.612 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:04:33.612 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 09:04:33.612 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 09:04:34.834 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:34.834 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 09:04:34.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:34.849 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:34.849 | DEBUG    | __main__:run_benchmark:432 - dfin.columns.values[0] = 'Person Name'
2022-08-06 09:04:34.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:34.862 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:34.862 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 09:04:34.878 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:34.878 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:34.878 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 09:04:34.891 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:34.891 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:34.892 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 09:04:34.905 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:34.905 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:34.905 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 09:04:34.919 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:34.919 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:34.919 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 09:04:34.932 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:34.932 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:34.932 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 09:04:34.946 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:34.946 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:34.946 | DEBUG    | __main__:run_benchmark:432 - dfin.columns[0] = 'Person Name'
2022-08-06 09:04:34.948 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:34.948 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:34.948 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 09:04:34.961 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:34.962 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:34.962 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 09:04:34.975 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:34.975 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:34.975 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 09:04:34.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:34.989 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:34.989 | DEBUG    | __main__:run_benchmark:432 - dfin.columns = ['Person Name', 'Score']
2022-08-06 09:04:34.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:34.995 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:34.996 | DEBUG    | __main__:run_benchmark:432 - dfin.columns = ['Person Name', 'Score']
2022-08-06 09:04:35.002 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:35.002 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:35.002 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 09:04:35.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:35.016 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:35.016 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 09:04:35.029 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:35.029 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:35.029 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 09:04:35.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:35.042 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:35.042 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 09:04:35.055 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:35.056 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:35.056 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 09:04:35.074 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:35.074 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 09:04:35.075 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 09:04:35.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:35.097 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 09:04:35.097 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 09:04:35.097 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 09:04:35.097 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 09:04:35.098 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 09:04:35.098 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 09:04:36.459 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 09:04:36.460 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 09:04:36.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:36.474 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 09:04:36.474 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['colA'] % 5 != 0)]
2022-08-06 09:04:36.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:36.488 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 09:04:36.488 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['colA'] % 5 != 0)]
2022-08-06 09:04:36.502 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:36.502 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 09:04:36.502 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['colA'] % 5 != 0)]
2022-08-06 09:04:36.516 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:36.516 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 09:04:36.516 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 09:04:36.530 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:36.530 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 09:04:36.530 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 09:04:36.544 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:36.544 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 09:04:36.544 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['colA'] % 5 != 0)]
2022-08-06 09:04:36.557 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:36.558 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 09:04:36.558 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['colA'] % 5 != 0)].index, inplace=True)
2022-08-06 09:04:36.563 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:04:37.737 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin such that colA is divisible by 5
2022-08-06 09:04:37.738 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['colA'] % 5 == 0)]
2022-08-06 09:04:37.747 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:04:37.750 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 09:04:37.751 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 09:04:37.751 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 09:04:37.751 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 09:04:39.049 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 09:04:39.050 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*2, ignore_index=True)
2022-08-06 09:04:39.096 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:39.096 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 09:04:39.096 | DEBUG    | __main__:run_benchmark:432 - dfin_copy = dfin.append([dfin]*2, ignore_index=True)
2022-08-06 09:04:39.118 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:39.118 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 09:04:39.118 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:04:39.129 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:39.129 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 09:04:39.130 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append([dfin]*2, ignore_index=True)
2022-08-06 09:04:39.144 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:39.144 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 09:04:39.145 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:].copy()
2022-08-06 09:04:39.158 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:39.159 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 09:04:39.159 | DEBUG    | __main__:run_benchmark:432 - dfin_copy = dfin.append([dfin]*2, ignore_index=True)
2022-08-06 09:04:39.174 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:39.174 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 09:04:39.174 | DEBUG    | __main__:run_benchmark:432 - dfin_copy = dfin.copy()
2022-08-06 09:04:39.188 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:39.188 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 09:04:39.188 | DEBUG    | __main__:run_benchmark:432 - dfin_copy = dfin.loc[dfin.index.repeat(3)]
2022-08-06 09:04:39.203 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:39.203 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 09:04:39.203 | DEBUG    | __main__:run_benchmark:432 - dfin_copy = dfin.copy()
2022-08-06 09:04:39.217 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:39.217 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 09:04:39.218 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = dfin.loc[0]
2022-08-06 09:04:39.229 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:39.229 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 09:04:39.229 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:04:39.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:39.240 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 09:04:39.240 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:04:39.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:39.251 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 09:04:39.251 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3:].append(dfin.loc[3:].append(dfin.loc[3:]))
2022-08-06 09:04:39.262 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:39.262 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 09:04:39.263 | DEBUG    | __main__:run_benchmark:432 - dfin_copy = dfin.copy()
2022-08-06 09:04:39.276 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:39.276 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 09:04:39.276 | DEBUG    | __main__:run_benchmark:432 - dfin_copy = dfin.copy()
2022-08-06 09:04:39.290 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:39.290 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 09:04:39.291 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3)
2022-08-06 09:04:39.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:04:40.433 | DEBUG    | __main__:run_benchmark:431 - Query: Append dataframe to itself twice
2022-08-06 09:04:40.433 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin])
2022-08-06 09:04:40.442 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:04:40.445 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 09:04:41.808 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 09:04:41.809 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0)
2022-08-06 09:04:41.818 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:04:48.404 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 09:04:48.405 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :].repeat(4, axis=0)
2022-08-06 09:04:48.415 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:48.416 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 09:04:48.417 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 09:04:48.447 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:04:49.878 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 09:04:49.879 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'C'] = dfin.loc[:, 'A'] * 4
2022-08-06 09:04:49.891 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:49.892 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 09:04:49.892 | DEBUG    | __main__:run_benchmark:432 - dfin * 4
2022-08-06 09:04:49.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:49.906 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 09:04:49.906 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:04:49.918 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:49.918 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 09:04:49.918 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:04:49.929 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:49.930 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 09:04:49.930 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:04:49.944 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:49.944 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 09:04:49.945 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'C'] = dfin.loc[:, 'A'].repeat(3)
2022-08-06 09:04:49.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:49.947 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 09:04:49.947 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:04:49.959 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:49.959 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 09:04:49.959 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, sort=False)
2022-08-06 09:04:49.966 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:04:51.596 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 09:04:51.597 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:04:51.608 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:51.608 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 09:04:51.608 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 09:04:51.616 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:04:52.666 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.667 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:04:52.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.683 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.683 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4), ignore_index=True)
2022-08-06 09:04:52.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.685 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.685 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 09:04:52.699 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.700 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.700 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:04:52.714 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.714 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.714 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:04:52.729 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.729 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.729 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin] * 4, ignore_index=True)
2022-08-06 09:04:52.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.744 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.744 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:04:52.759 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.759 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.759 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:04:52.769 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.770 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.770 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4,ignore_index=True)
2022-08-06 09:04:52.784 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.784 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.785 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:04:52.799 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.799 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.799 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:04:52.814 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.814 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.814 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:04:52.828 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.828 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.829 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:04:52.843 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.843 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.843 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:04:52.858 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.858 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.858 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:04:52.868 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.868 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.869 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:04:52.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.879 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.879 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:04:52.894 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.894 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.894 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:04:52.908 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.909 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.909 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:04:52.923 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:52.923 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 09:04:52.923 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:04:52.938 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:04:53.089 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'duplicate all rows 4 times', 'user': 'u12'}, {'query': 'repeat all rows of the dataframe 4 times', 'u...
    │               └ {'queries': [{'query': 'duplicate all rows 4 times', 'user': 'u12'}, {'query': 'repeat all rows of the dataframe 4 times', 'u...
    └ {'query': 'Duplicate 4 times', 'user': 'u13'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Concatenate "df" and itself along th...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dff235fd0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:04:53 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:04:53 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dff13ed50>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:04:53.124 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:05:24.454 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate 4 times
2022-08-06 09:05:24.454 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 09:05:24.467 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:05:25.292 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.293 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.293 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.294 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.294 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.294 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.294 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.294 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.295 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.295 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.295 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.295 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.295 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.295 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.295 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.295 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.295 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.296 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.296 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.296 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.296 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.296 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.296 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.296 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.296 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.297 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.297 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.297 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.297 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.297 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.297 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.298 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.298 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.298 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.298 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.298 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.298 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.299 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.299 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.299 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.299 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.299 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.299 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.300 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.300 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.300 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.300 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.300 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:25.300 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 09:05:25.301 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:05:25.301 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:26.640 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe 4 times
2022-08-06 09:05:26.641 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0, sort=False)
2022-08-06 09:05:26.680 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:05:28.046 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 09:05:28.047 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin], axis=0, sort=False)
2022-08-06 09:05:28.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:28.063 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 09:05:28.063 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] * 3
2022-08-06 09:05:28.074 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:28.074 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 09:05:28.074 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:05:28.089 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:28.089 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 09:05:28.090 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'C'] = dfin.loc[:, 'A']
2022-08-06 09:05:28.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:28.101 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 09:05:28.101 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin])
2022-08-06 09:05:28.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:28.116 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 09:05:28.116 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3,ignore_index=True)
2022-08-06 09:05:28.131 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:28.131 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 09:05:28.131 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 09:05:28.145 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:28.146 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 09:05:28.146 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3)
2022-08-06 09:05:28.160 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:28.160 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 09:05:28.161 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*2, ignore_index=True)
2022-08-06 09:05:28.171 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:28.171 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 09:05:28.171 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:05:28.183 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:28.183 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 09:05:28.183 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:05:28.199 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:28.199 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 09:05:28.199 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:05:28.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:28.210 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 09:05:28.210 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin)
2022-08-06 09:05:28.224 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:28.225 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 09:05:28.225 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 09:05:28.239 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:28.239 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 09:05:28.239 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'C'] = dfin.loc[:, 'A'] * dfin.loc[:, 'B']
2022-08-06 09:05:28.250 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:28.251 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 09:05:28.251 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3,ignore_index=True)
2022-08-06 09:05:28.266 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:28.266 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 09:05:28.266 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3)
2022-08-06 09:05:28.273 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:05:29.527 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.527 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3, axis=0)
2022-08-06 09:05:29.554 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.554 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.554 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 09:05:29.575 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.575 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.575 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 09:05:29.590 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.590 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.590 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 09:05:29.605 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.605 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.605 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin])
2022-08-06 09:05:29.619 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.620 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.620 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 09:05:29.634 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.634 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.635 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 09:05:29.649 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.649 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.649 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 09:05:29.664 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.664 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.664 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 09:05:29.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.678 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.679 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.repeat(3))
2022-08-06 09:05:29.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.682 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.682 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].append(dfin.loc[:, :])
2022-08-06 09:05:29.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.685 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.685 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:05:29.696 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.697 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.697 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] * 3
2022-08-06 09:05:29.711 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.711 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.711 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].append(dfin.loc[:, :], ignore_index=True)
2022-08-06 09:05:29.722 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.722 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.722 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 3), ignore_index=True)
2022-08-06 09:05:29.724 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.724 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.724 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:05:29.740 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.740 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.740 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 09:05:29.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.754 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.754 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3,ignore_index=True)
2022-08-06 09:05:29.770 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.770 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.770 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] * 3
2022-08-06 09:05:29.784 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:29.784 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 09:05:29.784 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] * 3
2022-08-06 09:05:29.799 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.302 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.303 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :] * 4
2022-08-06 09:05:31.314 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.314 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.315 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(4)
2022-08-06 09:05:31.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.317 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.317 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :] * 4
2022-08-06 09:05:31.328 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.328 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.328 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.repeat(4), axis=0)
2022-08-06 09:05:31.331 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.332 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.332 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] * 4
2022-08-06 09:05:31.342 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.343 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.343 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :] * 4
2022-08-06 09:05:31.353 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.354 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.354 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(4)
2022-08-06 09:05:31.356 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.356 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.357 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(4)
2022-08-06 09:05:31.359 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.359 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.359 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:,:] = dfin.loc[:,:].values.repeat(4, axis=0)
2022-08-06 09:05:31.361 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.361 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.361 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :] * 4
2022-08-06 09:05:31.372 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.372 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.372 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :] * 4
2022-08-06 09:05:31.383 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.383 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.383 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(4)
2022-08-06 09:05:31.386 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.386 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.386 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.loc[:, 'A':'B'].repeat(4, axis=0)
2022-08-06 09:05:31.388 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.388 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.389 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:,:] = dfin.values.repeat(4, axis=0)
2022-08-06 09:05:31.391 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.391 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.391 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(4)
2022-08-06 09:05:31.393 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.394 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.394 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.repeat(4))
2022-08-06 09:05:31.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.397 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.397 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:,:] = dfin.loc[:,:].values.repeat(4, axis=0)
2022-08-06 09:05:31.399 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.399 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.400 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(4)
2022-08-06 09:05:31.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.402 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.402 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(4)
2022-08-06 09:05:31.405 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.405 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 09:05:31.405 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].values.repeat(4, axis=0)
2022-08-06 09:05:31.407 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:31.411 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 09:05:32.517 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin once
2022-08-06 09:05:32.517 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin)
2022-08-06 09:05:32.524 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:05:33.783 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:33.784 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.B)]
2022-08-06 09:05:33.825 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:33.826 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:33.826 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.values.shape[1])]
2022-08-06 09:05:33.850 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:33.850 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:33.850 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*2, ignore_index=True)
2022-08-06 09:05:33.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:33.861 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:33.861 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin] * 2, ignore_index=True)
2022-08-06 09:05:33.872 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:33.872 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:33.872 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:05:33.887 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:33.888 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:33.888 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[::2]
2022-08-06 09:05:33.901 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:33.902 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:33.902 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.A)]
2022-08-06 09:05:33.917 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:33.917 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:33.917 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.A)]
2022-08-06 09:05:33.932 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:33.932 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:33.932 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 09:05:33.946 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:33.946 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:33.946 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.values.shape[0])]
2022-08-06 09:05:33.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:33.962 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:33.962 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append([dfin]*2, ignore_index=True)
2022-08-06 09:05:33.976 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:33.976 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:33.976 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.values.shape[0])]
2022-08-06 09:05:33.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:33.991 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:33.992 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.loc[dfin.index.repeat(dfin.values.shape[0])]
2022-08-06 09:05:34.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:34.007 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:34.007 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 09:05:34.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:34.021 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:34.021 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.B)]
2022-08-06 09:05:34.030 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:34.030 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:34.030 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.B)]
2022-08-06 09:05:34.039 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:34.039 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:34.039 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.A)]
2022-08-06 09:05:34.054 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:34.054 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:34.055 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.B)]
2022-08-06 09:05:34.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:34.063 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:34.063 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.A)]
2022-08-06 09:05:34.078 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:34.078 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 09:05:34.078 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.A)]
2022-08-06 09:05:34.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:35.253 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe dfin
2022-08-06 09:05:35.254 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:05:35.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:35.270 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe dfin
2022-08-06 09:05:35.270 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.repeat(3))
2022-08-06 09:05:35.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:35.285 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe dfin
2022-08-06 09:05:35.285 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin)
2022-08-06 09:05:35.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:05:36.282 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to itself
2022-08-06 09:05:36.283 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin)
2022-08-06 09:05:36.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:05:37.181 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 09:05:37.182 | DEBUG    | __main__:run_benchmark:432 - pd.concat([df, dfin], axis=0)
2022-08-06 09:05:37.185 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:37.185 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 09:05:37.185 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.B)]
2022-08-06 09:05:37.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:37.195 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 09:05:37.195 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.B)]
2022-08-06 09:05:37.204 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:37.204 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 09:05:37.204 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.values.shape[1])]
2022-08-06 09:05:37.219 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:37.219 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 09:05:37.219 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(), :]
2022-08-06 09:05:37.230 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:37.231 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 09:05:37.231 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.A)]
2022-08-06 09:05:37.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:37.246 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 09:05:37.246 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(), :]
2022-08-06 09:05:37.257 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:37.257 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 09:05:37.258 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(), :]
2022-08-06 09:05:37.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:37.269 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 09:05:37.269 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.duplicated()]
2022-08-06 09:05:37.280 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:37.280 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 09:05:37.280 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(), :]
2022-08-06 09:05:37.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:37.292 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 09:05:37.292 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(), :]
2022-08-06 09:05:37.303 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:37.303 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 09:05:37.303 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(), :]
2022-08-06 09:05:37.315 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:37.315 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 09:05:37.315 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.duplicated(keep=False)]
2022-08-06 09:05:37.326 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:37.326 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 09:05:37.326 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(), :]
2022-08-06 09:05:37.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:37.337 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 09:05:37.338 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.duplicated(), :]
2022-08-06 09:05:37.349 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:37.349 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 09:05:37.349 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated(keep=False)
2022-08-06 09:05:37.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:05:37.360 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 09:05:37.360 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin)
2022-08-06 09:05:37.367 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:05:37.517 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Duplicate rows of dfin once', 'user': 'u1'}, {'query': 'Repeat rows of dfin once', 'user': 'u1'}, {'q...
    │               └ {'queries': [{'query': 'Duplicate rows of dfin once', 'user': 'u1'}, {'query': 'Repeat rows of dfin once', 'user': 'u1'}, {'q...
    └ {'query': 'copy rows', 'user': 'u7'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a series containing the "y_0"...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dff13ec90>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:05:37 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:05:37 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dff1ac650>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:05:37.542 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:06:08.792 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:08.793 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:08.805 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:08.806 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:08.806 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:08.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:08.817 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:08.817 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:08.828 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:08.828 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:08.828 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:08.839 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:08.839 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:08.839 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:08.850 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:08.850 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:08.850 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0:2, :]
2022-08-06 09:06:08.864 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:08.864 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:08.864 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.A)]
2022-08-06 09:06:08.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:08.879 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:08.879 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:08.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:08.890 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:08.890 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:08.901 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:08.901 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:08.901 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:08.915 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:08.915 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:08.915 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:08.926 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:08.927 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:08.927 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:08.937 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:08.938 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:08.938 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:08.948 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:08.949 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:08.949 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:08.959 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:08.959 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:08.960 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:08.970 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:08.970 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:08.971 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:08.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:08.981 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:08.981 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:08.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:08.992 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:08.992 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:09.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:09.003 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:09.003 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:09.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:09.014 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 09:06:09.014 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 09:06:09.029 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:10.188 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows
2022-08-06 09:06:10.188 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = [44, 55]
2022-08-06 09:06:10.223 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:10.223 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows
2022-08-06 09:06:10.224 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin)
2022-08-06 09:06:10.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:06:11.512 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.513 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 09:06:11.529 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.529 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.529 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0]).reset_index(drop=True)
2022-08-06 09:06:11.544 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.544 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.544 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0]).reset_index(drop=True)
2022-08-06 09:06:11.560 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.560 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.560 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0]).reset_index(drop=True)
2022-08-06 09:06:11.575 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.575 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.575 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0]).reset_index(drop=True)
2022-08-06 09:06:11.590 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.591 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.591 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 09:06:11.606 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.606 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.606 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 09:06:11.621 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.621 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.621 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 09:06:11.637 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.637 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.637 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 09:06:11.652 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.652 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.652 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 09:06:11.667 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.667 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.667 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = [44, -1]
2022-08-06 09:06:11.673 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.674 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.674 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0]).reset_index(drop=True)
2022-08-06 09:06:11.689 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.689 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.689 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = [44, -1]
2022-08-06 09:06:11.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.695 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.695 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = [44, -1]
2022-08-06 09:06:11.701 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.701 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.702 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 09:06:11.717 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.717 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.717 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0,:]).reset_index(drop=True)
2022-08-06 09:06:11.732 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.732 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.732 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 09:06:11.747 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.747 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.748 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0]).reset_index(drop=True)
2022-08-06 09:06:11.763 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.763 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.763 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 09:06:11.778 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.778 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 09:06:11.778 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 09:06:11.793 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:11.798 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 09:06:13.130 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.131 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A':'A'] = dfin.loc[:, 'A']
2022-08-06 09:06:13.143 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.144 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.145 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3, axis=1)
2022-08-06 09:06:13.195 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.195 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.195 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3, axis=1)
2022-08-06 09:06:13.215 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.215 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.215 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3, axis=1)
2022-08-06 09:06:13.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.234 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.234 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 3)
2022-08-06 09:06:13.244 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.245 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.245 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin], axis=1)
2022-08-06 09:06:13.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.263 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.263 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3, ignore_index=True)
2022-08-06 09:06:13.278 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.278 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.278 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 3)
2022-08-06 09:06:13.289 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.289 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.289 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 3)
2022-08-06 09:06:13.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.300 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.300 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3, axis=1)
2022-08-06 09:06:13.318 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.318 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.318 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 3)
2022-08-06 09:06:13.329 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.329 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.329 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3, axis=1)
2022-08-06 09:06:13.347 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.347 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.347 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A1':'A3'] = dfin.loc[:, 'A'].values.reshape(-1, 1)
2022-08-06 09:06:13.358 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.358 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.359 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 3)
2022-08-06 09:06:13.369 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.369 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.369 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3, axis=1)
2022-08-06 09:06:13.387 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.387 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.387 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3, axis=1)
2022-08-06 09:06:13.405 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.405 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.406 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ['A', 'B']] * 3
2022-08-06 09:06:13.420 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.420 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.420 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ['A', 'B']] * 3
2022-08-06 09:06:13.434 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.434 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.434 | DEBUG    | __main__:run_benchmark:432 - dfin.columns = dfin.columns.map('{0[0]}{0[1]}'.format)
2022-08-06 09:06:13.436 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:13.436 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 09:06:13.436 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A1'] = dfin.loc[:, 'A']
2022-08-06 09:06:13.447 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.714 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.714 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A1':'A3'] = dfin.loc[:, 'A']
2022-08-06 09:06:14.718 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.718 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.718 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A1'] = dfin.loc[:, 'A']
2022-08-06 09:06:14.730 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.730 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.730 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A':'A'] = dfin.loc[:, 'A']
2022-08-06 09:06:14.732 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.732 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.732 | DEBUG    | __main__:run_benchmark:432 - dfin.columns.ravel().repeat(3)
2022-08-06 09:06:14.742 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.743 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.743 | DEBUG    | __main__:run_benchmark:432 - dfin.columns = dfin.columns.map('{0[0]}_{0[1]}'.format)
2022-08-06 09:06:14.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.744 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.744 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'C'] = dfin.loc[:, 'A']
2022-08-06 09:06:14.755 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.755 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.755 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A1'] = dfin.loc[:, 'A']
2022-08-06 09:06:14.767 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.767 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.767 | DEBUG    | __main__:run_benchmark:432 - dfin.T.loc[:,:].loc[:,:]
2022-08-06 09:06:14.781 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.781 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.781 | DEBUG    | __main__:run_benchmark:432 - dfin.T.loc[:, :] = dfin.T.loc[:, :] * 3
2022-08-06 09:06:14.792 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.792 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.792 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(3)
2022-08-06 09:06:14.794 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.795 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.795 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A1'] = dfin.loc[:, 'A']
2022-08-06 09:06:14.806 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.806 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.806 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 3)
2022-08-06 09:06:14.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.817 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.817 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(3)
2022-08-06 09:06:14.819 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.819 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.820 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'C':'E'] = dfin.loc[:, 'A':'B'].values
2022-08-06 09:06:14.822 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.822 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.822 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 3)
2022-08-06 09:06:14.833 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.833 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.833 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A1'] = dfin.loc[:, 'A']
2022-08-06 09:06:14.844 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.844 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.844 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A1'] = dfin.loc[:, 'A']
2022-08-06 09:06:14.855 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.856 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.856 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A1':'A3'] = dfin.loc[:, 'A'].values.reshape(-1, 1)
2022-08-06 09:06:14.866 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.866 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.866 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(3)
2022-08-06 09:06:14.869 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:14.869 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 09:06:14.869 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 3)
2022-08-06 09:06:14.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:15.979 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:15.980 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.values.shape[0])]
2022-08-06 09:06:16.000 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.000 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.000 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:16.011 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.011 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.011 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:16.022 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.022 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.022 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:16.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.033 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.033 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:16.044 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.044 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.044 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*2, ignore_index=True)
2022-08-06 09:06:16.059 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.059 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.060 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:16.070 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.070 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.071 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.A)]
2022-08-06 09:06:16.085 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.085 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.086 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:16.096 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.096 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.097 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:16.107 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.108 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.108 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:16.118 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.119 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.119 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:16.129 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.130 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.130 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:16.140 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.141 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.141 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:16.151 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.152 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.152 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:16.162 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.163 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.163 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 09:06:16.178 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.178 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.178 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = [44, -1]
2022-08-06 09:06:16.184 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.185 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.185 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*2, ignore_index=True)
2022-08-06 09:06:16.200 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.200 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.200 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*2, axis=0, ignore_index=True)
2022-08-06 09:06:16.214 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:16.214 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 09:06:16.214 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:16.225 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.728 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.729 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin], axis=0)
2022-08-06 09:06:17.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.744 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.744 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:17.758 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.759 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.759 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 2)
2022-08-06 09:06:17.769 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.769 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.770 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:17.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.781 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.781 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:17.795 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.795 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.795 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:17.809 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.809 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.809 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:17.824 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.824 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.824 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 2)
2022-08-06 09:06:17.834 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.835 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.835 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:17.845 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.846 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.846 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: x * 2)
2022-08-06 09:06:17.856 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.856 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.857 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin], axis=0, sort=False)
2022-08-06 09:06:17.871 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.871 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.871 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*2)
2022-08-06 09:06:17.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.885 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.885 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*2, axis=0, ignore_index=True)
2022-08-06 09:06:17.899 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.900 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.900 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].append(dfin.loc[:, 'A'])
2022-08-06 09:06:17.902 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.902 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.902 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:17.917 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.917 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.917 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True, sort=False)
2022-08-06 09:06:17.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.931 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.931 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:17.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.945 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.946 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin)
2022-08-06 09:06:17.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.956 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.956 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*2, sort=True)
2022-08-06 09:06:17.970 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:17.970 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 09:06:17.971 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].append(dfin.loc[:, 'A'])
2022-08-06 09:06:17.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.127 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.128 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*2, sort=False)
2022-08-06 09:06:19.181 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.181 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.181 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:19.199 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.199 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.200 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:19.214 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.214 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.214 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:19.229 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.229 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.229 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:19.243 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.244 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.244 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin)
2022-08-06 09:06:19.254 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.254 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.254 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:19.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.269 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.269 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:19.283 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.283 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.283 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:19.297 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.298 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.298 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:19.312 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.312 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.312 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin)
2022-08-06 09:06:19.323 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.323 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.323 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:19.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.337 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.337 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0:2, :]
2022-08-06 09:06:19.351 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.351 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.351 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:19.366 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.366 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.366 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:19.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.380 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.381 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:19.395 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.395 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.395 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*2, axis=0)
2022-08-06 09:06:19.409 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.409 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.410 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:19.424 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.424 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.424 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 09:06:19.438 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:19.438 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 09:06:19.438 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(dfin.index.size)]
2022-08-06 09:06:19.453 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.589 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.590 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 09:06:20.606 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.606 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.607 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:20.617 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.618 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.618 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 09:06:20.633 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.633 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.633 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 09:06:20.648 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.649 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.649 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:20.660 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.660 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.660 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 09:06:20.675 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.675 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.676 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:20.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.687 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.687 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:20.698 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.698 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.698 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 09:06:20.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.713 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.713 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:20.724 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.724 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.725 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:20.735 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.736 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.736 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:20.747 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.747 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.747 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:20.758 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.758 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.758 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 09:06:20.773 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.773 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.773 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:20.784 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.784 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.784 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:20.795 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.795 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.796 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:20.806 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.806 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.807 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:20.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.817 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.818 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 09:06:20.833 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:20.833 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 09:06:20.833 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 09:06:20.844 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:21.824 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:21.825 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 09:06:21.841 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:21.841 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:21.841 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 3), ignore_index=True)
2022-08-06 09:06:21.843 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:21.843 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:21.843 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:06:21.857 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:21.857 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:21.858 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:06:21.868 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:21.868 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:21.868 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:06:21.882 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:21.883 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:21.883 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 3), axis=0)
2022-08-06 09:06:21.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:21.885 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:21.885 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 09:06:21.899 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:21.899 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:21.899 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 09:06:21.914 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:21.914 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:21.914 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 09:06:21.928 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:21.928 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:21.928 | DEBUG    | __main__:run_benchmark:432 - df_out.append(dfin)
2022-08-06 09:06:21.930 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:21.930 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:21.930 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:06:21.944 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:21.944 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:21.945 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 09:06:21.959 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:21.959 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:21.959 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 09:06:21.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:21.973 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:21.973 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 09:06:21.987 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:21.987 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:21.987 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:06:21.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:21.998 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:21.998 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 09:06:22.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:22.012 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:22.012 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 09:06:22.026 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:22.026 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:22.026 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 09:06:22.040 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:22.041 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:22.041 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 09:06:22.058 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:22.058 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 09:06:22.058 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 09:06:22.072 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:23.249 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin, then append dfin to it
2022-08-06 09:06:23.250 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin).append(dfin)
2022-08-06 09:06:23.288 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:06:23.299 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 09:06:24.377 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 09:06:24.378 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:06:24.433 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:24.434 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 09:06:24.434 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:06:24.453 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:24.453 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 09:06:24.453 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[0].repeat(4).to_frame()
2022-08-06 09:06:24.467 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:24.467 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 09:06:24.467 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:06:24.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:24.483 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 09:06:24.483 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:06:24.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:24.499 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 09:06:24.499 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[0:4] = dfin.loc[0:4]
2022-08-06 09:06:24.509 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:24.510 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 09:06:24.510 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[0:3] = dfin.loc[0:3].loc[0:3]
2022-08-06 09:06:24.521 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:24.521 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 09:06:24.521 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:06:24.536 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:24.536 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 09:06:24.537 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:06:24.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:24.552 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 09:06:24.553 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = dfin.loc[0]
2022-08-06 09:06:24.564 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:24.565 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 09:06:24.565 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0, sort=False)
2022-08-06 09:06:24.572 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:06:24.726 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'repeat the rows 4 times', 'user': 'u5'}, {'query': 'repeat all rows 4 times', 'user': 'u5'}, {'query'...
    │               └ {'queries': [{'query': 'repeat the rows 4 times', 'user': 'u5'}, {'query': 'repeat all rows 4 times', 'user': 'u5'}, {'query'...
    └ {'query': 'repeat all rows 4 times', 'user': 'u5'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Concatenate "df1", "df2", the "avera...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dff1768d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:06:24 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:06:24 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dff11b510>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:06:24.751 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:06:56.234 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.235 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(4)
2022-08-06 09:06:56.238 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.239 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.239 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(4)
2022-08-06 09:06:56.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.241 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.241 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(4)
2022-08-06 09:06:56.244 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.244 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.244 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(4)
2022-08-06 09:06:56.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.247 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.247 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(4)
2022-08-06 09:06:56.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.249 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.249 | DEBUG    | __main__:run_benchmark:432 - dfin.repeat(4)
2022-08-06 09:06:56.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.251 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.251 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.repeat(4), axis=1)
2022-08-06 09:06:56.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.272 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.272 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.repeat(4))
2022-08-06 09:06:56.276 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.276 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.276 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(4)
2022-08-06 09:06:56.278 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.278 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.279 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:06:56.294 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.294 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.295 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:,:] = dfin.loc[:,:].apply(lambda x: x.repeat(4), axis=0)
2022-08-06 09:06:56.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.298 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.298 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:06:56.314 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.314 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.314 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.repeat(4), axis=0)
2022-08-06 09:06:56.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.317 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.317 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:06:56.329 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.329 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.329 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(4)
2022-08-06 09:06:56.331 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.331 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.332 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:06:56.347 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.347 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.347 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:06:56.359 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.359 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.359 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A']
2022-08-06 09:06:56.369 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.369 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.369 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.repeat(4), axis=0)
2022-08-06 09:06:56.373 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.373 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 09:06:56.373 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, :]
2022-08-06 09:06:56.387 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:06:56.555 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'repeat the rows 4 times', 'user': 'u5'}, {'query': 'repeat all rows 4 times', 'user': 'u5'}, {'query'...
    │               └ {'queries': [{'query': 'repeat the rows 4 times', 'user': 'u5'}, {'query': 'repeat all rows 4 times', 'user': 'u5'}, {'query'...
    └ {'query': 'repeat the dataframe 4 times', 'user': 'u5'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Do a concat of "df" and "df" on rows...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dff1ac310>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:06:56 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:06:56 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dff12ad10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:06:56.580 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:07:27.951 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 09:07:27.952 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, sort=False)
2022-08-06 09:07:27.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:07:29.103 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.103 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:07:29.159 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.159 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.159 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:07:29.179 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.179 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.179 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[4] = dfin.loc[0]
2022-08-06 09:07:29.191 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.191 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.191 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:07:29.207 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.207 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.207 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[4] = dfin.loc[0]
2022-08-06 09:07:29.219 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.219 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.219 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:07:29.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.235 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.235 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:07:29.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.251 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.251 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:07:29.266 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.267 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.267 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:07:29.282 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.282 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.283 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:07:29.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.299 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.299 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:07:29.314 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.315 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.315 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:07:29.330 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.330 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.331 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:07:29.346 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.346 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.346 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:07:29.362 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.362 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.362 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:07:29.378 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.378 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.378 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(4)
2022-08-06 09:07:29.381 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.381 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.381 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:07:29.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.397 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.397 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin] * 4, ignore_index=True)
2022-08-06 09:07:29.407 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.408 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.408 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].apply(lambda x: x.repeat(4), axis=0)
2022-08-06 09:07:29.411 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:29.411 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 09:07:29.411 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[4] = dfin.loc[0]
2022-08-06 09:07:29.423 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:30.877 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 09:07:30.878 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].values.repeat(4, axis=0)
2022-08-06 09:07:30.889 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:30.890 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 09:07:30.890 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].values.repeat(4, axis=0)
2022-08-06 09:07:30.901 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:30.902 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 09:07:30.903 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.repeat(4), axis=1)
2022-08-06 09:07:30.946 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:30.947 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 09:07:30.947 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin] * 4, ignore_index=True)
2022-08-06 09:07:30.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:30.958 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 09:07:30.958 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] = dfin.loc[:, :].values.repeat(4, axis=0)
2022-08-06 09:07:30.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:30.960 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 09:07:30.960 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, :] * 4
2022-08-06 09:07:30.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:30.975 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 09:07:30.975 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(4)
2022-08-06 09:07:30.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:30.977 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 09:07:30.978 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 09:07:30.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:07:32.093 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.094 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = dfin.loc[2]
2022-08-06 09:07:32.131 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.132 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.132 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:07:32.158 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.158 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.158 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:07:32.170 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.170 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.170 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:07:32.185 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.185 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.185 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:07:32.199 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.200 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.200 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 09:07:32.214 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.214 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.214 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:07:32.230 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.230 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.230 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4,ignore_index=True)
2022-08-06 09:07:32.245 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.245 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.245 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:07:32.259 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.260 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.260 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4,ignore_index=True)
2022-08-06 09:07:32.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.274 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.275 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:07:32.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.285 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.285 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4,ignore_index=True)
2022-08-06 09:07:32.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.300 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.300 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:07:32.311 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.311 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.311 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:07:32.327 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.327 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.327 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 09:07:32.343 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.343 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.343 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin, ignore_index=True)
2022-08-06 09:07:32.353 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.354 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.354 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:07:32.364 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.365 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.365 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 09:07:32.379 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.379 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.379 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 09:07:32.393 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:32.394 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 09:07:32.394 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:07:32.404 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.446 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.447 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:07:33.458 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.458 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.458 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:07:33.470 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.470 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.470 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:07:33.481 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.481 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.482 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:07:33.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.493 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.493 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:07:33.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.508 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.508 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:07:33.519 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.519 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.519 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:07:33.530 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.530 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.530 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:07:33.542 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.542 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.542 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:07:33.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.553 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.553 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 09:07:33.564 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.564 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.565 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*2, ignore_index=True)
2022-08-06 09:07:33.575 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.575 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.575 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:07:33.587 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.587 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.587 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 09:07:33.599 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.599 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.599 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:07:33.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.611 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.611 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:07:33.622 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.622 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.622 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:07:33.634 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.634 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.634 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:07:33.645 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.646 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.646 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:07:33.657 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.657 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.657 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:07:33.668 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:33.668 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 09:07:33.668 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-06 09:07:33.679 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.716 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.717 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = [44, -4]
2022-08-06 09:07:34.724 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.725 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.725 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = [44, -1]
2022-08-06 09:07:34.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.731 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.731 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:07:34.732 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.732 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.732 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:07:34.732 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.732 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.732 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:07:34.732 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.733 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.733 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[4] = [44, -4]
2022-08-06 09:07:34.739 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.739 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.739 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = [44, -1]
2022-08-06 09:07:34.745 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.746 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.746 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = [44, -1]
2022-08-06 09:07:34.752 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.752 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.752 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = [44, -4]
2022-08-06 09:07:34.759 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.759 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.759 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = [44, -1]
2022-08-06 09:07:34.765 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.765 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.766 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = [44, -1]
2022-08-06 09:07:34.772 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.772 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.772 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = [44, -2]
2022-08-06 09:07:34.778 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.779 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.779 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:07:34.779 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.779 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.779 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = [44, 55]
2022-08-06 09:07:34.786 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.786 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.786 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:07:34.786 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.786 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.786 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 09:07:34.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.787 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.787 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = [44, -4]
2022-08-06 09:07:34.793 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.793 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.794 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 09:07:34.811 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.811 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.812 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3] = [44, -1]
2022-08-06 09:07:34.818 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:34.818 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 09:07:34.818 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = [44, -4]
2022-08-06 09:07:34.824 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:35.905 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 09:07:35.906 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0)
2022-08-06 09:07:35.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:07:37.579 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.580 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, 4] = dfin.iloc[:, 0] * dfin.iloc[:, 1] * dfin.iloc[:, 2] * dfin.iloc[:, 3]
2022-08-06 09:07:37.583 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.584 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.584 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] * 4
2022-08-06 09:07:37.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.595 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.595 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[4] = dfin.iloc[4] * 4
2022-08-06 09:07:37.597 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.597 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.597 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, 0] * 4
2022-08-06 09:07:37.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.608 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.608 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 09:07:37.618 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.619 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.619 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 09:07:37.629 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.629 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.630 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] * 4
2022-08-06 09:07:37.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.641 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.641 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[4] * 4
2022-08-06 09:07:37.643 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.643 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.643 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 09:07:37.654 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.654 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.654 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, 0] * 4
2022-08-06 09:07:37.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.665 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.665 | DEBUG    | __main__:run_benchmark:432 - dfin.mul(4)
2022-08-06 09:07:37.679 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.679 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.679 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x * 4)
2022-08-06 09:07:37.694 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.695 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.695 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 09:07:37.705 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.706 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.706 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x * 4, axis=1)
2022-08-06 09:07:37.721 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.721 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.721 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, 0] * 4
2022-08-06 09:07:37.732 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.732 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.732 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] * 4
2022-08-06 09:07:37.742 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.742 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.743 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[4] * 4
2022-08-06 09:07:37.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.744 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.744 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x * 4)
2022-08-06 09:07:37.759 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.760 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.760 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 09:07:37.770 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:37.770 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 09:07:37.770 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[4] = dfin.iloc[4] * 4
2022-08-06 09:07:37.772 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:38.857 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate table 4 times
2022-08-06 09:07:38.857 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 09:07:38.865 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:07:38.872 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 09:07:38.872 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 09:07:38.872 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 09:07:38.872 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 09:07:39.925 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.926 | DEBUG    | __main__:run_benchmark:432 - dfin.values[(0, 2)]
2022-08-06 09:07:39.932 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.933 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.933 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0,2]
2022-08-06 09:07:39.940 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.941 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.942 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0, 2]
2022-08-06 09:07:39.948 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.949 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.950 | DEBUG    | __main__:run_benchmark:432 - dfin.values[0][2]
2022-08-06 09:07:39.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.956 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.956 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0, 2]
2022-08-06 09:07:39.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.961 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.961 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[(0, 2)]
2022-08-06 09:07:39.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.965 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.965 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[(0, 2)]
2022-08-06 09:07:39.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.968 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.968 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0,2]
2022-08-06 09:07:39.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.971 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.971 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0, 2]
2022-08-06 09:07:39.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.974 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.974 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0,2]
2022-08-06 09:07:39.976 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.976 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.976 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[(0, 2)]
2022-08-06 09:07:39.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.979 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.979 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0,2]
2022-08-06 09:07:39.980 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.981 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.981 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0,2]
2022-08-06 09:07:39.983 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.983 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.983 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0,2]
2022-08-06 09:07:39.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.985 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.985 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0, 2]
2022-08-06 09:07:39.986 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.987 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.987 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0,2]
2022-08-06 09:07:39.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.988 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.989 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0][2]
2022-08-06 09:07:39.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.990 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.990 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0,2]
2022-08-06 09:07:39.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.992 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.992 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[(0, 2)]
2022-08-06 09:07:39.993 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:39.994 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 09:07:39.994 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0, 2]
2022-08-06 09:07:39.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:41.228 | DEBUG    | __main__:run_benchmark:431 - Query: return value from ColC's 1st row
2022-08-06 09:07:41.229 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[1, 2]
2022-08-06 09:07:41.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:07:42.454 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 09:07:42.455 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[1].loc['colC']
2022-08-06 09:07:42.457 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:07:43.496 | DEBUG    | __main__:run_benchmark:431 - Query: return second entry of column 'colC'
2022-08-06 09:07:43.497 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 09:07:43.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:43.500 | DEBUG    | __main__:run_benchmark:431 - Query: return second entry of column 'colC'
2022-08-06 09:07:43.500 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 09:07:43.501 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:43.501 | DEBUG    | __main__:run_benchmark:431 - Query: return second entry of column 'colC'
2022-08-06 09:07:43.502 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2]['colC']
2022-08-06 09:07:43.503 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:43.503 | DEBUG    | __main__:run_benchmark:431 - Query: return second entry of column 'colC'
2022-08-06 09:07:43.503 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[1, 2]
2022-08-06 09:07:43.504 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:07:43.511 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 09:07:43.511 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 09:07:43.511 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 09:07:44.604 | DEBUG    | __main__:run_benchmark:431 - Query: return third value at column 'gamma'
2022-08-06 09:07:44.605 | DEBUG    | __main__:run_benchmark:432 - dfin.values[(2, 2)]
2022-08-06 09:07:44.606 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:07:44.613 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 09:07:44.613 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 09:07:44.614 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 09:07:46.354 | DEBUG    | __main__:run_benchmark:431 - Query: Filter all rows with alpha less than 40 or greater than 59 from dfin
2022-08-06 09:07:46.355 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] < 40) | (dfin['alpha'] > 59)]
2022-08-06 09:07:46.365 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:07:48.114 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.115 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:48.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.172 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.172 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:48.193 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.193 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.193 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:48.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.210 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.211 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:48.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.228 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.228 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:48.245 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.246 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.246 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[40:59]
2022-08-06 09:07:48.259 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.259 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.259 | DEBUG    | __main__:run_benchmark:432 - dfin.where((dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)).dropna()
2022-08-06 09:07:48.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.282 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.282 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:48.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.299 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.299 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:48.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.317 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.317 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:48.335 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.335 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.335 | DEBUG    | __main__:run_benchmark:432 - dfin[(40 <= dfin['alpha']) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:48.353 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.353 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.353 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['alpha'].between(40, 59)]
2022-08-06 09:07:48.370 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.370 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.371 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:48.388 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.388 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.388 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:48.406 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.406 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.406 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:48.423 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.424 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.424 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:48.441 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.441 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.441 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:48.459 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.459 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.459 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:48.476 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.476 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.477 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:48.494 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:48.494 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 09:07:48.494 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:48.511 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.254 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.255 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:50.312 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.312 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.313 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:50.333 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.333 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.333 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:50.350 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.350 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.351 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:50.368 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.368 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.368 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:50.386 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.386 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.386 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:50.404 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.404 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.404 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:50.421 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.422 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.422 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:50.439 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.439 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.439 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] > 40) & (dfin['alpha'] < 59)]
2022-08-06 09:07:50.457 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.457 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.457 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:50.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.474 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.475 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:50.492 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.492 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.492 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:50.510 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.510 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.510 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:50.527 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.527 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.528 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:50.545 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.545 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.545 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:50.563 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.563 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.563 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:50.580 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.581 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.581 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:50.598 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.598 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.598 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 09:07:50.616 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.616 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.616 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['alpha'].between(40, 59)]
2022-08-06 09:07:50.633 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.634 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 09:07:50.634 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['alpha'].between(40, 59)]
2022-08-06 09:07:50.651 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:50.659 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 09:07:52.346 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' lie are less than 34 or are greater than 70 of table dfin
2022-08-06 09:07:52.347 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) | (dfin['foo'] > 70)]
2022-08-06 09:07:52.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:07:54.141 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70
2022-08-06 09:07:54.142 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70))]
2022-08-06 09:07:54.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:54.194 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70
2022-08-06 09:07:54.195 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70))]
2022-08-06 09:07:54.208 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:07:54.216 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 09:07:54.216 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 09:07:56.045 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 09:07:56.045 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) & (dfin['gamma'] > 53))]
2022-08-06 09:07:56.061 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:56.062 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 09:07:56.062 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['gamma'] < 40) & (dfin['gamma'] > 53)]
2022-08-06 09:07:56.075 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:56.075 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 09:07:56.075 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) & (dfin['gamma'] > 53))]
2022-08-06 09:07:56.088 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:56.089 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 09:07:56.089 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) & (dfin['gamma'] > 53))]
2022-08-06 09:07:56.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:56.102 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 09:07:56.102 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) & (dfin['gamma'] > 53))]
2022-08-06 09:07:56.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:56.115 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 09:07:56.116 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['gamma'] < 40) & (dfin['gamma'] > 53)]
2022-08-06 09:07:56.129 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:56.129 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 09:07:56.129 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['gamma'] < 40) & (dfin['gamma'] > 53)]
2022-08-06 09:07:56.142 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:56.142 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 09:07:56.143 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['gamma'] < 40) & (dfin['gamma'] > 53)]
2022-08-06 09:07:56.155 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:56.156 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 09:07:56.156 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['gamma'] < 40) & (dfin['gamma'] > 53)]
2022-08-06 09:07:56.169 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:56.169 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 09:07:56.169 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] > 40) & (dfin['gamma'] < 53))]
2022-08-06 09:07:56.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:56.187 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 09:07:56.187 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) & (dfin['gamma'] > 53))]
2022-08-06 09:07:56.200 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:07:56.200 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-06 09:07:56.200 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) | (dfin['gamma'] > 53))]
2022-08-06 09:07:56.209 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:07:58.083 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in 'gamma' is not between 40 and 53
2022-08-06 09:07:58.083 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['gamma'] < 40) | (dfin['gamma'] > 53)]
2022-08-06 09:07:58.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:08:00.039 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in column 'gamma' is less than 40 and select all rows where the entry in column 'gamma' is more than 53
2022-08-06 09:08:00.039 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['gamma'] < 40) & (dfin['gamma'] > 53)]
2022-08-06 09:08:00.054 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:08:00.054 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in column 'gamma' is less than 40 and select all rows where the entry in column 'gamma' is more than 53
2022-08-06 09:08:00.054 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:08:00.054 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:08:00.055 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in column 'gamma' is less than 40 and select all rows where the entry in column 'gamma' is more than 53
2022-08-06 09:08:00.055 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['gamma'] < 40) & (dfin['gamma'] > 53)]
2022-08-06 09:08:00.068 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:08:00.068 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in column 'gamma' is less than 40 and select all rows where the entry in column 'gamma' is more than 53
2022-08-06 09:08:00.068 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['gamma'] < 40) & (dfin['gamma'] > 53)]
2022-08-06 09:08:00.082 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:08:00.082 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in column 'gamma' is less than 40 and select all rows where the entry in column 'gamma' is more than 53
2022-08-06 09:08:00.082 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) & (dfin['gamma'] > 53))]
2022-08-06 09:08:00.098 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:08:00.098 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in column 'gamma' is less than 40 and select all rows where the entry in column 'gamma' is more than 53
2022-08-06 09:08:00.098 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['gamma'] < 40) & (dfin['gamma'] > 53)]
2022-08-06 09:08:00.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:08:00.112 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in column 'gamma' is less than 40 and select all rows where the entry in column 'gamma' is more than 53
2022-08-06 09:08:00.112 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['gamma'] < 40) & (dfin['gamma'] > 53)]
2022-08-06 09:08:00.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:08:00.125 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in column 'gamma' is less than 40 and select all rows where the entry in column 'gamma' is more than 53
2022-08-06 09:08:00.125 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['gamma'] < 40) & (dfin['gamma'] > 53)]
2022-08-06 09:08:00.138 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:08:00.139 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the entry in column 'gamma' is less than 40 and select all rows where the entry in column 'gamma' is more than 53
2022-08-06 09:08:00.139 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) | (dfin['gamma'] > 53))]
2022-08-06 09:08:00.148 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:08:01.969 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows where the any entry in column 'gamma' is not between 40 and 53
2022-08-06 09:08:01.970 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['gamma'] < 40) | (dfin['gamma'] > 53)]
2022-08-06 09:08:01.979 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:08:03.674 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where 'gamma' is less than 40 or greater than 53
2022-08-06 09:08:03.675 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) | (dfin['gamma'] > 53))]
2022-08-06 09:08:03.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:08:05.374 | DEBUG    | __main__:run_benchmark:431 - Query: From dfin, filter rows with column gamma less than 40 or more than 53
2022-08-06 09:08:05.375 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) | (dfin['gamma'] > 53))]
2022-08-06 09:08:05.417 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:08:05.430 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 09:08:07.313 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows with value of column 'bar' between 38 and 60
2022-08-06 09:08:07.313 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[~((dfin['bar'] >= 38) & (dfin['bar'] <= 60))]
2022-08-06 09:08:07.350 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:08:08.948 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 09:08:08.949 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar']<38) & (dfin['bar']>60)]
2022-08-06 09:08:08.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:08:08.963 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 09:08:08.963 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60))]
2022-08-06 09:08:08.972 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:08:08.979 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 09:08:08.980 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 09:08:08.980 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 09:08:09.139 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Filter all rows with alpha less than 40 or greater than 59 and filter all rows with beta equal to 3 f...
    │               └ {'queries': [{'query': 'Filter all rows with alpha less than 40 or greater than 59 and filter all rows with beta equal to 3 f...
    └ {'query': 'Filter all rows with alpha less than 40 or greater than 59 and filter all rows with beta equal to 3 from dfin', 'u...

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a dataframe containing values...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dff12a250>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:08:09 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:08:09 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dff0c5690>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:08:09.166 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:08:41.227 | DEBUG    | __main__:run_benchmark:431 - Query: Filter all rows with alpha less than 40 or greater than 59 and filter all rows with beta equal to 3 from dfin
2022-08-06 09:08:41.228 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3)]
2022-08-06 09:08:41.239 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:08:41.426 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Filter all rows with alpha less than 40 or greater than 59 and filter all rows with beta equal to 3 f...
    │               └ {'queries': [{'query': 'Filter all rows with alpha less than 40 or greater than 59 and filter all rows with beta equal to 3 f...
    └ {'query': 'Filter all rows with alpha less than 40 or greater than 59 and beta equal to 3 from dfin', 'user': 'u20'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a boolean series for all rows...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dff0d61d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:08:41 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:08:41 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dff0d6710>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:08:41.451 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:09:13.468 | DEBUG    | __main__:run_benchmark:431 - Query: Filter all rows with alpha less than 40 or greater than 59 and beta equal to 3 from dfin
2022-08-06 09:09:13.469 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3)]
2022-08-06 09:09:13.480 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:09:15.036 | DEBUG    | __main__:run_benchmark:431 - Query: Filter all rows with alpha less than 40 or greater than 59 with beta equal to 3
2022-08-06 09:09:15.037 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] >= 59)) & (dfin['beta'] == 3)]
2022-08-06 09:09:15.081 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:09:16.486 | DEBUG    | __main__:run_benchmark:431 - Query: Select all rows with alpha less than 40 or greater than 59 with beta equal to 3
2022-08-06 09:09:16.487 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3)]
2022-08-06 09:09:16.497 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:09:16.505 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 09:09:18.487 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 34 or greater than 70 and value in column 'bar' is 8
2022-08-06 09:09:18.488 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:09:18.489 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:18.489 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 34 or greater than 70 and value in column 'bar' is 8
2022-08-06 09:09:18.489 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:09:18.489 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:18.489 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 34 or greater than 70 and value in column 'bar' is 8
2022-08-06 09:09:18.490 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:18.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:09:20.505 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.506 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 09:09:20.521 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.521 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.521 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 09:09:20.534 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.534 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.535 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 09:09:20.548 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.548 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.548 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) | (dfin['foo'] > 70)][dfin['bar'] == 1]
2022-08-06 09:09:20.562 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.562 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.562 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 09:09:20.575 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.576 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.576 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 09:09:20.589 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.589 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.589 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:09:20.589 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.590 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.590 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 09:09:20.603 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.603 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.604 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 09:09:20.617 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.617 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.617 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) | (dfin['foo'] > 70)][dfin['bar'] == 1]
2022-08-06 09:09:20.630 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.631 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.631 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) | (dfin['foo'] > 70)][dfin['bar'] == 1]
2022-08-06 09:09:20.644 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.644 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.645 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:09:20.645 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.645 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.645 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:09:20.645 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.645 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.645 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:09:20.645 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.645 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.646 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) | (dfin['foo'] > 70) & (dfin['bar'] == 1)]
2022-08-06 09:09:20.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.664 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.664 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) | (dfin['foo'] > 70)][dfin['bar'] == 1]
2022-08-06 09:09:20.677 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.677 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.678 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 09:09:20.691 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.691 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.691 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:09:20.691 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.691 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.691 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:09:20.691 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:20.691 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 09:09:20.691 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) | (dfin['foo'] > 70)][dfin['bar'] == 1]
2022-08-06 09:09:20.705 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:22.099 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 8 of table dfin
2022-08-06 09:09:22.100 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:22.142 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:09:23.965 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:23.966 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:23.980 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:23.980 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:23.980 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-06 09:09:23.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:23.997 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:23.997 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-06 09:09:24.010 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:24.010 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:24.010 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:09:24.011 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:24.011 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:24.011 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:24.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:24.024 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:24.024 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:24.038 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:24.038 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:24.038 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:24.051 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:24.051 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:24.052 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:24.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:24.065 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:24.065 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:24.078 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:24.078 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:24.079 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:24.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:24.092 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:24.092 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:24.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:24.105 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:24.106 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:24.119 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:24.119 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:24.119 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:24.132 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:24.132 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:24.133 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:24.146 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:24.146 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:24.146 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:24.159 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:24.159 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:24.159 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:24.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:24.172 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:24.173 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:24.186 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:24.186 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:24.186 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:24.199 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:24.199 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:24.199 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:24.212 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:24.212 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 09:09:24.212 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:24.226 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.048 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.048 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.073 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.073 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.093 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.093 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.107 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.107 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.108 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.121 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.121 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.121 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.134 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.135 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.148 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.148 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.148 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.161 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.161 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.161 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.174 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.175 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.175 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.188 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.188 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.188 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.201 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.201 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.202 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.215 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.215 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.215 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.228 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.228 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.242 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.242 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.255 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.255 | DEBUG    | __main__:run_benchmark:432 - (((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8))
2022-08-06 09:09:26.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.268 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.268 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.281 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.281 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.294 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.294 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.295 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.308 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.308 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.308 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.321 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:26.321 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 09:09:26.321 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:26.334 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.080 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.080 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.111 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.112 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.112 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.131 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.132 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.132 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.146 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.146 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.146 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.159 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.159 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.160 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.173 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.173 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.173 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.186 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.186 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.186 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.200 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.200 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.200 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.213 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.213 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.213 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.226 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.227 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.227 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.240 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.240 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.253 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.253 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.253 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.266 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.267 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.267 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.280 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.280 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.280 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.293 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.293 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.294 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.307 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.307 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.307 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.320 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.320 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.320 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.333 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.333 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.333 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.347 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.347 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.347 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:28.360 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 09:09:28.360 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:28.373 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:29.825 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:29.826 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) & (dfin['bar'] == 8)]
2022-08-06 09:09:29.842 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:29.842 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:29.842 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:29.855 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:29.855 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:29.855 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:29.868 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:29.869 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:29.869 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:29.882 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:29.882 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:29.882 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:29.895 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:29.895 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:29.896 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:29.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:29.909 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:29.909 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-06 09:09:29.922 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:29.922 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:29.922 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:29.936 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:29.936 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:29.936 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:29.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:29.949 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:29.949 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['bar'] == 8))]
2022-08-06 09:09:29.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:29.964 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:29.964 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:29.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:29.978 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:29.978 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:29.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:29.991 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:29.991 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['bar'] == 8))]
2022-08-06 09:09:30.006 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:30.006 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:30.006 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] < 34) & (dfin['bar'] == 8)]
2022-08-06 09:09:30.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:30.022 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:30.022 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:30.035 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:30.035 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:30.035 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) & (dfin['bar'] == 8)]
2022-08-06 09:09:30.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:30.053 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:30.053 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:30.066 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:30.067 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:30.067 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-06 09:09:30.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:30.080 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:30.080 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:30.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:30.093 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 09:09:30.093 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) & (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:30.106 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.624 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.625 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:31.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.640 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.640 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:31.653 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.653 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.654 | DEBUG    | __main__:run_benchmark:432 - ((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))
2022-08-06 09:09:31.666 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.667 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.667 | DEBUG    | __main__:run_benchmark:432 - len(dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))])
2022-08-06 09:09:31.679 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.680 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.680 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:31.693 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.693 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.693 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 09:09:31.706 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.707 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.707 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 09:09:31.720 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.720 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.720 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:31.733 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.734 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.734 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 09:09:31.747 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.747 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.747 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 09:09:31.760 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.761 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.761 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:31.774 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.774 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.774 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:31.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.787 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.788 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:31.801 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.801 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.801 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 09:09:31.814 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.814 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.814 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 09:09:31.827 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.828 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.828 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:31.841 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.841 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.841 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:31.854 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.854 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.854 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:31.867 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.868 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.868 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 09:09:31.881 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:31.881 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:31.881 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:31.894 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.242 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.242 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:33.257 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.257 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.257 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:33.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.271 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.271 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:33.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.285 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.285 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) & (dfin['foo'] < 34)]
2022-08-06 09:09:33.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.298 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.298 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:33.312 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.312 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.312 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 09:09:33.325 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.325 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.325 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:33.339 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.339 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.339 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:33.352 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.352 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.352 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:09:33.353 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.353 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.353 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) & (dfin['foo'] < 34)]
2022-08-06 09:09:33.366 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.366 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.367 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:33.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.380 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.380 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 09:09:33.393 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.393 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.394 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:33.407 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.407 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.407 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 09:09:33.420 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.420 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.421 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 09:09:33.434 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.434 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.434 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:33.447 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.447 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.447 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 09:09:33.460 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.461 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.461 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 09:09:33.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.474 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.474 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 09:09:33.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:33.487 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 09:09:33.487 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 09:09:33.500 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:35.487 | DEBUG    | __main__:run_benchmark:431 - Query: Choose rows such that in column 'foo' it is less than 34 or greater than 70, in column 'bar' equals 8
2022-08-06 09:09:35.488 | DEBUG    | __main__:run_benchmark:432 - #  and in column 'yah' equals 15
2022-08-06 09:09:35.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:35.489 | DEBUG    | __main__:run_benchmark:431 - Query: Choose rows such that in column 'foo' it is less than 34 or greater than 70, in column 'bar' equals 8
2022-08-06 09:09:35.490 | DEBUG    | __main__:run_benchmark:432 - #  and in column 'yah' equals 15
2022-08-06 09:09:35.490 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:35.491 | DEBUG    | __main__:run_benchmark:431 - Query: Choose rows such that in column 'foo' it is less than 34 or greater than 70, in column 'bar' equals 8
2022-08-06 09:09:35.492 | DEBUG    | __main__:run_benchmark:432 - #  and in column 'yah' equals 15
2022-08-06 09:09:35.492 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:35.493 | DEBUG    | __main__:run_benchmark:431 - Query: Choose rows such that in column 'foo' it is less than 34 or greater than 70, in column 'bar' equals 8
2022-08-06 09:09:35.494 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:35.534 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:09:37.559 | DEBUG    | __main__:run_benchmark:431 - Query: Choose rows such that in column 'foo' it is less than 34 or greater than 70 and in column 'bar' equals 8
2022-08-06 09:09:37.560 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:37.570 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:09:39.249 | DEBUG    | __main__:run_benchmark:431 - Query: Get rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:09:39.250 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:09:39.292 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:09:40.978 | DEBUG    | __main__:run_benchmark:431 - Query: retain rows where 'foo' greater than 70 or 'foo' less than 34 and 'bar' is 8
2022-08-06 09:09:40.979 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:09:40.989 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:09:42.451 | DEBUG    | __main__:run_benchmark:431 - Query: retain rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:09:42.452 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:09:42.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:09:44.185 | DEBUG    | __main__:run_benchmark:431 - Query: select entries in column 'foo' which are greater than 70 or less than 34 and select entries in column 'bar' which are equal to 8
2022-08-06 09:09:44.186 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:09:44.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:44.188 | DEBUG    | __main__:run_benchmark:431 - Query: select entries in column 'foo' which are greater than 70 or less than 34 and select entries in column 'bar' which are equal to 8
2022-08-06 09:09:44.188 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:09:44.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:09:46.234 | DEBUG    | __main__:run_benchmark:431 - Query: select entries where column 'foo' is greater than 70 or less than 34 and column 'bar' is equal to 8
2022-08-06 09:09:46.234 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8))]
2022-08-06 09:09:46.243 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:09:46.253 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 09:09:48.245 | DEBUG    | __main__:run_benchmark:431 - Query: get rows with beta greater than 53 or less than 40 and gamma equal to 9
2022-08-06 09:09:48.246 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['beta'] > 53) | (dfin['beta'] < 40)) & (dfin['gamma'] == 9)]
2022-08-06 09:09:48.257 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:09:49.686 | DEBUG    | __main__:run_benchmark:431 - Query: get rows with beta greater than 53 or less than 40 AND gamma equal to 9
2022-08-06 09:09:49.687 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['beta'] > 53) | (dfin['beta'] < 40)) & (dfin['gamma'] == 9)]
2022-08-06 09:09:49.699 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:09:51.264 | DEBUG    | __main__:run_benchmark:431 - Query: get rows with beta greater than 53 or less than 40, filter rows with gamma equal to 9
2022-08-06 09:09:51.265 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['beta'] > 53) | (dfin['beta'] < 40)) & (dfin['gamma'] == 9)]
2022-08-06 09:09:51.277 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:09:51.288 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 09:09:53.305 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where 'alpha' is equal to 4 and 'gamma' is less than 40 or greater than 53
2022-08-06 09:09:53.306 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] == 4) & ((dfin['gamma'] < 40) | (dfin['gamma'] > 53)))]
2022-08-06 09:09:53.315 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:09:55.320 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where 'alpha' is equal to 4 and 'gamma' is not between 40 and 53
2022-08-06 09:09:55.321 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] == 4) & ~(dfin['gamma'].between(40, 53))]
2022-08-06 09:09:55.331 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:09:57.220 | DEBUG    | __main__:run_benchmark:431 - Query: From dfin, filter rows with column gamma less than 40 or more than 53, and column alpha equal to 4
2022-08-06 09:09:57.221 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) | (dfin['gamma'] > 53)) & (dfin['alpha'] == 4)]
2022-08-06 09:09:57.231 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:09:57.241 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 09:09:59.314 | DEBUG    | __main__:run_benchmark:431 - Query: retain those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is equal to 11
2022-08-06 09:09:59.314 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)]
2022-08-06 09:09:59.333 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:59.334 | DEBUG    | __main__:run_benchmark:431 - Query: retain those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is equal to 11
2022-08-06 09:09:59.334 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)]
2022-08-06 09:09:59.353 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:09:59.353 | DEBUG    | __main__:run_benchmark:431 - Query: retain those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is equal to 11
2022-08-06 09:09:59.353 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 37) | (dfin['bar'] > 61)) & (dfin['foo'] == 11)]
2022-08-06 09:09:59.364 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:10:01.198 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.198 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.219 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.219 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.219 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] >= 37) & (dfin['bar'] <= 61)) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.237 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.237 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.237 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] >= 37) & (dfin['bar'] <= 61) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.255 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.255 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] >= 37) & (dfin['bar'] <= 61) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.273 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.273 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.273 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.292 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.292 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.309 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.310 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.310 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.328 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.328 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.328 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.346 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.346 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.346 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37,61)) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.364 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.364 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.364 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] >= 37) & (dfin['bar'] <= 61) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.386 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.386 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.386 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.404 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.404 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.404 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] > 37) & (dfin['bar'] < 61)) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.422 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.422 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.423 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.441 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.441 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.441 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.459 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.459 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.459 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.477 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.477 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.477 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.495 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.495 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.495 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.513 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.513 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.514 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.532 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.532 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.532 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] > 37) & (dfin['bar'] <= 61)) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.550 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:01.550 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 09:10:01.550 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'].between(37, 61)) & (dfin['foo'] != 11)].index)
2022-08-06 09:10:01.568 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:03.523 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where (bar < 38 or bar > 60) and foo = 11
2022-08-06 09:10:03.524 | DEBUG    | __main__:run_benchmark:432 - print(dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)])
2022-08-06 09:10:03.525 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]

2022-08-06 09:10:03.567 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:10:05.385 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where bar < 38 or bar > 60 and foo = 11
2022-08-06 09:10:05.386 | DEBUG    | __main__:run_benchmark:432 - print(dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)])
2022-08-06 09:10:05.387 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]

2022-08-06 09:10:05.396 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:10:05.571 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "retain those rows where value in cell of column 'foo' is equal to 11 and value in column 'bar' is eit...
    │               └ {'queries': [{'query': "retain those rows where value in cell of column 'foo' is equal to 11 and value in column 'bar' is eit...
    └ {'query': "get all rows with column 'foo' having value 11 and column 'bar' value greater than 60 or less than 38", 'user': 'u...

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a dataframe containing rows f...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dff164e90>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:10:05 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:10:05 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dff0d08d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:10:05.598 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:10:37.620 | DEBUG    | __main__:run_benchmark:431 - Query: get all rows with column 'foo' having value 11 and column 'bar' value greater than 60 or less than 38
2022-08-06 09:10:37.621 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] == 11) & (dfin['bar'] < 60) | (dfin['bar'] > 38))]
2022-08-06 09:10:37.641 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:37.641 | DEBUG    | __main__:run_benchmark:431 - Query: get all rows with column 'foo' having value 11 and column 'bar' value greater than 60 or less than 38
2022-08-06 09:10:37.641 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] == 11) & ((dfin['bar'] > 60) | (dfin['bar'] < 38))]
2022-08-06 09:10:37.650 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:10:39.562 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where (bar<38 || bar>60) && foo==11
2022-08-06 09:10:39.563 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)]
2022-08-06 09:10:39.582 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:39.582 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where (bar<38 || bar>60) && foo==11
2022-08-06 09:10:39.582 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:10:39.582 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:39.582 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where (bar<38 || bar>60) && foo==11
2022-08-06 09:10:39.583 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)]
2022-08-06 09:10:39.600 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:39.600 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where (bar<38 || bar>60) && foo==11
2022-08-06 09:10:39.600 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)]
2022-08-06 09:10:39.618 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:39.618 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where (bar<38 || bar>60) && foo==11
2022-08-06 09:10:39.618 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)]
2022-08-06 09:10:39.636 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:39.636 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where (bar<38 || bar>60) && foo==11
2022-08-06 09:10:39.636 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:10:39.636 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:39.637 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where (bar<38 || bar>60) && foo==11
2022-08-06 09:10:39.637 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:10:39.637 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:39.637 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where (bar<38 || bar>60) && foo==11
2022-08-06 09:10:39.637 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)]
2022-08-06 09:10:39.655 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:39.655 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where (bar<38 || bar>60) && foo==11
2022-08-06 09:10:39.655 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)]
2022-08-06 09:10:39.672 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:39.673 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where (bar<38 || bar>60) && foo==11
2022-08-06 09:10:39.673 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 09:10:39.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:10:41.369 | DEBUG    | __main__:run_benchmark:431 - Query: select rows from dfin such that column 'bar' is less than 38 or greater than 60 and column 'foo' equals 11
2022-08-06 09:10:41.370 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) | (dfin['foo'] == 11)]
2022-08-06 09:10:41.389 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:41.389 | DEBUG    | __main__:run_benchmark:431 - Query: select rows from dfin such that column 'bar' is less than 38 or greater than 60 and column 'foo' equals 11
2022-08-06 09:10:41.389 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) | (dfin['foo'] == 11)]
2022-08-06 09:10:41.406 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:10:41.407 | DEBUG    | __main__:run_benchmark:431 - Query: select rows from dfin such that column 'bar' is less than 38 or greater than 60 and column 'foo' equals 11
2022-08-06 09:10:41.407 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 09:10:41.416 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:10:41.426 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 09:10:41.426 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 09:10:41.426 | DEBUG    | __main__:run:515 - Number of queries: 27
2022-08-06 09:10:41.635 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'"...
    │               └ {'queries': [{'query': "filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'"...
    └ {'query': "filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'", 'user': 'u12'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a series containing boolean v...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dff0c5fd0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:10:41 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:10:41 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dff0f8f10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:10:41.662 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:11:13.722 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'
2022-08-06 09:11:13.723 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:13.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:11:15.040 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows in input 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'
2022-08-06 09:11:15.041 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:15.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:11:17.074 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin1' where value in column 'alpha' equals to that in column 'alpha' in 'dfin2'
2022-08-06 09:11:17.075 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin1[dfin1['alpha'] == dfin2['alpha']].index)
2022-08-06 09:11:17.079 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:17.079 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin1' where value in column 'alpha' equals to that in column 'alpha' in 'dfin2'
2022-08-06 09:11:17.079 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin1[dfin1.alpha == dfin2.alpha].index)
2022-08-06 09:11:17.082 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:17.082 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin1' where value in column 'alpha' equals to that in column 'alpha' in 'dfin2'
2022-08-06 09:11:17.082 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin1[dfin1.alpha == dfin2.alpha].index)
2022-08-06 09:11:17.085 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:17.086 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin1' where value in column 'alpha' equals to that in column 'alpha' in 'dfin2'
2022-08-06 09:11:17.086 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin1[dfin1['alpha'].isin(dfin2['alpha'])].index)
2022-08-06 09:11:17.097 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:11:19.187 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 09:11:19.187 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:19.216 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:19.217 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 09:11:19.217 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:19.239 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:19.239 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 09:11:19.239 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin2['alpha'].values]
2022-08-06 09:11:19.242 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:19.242 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 09:11:19.243 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:19.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:19.264 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 09:11:19.264 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:19.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:19.285 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 09:11:19.285 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:19.306 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:19.306 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 09:11:19.307 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 09:11:19.328 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:19.328 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 09:11:19.328 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:19.349 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:19.349 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 09:11:19.349 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:19.370 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:19.371 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-06 09:11:19.371 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:19.382 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:11:21.215 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2 and remove them from dfin1
2022-08-06 09:11:21.215 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin2['alpha'].index]
2022-08-06 09:11:21.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:21.247 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2 and remove them from dfin1
2022-08-06 09:11:21.247 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:21.270 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:21.270 | DEBUG    | __main__:run_benchmark:431 - Query: Filter out rows of dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2 and remove them from dfin1
2022-08-06 09:11:21.270 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(~ dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 09:11:21.282 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:11:22.931 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows of dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:22.932 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin2.alpha.index]
2022-08-06 09:11:22.953 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:22.953 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows of dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:22.954 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(~ dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 09:11:22.965 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:11:24.286 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.287 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:24.347 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.347 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.347 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin2['alpha'].index]
2022-08-06 09:11:24.370 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.371 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.371 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:24.392 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.392 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.392 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:24.413 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.413 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.414 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:24.435 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.435 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.435 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:24.456 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.456 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.456 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:24.477 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.477 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.478 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'] == dfin2['alpha'])]
2022-08-06 09:11:24.480 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.481 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.481 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:24.502 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.502 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.502 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:24.523 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.523 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.524 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:24.545 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.545 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.545 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:24.566 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.566 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.566 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:24.587 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.587 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.587 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:24.608 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.609 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.609 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:24.630 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.630 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.630 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:24.651 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.651 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.651 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:24.672 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.672 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.673 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'].values)]
2022-08-06 09:11:24.693 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.694 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.694 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:24.715 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:24.715 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 09:11:24.715 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] == dfin2['alpha'])]
2022-08-06 09:11:24.718 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:26.708 | DEBUG    | __main__:run_benchmark:431 - Query: Remove all rows from dfin1 which has same column 'alpha' as dfin2
2022-08-06 09:11:26.709 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin2.alpha.dropna().index]
2022-08-06 09:11:26.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:26.731 | DEBUG    | __main__:run_benchmark:431 - Query: Remove all rows from dfin1 which has same column 'alpha' as dfin2
2022-08-06 09:11:26.731 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:26.743 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:11:28.969 | DEBUG    | __main__:run_benchmark:431 - Query: Remove all matched rows of dfin1 and difn2 on column 'alpha' from dfin1
2022-08-06 09:11:28.970 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin1[dfin1.alpha == dfin2.alpha].index)
2022-08-06 09:11:28.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:28.974 | DEBUG    | __main__:run_benchmark:431 - Query: Remove all matched rows of dfin1 and difn2 on column 'alpha' from dfin1
2022-08-06 09:11:28.974 | DEBUG    | __main__:run_benchmark:432 - dfin1[~ dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:28.986 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:11:30.780 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:30.781 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:30.799 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:30.799 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:30.799 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:30.816 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:30.817 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:30.817 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:30.834 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:30.834 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:30.834 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:30.852 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:30.852 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:30.852 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:30.869 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:30.870 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:30.870 | DEBUG    | __main__:run_benchmark:432 - pd.DataFrame(dfin1['alpha'] - dfin2['alpha'])
2022-08-06 09:11:30.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:30.890 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:30.891 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:30.908 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:30.908 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:30.908 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:30.925 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:30.926 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:30.926 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:30.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:30.943 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:30.944 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:30.961 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:30.961 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:30.961 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:30.979 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:30.979 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:30.979 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:30.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:30.996 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:30.997 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:31.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:31.014 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:31.014 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:31.032 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:31.032 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:31.032 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:31.049 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:31.049 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:31.049 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'].sub(dfin2['alpha'])
2022-08-06 09:11:31.067 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:31.067 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:31.067 | DEBUG    | __main__:run_benchmark:432 - (dfin1['alpha'] - dfin2['alpha'])
2022-08-06 09:11:31.084 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:31.084 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:31.084 | DEBUG    | __main__:run_benchmark:432 - dfin1.alpha - dfin2.alpha
2022-08-06 09:11:31.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:31.102 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:31.102 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:31.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:31.120 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:31.120 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[:, 'alpha'] - dfin2.loc[:, 'alpha']
2022-08-06 09:11:31.137 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:33.164 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:33.165 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2.columns, axis=1)
2022-08-06 09:11:33.183 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:33.183 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:33.184 | DEBUG    | __main__:run_benchmark:432 - dfin1.alpha.drop(dfin2.alpha)
2022-08-06 09:11:33.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:33.187 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:33.187 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2.index, inplace=True)
2022-08-06 09:11:33.204 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:33.204 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:33.204 | DEBUG    | __main__:run_benchmark:432 - dfin1.alpha.isin(dfin2.alpha)
2022-08-06 09:11:33.221 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:33.221 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:33.221 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin1[dfin1['alpha'] == dfin2['alpha']].index)
2022-08-06 09:11:33.224 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:33.224 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:33.224 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2.index, inplace=True)
2022-08-06 09:11:33.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:33.241 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:33.241 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2.index, inplace=True)
2022-08-06 09:11:33.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:33.258 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:33.258 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(axis=1, columns=dfin2, inplace=True)
2022-08-06 09:11:33.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:33.271 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:33.271 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2.index, inplace=True)
2022-08-06 09:11:33.288 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:33.288 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:33.288 | DEBUG    | __main__:run_benchmark:432 - dfin1.drop(dfin2, inplace=True)
2022-08-06 09:11:33.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:33.291 | DEBUG    | __main__:run_benchmark:431 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:33.291 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:33.303 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:11:35.202 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:35.203 | DEBUG    | __main__:run_benchmark:432 - dfin2['alpha'].difference(dfin1['alpha'])
2022-08-06 09:11:35.207 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:35.207 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:35.207 | DEBUG    | __main__:run_benchmark:432 - dfin2['alpha'].sub(dfin1['alpha'], axis=0)
2022-08-06 09:11:35.225 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:35.225 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:35.226 | DEBUG    | __main__:run_benchmark:432 - dfin2['alpha'].difference(dfin1['alpha'])
2022-08-06 09:11:35.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:35.228 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:35.228 | DEBUG    | __main__:run_benchmark:432 - dfin2['alpha'].difference(dfin1['alpha'])
2022-08-06 09:11:35.231 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:35.231 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:35.231 | DEBUG    | __main__:run_benchmark:432 - dfin2['alpha'].isin(dfin1['alpha'])
2022-08-06 09:11:35.248 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:35.248 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:35.248 | DEBUG    | __main__:run_benchmark:432 - dfin2['alpha'].difference(dfin1['alpha'])
2022-08-06 09:11:35.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:35.251 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:35.251 | DEBUG    | __main__:run_benchmark:432 - print(dfin1['alpha'].sub(dfin2['alpha']))
2022-08-06 09:11:35.251 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin1['alpha'].sub(dfin2['alpha'])

2022-08-06 09:11:35.260 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin1['alpha'].sub(dfin2['alpha'])

2022-08-06 09:11:35.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:35.269 | DEBUG    | __main__:run_benchmark:431 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-06 09:11:35.269 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1.alpha.isin(dfin2.alpha)]
2022-08-06 09:11:35.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:11:36.906 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:36.907 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'].difference(dfin2['alpha'])
2022-08-06 09:11:36.911 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:36.911 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:36.911 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'].difference(dfin2['alpha'])
2022-08-06 09:11:36.914 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:36.914 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:36.914 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:36.932 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:36.932 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:36.933 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'].sub(dfin2['alpha'], axis=0)
2022-08-06 09:11:36.950 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:36.950 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:36.950 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:36.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:36.968 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:36.968 | DEBUG    | __main__:run_benchmark:432 - print(dfin1['alpha'] - dfin2['alpha'])
2022-08-06 09:11:36.968 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: (dfin1['alpha'] - dfin2['alpha'])

2022-08-06 09:11:36.977 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: (dfin1['alpha'] - dfin2['alpha'])

2022-08-06 09:11:36.986 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:36.986 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:36.986 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:37.004 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:37.004 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:37.004 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'].sub(dfin2['alpha'], axis=0)
2022-08-06 09:11:37.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:37.021 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:37.022 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:37.039 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:37.039 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:37.039 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:37.057 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:37.057 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:37.057 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:37.074 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:37.074 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:37.075 | DEBUG    | __main__:run_benchmark:432 - mean_squared_error(dfin1['alpha'], dfin2['alpha'])
2022-08-06 09:11:37.077 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:37.077 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:37.077 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:37.095 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:37.095 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:37.095 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:37.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:37.112 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:37.113 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:37.130 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:37.130 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:37.130 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:37.147 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:37.148 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:37.148 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:37.165 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:37.165 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:37.165 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:37.183 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:37.183 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:37.183 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 09:11:37.201 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:37.201 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 09:11:37.201 | DEBUG    | __main__:run_benchmark:432 - (dfin1['alpha'] - dfin2['alpha'])
2022-08-06 09:11:37.218 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.674 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.675 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 09:11:39.738 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.738 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.738 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha'])) & (~ dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 09:11:39.757 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.758 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.758 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 09:11:39.760 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.761 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.761 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 09:11:39.763 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.763 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.764 | DEBUG    | __main__:run_benchmark:432 - df1[(dfin2['alpha'] != dfin1['alpha'])]
2022-08-06 09:11:39.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.766 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.766 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:39.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.787 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.788 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 09:11:39.808 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.809 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.809 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:39.830 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.830 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.830 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 09:11:39.833 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.833 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.833 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 09:11:39.835 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.835 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.835 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:39.857 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.857 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.857 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 09:11:39.859 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.859 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.859 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 09:11:39.862 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.862 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.862 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:39.883 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.883 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.883 | DEBUG    | __main__:run_benchmark:432 - df1[(df1['alpha'].isin(dfin2['alpha'])) & (df1['alpha'].isin(dfin1['alpha']))]
2022-08-06 09:11:39.886 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.886 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.886 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 09:11:39.888 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.888 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.889 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 09:11:39.891 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.891 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.891 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 09:11:39.894 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.894 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.894 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 09:11:39.896 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:39.896 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:39.897 | DEBUG    | __main__:run_benchmark:432 - df1[df1['alpha'].isin(dfin2['alpha']) & df1['alpha'].isin(dfin1['alpha'])]
2022-08-06 09:11:39.899 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:42.235 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:42.236 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:42.259 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:42.259 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:42.259 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha'])) & (dfin1['beta'].isin(dfin2['beta'])) & (dfin1['gamma'].isin(dfin2['gamma']))]
2022-08-06 09:11:42.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:42.281 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:42.281 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha'])) & (dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 09:11:42.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:42.284 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:42.284 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:42.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:42.306 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:42.306 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin2['alpha'] != dfin1['alpha']]
2022-08-06 09:11:42.309 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:42.309 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:42.309 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'] != dfin2['alpha']]
2022-08-06 09:11:42.312 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:42.312 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:42.312 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:42.333 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:42.333 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:42.333 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 09:11:42.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:42.354 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 09:11:42.354 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:42.366 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:11:44.138 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 09:11:44.139 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha'])) & (dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 09:11:44.142 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:44.143 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 09:11:44.143 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 09:11:44.165 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:44.165 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 09:11:44.165 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:44.186 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:44.186 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 09:11:44.186 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:44.207 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:44.207 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 09:11:44.207 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:44.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:44.229 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 09:11:44.229 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:44.250 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:44.250 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 09:11:44.250 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin2['alpha'] != dfin1['alpha'])]
2022-08-06 09:11:44.253 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:44.253 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 09:11:44.253 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 09:11:44.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:44.274 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 09:11:44.274 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'].isin(dfin2['alpha']))]
2022-08-06 09:11:44.295 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:44.295 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 09:11:44.295 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha']) == False]
2022-08-06 09:11:44.307 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:11:44.318 | DEBUG    | __main__:run:515 - Number of queries: 26
2022-08-06 09:11:46.641 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' of dataframe dfin1 are not part of values in column 'bar' of dataframe dfin2
2022-08-06 09:11:46.642 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:46.688 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:11:48.823 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' of dataframe dfin1 do not exist in values in column 'bar' of dataframe dfin2
2022-08-06 09:11:48.823 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:48.872 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:11:50.651 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:50.652 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:50.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:50.714 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:50.714 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:50.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:50.736 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:50.737 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:50.757 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:50.758 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:50.758 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:50.779 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:50.779 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:50.779 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:50.800 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:50.800 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:50.801 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:50.822 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:50.822 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:50.822 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:50.843 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:50.843 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:50.843 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:50.864 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:50.864 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:50.865 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:50.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:50.886 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:50.886 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:50.907 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:50.907 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:50.907 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:50.928 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:50.928 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:50.928 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:50.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:50.950 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:50.950 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:50.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:50.971 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:50.971 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:50.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:50.992 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:50.993 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:51.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:51.014 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:51.014 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:51.035 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:51.035 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:51.035 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:51.056 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:51.056 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:51.057 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:51.078 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:51.078 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:51.078 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:51.099 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:51.099 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:51.099 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:51.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:52.370 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' don't exist in column 'bar' of dataframe dfin2
2022-08-06 09:11:52.371 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 09:11:52.384 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:11:52.395 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 09:11:54.562 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows in dfin1 where column 'beta' in dfin1 is not equal to column 'beta' in dfin2
2022-08-06 09:11:54.563 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['beta'].isin(dfin2['beta'])]
2022-08-06 09:11:54.574 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:11:55.944 | DEBUG    | __main__:run_benchmark:431 - Query: select rows in dfin1 where column 'beta' in dfin1 is not equal to column 'beta' in dfin2
2022-08-06 09:11:55.945 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['beta'].isin(dfin2['beta'])]
2022-08-06 09:11:55.957 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:11:55.968 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 09:11:58.083 | DEBUG    | __main__:run_benchmark:431 - Query: From dfin, filter rows with dfin1.yah values not in column dfin2.yah
2022-08-06 09:11:58.084 | DEBUG    | __main__:run_benchmark:432 - dfin1[~ dfin1['yah'].isin(dfin2['yah'])]
2022-08-06 09:11:58.097 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:11:58.108 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 09:11:58.108 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 09:11:58.108 | DEBUG    | __main__:run:515 - Number of queries: 21
2022-08-06 09:11:59.805 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:11:59.806 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:11:59.807 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:59.807 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:11:59.808 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:11:59.809 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:59.809 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:11:59.810 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:11:59.866 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:59.866 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:11:59.866 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:11:59.866 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:59.866 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:11:59.866 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:11:59.887 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:59.887 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:11:59.887 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:11:59.887 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:59.887 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:11:59.887 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:11:59.888 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:59.888 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:11:59.888 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:11:59.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:59.906 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:11:59.906 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:11:59.924 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:59.924 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:11:59.924 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:11:59.942 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:59.942 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:11:59.942 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:11:59.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:59.960 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:11:59.960 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:11:59.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:59.978 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:11:59.978 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:11:59.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:59.979 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:11:59.979 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:11:59.979 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:59.979 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:11:59.979 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:11:59.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:11:59.997 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:11:59.997 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:12:00.015 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:00.015 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:12:00.016 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:12:00.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:00.033 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:12:00.034 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:00.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:00.034 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:12:00.034 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:00.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:00.034 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 09:12:00.034 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:00.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.725 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.725 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 09:12:02.785 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.786 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.786 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 09:12:02.807 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.807 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.807 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:02.807 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.807 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.808 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 09:12:02.826 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.826 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.826 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:02.827 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.827 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.827 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))
2022-08-06 09:12:02.827 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.827 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.827 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:02.828 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.828 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.828 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))
2022-08-06 09:12:02.828 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.828 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.828 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:02.828 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.829 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.829 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 09:12:02.847 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.847 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.847 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:02.848 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.848 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.848 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:02.848 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.848 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.848 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:02.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.849 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.849 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:02.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.849 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.849 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:02.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.849 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.849 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:02.850 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.850 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.850 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))
2022-08-06 09:12:02.850 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.850 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.850 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:02.850 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.850 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.850 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:02.851 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:02.851 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 09:12:02.851 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 09:12:02.869 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.234 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.234 | DEBUG    | __main__:run_benchmark:432 - #  and less than or equal to 50 and value in column 'bar' is equal to 8)
2022-08-06 09:12:04.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.234 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.234 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:04.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.235 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.235 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 09:12:04.235 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.235 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.235 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 09:12:04.235 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.235 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.235 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 09:12:04.235 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.236 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.236 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 09:12:04.236 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.236 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.236 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 09:12:04.236 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.236 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.236 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 09:12:04.236 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.237 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.237 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 09:12:04.237 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.237 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.237 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 09:12:04.237 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.237 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.237 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 09:12:04.238 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.238 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.238 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:04.238 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.238 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.238 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 09:12:04.238 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.238 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.238 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:04.239 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.239 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.239 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 09:12:04.239 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.239 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.239 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 09:12:04.239 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.239 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.239 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 09:12:04.239 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.240 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.240 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 09:12:04.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.240 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.240 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 09:12:04.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:04.240 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 09:12:04.240 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 09:12:04.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.004 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.005 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.065 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.065 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.085 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.086 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.086 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.103 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.104 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.104 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.121 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.122 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.122 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.140 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.140 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.158 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.158 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.158 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.176 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.176 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.194 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.194 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.212 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.212 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.212 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.230 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.230 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.230 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.248 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.248 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.248 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.266 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.266 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.267 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.285 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.285 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.302 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.303 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.303 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.321 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.321 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.321 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.339 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.339 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.339 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.357 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.357 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.357 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.375 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.375 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.375 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8))]
2022-08-06 09:12:06.393 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:06.393 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 09:12:06.393 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)]
2022-08-06 09:12:06.411 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.189 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.190 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:08.208 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.209 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.209 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:08.226 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.227 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.227 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:08.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.227 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.227 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:08.245 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.245 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.245 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:08.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.263 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.263 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:08.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.264 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.264 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:08.282 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.282 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.282 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:08.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.300 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.300 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:08.318 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.318 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.318 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:08.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.336 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.336 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:08.353 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.354 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.354 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:08.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.354 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.354 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 09:12:08.372 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.372 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.372 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:08.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.390 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.390 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:08.408 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.408 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.408 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:08.408 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.409 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.409 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 09:12:08.427 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.427 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.427 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:08.444 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.445 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.445 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:08.462 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:08.463 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:08.463 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:08.481 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.084 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.085 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:10.144 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.144 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.145 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & (dfin['foo'] < 40 | dfin['foo'] > 50)]
2022-08-06 09:12:10.148 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.148 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.148 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & (dfin['foo'] < 40 | dfin['foo'] > 50)]
2022-08-06 09:12:10.152 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.152 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.152 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 09:12:10.171 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.171 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.171 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:10.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.189 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.189 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 09:12:10.207 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.207 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.207 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & (dfin['foo'] < 40 | dfin['foo'] > 50)]
2022-08-06 09:12:10.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.210 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.210 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 09:12:10.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.228 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.228 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:10.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.246 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.246 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 09:12:10.264 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.264 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.264 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 09:12:10.282 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.282 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.282 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 09:12:10.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.300 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.300 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:10.318 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.318 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.318 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 09:12:10.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.336 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.336 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:10.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.354 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.354 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & (dfin['foo'] < 40 | dfin['foo'] > 50)]
2022-08-06 09:12:10.357 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.357 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.357 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40 | dfin['foo'] > 50))]
2022-08-06 09:12:10.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.360 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.360 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:10.378 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.378 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.378 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & (dfin['foo'] < 40 | dfin['foo'] > 50)]
2022-08-06 09:12:10.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:10.381 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 09:12:10.381 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:10.398 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:11.879 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:11.880 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:11.939 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:11.940 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:11.940 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:11.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:11.960 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:11.961 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:11.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:11.978 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:11.979 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 09:12:11.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:11.997 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:11.997 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:11.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:11.997 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:11.997 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & (dfin['foo'] < 40) | (dfin['foo'] > 50)]
2022-08-06 09:12:12.015 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:12.015 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:12.015 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:12.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:12.033 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:12.034 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:12.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:12.034 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:12.034 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & (dfin['foo'] < 40 | dfin['foo'] > 50)]
2022-08-06 09:12:12.037 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:12.037 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:12.037 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:12.055 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:12.055 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:12.055 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 09:12:12.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:12.073 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:12.073 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 09:12:12.091 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:12.091 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:12.091 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & (dfin['foo'] < 40 | dfin['foo'] > 50)]
2022-08-06 09:12:12.094 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:12.094 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:12.094 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:12.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:12.112 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:12.112 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 09:12:12.130 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:12.130 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:12.130 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & (dfin['foo'] < 40) | (dfin['foo'] > 50)]
2022-08-06 09:12:12.148 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:12.148 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:12.148 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:12.166 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:12.166 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:12.166 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:12.166 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:12.166 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:12.166 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & (dfin['foo'] < 40) | (dfin['foo'] > 50)]
2022-08-06 09:12:12.184 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:12.184 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 09:12:12.185 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 09:12:12.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:13.740 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:13.741 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 09:12:13.760 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:13.760 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:13.761 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 09:12:13.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:13.780 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:13.780 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 09:12:13.799 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:13.799 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:13.800 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:13.800 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:13.800 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:13.800 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 09:12:13.818 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:13.818 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:13.818 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 09:12:13.836 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:13.836 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:13.836 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 09:12:13.854 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:13.854 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:13.854 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 09:12:13.872 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:13.872 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:13.872 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 09:12:13.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:13.890 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:13.890 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 09:12:13.908 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:13.908 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:13.908 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 09:12:13.926 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:13.926 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:13.926 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 09:12:13.944 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:13.944 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:13.944 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 09:12:13.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:13.962 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:13.962 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 09:12:13.980 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:13.980 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:13.980 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 09:12:13.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:13.998 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:13.998 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 09:12:14.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:14.016 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:14.016 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:14.017 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:14.017 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:14.017 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 09:12:14.035 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:14.035 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:14.035 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 09:12:14.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:14.053 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 09:12:14.053 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 09:12:14.071 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:14.244 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'b...
    │               └ {'queries': [{'query': "filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'b...
    └ {'query': "Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8", 'user': 'u...

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a boolean series where values...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dff126dd0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:12:14 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:12:14 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dff093790>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:12:14.270 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:12:46.009 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.010 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:46.028 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.029 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.029 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:46.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.046 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.047 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] > 34) & (dfin['foo'] < 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:46.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.064 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.065 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:46.082 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.082 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.082 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:46.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.102 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.102 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 34) | (dfin['foo'] > 70) | (dfin['bar'] == 8)]
2022-08-06 09:12:46.121 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.121 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.122 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] > 34) & (dfin['foo'] < 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:46.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.139 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.139 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:46.152 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.152 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.153 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:46.170 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.170 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.171 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:46.183 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.183 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.184 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:46.201 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.201 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.202 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:46.214 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.215 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.215 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['foo'] < 34) | (dfin['foo'] > 70) | (dfin['bar'] == 8)].index)
2022-08-06 09:12:46.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.233 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.233 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] != 8)]
2022-08-06 09:12:46.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.246 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.246 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:46.264 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.264 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.264 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:46.282 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.282 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.282 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:46.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.300 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.300 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] >= 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:46.318 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.318 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.318 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:46.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:46.336 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:46.336 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:46.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:47.845 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:47.845 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:47.864 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:47.865 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:47.865 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] > 34) & (dfin['foo'] < 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:47.882 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:47.882 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:47.883 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:47.900 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:47.900 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:47.901 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:47.918 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:47.918 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:47.919 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:47.919 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:47.919 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:47.919 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:47.919 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:47.919 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:47.920 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:47.937 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:47.937 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:47.938 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:47.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:47.955 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:47.955 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:47.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:47.956 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:47.956 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:47.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:47.974 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:47.974 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:47.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:47.992 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:47.992 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:48.010 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:48.010 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:48.010 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:48.028 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:48.028 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:48.028 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:48.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:48.046 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:48.046 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] != 8)]
2022-08-06 09:12:48.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:48.064 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:48.064 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:48.082 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:48.082 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:48.082 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:48.100 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:48.100 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:48.100 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:48.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:48.120 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:48.120 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:48.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:48.139 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:48.139 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:48.157 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.710 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.711 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:49.725 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.725 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.725 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:49.738 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.738 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.738 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:49.755 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.756 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.756 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:49.773 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.774 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.774 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:49.791 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.792 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.792 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:49.804 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.805 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.805 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:49.805 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.805 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.805 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:49.818 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.818 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.818 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:49.836 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.836 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.836 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] >= 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:49.854 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.854 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.854 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:49.867 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.867 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.867 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:49.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.885 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.885 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:49.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.885 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.885 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:49.903 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.903 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.903 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:49.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.916 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.916 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:49.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.934 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.934 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:49.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.947 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.947 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:49.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.960 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.960 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:49.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:49.973 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 09:12:49.973 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:49.986 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.522 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.523 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:51.580 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.580 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.581 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:51.601 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.601 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.601 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:51.614 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.614 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.614 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:51.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.632 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.633 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] == 8)]
2022-08-06 09:12:51.645 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.646 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.646 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:51.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.663 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.664 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:51.681 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.682 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.682 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:51.699 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.700 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.700 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:51.717 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.718 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.718 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] > 70) | (dfin['foo'] < 34) | (dfin['bar'] == 8)]
2022-08-06 09:12:51.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.736 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.736 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:51.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.754 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.754 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] > 70) | (dfin['foo'] < 34) | (dfin['bar'] == 8)]
2022-08-06 09:12:51.772 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.772 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.772 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:51.790 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.790 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.790 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:51.808 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.808 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.808 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:51.826 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.826 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.826 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] > 70) | (dfin['foo'] < 34) | (dfin['bar'] == 8)]
2022-08-06 09:12:51.844 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.844 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.845 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:51.862 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.862 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.863 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:51.880 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.880 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.881 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:51.898 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:51.898 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:51.899 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] == 8)]
2022-08-06 09:12:51.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.697 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.698 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:53.712 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.712 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.712 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:53.730 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.730 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.730 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:53.747 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.748 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.748 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:12:53.748 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.748 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.748 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] > 70) | (dfin['foo'] < 34) | (dfin['bar'] == 8)]
2022-08-06 09:12:53.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.767 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.767 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] == 8)]
2022-08-06 09:12:53.779 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.780 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.780 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] > 70) | (dfin['foo'] < 34) | (dfin['bar'] == 8)]
2022-08-06 09:12:53.798 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.798 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.798 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] > 70) | (dfin['foo'] < 34) & (dfin['bar'] == 8)]
2022-08-06 09:12:53.816 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.816 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.816 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:53.834 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.834 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.834 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:53.852 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.852 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.852 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:53.870 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.870 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.870 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:53.888 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.888 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.888 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 09:12:53.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.906 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.906 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] < 34) | (dfin['foo'] > 70) | (dfin['bar'] == 8)]
2022-08-06 09:12:53.924 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.924 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.924 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] > 70) | (dfin['foo'] < 34) | (dfin['bar'] == 8)]
2022-08-06 09:12:53.942 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.943 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.943 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] > 70) | (dfin['foo'] < 34) | (dfin['bar'] == 8)]
2022-08-06 09:12:53.961 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.961 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.961 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 09:12:53.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.974 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.974 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:53.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:53.992 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:53.992 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:54.010 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:54.010 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:54.010 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 09:12:54.028 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.620 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.620 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.639 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.640 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.640 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.657 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.658 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.658 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.675 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.675 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.676 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.693 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.694 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.694 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.711 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.712 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.712 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.729 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.730 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.730 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.747 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.748 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.748 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.765 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.766 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.766 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.783 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.784 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.784 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.801 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.802 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.802 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.820 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.820 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.820 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.837 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.838 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.838 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.855 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.856 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.856 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.873 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.873 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.874 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.891 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.892 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.892 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.910 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.910 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.927 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.928 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.945 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.946 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:55.963 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 09:12:55.963 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 09:12:55.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:12:57.570 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:57.571 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)].index)
2022-08-06 09:12:57.614 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:12:59.415 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:12:59.416 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)].index)
2022-08-06 09:12:59.459 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:13:01.155 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 09:13:01.155 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)].index)
2022-08-06 09:13:01.166 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:13:02.784 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 09:13:02.785 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] == 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))].index)
2022-08-06 09:13:02.795 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:13:04.493 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 09:13:04.494 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] == 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))].index)
2022-08-06 09:13:04.538 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:13:06.288 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 09:13:06.289 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['bar'] != 8) | ((dfin['foo'] < 70) | (dfin['foo'] > 34))]
2022-08-06 09:13:06.304 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:06.304 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 09:13:06.304 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 09:13:06.322 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:06.322 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 09:13:06.322 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34)))]
2022-08-06 09:13:06.343 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:06.343 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 09:13:06.344 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['bar'] != 8) | ((dfin['foo'] > 70) | (dfin['foo'] < 34))]
2022-08-06 09:13:06.357 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:06.358 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 09:13:06.358 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] == 8) & ((dfin['foo'] > 70) | (dfin['foo'] < 34))].index)
2022-08-06 09:13:06.367 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:13:06.381 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 09:13:08.362 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.362 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3))]
2022-08-06 09:13:08.381 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.381 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.381 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3))]
2022-08-06 09:13:08.399 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.399 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.399 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:08.417 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.417 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.417 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:08.435 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.435 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.436 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3))]
2022-08-06 09:13:08.454 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.454 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.454 | DEBUG    | __main__:run_benchmark:432 - ((dfin['alpha'] < 40) | (dfin['alpha'] > 59) | (dfin['beta'] == 3))
2022-08-06 09:13:08.467 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.467 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.468 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:08.485 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.486 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.486 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:08.504 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.504 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.504 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:08.522 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.522 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.522 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:08.540 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.540 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.541 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:08.559 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.559 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.559 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:08.577 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.577 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.577 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:08.577 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.578 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.578 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3))]
2022-08-06 09:13:08.596 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.596 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.596 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:08.596 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.596 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.596 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:08.614 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.615 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.615 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:08.633 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.633 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.633 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:08.633 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.633 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.633 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:08.651 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:08.651 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:08.652 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:08.670 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.650 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.651 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3))]
2022-08-06 09:13:10.710 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.710 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.710 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:10.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.731 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.732 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3))]
2022-08-06 09:13:10.750 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.750 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.750 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:10.768 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.768 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.768 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:10.786 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.786 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.787 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3))]
2022-08-06 09:13:10.805 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.805 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.805 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:10.823 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.823 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.823 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:10.841 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.842 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.842 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:10.860 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.860 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.860 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:10.860 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.860 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.860 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:10.878 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.879 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.879 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:10.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.897 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.897 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:10.915 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.915 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.916 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:10.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.934 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.934 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:10.952 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.952 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.952 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:10.970 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.970 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.971 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:10.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.971 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.971 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:10.989 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.989 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.989 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:10.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:10.990 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:10.990 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:10.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.798 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.799 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3))]
2022-08-06 09:13:12.819 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.819 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.819 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3))]
2022-08-06 09:13:12.837 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.837 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.837 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:12.855 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.855 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.856 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:12.874 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.874 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.874 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:12.892 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.892 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.892 | DEBUG    | __main__:run_benchmark:432 - ((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)
2022-08-06 09:13:12.905 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.906 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.906 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:12.924 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.924 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.924 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:12.924 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.924 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.925 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:12.925 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.925 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.925 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:12.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.943 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.944 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:12.961 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.962 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.962 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:12.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.962 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.962 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:12.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.963 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.963 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:12.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.963 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.963 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:12.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.963 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.963 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:12.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.964 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.964 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:12.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.982 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.982 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:12.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:12.983 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:12.983 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:13.001 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:13.001 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 09:13:13.001 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 09:13:13.019 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:13.032 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 09:13:14.841 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:14.842 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index, inplace=True)
2022-08-06 09:13:14.856 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:14.857 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:14.857 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 09:13:14.875 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:14.875 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:14.875 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 09:13:14.894 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:14.894 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:14.894 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 09:13:14.912 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:14.912 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:14.912 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 09:13:14.930 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:14.931 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:14.931 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 09:13:14.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:14.949 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:14.949 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 09:13:14.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:14.968 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:14.968 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 09:13:14.986 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:14.986 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:14.986 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 09:13:15.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:15.005 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:15.005 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 09:13:15.023 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:15.023 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:15.023 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] != 11)].index)
2022-08-06 09:13:15.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:15.042 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:15.042 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 09:13:15.061 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:15.061 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:15.061 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 09:13:15.079 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:15.079 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:15.080 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin.bar < 37) | (dfin.bar > 61) | (dfin.foo == 11)].index)
2022-08-06 09:13:15.098 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:15.098 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:15.098 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 09:13:15.116 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:15.116 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:15.117 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 09:13:15.135 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:15.135 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:15.135 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] != 11)].index)
2022-08-06 09:13:15.154 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:15.154 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:15.154 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 09:13:15.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:15.173 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:15.173 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 09:13:15.191 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:15.191 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 09:13:15.191 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)].index)
2022-08-06 09:13:15.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.177 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.178 | DEBUG    | __main__:run_benchmark:432 - print(dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)])
2022-08-06 09:13:17.179 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]

2022-08-06 09:13:17.188 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]

2022-08-06 09:13:17.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.198 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.199 | DEBUG    | __main__:run_benchmark:432 - print(dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) | (dfin['foo'] == 11)])
2022-08-06 09:13:17.199 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) | (dfin['foo'] == 11))]

2022-08-06 09:13:17.208 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) | (dfin['foo'] == 11))]

2022-08-06 09:13:17.218 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.218 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.218 | DEBUG    | __main__:run_benchmark:432 - print(dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) | (dfin['foo'] == 11)])
2022-08-06 09:13:17.218 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) | (dfin['foo'] == 11))]

2022-08-06 09:13:17.227 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) | (dfin['foo'] == 11))]

2022-08-06 09:13:17.237 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.237 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.237 | DEBUG    | __main__:run_benchmark:432 - print(dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)])
2022-08-06 09:13:17.237 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]

2022-08-06 09:13:17.246 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]

2022-08-06 09:13:17.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.255 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.256 | DEBUG    | __main__:run_benchmark:432 - print(dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)])
2022-08-06 09:13:17.256 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]

2022-08-06 09:13:17.264 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]

2022-08-06 09:13:17.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.274 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.274 | DEBUG    | __main__:run_benchmark:432 - print(dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) | (dfin['foo'] == 11)])
2022-08-06 09:13:17.274 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) | (dfin['foo'] == 11))]

2022-08-06 09:13:17.283 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) | (dfin['foo'] == 11))]

2022-08-06 09:13:17.292 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.293 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.293 | DEBUG    | __main__:run_benchmark:432 - print(dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)])
2022-08-06 09:13:17.293 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]

2022-08-06 09:13:17.301 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]

2022-08-06 09:13:17.311 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.311 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.311 | DEBUG    | __main__:run_benchmark:432 - print(dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)])
2022-08-06 09:13:17.311 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]

2022-08-06 09:13:17.320 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]

2022-08-06 09:13:17.329 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.329 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.330 | DEBUG    | __main__:run_benchmark:432 - print(dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) | (dfin['foo'] == 11)])
2022-08-06 09:13:17.330 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) | (dfin['foo'] == 11))]

2022-08-06 09:13:17.338 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) | (dfin['foo'] == 11))]

2022-08-06 09:13:17.348 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.348 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.348 | DEBUG    | __main__:run_benchmark:432 - print(dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)])
2022-08-06 09:13:17.348 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]

2022-08-06 09:13:17.356 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]

2022-08-06 09:13:17.366 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.366 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.366 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:17.366 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.367 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.367 | DEBUG    | __main__:run_benchmark:432 - print(dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)])
2022-08-06 09:13:17.367 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]

2022-08-06 09:13:17.375 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]

2022-08-06 09:13:17.385 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.385 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.385 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 09:13:17.403 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.403 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.403 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)]
2022-08-06 09:13:17.421 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.421 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.421 | DEBUG    | __main__:run_benchmark:432 - print(dfin[(dfin.bar < 38) | (dfin.bar > 60) & (dfin.foo == 11)])
2022-08-06 09:13:17.421 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin.bar < 38) | ((dfin.bar > 60) & (dfin.foo == 11)))]

2022-08-06 09:13:17.429 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin.bar < 38) | ((dfin.bar > 60) & (dfin.foo == 11)))]

2022-08-06 09:13:17.439 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.439 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.439 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar'] < 38) | (dfin['bar'] > 60) | (dfin['foo'] == 11)]
2022-08-06 09:13:17.457 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.457 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.457 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)]
2022-08-06 09:13:17.478 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.478 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.478 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)]
2022-08-06 09:13:17.496 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.496 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.496 | DEBUG    | __main__:run_benchmark:432 - print(dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)])
2022-08-06 09:13:17.496 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]

2022-08-06 09:13:17.505 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]

2022-08-06 09:13:17.514 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:17.515 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 09:13:17.515 | DEBUG    | __main__:run_benchmark:432 - print(dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)])
2022-08-06 09:13:17.515 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]

2022-08-06 09:13:17.523 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]

2022-08-06 09:13:17.533 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.224 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.225 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 09:13:19.244 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.244 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.244 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)]
2022-08-06 09:13:19.262 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.262 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.262 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)]
2022-08-06 09:13:19.280 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.280 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.280 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:19.280 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.280 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.281 | DEBUG    | __main__:run_benchmark:432 - print(dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)])
2022-08-06 09:13:19.281 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]

2022-08-06 09:13:19.289 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]

2022-08-06 09:13:19.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.299 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.299 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60 & dfin['foo'] == 11)]
2022-08-06 09:13:19.302 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.302 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.302 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:19.302 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.303 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.303 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 09:13:19.321 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.321 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.321 | DEBUG    | __main__:run_benchmark:432 - print(dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)])
2022-08-06 09:13:19.321 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]

2022-08-06 09:13:19.329 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]

2022-08-06 09:13:19.339 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.339 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.339 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin.bar < 38) | (dfin.bar > 60 & dfin.foo == 11)]
2022-08-06 09:13:19.342 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.342 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.342 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:19.342 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.342 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.342 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60 & dfin['foo'] == 11)]
2022-08-06 09:13:19.345 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.345 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.345 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin.bar < 38) | (dfin.bar > 60 & dfin.foo == 11)]
2022-08-06 09:13:19.348 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.348 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.348 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 09:13:19.366 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.366 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.366 | DEBUG    | __main__:run_benchmark:432 - print(dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))])
2022-08-06 09:13:19.366 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(~ ((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11))))]

2022-08-06 09:13:19.375 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(~ ((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11))))]

2022-08-06 09:13:19.384 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.385 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.385 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60 & dfin['foo'] == 11)]
2022-08-06 09:13:19.387 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.387 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.387 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60 & dfin['foo'] == 11)]
2022-08-06 09:13:19.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.390 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.390 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin.bar < 38) | (dfin.bar > 60 & dfin.foo == 11)]
2022-08-06 09:13:19.393 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.393 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.393 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:13:19.393 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.393 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 09:13:19.393 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)]
2022-08-06 09:13:19.411 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:19.424 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 09:13:19.425 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 09:13:19.425 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 09:13:21.499 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.499 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 09:13:21.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.508 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.509 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean().shift(1)
2022-08-06 09:13:21.515 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.515 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.515 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean().shift(1)
2022-08-06 09:13:21.522 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.522 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.522 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean().shift(1)
2022-08-06 09:13:21.528 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.529 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.529 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean().shift(1)
2022-08-06 09:13:21.535 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.535 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.535 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[3:, 'a'] = dfin.loc[3:, 'a'].rolling(window=3, min_periods=1).mean()
2022-08-06 09:13:21.542 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.542 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.543 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 09:13:21.549 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.549 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.549 | DEBUG    | __main__:run_benchmark:432 - dfin.a = dfin.a.rolling(3, min_periods=1).mean()
2022-08-06 09:13:21.556 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.556 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.556 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean().shift(1)
2022-08-06 09:13:21.562 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.562 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.563 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 09:13:21.569 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.569 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.569 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 09:13:21.576 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.576 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.576 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean().shift(1)
2022-08-06 09:13:21.582 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.582 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.583 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean().shift(1)
2022-08-06 09:13:21.589 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.589 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.589 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].mask((dfin['a'].shift(1) == dfin['a']) & (dfin['a'].shift(2) == dfin['a']) & (dfin['a'].shift(3) ==
2022-08-06 09:13:21.590 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.590 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.590 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean().shift(1)
2022-08-06 09:13:21.597 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.597 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.597 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean().shift(1)
2022-08-06 09:13:21.603 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.603 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.604 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 09:13:21.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.610 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.610 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 09:13:21.617 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.617 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.617 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 09:13:21.623 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:21.623 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 09:13:21.623 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean().shift(1)
2022-08-06 09:13:21.629 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:23.964 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:23.965 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].loc[(dfin['a'].index != 0) & (dfin['a'].index != 1)] = dfin['a'].loc[(dfin['a'].index != 0) & (dfin['a'].index != 1)].
2022-08-06 09:13:23.966 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:23.966 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:23.966 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[0, 'a'] = np.nan
2022-08-06 09:13:23.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:23.973 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:23.973 | DEBUG    | __main__:run_benchmark:432 - #  to column 'a'
2022-08-06 09:13:23.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:23.974 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:23.974 | DEBUG    | __main__:run_benchmark:432 - #  to the same dataframe
2022-08-06 09:13:23.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:23.974 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:23.974 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3, min_periods=1).mean().fillna(np.nan)
2022-08-06 09:13:23.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:23.981 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:23.981 | DEBUG    | __main__:run_benchmark:432 - #  to the same dataframe
2022-08-06 09:13:23.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:23.981 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:23.981 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3, min_periods=1).mean().shift(1).fillna(np.NaN)
2022-08-06 09:13:23.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:23.988 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:23.988 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'] = dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'].rolling(3, min_periods=1).
2022-08-06 09:13:23.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:23.988 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:23.988 | DEBUG    | __main__:run_benchmark:432 - #  to the same column 'a'
2022-08-06 09:13:23.989 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:23.989 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:23.989 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index[2:], 'a'] = dfin.loc[dfin.index[2:], 'a'].rolling(3, min_periods=1).mean()
2022-08-06 09:13:23.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:23.996 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:23.996 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 09:13:24.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:24.003 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:24.003 | DEBUG    | __main__:run_benchmark:432 - #  to the same dataframe
2022-08-06 09:13:24.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:24.003 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:24.003 | DEBUG    | __main__:run_benchmark:432 - #  to the same dataframe
2022-08-06 09:13:24.004 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:24.004 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:24.004 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'] = dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'].rolling(3).mean()
2022-08-06 09:13:24.011 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:24.011 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:24.011 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 09:13:24.017 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:24.018 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:24.018 | DEBUG    | __main__:run_benchmark:432 - dfin['a'][2:] = dfin['a'][2:].rolling(3, min_periods=1).mean()
2022-08-06 09:13:24.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:24.024 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:24.024 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].loc[2:] = dfin['a'].loc[2:].rolling(3, min_periods=1).mean()
2022-08-06 09:13:24.031 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:24.031 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:24.031 | DEBUG    | __main__:run_benchmark:432 - #  to column 'a'
2022-08-06 09:13:24.031 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:24.032 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:24.032 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 09:13:24.038 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:24.038 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 09:13:24.038 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'] = dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'].rolling(3, min_periods=1).
2022-08-06 09:13:24.038 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.852 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.853 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].loc[(dfin['a'].index != 0) & (dfin['a'].index != 1)] = dfin['a'].loc[(dfin['a'].index != 0) & (dfin['a'].index != 1)].
2022-08-06 09:13:25.854 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.855 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.855 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[1:2, 'a'] = np.nan
2022-08-06 09:13:25.889 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.889 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.890 | DEBUG    | __main__:run_benchmark:432 - #  to column 'a'
2022-08-06 09:13:25.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.890 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.891 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'] = dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'].rolling(3).mean()
2022-08-06 09:13:25.905 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.905 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.905 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'] = dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'].rolling(3, min_periods=1).
2022-08-06 09:13:25.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.906 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.906 | DEBUG    | __main__:run_benchmark:432 - #  to the same dataframe
2022-08-06 09:13:25.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.906 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.906 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 09:13:25.915 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.915 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.916 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].iloc[1:3] = np.nan
2022-08-06 09:13:25.923 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.923 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.923 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'] = dfin.loc[(dfin.index != 0) & (dfin.index != 1), 'a'].rolling(3).mean()
2022-08-06 09:13:25.930 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.931 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.931 | DEBUG    | __main__:run_benchmark:432 - #  to the same dataframe
2022-08-06 09:13:25.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.931 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.931 | DEBUG    | __main__:run_benchmark:432 - #  to the same dataframe
2022-08-06 09:13:25.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.932 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.932 | DEBUG    | __main__:run_benchmark:432 - #  to the same column 'a'
2022-08-06 09:13:25.932 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.932 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.932 | DEBUG    | __main__:run_benchmark:432 - #  to the same dataframe
2022-08-06 09:13:25.932 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.932 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.932 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 09:13:25.939 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.939 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.939 | DEBUG    | __main__:run_benchmark:432 - #  to the same column 'a'
2022-08-06 09:13:25.939 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.939 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.940 | DEBUG    | __main__:run_benchmark:432 - #  to column 'a'
2022-08-06 09:13:25.940 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.940 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.940 | DEBUG    | __main__:run_benchmark:432 - #  to the same dataframe
2022-08-06 09:13:25.940 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.940 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.940 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3, min_periods=1).mean()
2022-08-06 09:13:25.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.947 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.947 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3, min_periods=1).mean().fillna(np.nan)
2022-08-06 09:13:25.953 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:25.953 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 09:13:25.954 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3, min_periods=1).mean().fillna(np.nan)
2022-08-06 09:13:25.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.375 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.376 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 09:13:27.383 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.383 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.384 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 09:13:27.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.390 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.390 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 09:13:27.396 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.397 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.397 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 09:13:27.403 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.403 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.403 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 09:13:27.410 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.410 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.410 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 09:13:27.416 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.417 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.417 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 09:13:27.423 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.423 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.423 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 09:13:27.430 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.430 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.430 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby('a')['b'].transform(lambda x: x.rolling(3).mean()).values
2022-08-06 09:13:27.438 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.438 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.438 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 09:13:27.445 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.445 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.445 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 09:13:27.451 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.451 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.451 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 09:13:27.458 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.458 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.458 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 09:13:27.465 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.465 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.465 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 09:13:27.471 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.471 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.472 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 09:13:27.478 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.478 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.478 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 09:13:27.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.485 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.485 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 09:13:27.491 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.491 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.491 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 09:13:27.498 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.498 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.498 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 09:13:27.504 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.504 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 09:13:27.505 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 09:13:27.511 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:27.525 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 09:13:28.968 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:28.969 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:28.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:28.978 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:28.978 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:28.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:28.984 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:28.984 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).mean()
2022-08-06 09:13:28.994 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:28.994 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:28.994 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:29.000 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:29.000 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:29.001 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, min_periods=1, window=3).mean()
2022-08-06 09:13:29.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:29.007 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:29.007 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 09:13:29.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:29.014 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:29.014 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:29.020 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:29.020 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:29.021 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:29.027 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:29.027 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:29.027 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:29.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:29.034 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:29.034 | DEBUG    | __main__:run_benchmark:432 - dfin['colA_mean'] = dfin['colA'].rolling(3).mean()
2022-08-06 09:13:29.040 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:29.040 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:29.040 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:29.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:29.047 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:29.047 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 09:13:29.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:29.053 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:29.053 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:29.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:29.060 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:29.060 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:29.066 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:29.066 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:29.067 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, 0].rolling(window=3).mean()
2022-08-06 09:13:29.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:29.073 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:29.073 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:29.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:29.080 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:29.080 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:29.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:29.086 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:29.086 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:29.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:29.093 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:29.093 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:29.099 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:29.100 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 09:13:29.100 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:29.106 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.503 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.504 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 09:13:30.511 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.511 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.512 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, 0].rolling(window=3).mean()
2022-08-06 09:13:30.518 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.518 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.518 | DEBUG    | __main__:run_benchmark:432 - pd.rolling_mean(dfin['colA'], 3)
2022-08-06 09:13:30.519 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.519 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.519 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:30.525 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.526 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.526 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, window=3).mean()
2022-08-06 09:13:30.532 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.532 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.532 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(window=3).mean()
2022-08-06 09:13:30.541 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.542 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.542 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:30.548 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.548 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.548 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).mean()
2022-08-06 09:13:30.557 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.557 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.558 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:30.564 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.564 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.564 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:30.570 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.570 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.571 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:30.577 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.577 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.577 | DEBUG    | __main__:run_benchmark:432 - pd.rolling_mean(dfin['colA'], 3)
2022-08-06 09:13:30.578 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.578 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.578 | DEBUG    | __main__:run_benchmark:432 - pd.Series(dfin['colA']).rolling(window=3).mean()
2022-08-06 09:13:30.585 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.585 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.586 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:30.594 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.594 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.594 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 09:13:30.601 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.601 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.601 | DEBUG    | __main__:run_benchmark:432 - dfin['colA_rolling_mean'] = dfin['colA'].rolling(window=3).mean()
2022-08-06 09:13:30.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.607 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.607 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:30.614 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.614 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.614 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:30.620 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.620 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.620 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:30.627 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:30.627 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 09:13:30.627 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:30.633 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.696 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.697 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:31.732 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.732 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.733 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 09:13:31.747 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.747 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.747 | DEBUG    | __main__:run_benchmark:432 - pd.rolling_mean(dfin['colA'], 3)
2022-08-06 09:13:31.749 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.749 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.749 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:31.759 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.759 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.759 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:31.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.767 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.767 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:31.773 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.774 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.774 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:31.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.780 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.780 | DEBUG    | __main__:run_benchmark:432 - dfin.colA.rolling(window=3).mean()
2022-08-06 09:13:31.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.787 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.787 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 09:13:31.793 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.793 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.794 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean().iplot(kind='line')
2022-08-06 09:13:31.795 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.795 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.795 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:31.801 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.801 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.802 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:31.808 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.808 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.808 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 09:13:31.814 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.815 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.815 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:31.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.821 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.821 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:31.827 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.827 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.828 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:31.834 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.834 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.834 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:31.840 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.840 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.840 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:31.847 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.847 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.847 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:31.853 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:31.854 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 09:13:31.854 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:13:31.860 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:13:32.031 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Compute rolling mean of window size 3 from 'colA'", 'user': 'u9'}, {'query': "Create column 'colA' by...
    │               └ {'queries': [{'query': "Compute rolling mean of window size 3 from 'colA'", 'user': 'u9'}, {'query': "Create column 'colA' by...
    └ {'query': "Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it", 'user': 'u9'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a series with the maximum val...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dff0a3ed0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:13:32 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:13:32 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dff00afd0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:13:32.056 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:14:03.333 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.334 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.341 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.342 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.342 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.348 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.348 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.349 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.355 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.355 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.355 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.361 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.362 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.362 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.368 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.368 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.368 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.375 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.375 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.375 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.381 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.381 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.382 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.388 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.388 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.388 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.395 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.395 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.395 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.401 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.401 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.402 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.408 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.408 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.408 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.415 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.415 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.415 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.421 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.421 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.421 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.427 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.428 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.428 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 09:14:03.434 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.434 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.434 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.440 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.440 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.441 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.447 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.447 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.447 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.453 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.454 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.454 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.460 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.460 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 09:14:03.460 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 09:14:03.466 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:03.481 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 09:14:04.964 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:04.964 | DEBUG    | __main__:run_benchmark:432 - dfin['column1'].rolling(3).median()
2022-08-06 09:14:04.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:04.973 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:04.973 | DEBUG    | __main__:run_benchmark:432 - dfin['column1'].rolling(3).median()
2022-08-06 09:14:04.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:04.982 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:04.982 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median()
2022-08-06 09:14:04.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:04.990 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:04.990 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 09:14:05.001 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:05.001 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:05.002 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3, center=True, min_periods=1).median()
2022-08-06 09:14:05.011 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:05.012 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:05.012 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 09:14:05.022 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:05.022 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:05.022 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3, min_periods=1).median()
2022-08-06 09:14:05.032 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:05.032 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:05.032 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 09:14:05.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:05.042 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:05.042 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 09:14:05.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:05.052 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:05.053 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 09:14:05.062 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:05.063 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:05.063 | DEBUG    | __main__:run_benchmark:432 - dfin['column1'].rolling(3).median()
2022-08-06 09:14:05.069 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:05.070 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:05.070 | DEBUG    | __main__:run_benchmark:432 - dfin['column1'].rolling(3).median().fillna(0).iloc[-1]
2022-08-06 09:14:05.076 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:05.077 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:05.077 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 09:14:05.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:05.087 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:05.087 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3, min_periods=1).median()
2022-08-06 09:14:05.097 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:05.097 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:05.097 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 09:14:05.107 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:05.107 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:05.107 | DEBUG    | __main__:run_benchmark:432 - dfin['column1'].rolling(3).median().fillna(0)
2022-08-06 09:14:05.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:05.114 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:05.114 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 09:14:05.124 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:05.124 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:05.124 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 09:14:05.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:05.134 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:05.134 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 09:14:05.144 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:05.144 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 09:14:05.145 | DEBUG    | __main__:run_benchmark:432 - dfin['column1'].rolling(3).median()
2022-08-06 09:14:05.151 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:07.484 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:07.485 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'column2'] = dfin.loc[:, 'column2'].replace(-1, np.nan)
2022-08-06 09:14:07.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:07.493 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:07.494 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:,'column2'] = dfin.loc[:,'column2'].replace(-1, np.nan)
2022-08-06 09:14:07.500 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:07.501 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:07.501 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby('column1')['column2'].apply(lambda x: x.shift(1).rolling(3, min_periods=1).median())
2022-08-06 09:14:07.510 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:07.510 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:07.510 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'column2'] = dfin.loc[:, 'column2'].replace(-1, np.nan)
2022-08-06 09:14:07.517 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:07.517 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:07.517 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'column2'] = dfin.loc[:, 'column2'].replace(-1, np.nan)
2022-08-06 09:14:07.524 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:07.524 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:07.525 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'column2'] = dfin.loc[:, 'column2'].replace(-1, np.nan)
2022-08-06 09:14:07.532 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:07.532 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:07.532 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'column2'] = dfin.loc[:, 'column2'].rolling(3).median()
2022-08-06 09:14:07.538 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:14:08.715 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.715 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.725 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.726 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.726 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.735 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.735 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.735 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.744 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.745 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.754 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.754 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.763 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.763 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.763 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.773 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.773 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.773 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.782 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.782 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.782 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.791 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.792 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.792 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.801 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.801 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.801 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.810 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.811 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.811 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.820 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.820 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.820 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.829 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.829 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.829 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.838 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.839 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.839 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.848 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.848 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.848 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.857 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.857 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.857 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.867 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.867 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.867 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.876 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.876 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.876 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.885 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.885 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.894 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:08.895 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 09:14:08.895 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:14:08.904 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:09.082 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'in column two choose median of previous 3 rows and assign back', 'user': 'u13'}, {'query': "in 'colum...
    │               └ {'queries': [{'query': 'in column two choose median of previous 3 rows and assign back', 'user': 'u13'}, {'query': "in 'colum...
    └ {'query': "replace column 'column2' with median of current entry and two entries above", 'user': 'u8'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a series with missing values ...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dff139050>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:14:09 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:14:09 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dff0ead10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:14:09.108 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:14:40.892 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:40.893 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin.groupby(['column1'])['column2'].transform(lambda x: x.rolling(3, min_periods=1).median())
2022-08-06 09:14:40.903 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:40.903 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:40.903 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(-4, np.nan)
2022-08-06 09:14:40.910 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:40.910 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:40.910 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(-2, np.nan)
2022-08-06 09:14:40.917 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:40.917 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:40.917 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(-2, np.median([-1, -2]))
2022-08-06 09:14:40.924 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:40.924 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:40.924 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin.groupby(['column1'])['column2'].transform(lambda x: x.fillna(x.median()))
2022-08-06 09:14:40.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:40.933 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:40.933 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(to_replace = -1, method = 'ffill', limit = 2)
2022-08-06 09:14:40.939 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:40.940 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:40.940 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin.groupby('column1')['column2'].transform(lambda x: x.replace(x, x.median()))
2022-08-06 09:14:40.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:40.941 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:40.942 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:,'column2'] = dfin.loc[:,'column2'].replace(-1, np.nan)
2022-08-06 09:14:40.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:40.949 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:40.949 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(-2, np.nan)
2022-08-06 09:14:40.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:40.956 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:40.956 | DEBUG    | __main__:run_benchmark:432 - dfin.column2 = np.where(dfin.index.isin([0, 1]), dfin.column2.median(), dfin.column2)
2022-08-06 09:14:40.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:40.963 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:40.963 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(-4, np.nan)
2022-08-06 09:14:40.970 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:40.970 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:40.970 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(-4, np.nan)
2022-08-06 09:14:40.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:40.977 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:40.977 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(-2, np.median([-1, -2]))
2022-08-06 09:14:40.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:40.985 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:40.985 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = np.where((dfin['column1'] > 50), np.median(dfin['column2'].iloc[0:3]), dfin['column2'])
2022-08-06 09:14:40.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:40.992 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:40.992 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(-2, np.nan)
2022-08-06 09:14:40.999 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:40.999 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:40.999 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(-4, np.nan)
2022-08-06 09:14:41.006 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:41.006 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:41.006 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(-4, np.nan)
2022-08-06 09:14:41.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:41.013 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:41.013 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin.groupby(['column1'])['column2'].transform(lambda x: x.replace(x, x.median()))
2022-08-06 09:14:41.015 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:41.015 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:41.015 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(-2, np.median([-1, -2]))
2022-08-06 09:14:41.022 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:41.022 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 09:14:41.022 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].replace(-4, np.median([-1, -2]))
2022-08-06 09:14:41.029 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:41.044 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 09:14:41.044 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 09:14:41.044 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 09:14:43.902 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 09:14:43.903 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:14:43.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:43.906 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 09:14:43.906 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:14:43.908 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:43.908 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 09:14:43.908 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:14:43.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:43.909 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 09:14:43.910 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:14:43.911 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:43.911 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 09:14:43.911 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:14:43.913 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:43.913 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 09:14:43.913 | DEBUG    | __main__:run_benchmark:432 - dfin1.join(dfin2.set_index(['Type2', 'Date2']), on=['Type1', 'Date1'], how='inner')
2022-08-06 09:14:43.930 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:43.930 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 09:14:43.930 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:14:43.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:43.931 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 09:14:43.932 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='right', on=['Type1', 'Date1'])
2022-08-06 09:14:43.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:43.933 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 09:14:43.934 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-06 09:14:43.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:14:46.087 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' where column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 09:14:46.088 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:14:46.091 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:46.091 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' where column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 09:14:46.091 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:14:46.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:46.093 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' where column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 09:14:46.093 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:14:46.094 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:46.094 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' where column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 09:14:46.095 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:14:46.096 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:46.096 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' where column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 09:14:46.096 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:14:46.098 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:46.098 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' where column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 09:14:46.098 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='right', on=['Type1', 'Date1'])
2022-08-06 09:14:46.099 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:46.100 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' where column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 09:14:46.100 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:14:46.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:46.101 | DEBUG    | __main__:run_benchmark:431 - Query: join 'dfin1' and 'dfin2' where column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-06 09:14:46.101 | DEBUG    | __main__:run_benchmark:432 - pd.merge(how='inner', left=dfin1, right=dfin2, left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-06 09:14:46.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:14:48.395 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.395 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'] == dfin2['Date2']]
2022-08-06 09:14:48.409 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.409 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.409 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 09:14:48.423 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.424 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.424 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 09:14:48.438 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.438 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.438 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'] == dfin2['Date2']]
2022-08-06 09:14:48.450 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.450 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.450 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'].to_list())]
2022-08-06 09:14:48.464 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.464 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.465 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'] == dfin2['Date2']]
2022-08-06 09:14:48.476 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.476 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.477 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'] == dfin2['Date2']]
2022-08-06 09:14:48.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.489 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.489 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['Date1'] == dfin2['Date2']]
2022-08-06 09:14:48.501 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.501 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.501 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'] == dfin2['Date2']]
2022-08-06 09:14:48.513 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.513 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.513 | DEBUG    | __main__:run_benchmark:432 - dfin1 = dfin1[dfin1['Date1'] == dfin2['Date2']]
2022-08-06 09:14:48.522 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.522 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.522 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'].unique().tolist())]
2022-08-06 09:14:48.536 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.537 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.537 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'] == dfin2['Date2']]
2022-08-06 09:14:48.549 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.549 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.549 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'] == dfin2['Date2']]
2022-08-06 09:14:48.561 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.561 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.561 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 09:14:48.575 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.575 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.576 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'] == dfin2['Date2']]
2022-08-06 09:14:48.587 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.588 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.588 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'] == dfin2['Date2']]
2022-08-06 09:14:48.599 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.600 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.600 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'] == dfin2['Date2'].iloc[0]]
2022-08-06 09:14:48.612 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.612 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.612 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 09:14:48.626 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.626 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.626 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'] == dfin2['Date2']]
2022-08-06 09:14:48.638 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:48.638 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 09:14:48.638 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'] == dfin2['Date2']]
2022-08-06 09:14:48.650 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.370 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.371 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:14:51.374 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.374 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.374 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 09:14:51.387 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.387 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.387 | DEBUG    | __main__:run_benchmark:432 - (dfin1.Type1 == dfin2.Type2) & (dfin1.Date1 == dfin2.Date2)
2022-08-06 09:14:51.399 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.399 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.399 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Type2', 'Date1', 'Date2'])
2022-08-06 09:14:51.401 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.401 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.401 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 09:14:51.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.403 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.403 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 09:14:51.415 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.415 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.415 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Type2', 'Date1', 'Date2'], how='inner')
2022-08-06 09:14:51.417 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.417 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.417 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 09:14:51.432 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.432 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.432 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Type2', 'Date1', 'Date2'])
2022-08-06 09:14:51.434 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.434 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.434 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Type1'] == dfin2['Type2']]
2022-08-06 09:14:51.446 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.446 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.446 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Type1'] == dfin2['Type2']][dfin1['Date1'] == dfin2['Date2']]
2022-08-06 09:14:51.459 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.459 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.459 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:14:51.461 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.461 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.461 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Type1'] == dfin2['Type2']]
2022-08-06 09:14:51.473 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.473 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.473 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Type2', 'Date1', 'Date2'], how='inner')
2022-08-06 09:14:51.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.475 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.475 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Type1'] == dfin2['Type2']]
2022-08-06 09:14:51.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.487 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.487 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 09:14:51.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.489 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.489 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:14:51.490 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.491 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.491 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, how='inner', on=['Type1', 'Type2', 'Date1', 'Date2'])
2022-08-06 09:14:51.492 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.492 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.493 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, how='inner', on=['Type1', 'Type2', 'Date1', 'Date2'])
2022-08-06 09:14:51.494 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:51.494 | DEBUG    | __main__:run_benchmark:431 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-06 09:14:51.495 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Type2', 'Date1', 'Date2'], how='inner')
2022-08-06 09:14:51.496 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:54.278 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 09:14:54.279 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 09:14:54.292 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:54.292 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 09:14:54.293 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])]
2022-08-06 09:14:54.304 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:54.305 | DEBUG    | __main__:run_benchmark:431 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-06 09:14:54.305 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, how='inner', left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-06 09:14:54.322 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:14:54.339 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 09:14:54.340 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 09:14:56.499 | DEBUG    | __main__:run_benchmark:431 - Query: merge columns on "lkey" dfin1 and "rkey" dfin2
2022-08-06 09:14:56.499 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, left_on='lkey', right_on='rkey')
2022-08-06 09:14:56.516 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:14:56.534 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 09:14:58.230 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.231 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:58.231 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.232 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.232 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:58.232 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.232 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.232 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:58.232 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.233 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.233 | DEBUG    | __main__:run_benchmark:432 - #  and return a DataFrame
2022-08-06 09:14:58.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.233 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.233 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:58.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.233 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.233 | DEBUG    | __main__:run_benchmark:432 - #  using the merge function
2022-08-06 09:14:58.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.233 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.234 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:58.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.234 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.234 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:58.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.234 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.234 | DEBUG    | __main__:run_benchmark:432 - #  and return the result
2022-08-06 09:14:58.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.234 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.235 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:58.235 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.235 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.235 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:58.235 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.235 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.235 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:58.235 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.235 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.235 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:58.236 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.236 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.236 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:58.236 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.236 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.236 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:58.236 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.236 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.236 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:58.237 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.237 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.237 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:58.237 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.237 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.237 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:58.237 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.237 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.237 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:58.238 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:58.238 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:58.238 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:58.238 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:59.794 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:59.794 | DEBUG    | __main__:run_benchmark:432 - #  and return a new dataframe
2022-08-06 09:14:59.795 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:59.796 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:59.796 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:59.797 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:59.798 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:59.798 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:59.799 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:59.800 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:59.800 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:14:59.801 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:14:59.801 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 09:14:59.802 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, left_on='left_key', right_on='right_key')
2022-08-06 09:14:59.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:14:59.870 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 09:15:02.707 | DEBUG    | __main__:run_benchmark:431 - Query: join dfin1 and dfin2 on column 'Type1'=='Type2' && 'Date1'=='Date2'
2022-08-06 09:15:02.707 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:15:02.708 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:02.709 | DEBUG    | __main__:run_benchmark:431 - Query: join dfin1 and dfin2 on column 'Type1'=='Type2' && 'Date1'=='Date2'
2022-08-06 09:15:02.709 | DEBUG    | __main__:run_benchmark:432 - dfin1.join(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:15:02.718 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:02.719 | DEBUG    | __main__:run_benchmark:431 - Query: join dfin1 and dfin2 on column 'Type1'=='Type2' && 'Date1'=='Date2'
2022-08-06 09:15:02.720 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:15:02.729 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:02.730 | DEBUG    | __main__:run_benchmark:431 - Query: join dfin1 and dfin2 on column 'Type1'=='Type2' && 'Date1'=='Date2'
2022-08-06 09:15:02.730 | DEBUG    | __main__:run_benchmark:432 - pd.merge(how='left', left=dfin1, right=dfin2, on=['Type1', 'Date1'])
2022-08-06 09:15:02.738 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:02.739 | DEBUG    | __main__:run_benchmark:431 - Query: join dfin1 and dfin2 on column 'Type1'=='Type2' && 'Date1'=='Date2'
2022-08-06 09:15:02.739 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='left', left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-06 09:15:02.771 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:02.771 | DEBUG    | __main__:run_benchmark:431 - Query: join dfin1 and dfin2 on column 'Type1'=='Type2' && 'Date1'=='Date2'
2022-08-06 09:15:02.772 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin1.merge(dfin2, how='inner', left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-06 09:15:02.790 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:05.646 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.647 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 09:15:05.651 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.652 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.652 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 09:15:05.658 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.658 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.659 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin1[(dfin1['Type1'] == dfin2['Type2']) & (dfin1['Date1'] == dfin2['Date2'])], dfin2[(dfin1['Type1'] == dfin2['Type
2022-08-06 09:15:05.659 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.660 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.660 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 09:15:05.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.666 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.666 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:15:05.671 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.672 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.672 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 09:15:05.677 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.678 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.678 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 09:15:05.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.682 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.682 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:15:05.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.686 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.686 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 09:15:05.689 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.689 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.690 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:15:05.692 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.692 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.693 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 09:15:05.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.695 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.695 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 09:15:05.698 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.698 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.698 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 09:15:05.700 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.700 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.700 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 09:15:05.702 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.703 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.703 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 09:15:05.705 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.705 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.705 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 09:15:05.707 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.707 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.707 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:15:05.709 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.709 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.709 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on=['Type1', 'Date1'])
2022-08-06 09:15:05.711 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.711 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.711 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 09:15:05.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.713 | DEBUG    | __main__:run_benchmark:431 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-06 09:15:05.713 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', on=['Type1', 'Date1'])
2022-08-06 09:15:05.714 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:05.730 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 09:15:05.730 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 09:15:05.730 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:15:07.244 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.245 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 09:15:07.259 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.259 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.259 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 09:15:07.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.272 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.272 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 09:15:07.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.285 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.285 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 09:15:07.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.298 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.298 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'], inplace=True)
2022-08-06 09:15:07.307 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.307 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.307 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 09:15:07.320 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.320 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.320 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 09:15:07.333 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.333 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.333 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 09:15:07.346 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.346 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.346 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'], inplace=True)
2022-08-06 09:15:07.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.355 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.355 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 09:15:07.367 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.367 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.368 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 09:15:07.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.380 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.381 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 09:15:07.393 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.393 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.393 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'], inplace=True)
2022-08-06 09:15:07.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.402 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.402 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 09:15:07.415 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.415 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.415 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 09:15:07.428 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.428 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.428 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 09:15:07.441 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.441 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.441 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 09:15:07.454 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.454 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.454 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 09:15:07.466 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.467 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.467 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 09:15:07.479 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.479 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 09:15:07.479 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'], inplace=True)
2022-08-06 09:15:07.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:07.505 | DEBUG    | __main__:run:515 - Number of queries: 23
2022-08-06 09:15:09.192 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0
2022-08-06 09:15:09.193 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 33.0}, inplace=True)
2022-08-06 09:15:09.204 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:10.602 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 09:15:10.602 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 09:15:10.613 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:10.613 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 09:15:10.613 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:10.622 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:10.622 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 09:15:10.623 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 09:15:10.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:10.632 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-06 09:15:10.632 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 33.0})
2022-08-06 09:15:10.648 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:12.378 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.379 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:12.394 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.394 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.394 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].fillna(11.0)
2022-08-06 09:15:12.403 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.404 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.404 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:12.417 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.418 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.418 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:12.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.431 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.432 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:12.445 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.445 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.445 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:12.459 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.459 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.459 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:12.473 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.473 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.473 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:12.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.487 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.487 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:12.500 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.501 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.501 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:12.514 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.515 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.515 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:12.528 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.528 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.529 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:12.538 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.538 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.538 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:12.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.552 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.552 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:12.566 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.566 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.566 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:12.579 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.580 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.580 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:12.593 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.594 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.594 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0}, inplace=True)
2022-08-06 09:15:12.603 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.603 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.603 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:12.617 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.617 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.617 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:12.631 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:12.631 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 09:15:12.631 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:12.645 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.197 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.198 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:14.213 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.213 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.213 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:14.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.227 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.227 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:14.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.241 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.241 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:14.254 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.254 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.255 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:14.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.268 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.268 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:14.277 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.278 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.278 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0}, inplace=True)
2022-08-06 09:15:14.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.287 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.288 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:14.301 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.301 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.301 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:14.315 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.315 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.315 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:14.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.325 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.325 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:14.338 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.338 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.339 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:14.348 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.348 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.348 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:14.362 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.362 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.362 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:14.375 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.376 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.376 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:14.389 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.389 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.390 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:14.403 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.403 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.403 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:14.417 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.417 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.417 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:14.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.431 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.431 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:14.445 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:14.445 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 09:15:14.445 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:14.458 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:15.984 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:15.985 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:16.038 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.038 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.039 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 09:15:16.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.052 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.052 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:16.062 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.063 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.063 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:16.076 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.076 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.076 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:16.090 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.090 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.090 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:16.104 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.104 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.104 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:16.117 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.118 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.118 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0}, inplace=True)
2022-08-06 09:15:16.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.127 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.127 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 09:15:16.136 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.137 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.137 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:16.150 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.150 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.151 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:16.164 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.164 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.164 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:16.178 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.178 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.178 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:16.191 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.192 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.192 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:16.201 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.201 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.201 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:16.215 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.215 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.215 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:16.224 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.224 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.225 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:16.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.234 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.234 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:16.247 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.248 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.248 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:16.261 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:16.261 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 09:15:16.261 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:16.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.689 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.689 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:17.700 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.700 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.700 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:17.714 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.714 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.714 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:17.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.731 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.731 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:17.741 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.741 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.741 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:17.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.755 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.755 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:17.768 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.768 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.769 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:17.778 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.778 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.778 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:17.792 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.792 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.792 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:17.805 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.806 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.806 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0}, inplace=True)
2022-08-06 09:15:17.815 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.815 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.815 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:17.829 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.829 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.829 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:17.839 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.839 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.839 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:17.848 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.848 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.849 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:17.862 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.862 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.862 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:17.876 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.876 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.876 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:17.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.890 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.890 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:17.904 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.904 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.904 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:17.917 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.918 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.918 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:17.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:17.931 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 09:15:17.932 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:17.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.529 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.530 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:19.540 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.540 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.540 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:19.549 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.549 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.549 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:19.558 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.559 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.559 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:19.568 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.568 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.568 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:19.577 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.577 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.577 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:19.586 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.587 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.587 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:19.596 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.596 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.596 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:19.605 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.605 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.606 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:19.615 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.615 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.615 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13})
2022-08-06 09:15:19.628 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.628 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.629 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:19.638 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.638 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.638 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:19.647 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.647 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.647 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:19.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.656 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.656 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:19.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.665 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.665 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:19.674 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.674 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.675 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:19.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.684 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.684 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13})
2022-08-06 09:15:19.697 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.697 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.698 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:19.707 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.707 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.707 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:19.716 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:19.716 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 09:15:19.716 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:19.725 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.574 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.575 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:21.585 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.586 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.586 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:21.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.595 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.595 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:21.604 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.604 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.605 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:21.613 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.614 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.614 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:21.623 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.623 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.623 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:21.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.632 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.632 | DEBUG    | __main__:run_benchmark:432 - dfin.where((dfin['phi'].isnull() | dfin['omega'].isnull()), 11.0, 13)
2022-08-06 09:15:21.634 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.634 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.634 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:21.643 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.643 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.644 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:21.653 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.653 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.653 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:21.662 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.662 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.663 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:21.672 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.672 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.672 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:21.681 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.681 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.681 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:21.690 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.690 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.691 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:21.700 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.700 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.700 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:21.709 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.710 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.710 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11.0, 'omega': 13})
2022-08-06 09:15:21.723 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.723 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.724 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:21.733 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.733 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.733 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:21.742 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.742 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.742 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:21.752 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:21.752 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 09:15:21.753 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11.0, inplace=True)
2022-08-06 09:15:21.764 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:23.980 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:23.981 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 09:15:24.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.034 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.034 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ['phi', 'omega']] = (11.0, 13.0)
2022-08-06 09:15:24.048 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.048 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.048 | DEBUG    | __main__:run_benchmark:432 - #  replace 'NaN' with (1.0, 1.0) if column is ('mu', 'delta')
2022-08-06 09:15:24.048 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.048 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.048 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ['phi', 'omega']] = (11.0, 13.0)
2022-08-06 09:15:24.059 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.059 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.059 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ['phi', 'omega']] = (11.0, 13.0)
2022-08-06 09:15:24.069 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.069 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.069 | DEBUG    | __main__:run_benchmark:432 - #  replace 'NaN' with (1.0, 1.0) if column is ('mu', 'delta')
2022-08-06 09:15:24.069 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.070 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.070 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ['phi', 'omega']] = (11.0, 13.0)
2022-08-06 09:15:24.079 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.080 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.080 | DEBUG    | __main__:run_benchmark:432 - #  replace 'NaN' with (0.0, 0.0) if column is ('mu', 'delta')
2022-08-06 09:15:24.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.080 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.080 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ['phi', 'omega']] = (11.0, 13.0)
2022-08-06 09:15:24.090 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.090 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.090 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ['phi', 'omega']] = (11.0, 13.0)
2022-08-06 09:15:24.100 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.100 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.100 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ['phi', 'omega']].fillna((11.0, 13.0))
2022-08-06 09:15:24.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.102 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.102 | DEBUG    | __main__:run_benchmark:432 - #  replace 'NaN' with (0.0, 0.0) if column is ('mu', 'delta')
2022-08-06 09:15:24.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.102 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.103 | DEBUG    | __main__:run_benchmark:432 - #  replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.103 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.103 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.103 | DEBUG    | __main__:run_benchmark:432 - #  replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.103 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.103 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.103 | DEBUG    | __main__:run_benchmark:432 - #  replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.103 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.103 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.104 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(slice(None), ['phi', 'omega']), :].replace(np.nan, (11.0, 13.0))
2022-08-06 09:15:24.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.105 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.105 | DEBUG    | __main__:run_benchmark:432 - #  replace 'NaN' with (1.0, 1.0) if column is ('delta', 'omega')
2022-08-06 09:15:24.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.106 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.106 | DEBUG    | __main__:run_benchmark:432 - #  replace 'NaN' with (0.0, 0.0) if column is ('mu', 'delta')
2022-08-06 09:15:24.106 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.106 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.106 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ['phi', 'omega']] = (11.0, 13.0)
2022-08-06 09:15:24.116 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:24.116 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 09:15:24.116 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ['phi', 'omega']] = (11.0, 13.0)
2022-08-06 09:15:24.126 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:26.051 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of difn with value '33.0'
2022-08-06 09:15:26.052 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'phi': {None: 11.0}, 'omega': {None: 33.0}}, inplace=True)
2022-08-06 09:15:26.095 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:26.096 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of difn with value '33.0'
2022-08-06 09:15:26.096 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:26.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:26.112 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of difn with value '33.0'
2022-08-06 09:15:26.112 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(inplace=True, value={'phi': 11.0, 'omega': 33.0})
2022-08-06 09:15:26.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:27.583 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of dfin with value '33.0'
2022-08-06 09:15:27.584 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:27.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:27.595 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of dfin with value '33.0'
2022-08-06 09:15:27.595 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'phi': {None: 11.0}, 'omega': {None: 33.0}}, inplace=True)
2022-08-06 09:15:27.604 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:27.604 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of dfin with value '33.0'
2022-08-06 09:15:27.605 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 33.0})
2022-08-06 09:15:27.617 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:28.799 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of dfinn with value '33.0'
2022-08-06 09:15:28.800 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'phi': {None: 11.0}, 'omega': {None: 33.0}}, inplace=True)
2022-08-06 09:15:28.810 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:28.810 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of dfinn with value '33.0'
2022-08-06 09:15:28.810 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:28.819 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:28.819 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of dfinn with value '33.0'
2022-08-06 09:15:28.820 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 09:15:28.830 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:28.830 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of dfinn with value '33.0'
2022-08-06 09:15:28.830 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(inplace=True, value={'phi': 11.0, 'omega': 33.0})
2022-08-06 09:15:28.842 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:30.495 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' by 11 and nan in column 'omega' by 33
2022-08-06 09:15:30.496 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11, 'omega': 33})
2022-08-06 09:15:30.510 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:32.173 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 09:15:32.174 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['phi'].isnull(), 'phi'] = 11
2022-08-06 09:15:32.216 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:32.216 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 09:15:32.217 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11, 'omega': 33})
2022-08-06 09:15:32.236 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:33.622 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 09:15:33.623 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].fillna(11)
2022-08-06 09:15:33.634 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:33.634 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 09:15:33.634 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11, inplace=True)
2022-08-06 09:15:33.643 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:33.643 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 09:15:33.643 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11, inplace=True)
2022-08-06 09:15:33.652 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:33.652 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 09:15:33.653 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].fillna(11)
2022-08-06 09:15:33.662 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:33.662 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 09:15:33.662 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11, inplace=True)
2022-08-06 09:15:33.671 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:33.671 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 09:15:33.671 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11, inplace=True)
2022-08-06 09:15:33.681 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:33.681 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 09:15:33.681 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11, inplace=True)
2022-08-06 09:15:33.690 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:33.690 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-06 09:15:33.690 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11, 'omega': 33})
2022-08-06 09:15:33.703 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:35.009 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-06 09:15:35.010 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11, inplace=True)
2022-08-06 09:15:35.051 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:35.051 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-06 09:15:35.051 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11, inplace=True)
2022-08-06 09:15:35.067 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:35.067 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-06 09:15:35.067 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(11, inplace=True)
2022-08-06 09:15:35.078 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:35.079 | DEBUG    | __main__:run_benchmark:431 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-06 09:15:35.079 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 11, 'omega': 33}, inplace=True)
2022-08-06 09:15:35.088 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:35.107 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:15:36.522 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaNs in column 'mu' with 24 and NaNs in column 'delta' with 45
2022-08-06 09:15:36.523 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'mu': 24, 'delta': 45}, inplace=True)
2022-08-06 09:15:36.533 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:36.552 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 09:15:38.315 | DEBUG    | __main__:run_benchmark:431 - Query: replace all 'Nan' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17.0
2022-08-06 09:15:38.316 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'omega': {np.nan: 23.0}, 'pi': {np.nan: 17.0}})
2022-08-06 09:15:38.367 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:39.803 | DEBUG    | __main__:run_benchmark:431 - Query: replace all 'NaN' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17.0
2022-08-06 09:15:39.804 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0}, inplace=True)
2022-08-06 09:15:39.814 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:41.471 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' with 23.0 and replace 'NaN' in 'pi' with 17.0
2022-08-06 09:15:41.472 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'NaN': {'omega': 23.0, 'pi': 17.0}}, inplace=True)
2022-08-06 09:15:41.482 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:41.482 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' with 23.0 and replace 'NaN' in 'pi' with 17.0
2022-08-06 09:15:41.482 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-06 09:15:41.494 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:42.886 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in column 'omega' with 23.0 and replace 'NaN' in column 'pi' with 17.0
2022-08-06 09:15:42.887 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'NaN': {'omega': 23.0, 'pi': 17.0}}, inplace=True)
2022-08-06 09:15:42.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:42.898 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in column 'omega' with 23.0 and replace 'NaN' in column 'pi' with 17.0
2022-08-06 09:15:42.898 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-06 09:15:42.910 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:44.936 | DEBUG    | __main__:run_benchmark:431 - Query: replace all value of 'NaN' in column 'omega' with 23.0 and all values of 'NaN' in column 'pi' with 17.0
2022-08-06 09:15:44.937 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'NaN': {'omega': 23.0, 'pi': 17.0}})
2022-08-06 09:15:44.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:44.951 | DEBUG    | __main__:run_benchmark:431 - Query: replace all value of 'NaN' in column 'omega' with 23.0 and all values of 'NaN' in column 'pi' with 17.0
2022-08-06 09:15:44.951 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-06 09:15:44.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:46.423 | DEBUG    | __main__:run_benchmark:431 - Query: Replace nan in column 'omega' with 23.0 and column 'pi' with 17
2022-08-06 09:15:46.424 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17})
2022-08-06 09:15:46.438 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:47.856 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 09:15:47.857 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 09:15:47.867 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:47.867 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 09:15:47.867 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 09:15:47.877 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:47.877 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 09:15:47.877 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 09:15:47.886 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:47.886 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 09:15:47.886 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 09:15:47.895 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:47.896 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 09:15:47.896 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'nan': 23, 'pi': {'nan': 17}})
2022-08-06 09:15:47.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:47.897 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 09:15:47.897 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({np.nan: 23, np.nan: 17}, inplace=True)
2022-08-06 09:15:47.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:47.906 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 09:15:47.906 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'] = dfin['omega'].fillna(23)
2022-08-06 09:15:47.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:47.916 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 09:15:47.916 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 09:15:47.925 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:47.925 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 09:15:47.925 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 09:15:47.935 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:47.935 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 09:15:47.935 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 09:15:47.944 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:47.945 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 09:15:47.945 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(to_replace={np.nan: 23, np.nan: 17})
2022-08-06 09:15:47.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:47.958 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 09:15:47.958 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 09:15:47.967 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:47.968 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-06 09:15:47.968 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'omega': {np.nan: 23}, 'pi': {np.nan: 17}})
2022-08-06 09:15:47.980 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:49.058 | DEBUG    | __main__:run_benchmark:431 - Query: Replace nan with 23 in column 'omega' and with 17 in column 'pi'
2022-08-06 09:15:49.058 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'] = dfin['omega'].fillna(23)
2022-08-06 09:15:49.071 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:49.071 | DEBUG    | __main__:run_benchmark:431 - Query: Replace nan with 23 in column 'omega' and with 17 in column 'pi'
2022-08-06 09:15:49.071 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23, 'pi': 17})
2022-08-06 09:15:49.084 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:50.894 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaN with 23.0 in column 'omega' and NaN with 17.0 in column 'pi'
2022-08-06 09:15:50.895 | DEBUG    | __main__:run_benchmark:432 - dfin['omega'].fillna(23.0, inplace=True)
2022-08-06 09:15:50.905 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:50.905 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaN with 23.0 in column 'omega' and NaN with 17.0 in column 'pi'
2022-08-06 09:15:50.905 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(to_replace={'omega': np.nan, 'pi': np.nan}, value={'omega': 23.0, 'pi': 17.0})
2022-08-06 09:15:50.918 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:52.431 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'NaN' with '23.0' in column 'omega' and 'NaN' with '17.0' in column 'pi'
2022-08-06 09:15:52.432 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({np.nan: {'omega': 23.0, 'pi': 17.0}}, inplace=True)
2022-08-06 09:15:52.475 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:52.475 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'NaN' with '23.0' in column 'omega' and 'NaN' with '17.0' in column 'pi'
2022-08-06 09:15:52.475 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-06 09:15:52.496 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:53.861 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 09:15:53.862 | DEBUG    | __main__:run_benchmark:432 - dfin.omega.fillna(23, inplace=True)
2022-08-06 09:15:53.872 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:15:53.872 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-06 09:15:53.872 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'omega': 23, 'pi': 17})
2022-08-06 09:15:53.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:15:53.904 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:15:54.062 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "replace nan in column 'phi' with 10 and nan in column 'mu' with 20", 'user': 'u7'}], 'ios': [{'inputs...
    │               └ {'queries': [{'query': "replace nan in column 'phi' with 10 and nan in column 'mu' with 20", 'user': 'u7'}], 'ios': [{'inputs...
    └ {'query': "replace nan in column 'phi' with 10 and nan in column 'mu' with 20", 'user': 'u7'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ["#  Use the following code example as a guide to write code for the comment below\n\n#  Return a dataframe with 2 columns an...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dff02ed50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:15:54 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:15:54 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dfe5d97d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:15:54.088 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:16:25.434 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.435 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 09:16:25.452 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.452 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.453 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20}, inplace=True)
2022-08-06 09:16:25.463 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.463 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.463 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 09:16:25.476 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.477 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.477 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(10)
2022-08-06 09:16:25.490 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.490 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.490 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20}, inplace=True)
2022-08-06 09:16:25.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.500 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.500 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 09:16:25.513 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.513 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.513 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(10, inplace=True)
2022-08-06 09:16:25.522 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.523 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.523 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20}, inplace=True)
2022-08-06 09:16:25.532 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.532 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.532 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 09:16:25.545 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.546 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.546 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 09:16:25.559 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.559 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.559 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(value={'phi': 10, 'mu': 20})
2022-08-06 09:16:25.573 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.573 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.573 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 09:16:25.586 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.586 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.587 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(10, inplace=True)
2022-08-06 09:16:25.596 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.596 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.596 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(10, inplace=True)
2022-08-06 09:16:25.605 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.605 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.605 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 09:16:25.619 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.619 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.619 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 09:16:25.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.632 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.632 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 09:16:25.646 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.646 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.646 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 09:16:25.659 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.659 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.659 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 09:16:25.673 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.673 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 09:16:25.673 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(10, inplace=True)
2022-08-06 09:16:25.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:25.700 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 09:16:25.700 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 09:16:25.700 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 09:16:27.690 | DEBUG    | __main__:run_benchmark:431 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-06 09:16:27.690 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'location': {'United States': 'US'}, 'zip': {3434: 4343}})
2022-08-06 09:16:27.737 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:16:29.868 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'United States' in column 'location' with 'US' and '3434' in column 'zip' with column 'zip' with '4343'
2022-08-06 09:16:29.869 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'location': 'United States', 'zip': 3434}, {'location': 'US', 'zip': 4343})
2022-08-06 09:16:29.913 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:16:31.637 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.638 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = dfin.loc[dfin['location'] == 'UK', 'zip'].replace(3434, 4343)
2022-08-06 09:16:31.677 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.677 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.677 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = 4343
2022-08-06 09:16:31.691 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.692 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.692 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'United States', 'location'] = 'US'
2022-08-06 09:16:31.702 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.702 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.702 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'].replace('3434', '4343')
2022-08-06 09:16:31.711 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.711 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.711 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = 4343
2022-08-06 09:16:31.718 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.718 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.718 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = dfin.loc[dfin['location'] == 'UK', 'zip'].replace(3434, 4343)
2022-08-06 09:16:31.726 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.726 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.726 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = 4343
2022-08-06 09:16:31.733 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.734 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.734 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['location'] == 'UK'), 'zip'] = 4343
2022-08-06 09:16:31.741 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.741 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.741 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = 4343
2022-08-06 09:16:31.748 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.748 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.749 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = dfin.loc[dfin['location'] == 'UK', 'zip'].replace(3434, 4343)
2022-08-06 09:16:31.756 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.756 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.757 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = dfin.loc[dfin['location'] == 'UK', 'zip'].replace(3434, 4343)
2022-08-06 09:16:31.764 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.764 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.765 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = dfin.loc[dfin['location'] == 'UK', 'zip'].replace(3434, 4343)
2022-08-06 09:16:31.772 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.772 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.773 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'].replace('3434', '4343')
2022-08-06 09:16:31.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.780 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.780 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = 4343
2022-08-06 09:16:31.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.787 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.788 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'].replace(to_replace='3434', value='4343')
2022-08-06 09:16:31.795 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.795 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.795 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = 4343
2022-08-06 09:16:31.802 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.802 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.803 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = 4343
2022-08-06 09:16:31.810 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.810 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.810 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'].replace(to_replace=3434, value=4343)
2022-08-06 09:16:31.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.818 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.818 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'].replace('3434', '4343')
2022-08-06 09:16:31.825 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:31.825 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 09:16:31.825 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', 'zip'] = dfin.loc[dfin['location'] == 'UK', 'zip'].replace(3434, 4343)
2022-08-06 09:16:31.833 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.390 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.391 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].mask((dfin['location'] == 'United States'), 'US', inplace=True)
2022-08-06 09:16:33.399 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.400 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.400 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('United States', 'US')
2022-08-06 09:16:33.410 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.410 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.411 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 09:16:33.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.418 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.418 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(to_replace='United States', value='US', inplace=True)
2022-08-06 09:16:33.426 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.426 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.426 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 09:16:33.433 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.433 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.433 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 09:16:33.441 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.441 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.441 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US', inplace=True)
2022-08-06 09:16:33.448 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.449 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.449 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 09:16:33.456 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.456 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.456 | DEBUG    | __main__:run_benchmark:432 - dfin['location'] = dfin['location'].replace('United States', 'US')
2022-08-06 09:16:33.463 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.464 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.464 | DEBUG    | __main__:run_benchmark:432 - dfin.location.replace('United States', 'US')
2022-08-06 09:16:33.471 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.471 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.471 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 09:16:33.479 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.479 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.479 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 09:16:33.486 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.486 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.487 | DEBUG    | __main__:run_benchmark:432 - dfin['location'] = dfin['location'].replace('United States', 'US')
2022-08-06 09:16:33.494 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.494 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.494 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'United States', 'location'] = 'US'
2022-08-06 09:16:33.502 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.502 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.502 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 09:16:33.509 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.509 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.510 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 09:16:33.517 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.517 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.517 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'location': 'United States'}, 'US', inplace=True)
2022-08-06 09:16:33.525 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.525 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.525 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'location': {'United States': 'US'}}, inplace=True)
2022-08-06 09:16:33.535 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.535 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.536 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 09:16:33.543 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:33.543 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 09:16:33.543 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].str.replace('United States', 'US')
2022-08-06 09:16:33.550 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.600 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.600 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].str.replace('United States', 'US').str.replace('3434', '4343')
2022-08-06 09:16:35.618 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.618 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.619 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US').replace('3434', '4343')
2022-08-06 09:16:35.635 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.636 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.636 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 09:16:35.647 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.648 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.648 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 09:16:35.657 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.657 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.657 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 09:16:35.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.665 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.665 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'location': {'United States': 'US'}, 'zip': {'3434': '4343'}})
2022-08-06 09:16:35.676 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.676 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.676 | DEBUG    | __main__:run_benchmark:432 - dfin.location = dfin.location.apply(lambda x: 'US' if x == 'United States' else x)
2022-08-06 09:16:35.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.684 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.684 | DEBUG    | __main__:run_benchmark:432 - dfin.location = dfin.location.apply(lambda x: 'US' if x == 'United States' else x)
2022-08-06 09:16:35.691 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.691 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.691 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].str.replace('United States', 'US').fillna("[{'name': 'nashi'}]")
2022-08-06 09:16:35.699 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.699 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.699 | DEBUG    | __main__:run_benchmark:432 - dfin.location.str.replace('United States', 'US').str.replace('3434', '4343')
2022-08-06 09:16:35.706 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.707 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.707 | DEBUG    | __main__:run_benchmark:432 - dfin.location = dfin.location.apply(lambda x: 'US' if x == 'United States' else x)
2022-08-06 09:16:35.714 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.714 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.714 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 09:16:35.721 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.722 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.722 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'United States', 'location'] = 'US'
2022-08-06 09:16:35.729 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.729 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.729 | DEBUG    | __main__:run_benchmark:432 - dfin.location.replace('United States', 'US')
2022-08-06 09:16:35.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.736 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.737 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 09:16:35.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.744 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.744 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'location': 'country', 'zip': 'zipcode'})
2022-08-06 09:16:35.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.754 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.754 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'location': {'United States': 'US'}, 'zip': {'3434': '4343'}})
2022-08-06 09:16:35.765 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.765 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.765 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:16:35.765 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.766 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.766 | DEBUG    | __main__:run_benchmark:432 - dfin.location = dfin.location.apply(lambda x: 'US' if x == 'United States' else x)
2022-08-06 09:16:35.773 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.773 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 09:16:35.773 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'United States': 'US', '3434': '4343'})
2022-08-06 09:16:35.784 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:35.803 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:16:37.497 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 09:16:37.498 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(to_replace=['India', 'London'], value=['IN', 'LON'], inplace=False)
2022-08-06 09:16:37.510 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:37.510 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 09:16:37.510 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(to_replace = 'India', value = 'IN')
2022-08-06 09:16:37.521 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:37.521 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 09:16:37.521 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(to_replace = 'India', value = 'IN', inplace = True)
2022-08-06 09:16:37.529 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:37.529 | DEBUG    | __main__:run_benchmark:431 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-06 09:16:37.529 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(to_replace = {'country': 'India', 'city': 'London'}, value = {'country': 'IN', 'city': 'LON'})
2022-08-06 09:16:37.540 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:16:37.560 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 09:16:39.533 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'London' in column 'city' with 'LON' and 'India' in column 'country' with 'IN'
2022-08-06 09:16:39.533 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='India', value='IN')
2022-08-06 09:16:39.542 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:39.542 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'London' in column 'city' with 'LON' and 'India' in column 'country' with 'IN'
2022-08-06 09:16:39.543 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'city': 'London', 'country': 'India'}, {'city': 'LON', 'country': 'IN'})
2022-08-06 09:16:39.553 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:16:41.604 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'London' in column 'city' with 'LON', and 'India' in column 'country' with 'IN'
2022-08-06 09:16:41.605 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('India', 'IN').replace('London', 'LON')
2022-08-06 09:16:41.615 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:41.615 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'London' in column 'city' with 'LON', and 'India' in column 'country' with 'IN'
2022-08-06 09:16:41.615 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(inplace=True, to_replace=['London', 'India'], value=['LON', 'IN'])
2022-08-06 09:16:41.623 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:41.623 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'London' in column 'city' with 'LON', and 'India' in column 'country' with 'IN'
2022-08-06 09:16:41.624 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'city': 'London', 'country': 'India'}, {'city': 'LON', 'country': 'IN'}, inplace=True)
2022-08-06 09:16:41.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:16:43.353 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values 'London' in column 'city' with 'LON', and values 'India' in column 'country' with 'IN'
2022-08-06 09:16:43.354 | DEBUG    | __main__:run_benchmark:432 - dfin['city'].replace('London', 'LON').replace('India', 'IN')
2022-08-06 09:16:43.362 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:43.363 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values 'London' in column 'city' with 'LON', and values 'India' in column 'country' with 'IN'
2022-08-06 09:16:43.363 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(inplace=True, to_replace={'city': 'London', 'country': 'India'}, value={'city': 'LON', 'country': 'IN'})
2022-08-06 09:16:43.371 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:16:45.416 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values 'London' in column 'city' with 'LON', and values 'India' in column 'country' with 'IN'. df name dfin
2022-08-06 09:16:45.417 | DEBUG    | __main__:run_benchmark:432 - dfin['city'].replace('London', 'LON').replace('India', 'IN')
2022-08-06 09:16:45.426 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:45.426 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values 'London' in column 'city' with 'LON', and values 'India' in column 'country' with 'IN'. df name dfin
2022-08-06 09:16:45.426 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'city': 'London', 'country': 'India'}, {'city': 'LON', 'country': 'IN'})
2022-08-06 09:16:45.437 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:16:45.456 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 09:16:45.456 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 09:16:47.019 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.020 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 09:16:47.068 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.069 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.069 | DEBUG    | __main__:run_benchmark:432 - dfin['country'] = dfin['country'].replace('France', 'FR')
2022-08-06 09:16:47.081 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.082 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.082 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR', inplace=True)
2022-08-06 09:16:47.091 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.092 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.092 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, 'FR')
2022-08-06 09:16:47.103 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.103 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.103 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 09:16:47.111 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.111 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.111 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:47.119 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.119 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.119 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, {'country': 'FR'}, inplace=True)
2022-08-06 09:16:47.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.127 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.127 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:47.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.135 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.135 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, 'FR')
2022-08-06 09:16:47.146 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.146 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.146 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, 'FR')
2022-08-06 09:16:47.157 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.157 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.157 | DEBUG    | __main__:run_benchmark:432 - dfin['country'] = dfin['country'].replace('France', 'FR')
2022-08-06 09:16:47.165 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.165 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.165 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, {'country': 'FR'})
2022-08-06 09:16:47.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.176 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.176 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:47.184 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.184 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.184 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR', regex=True)
2022-08-06 09:16:47.191 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.192 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.192 | DEBUG    | __main__:run_benchmark:432 - dfin['country'] = dfin['country'].replace('France', 'FR')
2022-08-06 09:16:47.199 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.199 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.199 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France'], ['FR'])
2022-08-06 09:16:47.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.210 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.211 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 09:16:47.218 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.218 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.218 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, 'FR', inplace=True)
2022-08-06 09:16:47.226 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.226 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.226 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR', inplace=True)
2022-08-06 09:16:47.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:47.234 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 09:16:47.234 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:47.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:48.984 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:48.985 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 09:16:49.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.034 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.034 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, {'country': 'FR'}, inplace=True)
2022-08-06 09:16:49.047 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.047 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.047 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:49.056 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.057 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.057 | DEBUG    | __main__:run_benchmark:432 - dfin['country'] = dfin['country'].replace('France', 'FR')
2022-08-06 09:16:49.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.065 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.065 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:49.072 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.072 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.073 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, {'country': 'FR'}, inplace=True)
2022-08-06 09:16:49.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.080 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.081 | DEBUG    | __main__:run_benchmark:432 - dfin['country'] = dfin['country'].replace('France', 'FR')
2022-08-06 09:16:49.088 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.088 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.088 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 09:16:49.096 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.096 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.096 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:49.104 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.104 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.104 | DEBUG    | __main__:run_benchmark:432 - dfin['country'] = dfin['country'].replace('France', 'FR')
2022-08-06 09:16:49.111 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.112 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.112 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, {'country': 'FR'}, inplace=True)
2022-08-06 09:16:49.119 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.120 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.120 | DEBUG    | __main__:run_benchmark:432 - dfin['country'] = dfin['country'].apply(lambda x: 'FR' if x == 'France' else x)
2022-08-06 09:16:49.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.127 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.127 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, {'country': 'FR'})
2022-08-06 09:16:49.138 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.138 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.139 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, 'FR')
2022-08-06 09:16:49.150 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.150 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.150 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, 'FR')
2022-08-06 09:16:49.161 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.161 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.161 | DEBUG    | __main__:run_benchmark:432 - dfin.country.replace('France', 'FR', inplace=True)
2022-08-06 09:16:49.168 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.169 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.169 | DEBUG    | __main__:run_benchmark:432 - dfin['country'] = dfin['country'].replace('France', 'FR')
2022-08-06 09:16:49.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.176 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.176 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, {'country': 'FR'})
2022-08-06 09:16:49.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.187 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.187 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, {'country': 'FR'})
2022-08-06 09:16:49.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:49.198 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 09:16:49.199 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].apply((lambda x: x.replace('France', 'FR')))
2022-08-06 09:16:49.206 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.577 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.578 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 09:16:50.590 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.590 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.590 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:50.597 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.598 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.598 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 09:16:50.609 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.609 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.609 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR', inplace=True)
2022-08-06 09:16:50.616 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.617 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.617 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:50.624 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.624 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.625 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR', inplace=True)
2022-08-06 09:16:50.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.632 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.632 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR', inplace=True)
2022-08-06 09:16:50.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.640 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.640 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR', inplace=True)
2022-08-06 09:16:50.648 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.648 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.648 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:50.656 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.656 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.656 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, 'FR')
2022-08-06 09:16:50.667 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.667 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.667 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 09:16:50.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.678 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.678 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:50.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.686 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.686 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, {'country': 'FR'}, inplace=True)
2022-08-06 09:16:50.694 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.694 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.694 | DEBUG    | __main__:run_benchmark:432 - dfin['country'] = dfin['country'].replace('France', 'FR')
2022-08-06 09:16:50.701 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.702 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.702 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:50.710 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.710 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.710 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, {'country': 'FR'})
2022-08-06 09:16:50.724 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.724 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.724 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:50.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.732 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.732 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 09:16:50.742 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.743 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.743 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(to_replace = 'France', value = 'FR')
2022-08-06 09:16:50.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:50.754 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 09:16:50.754 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 09:16:50.765 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:51.986 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:51.987 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 09:16:52.025 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.026 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.026 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 09:16:52.047 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.047 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.047 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR', inplace=True)
2022-08-06 09:16:52.056 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.057 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.057 | DEBUG    | __main__:run_benchmark:432 - dfin['country'] = dfin['country'].replace('France', 'FR')
2022-08-06 09:16:52.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.065 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.065 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR', regex=True)
2022-08-06 09:16:52.072 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.072 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.072 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 09:16:52.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.080 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.080 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, 'FR')
2022-08-06 09:16:52.091 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.091 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.091 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR', inplace=True)
2022-08-06 09:16:52.099 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.099 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.099 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:52.107 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.107 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.107 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, {'country': 'FR'})
2022-08-06 09:16:52.118 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.118 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.118 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:52.126 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.126 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.126 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR', regex=True)
2022-08-06 09:16:52.133 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.133 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.133 | DEBUG    | __main__:run_benchmark:432 - dfin['country'] = dfin['country'].replace('France', 'FR')
2022-08-06 09:16:52.141 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.141 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.141 | DEBUG    | __main__:run_benchmark:432 - dfin.country.replace('France', 'FR', inplace=True)
2022-08-06 09:16:52.149 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.149 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.149 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:52.156 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.156 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.156 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:52.164 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.164 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.164 | DEBUG    | __main__:run_benchmark:432 - dfin['country'] = dfin['country'].replace('France', 'FR')
2022-08-06 09:16:52.171 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.172 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.172 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:52.179 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.179 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.179 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR', inplace=True)
2022-08-06 09:16:52.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:52.187 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 09:16:52.187 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 09:16:52.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:54.167 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column and 'Paris' with 'PAR' in city
2022-08-06 09:16:54.168 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': {'France': 'FR'}, 'city': {'Paris': 'PAR'}}, inplace=True)
2022-08-06 09:16:54.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:16:54.197 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 09:16:54.197 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 09:16:54.197 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 09:16:54.197 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:16:54.197 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 09:16:54.197 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 09:16:55.330 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, sort the dataframe on the basis of column 'B'
2022-08-06 09:16:55.331 | DEBUG    | __main__:run_benchmark:432 - dfin.sort_values(by='B')
2022-08-06 09:16:55.339 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:16:55.358 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 09:16:55.358 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 09:16:55.359 | DEBUG    | __main__:run:509 - Number of Sets: 2
2022-08-06 09:16:55.359 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 09:16:55.359 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:16:56.938 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 09:16:56.939 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='name', columns='type', values='value')
2022-08-06 09:16:56.980 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:16:56.980 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 09:16:56.981 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.pivot(index='name', columns='date', values='value')
2022-08-06 09:16:56.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:16:57.018 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 09:16:57.018 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 09:16:57.019 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 09:16:57.176 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "convert unique values in column 'target' to numeric encoding", 'user': 'u12'}, {'query': "convert uni...
    │               └ {'queries': [{'query': "convert unique values in column 'target' to numeric encoding", 'user': 'u12'}, {'query': "convert uni...
    └ {'query': "convert unique values in column 'target' to numeric encoding", 'user': 'u12'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Convert all columns in dataframe "df...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dff02f710>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:16:57 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:16:57 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dfe586690>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:16:57.202 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:17:28.947 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' to numeric encoding
2022-08-06 09:17:28.948 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].astype('category')
2022-08-06 09:17:28.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:28.958 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' to numeric encoding
2022-08-06 09:17:28.958 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].astype('category')
2022-08-06 09:17:28.966 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:28.966 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' to numeric encoding
2022-08-06 09:17:28.967 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].astype('category')
2022-08-06 09:17:28.975 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:28.975 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' to numeric encoding
2022-08-06 09:17:28.975 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].astype('category')
2022-08-06 09:17:28.983 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:28.983 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' to numeric encoding
2022-08-06 09:17:28.984 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].astype('category')
2022-08-06 09:17:28.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:28.992 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' to numeric encoding
2022-08-06 09:17:28.992 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].astype('category')
2022-08-06 09:17:29.001 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:29.001 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' to numeric encoding
2022-08-06 09:17:29.001 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].astype('category')
2022-08-06 09:17:29.009 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:29.009 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' to numeric encoding
2022-08-06 09:17:29.010 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].astype('category')
2022-08-06 09:17:29.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:29.018 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' to numeric encoding
2022-08-06 09:17:29.018 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].astype('category')
2022-08-06 09:17:29.026 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:29.026 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' to numeric encoding
2022-08-06 09:17:29.027 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].astype('category')
2022-08-06 09:17:29.035 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:29.035 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' to numeric encoding
2022-08-06 09:17:29.035 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].astype('category')
2022-08-06 09:17:29.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:29.043 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' to numeric encoding
2022-08-06 09:17:29.043 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].astype('category')
2022-08-06 09:17:29.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:29.052 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' to numeric encoding
2022-08-06 09:17:29.052 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].astype('category')
2022-08-06 09:17:29.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:29.060 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' to numeric encoding
2022-08-06 09:17:29.060 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].astype('category')
2022-08-06 09:17:29.069 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:29.069 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' to numeric encoding
2022-08-06 09:17:29.069 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].astype('category').cat.codes
2022-08-06 09:17:29.076 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:17:30.652 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' of dataframe 'dfin' to numeric encoding
2022-08-06 09:17:30.653 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].astype('category')
2022-08-06 09:17:30.662 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:30.663 | DEBUG    | __main__:run_benchmark:431 - Query: convert unique values in column 'target' of dataframe 'dfin' to numeric encoding
2022-08-06 09:17:30.663 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].astype('category').cat.codes
2022-08-06 09:17:30.671 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:17:30.691 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 09:17:32.235 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.236 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:32.275 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.275 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.275 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:32.290 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.291 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.291 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:32.301 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.302 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.302 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:32.310 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.311 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.311 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:32.319 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.319 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.319 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:32.328 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.328 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.328 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:32.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.337 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.337 | DEBUG    | __main__:run_benchmark:432 - dfin.goldLabel = dfin.goldLabel.astype('category')
2022-08-06 09:17:32.345 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.345 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.345 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:32.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.354 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.354 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:32.362 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.362 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.363 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:32.371 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.371 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.371 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:32.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.380 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.380 | DEBUG    | __main__:run_benchmark:432 - dfin.goldLabel = dfin.goldLabel.astype('category')
2022-08-06 09:17:32.388 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.388 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.389 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:32.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.397 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.397 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:32.406 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.406 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.406 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:32.414 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.414 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.414 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:32.423 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.423 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.423 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:32.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.432 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.432 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:32.440 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:32.440 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 09:17:32.440 | DEBUG    | __main__:run_benchmark:432 - dfin.goldLabel = dfin.goldLabel.astype('category')
2022-08-06 09:17:32.449 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:33.979 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:33.980 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:33.989 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:33.990 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:33.990 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:33.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:33.998 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:33.998 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:34.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:34.007 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:34.007 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:34.015 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:34.016 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:34.016 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:34.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:34.024 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:34.024 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:34.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:34.033 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:34.033 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:34.041 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:34.041 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:34.042 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:34.050 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:34.050 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:34.050 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:34.058 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:34.058 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:34.059 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:34.067 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:34.067 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:34.067 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:34.076 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:34.076 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:34.076 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:34.084 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:34.084 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:34.085 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:34.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:34.093 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:34.093 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:34.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:34.102 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:34.102 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:34.110 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:34.110 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:34.111 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:34.119 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:34.119 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:34.119 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:34.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:34.128 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:34.128 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:34.136 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:34.136 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:34.136 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:34.145 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:34.145 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 09:17:34.145 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:34.153 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:35.899 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 09:17:35.900 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].map({'class1': 0, 'class2': 1, 'class3': 2})
2022-08-06 09:17:35.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:17:37.672 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 09:17:37.672 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:37.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:37.682 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 09:17:37.683 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:37.691 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:37.691 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 09:17:37.691 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.factorize(dfin['goldLabel'])[0]
2022-08-06 09:17:37.699 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:17:39.218 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.218 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.230 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.230 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.230 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.238 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.239 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.239 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.247 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.247 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.247 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 09:17:39.256 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.256 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.256 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.264 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.265 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.265 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.273 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.273 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.273 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.282 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.282 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.282 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.290 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.291 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.291 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.299 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.299 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.308 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.308 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.308 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.316 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.316 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.317 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.325 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.325 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.325 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.333 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.333 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.334 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.342 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.342 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.342 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.350 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.351 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.351 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.359 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.359 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.359 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.367 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.368 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.368 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.376 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.376 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.376 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.384 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:39.385 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 09:17:39.385 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:39.393 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.087 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.088 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['goldLabel'] == 'class1')]
2022-08-06 09:17:41.100 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.100 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.100 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:41.108 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.108 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.109 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:41.117 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.117 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.117 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:41.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.126 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.126 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:41.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.134 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.134 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:41.143 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.143 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.143 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:41.151 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.151 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.152 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:41.160 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.160 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.160 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:41.168 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.169 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.169 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:41.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.177 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.178 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:41.186 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.186 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.186 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:41.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.195 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.195 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:41.203 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.203 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.203 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:41.212 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.212 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.212 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:41.220 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.221 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.221 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:41.229 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.229 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.229 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:41.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.240 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.240 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:41.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.249 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.249 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:17:41.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.258 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 09:17:41.258 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['goldLabel'] == dfin.iloc[0]['goldLabel'])]
2022-08-06 09:17:41.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:17:41.451 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'convert goldLabel column into categories', 'user': 'u4'}, {'query': 'convert goldLabel column into ca...
    │               └ {'queries': [{'query': 'convert goldLabel column into categories', 'user': 'u4'}, {'query': 'convert goldLabel column into ca...
    └ {'query': "convert column 'goldLabel' to categorical data", 'user': 'u11'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Create a categorical column in "df" ...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dfe5f1dd0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:17:41 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:17:41 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dfe5d0990>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:17:41.457 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:18:12.957 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:12.958 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:12.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:12.968 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:12.968 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:12.976 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:12.976 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:12.977 | DEBUG    | __main__:run_benchmark:432 - pd.Categorical(dfin['goldLabel'])
2022-08-06 09:18:12.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:12.985 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:12.985 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].asfactor()
2022-08-06 09:18:12.986 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:12.986 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:12.987 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:12.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:12.995 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:12.995 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:13.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:13.003 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:13.004 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:13.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:13.012 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:13.012 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:13.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:13.021 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:13.021 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:13.029 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:13.029 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:13.029 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:13.038 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:13.038 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:13.038 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:13.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:13.047 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:13.047 | DEBUG    | __main__:run_benchmark:432 - to_categorical(dfin, num_classes=3)
2022-08-06 09:18:13.048 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:13.048 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:13.048 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:13.056 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:13.057 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:13.057 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:13.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:13.065 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:13.065 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:13.074 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:13.074 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:13.074 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:13.082 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:13.082 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:13.083 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:13.091 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:13.091 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:13.091 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:13.099 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:13.100 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:13.100 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:13.108 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:13.108 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 09:18:13.108 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:13.117 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:14.861 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:14.862 | DEBUG    | __main__:run_benchmark:432 - categorical(dfin, 'goldLabel')
2022-08-06 09:18:14.868 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:14.869 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:14.869 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:14.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:14.907 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:14.907 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].apply(categorical)
2022-08-06 09:18:14.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:14.909 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:14.910 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'].apply(categorical)
2022-08-06 09:18:14.912 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:14.912 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:14.912 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'].apply(categorical)
2022-08-06 09:18:14.914 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:14.914 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:14.914 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:14.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:14.927 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:14.927 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:14.937 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:14.937 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:14.937 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:14.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:14.945 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:14.946 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:14.954 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:14.954 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:14.954 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].apply(categorical)
2022-08-06 09:18:14.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:14.956 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:14.956 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:14.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:14.964 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:14.964 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'].apply(categorical)
2022-08-06 09:18:14.966 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:14.966 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:14.966 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:14.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:14.974 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:14.975 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:14.983 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:14.983 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:14.983 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'].apply(categorical)
2022-08-06 09:18:14.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:14.984 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:14.985 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:14.993 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:14.993 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:14.993 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 09:18:15.002 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:15.002 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:15.002 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].apply(categorical)
2022-08-06 09:18:15.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:15.003 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:15.003 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], ordered=True)
2022-08-06 09:18:15.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:15.012 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 09:18:15.012 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'])
2022-08-06 09:18:15.020 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:15.040 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 09:18:16.582 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.582 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:16.592 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.592 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.592 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:16.603 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.604 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.604 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = pd.Categorical(dfin['labels'])
2022-08-06 09:18:16.612 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.612 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.612 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:16.621 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.621 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.621 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:16.629 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.630 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.630 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:16.638 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.638 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.638 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = pd.Categorical(dfin['labels'])
2022-08-06 09:18:16.647 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.647 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.647 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:16.655 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.655 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.656 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:16.664 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.664 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.664 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = pd.Categorical(dfin['labels'])
2022-08-06 09:18:16.672 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.673 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.673 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:16.681 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.681 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.681 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:16.690 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.690 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.690 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:16.698 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.698 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.699 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:16.707 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.707 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.707 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:16.716 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.716 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.716 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:16.724 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.724 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.724 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:16.733 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.733 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.733 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:16.741 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.741 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.741 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:16.750 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:16.750 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 09:18:16.750 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:16.758 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:18.682 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 09:18:18.682 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category').cat.codes
2022-08-06 09:18:18.709 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:18:20.182 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.183 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].apply(LabelEncoder().fit_transform)
2022-08-06 09:18:20.185 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.185 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.186 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 09:18:20.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.187 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.187 | DEBUG    | __main__:run_benchmark:432 - LabelEncoder().fit_transform(dfin['labels'])
2022-08-06 09:18:20.188 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.188 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.188 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 09:18:20.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.190 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.190 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 09:18:20.191 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.191 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.191 | DEBUG    | __main__:run_benchmark:432 - labelEnc = LabelEncoder()
2022-08-06 09:18:20.192 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.192 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.192 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 09:18:20.193 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.193 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.193 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 09:18:20.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.194 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.195 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 09:18:20.196 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.196 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.196 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 09:18:20.197 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.197 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.197 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 09:18:20.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.198 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.198 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 09:18:20.199 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.199 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.200 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 09:18:20.201 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.201 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.201 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 09:18:20.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.202 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.202 | DEBUG    | __main__:run_benchmark:432 - from sklearn.preprocessing import LabelEncoder
2022-08-06 09:18:20.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.210 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.210 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 09:18:20.211 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.211 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.211 | DEBUG    | __main__:run_benchmark:432 - from sklearn.preprocessing import LabelEncoder
2022-08-06 09:18:20.219 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.219 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.219 | DEBUG    | __main__:run_benchmark:432 - from sklearn.preprocessing import LabelEncoder
2022-08-06 09:18:20.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.227 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.227 | DEBUG    | __main__:run_benchmark:432 - from sklearn.preprocessing import LabelEncoder
2022-08-06 09:18:20.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:20.235 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 09:18:20.235 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 09:18:20.236 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.176 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.177 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].unique()
2022-08-06 09:18:22.186 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.186 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.186 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].unique()
2022-08-06 09:18:22.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.194 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.194 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:22.203 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.203 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.203 | DEBUG    | __main__:run_benchmark:432 - dfin.labels.unique()
2022-08-06 09:18:22.211 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.211 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.211 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:22.219 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.219 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.220 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].unique()
2022-08-06 09:18:22.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.227 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.228 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].value_counts()
2022-08-06 09:18:22.235 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.236 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.236 | DEBUG    | __main__:run_benchmark:432 - for i, v in enumerate(dfin['labels']):
2022-08-06 09:18:22.236 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.236 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.236 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].unique()
2022-08-06 09:18:22.244 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.244 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.245 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].unique()
2022-08-06 09:18:22.252 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.252 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.253 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 09:18:22.261 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.261 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.261 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].unique()
2022-08-06 09:18:22.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.269 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.269 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].map(enumerate)
2022-08-06 09:18:22.277 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.277 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.277 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].unique()
2022-08-06 09:18:22.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.285 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.285 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].replace(enumerate(dfin['labels'].unique()))
2022-08-06 09:18:22.294 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.294 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.294 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].unique()
2022-08-06 09:18:22.302 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.302 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.302 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].apply(enumerate)
2022-08-06 09:18:22.310 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.310 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.310 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].unique()
2022-08-06 09:18:22.318 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.318 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.318 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].apply(enumerate)
2022-08-06 09:18:22.326 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.326 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 09:18:22.326 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].unique()
2022-08-06 09:18:22.334 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:22.355 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 09:18:23.894 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:23.895 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 09:18:23.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:23.935 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:23.935 | DEBUG    | __main__:run_benchmark:432 - #  use the following code example as a guide to write code for the comment below
2022-08-06 09:18:23.935 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:23.935 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:23.936 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:23.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:23.951 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:23.951 | DEBUG    | __main__:run_benchmark:432 - #  use the following code as a guide
2022-08-06 09:18:23.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:23.951 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:23.952 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 09:18:23.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:23.962 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:23.962 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 09:18:23.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:23.971 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:23.971 | DEBUG    | __main__:run_benchmark:432 - #  use the following code example as a guide to write code for the comment below
2022-08-06 09:18:23.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:23.971 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:23.971 | DEBUG    | __main__:run_benchmark:432 - #  hint: use pd.get_dummies()
2022-08-06 09:18:23.972 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:23.972 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:23.972 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 09:18:23.980 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:23.980 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:23.980 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 09:18:23.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:23.989 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:23.989 | DEBUG    | __main__:run_benchmark:432 - #  use the pandas get_dummies() function
2022-08-06 09:18:23.989 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:23.989 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:23.989 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 09:18:23.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:23.998 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:23.998 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 09:18:24.006 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:24.006 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:24.006 | DEBUG    | __main__:run_benchmark:432 - #  use the following code example as a guide to write code for the comment below
2022-08-06 09:18:24.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:24.007 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:24.007 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 09:18:24.015 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:24.015 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:24.015 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 09:18:24.023 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:24.024 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:24.024 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin['GoldTarget'])
2022-08-06 09:18:24.030 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:24.030 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:24.030 | DEBUG    | __main__:run_benchmark:432 - #  hint: use pd.get_dummies()
2022-08-06 09:18:24.030 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:24.030 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:24.031 | DEBUG    | __main__:run_benchmark:432 - #  hint: use pd.get_dummies()
2022-08-06 09:18:24.031 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:24.031 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 09:18:24.031 | DEBUG    | __main__:run_benchmark:432 - #  use the following code example as a guide to write code for the comment below
2022-08-06 09:18:24.031 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.676 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.677 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:25.687 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.687 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.687 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'])
2022-08-06 09:18:25.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.695 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.695 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:25.705 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.705 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.706 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:25.715 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.715 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.716 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:25.724 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.724 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.724 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:25.733 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.733 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.733 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:25.741 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.741 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.742 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:25.750 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.750 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.750 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:25.758 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.759 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.759 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:25.767 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.767 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.768 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:25.776 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.776 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.776 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:25.785 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.785 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.785 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:25.793 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.793 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.793 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:25.802 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.802 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.802 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:25.810 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.811 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.811 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:25.819 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.819 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.819 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'].values)
2022-08-06 09:18:25.828 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.828 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.828 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:25.836 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.836 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.836 | DEBUG    | __main__:run_benchmark:432 - to_categorical(dfin, num_classes=3)
2022-08-06 09:18:25.837 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:25.838 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 09:18:25.838 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:25.846 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:27.327 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' in 'dfin' to numeric codes
2022-08-06 09:18:27.328 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category').cat.codes
2022-08-06 09:18:27.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:18:28.830 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:28.831 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:28.870 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:28.870 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:28.871 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:28.886 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:28.886 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:28.886 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:28.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:28.897 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:28.897 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:28.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:28.906 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:28.906 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:28.914 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:28.914 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:28.914 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:28.923 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:28.923 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:28.923 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:28.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:28.931 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:28.932 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:28.940 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:28.940 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:28.940 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:28.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:28.949 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:28.949 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:28.957 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:28.957 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:28.957 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:28.966 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:28.966 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:28.966 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:28.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:28.974 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:28.975 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:28.983 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:28.983 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:28.983 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:28.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:28.992 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:28.992 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:29.000 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:29.000 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:29.001 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:29.009 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:29.009 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:29.009 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:29.017 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:29.017 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:29.018 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:29.026 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:29.026 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:29.026 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:29.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:29.034 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-06 09:18:29.034 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:29.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:30.694 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to numeric codes
2022-08-06 09:18:30.695 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:30.705 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:30.705 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to numeric codes
2022-08-06 09:18:30.705 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:30.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:30.714 | DEBUG    | __main__:run_benchmark:431 - Query: convert values in 'GoldTarget' column to numeric codes
2022-08-06 09:18:30.714 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category').cat.codes
2022-08-06 09:18:30.721 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:18:32.249 | DEBUG    | __main__:run_benchmark:431 - Query: encode values in 'GoldTarget' column to numeric
2022-08-06 09:18:32.250 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].map({'classA': 0, 'classB': 1, 'classC': 2})
2022-08-06 09:18:32.259 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:18:33.874 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.875 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'], errors='coerce')
2022-08-06 09:18:33.914 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.914 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.914 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].map(int)
2022-08-06 09:18:33.917 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.917 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.918 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].apply(np.int)
2022-08-06 09:18:33.920 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.920 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.920 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 09:18:33.923 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.923 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.923 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype(float)
2022-08-06 09:18:33.925 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.925 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.925 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 09:18:33.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.927 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.928 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 09:18:33.929 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.929 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.930 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 09:18:33.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.931 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.932 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 09:18:33.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.933 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.933 | DEBUG    | __main__:run_benchmark:432 - pd.to_numeric(dfin['GoldTarget'], downcast='float')
2022-08-06 09:18:33.935 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.935 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.935 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 09:18:33.937 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.937 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.937 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 09:18:33.938 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.938 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.939 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 09:18:33.940 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.940 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.940 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 09:18:33.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.942 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.942 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 09:18:33.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.943 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.943 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype(object).astype(int)
2022-08-06 09:18:33.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.945 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.945 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 09:18:33.946 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.946 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.946 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 09:18:33.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.948 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.948 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 09:18:33.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:33.949 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 09:18:33.949 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 09:18:33.950 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:35.479 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to category and encode to numeric
2022-08-06 09:18:35.480 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:35.490 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:35.490 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to category and encode to numeric
2022-08-06 09:18:35.490 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:35.498 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:35.498 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to category and encode to numeric
2022-08-06 09:18:35.499 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:35.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:35.507 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to category and encode to numeric
2022-08-06 09:18:35.507 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 09:18:35.516 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:18:35.516 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to category and encode to numeric
2022-08-06 09:18:35.516 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category').cat.codes
2022-08-06 09:18:35.524 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:18:35.547 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 09:18:35.893 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "replace 'Label' with integers", 'user': 'u7'}, {'query': "replace string in 'Label' with encoded inte...
    │               └ {'queries': [{'query': "replace 'Label' with integers", 'user': 'u7'}, {'query': "replace string in 'Label' with encoded inte...
    └ {'query': "replace 'Label' with integers", 'user': 'u7'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a series with "RPDEnc" column...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dfe5c1f10>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:18:35 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:18:35 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dfe5810d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:18:35.918 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:19:07.683 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'Label' with integers
2022-08-06 09:19:07.684 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'].replace('class1', 1)
2022-08-06 09:19:07.693 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:07.694 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'Label' with integers
2022-08-06 09:19:07.694 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'Label': {'class1': 1, 'class2': 2, 'class3': 3}})
2022-08-06 09:19:07.706 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:07.706 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'Label' with integers
2022-08-06 09:19:07.706 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'Label': {'class1': 1, 'class2': 2, 'class3': 3}})
2022-08-06 09:19:07.718 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:07.718 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'Label' with integers
2022-08-06 09:19:07.718 | DEBUG    | __main__:run_benchmark:432 - dfin.Label = dfin.Label.map({'class1': 0, 'class2': 1, 'class3': 2})
2022-08-06 09:19:07.726 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:09.343 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.344 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:09.385 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.385 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.385 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:09.400 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.401 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.401 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:09.412 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.412 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.412 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:09.421 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.421 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.421 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:09.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.430 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.430 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:09.438 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.438 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.438 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:09.447 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.447 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.447 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'].replace('class1', 0, inplace=True)
2022-08-06 09:19:09.455 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.455 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.455 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'].replace(['class1', 'class2', 'class3'], [1, 2, 3])
2022-08-06 09:19:09.463 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.464 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.464 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:09.472 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.472 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.472 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:09.481 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.481 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.481 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:09.489 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.490 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.490 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:09.498 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.498 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.498 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:09.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.507 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.507 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:09.515 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.516 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.516 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:09.524 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.524 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.524 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:09.533 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.533 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.533 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:09.541 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.541 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.541 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:09.550 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:09.550 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 09:19:09.550 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:09.558 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:10.996 | DEBUG    | __main__:run_benchmark:431 - Query: Replace strings in 'Label' with categorical numbers
2022-08-06 09:19:10.997 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:11.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:11.007 | DEBUG    | __main__:run_benchmark:431 - Query: Replace strings in 'Label' with categorical numbers
2022-08-06 09:19:11.007 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:11.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:11.016 | DEBUG    | __main__:run_benchmark:431 - Query: Replace strings in 'Label' with categorical numbers
2022-08-06 09:19:11.016 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:11.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:11.024 | DEBUG    | __main__:run_benchmark:431 - Query: Replace strings in 'Label' with categorical numbers
2022-08-06 09:19:11.025 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].map({'class1': 0, 'class2': 1, 'class3': 2})
2022-08-06 09:19:11.032 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:12.541 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.542 | DEBUG    | __main__:run_benchmark:432 - to_categorical(dfin, num_classes=3)
2022-08-06 09:19:12.544 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.545 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.545 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.554 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.554 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.554 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.562 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.563 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.563 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.571 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.571 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.571 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.580 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.580 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.580 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.588 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.589 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.589 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.597 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.597 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.598 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.606 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.606 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.606 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.614 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.615 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.615 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.623 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.623 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.623 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.632 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.632 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.640 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.640 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.649 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.649 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.649 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.657 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.658 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.658 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.666 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.666 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.666 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.675 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.675 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.675 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.684 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.684 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.692 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.692 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.692 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.700 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.701 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 09:19:12.701 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 09:19:12.709 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:12.731 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 09:19:12.731 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 09:19:12.731 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 09:19:14.395 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.396 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:14.400 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.400 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.400 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:14.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.402 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.403 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(list(dfin.columns)).size().reset_index().rename(columns={0:'count'})
2022-08-06 09:19:14.413 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.413 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.413 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:14.416 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.416 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.416 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:14.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.418 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.418 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 09:19:14.421 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.421 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.421 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 09:19:14.423 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.423 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.424 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:14.426 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.426 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.426 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:14.428 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.429 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.429 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:14.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.431 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.431 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:14.434 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.434 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.434 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:14.437 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.437 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.437 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:14.439 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.439 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.440 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:14.442 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.442 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.442 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:14.445 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.445 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.445 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 09:19:14.448 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.448 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.448 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:14.450 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.450 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.451 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:14.453 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.453 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.453 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:14.456 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:14.456 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 09:19:14.456 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:14.458 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:16.892 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 09:19:16.893 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby('target').transform('count').sub(len(dfin))
2022-08-06 09:19:16.899 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:16.899 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 09:19:16.899 | DEBUG    | __main__:run_benchmark:432 - dfin['missing_count'] = dfin.shape[0] - dfin.nunique()
2022-08-06 09:19:16.902 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:16.902 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 09:19:16.902 | DEBUG    | __main__:run_benchmark:432 - #  this will give the number of duplicate rows in the dataframe
2022-08-06 09:19:16.902 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:16.903 | DEBUG    | __main__:run_benchmark:431 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 09:19:16.903 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:19:16.904 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:18.729 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 09:19:18.730 | DEBUG    | __main__:run_benchmark:432 - #  divide the result by total number of rows in 'dfin'
2022-08-06 09:19:18.730 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:18.731 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 09:19:18.731 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby('target').transform('count').sub(len(dfin))
2022-08-06 09:19:18.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:18.736 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-06 09:19:18.736 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:19:18.737 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:20.548 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 09:19:20.549 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby('target').transform('count').sub(len(dfin))
2022-08-06 09:19:20.554 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:20.554 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 09:19:20.554 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 09:19:20.557 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:20.557 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 09:19:20.557 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 09:19:20.559 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:20.560 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 09:19:20.560 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 09:19:20.562 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:20.562 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 09:19:20.563 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 09:19:20.565 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:20.565 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 09:19:20.565 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 09:19:20.568 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:20.568 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 09:19:20.568 | DEBUG    | __main__:run_benchmark:432 - #  This will give the number of null values in each column
2022-08-06 09:19:20.568 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:20.568 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 09:19:20.569 | DEBUG    | __main__:run_benchmark:432 - num_val_samples = len(dfin) - len(dfin.drop_duplicates())
2022-08-06 09:19:20.570 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:22.442 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 09:19:22.443 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).size()
2022-08-06 09:19:22.447 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:22.447 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 09:19:22.447 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['inp1', 'inp2', 'inp3']).size()
2022-08-06 09:19:22.449 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:22.449 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 09:19:22.449 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['inp1', 'inp2', 'inp3']).size()
2022-08-06 09:19:22.452 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:22.452 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 09:19:22.452 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).count()
2022-08-06 09:19:22.459 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:22.459 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 09:19:22.459 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['inp1', 'inp2', 'inp3']).size().reset_index(name='counts')
2022-08-06 09:19:22.464 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:22.464 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 09:19:22.464 | DEBUG    | __main__:run_benchmark:432 - dfin.count(axis='columns')
2022-08-06 09:19:22.466 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:22.467 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 09:19:22.467 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:19:22.468 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:24.112 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 09:19:24.113 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).size()
2022-08-06 09:19:24.117 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:24.117 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 09:19:24.117 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:19:24.118 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:25.548 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of duplicates in dataframe dfin
2022-08-06 09:19:25.549 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:19:25.551 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:27.399 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 09:19:27.399 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:19:27.401 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:29.563 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of duplicates in dataframe dfin and add them
2022-08-06 09:19:29.564 | DEBUG    | __main__:run_benchmark:432 - dfin['dup'] = dfin.duplicated()
2022-08-06 09:19:29.567 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:29.567 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of duplicates in dataframe dfin and add them
2022-08-06 09:19:29.567 | DEBUG    | __main__:run_benchmark:432 - dfin['dups'] = dfin.duplicated().sum()
2022-08-06 09:19:29.570 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:29.570 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of duplicates in dataframe dfin and add them
2022-08-06 09:19:29.570 | DEBUG    | __main__:run_benchmark:432 - dfin['dup_count'] = dfin.groupby(['inp1', 'inp2', 'inp3']).cumcount() + 1
2022-08-06 09:19:29.573 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:29.573 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of duplicates in dataframe dfin and add them
2022-08-06 09:19:29.573 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:19:29.574 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:30.973 | DEBUG    | __main__:run_benchmark:431 - Query: number of duplicate rows in 'dfin' table; number of True values
2022-08-06 09:19:30.974 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:19:30.976 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:30.998 | DEBUG    | __main__:run:515 - Number of queries: 22
2022-08-06 09:19:32.291 | DEBUG    | __main__:run_benchmark:431 - Query: Find the number of duplicate rows in dataframe 'dfin'
2022-08-06 09:19:32.291 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:19:32.294 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:33.820 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.820 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:33.824 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.824 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.824 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:33.826 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.827 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.827 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:33.829 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.829 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.829 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:33.831 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.832 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.832 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:33.834 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.834 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.834 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:33.836 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.836 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.837 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:33.839 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.839 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.839 | DEBUG    | __main__:run_benchmark:432 - len(dfin.groupby(['f1', 'f2', 'f3']))
2022-08-06 09:19:33.841 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.841 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.842 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:33.844 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.844 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.844 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:33.846 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.847 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.847 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:33.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.849 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.849 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 09:19:33.852 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.852 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.852 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 09:19:33.854 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.854 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.854 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 09:19:33.857 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.857 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.857 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 09:19:33.860 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.860 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.860 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:33.862 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.862 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.863 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=1)
2022-08-06 09:19:33.865 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.865 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.865 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:33.868 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.868 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.868 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 09:19:33.870 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:33.871 | DEBUG    | __main__:run_benchmark:431 - Query: Number of unique rows in dataframe 'dfin'
2022-08-06 09:19:33.871 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:33.873 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:35.067 | DEBUG    | __main__:run_benchmark:431 - Query: How many rows in dataframe 'dfin' are dupliate
2022-08-06 09:19:35.068 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:19:35.070 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:36.220 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.220 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.nunique(), axis=1)
2022-08-06 09:19:36.224 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.224 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.225 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:36.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.227 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.227 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:36.230 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.230 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.230 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:36.232 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.232 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.233 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(['f1', 'f2', 'f3']).size().reset_index(name='counts')
2022-08-06 09:19:36.238 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.238 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.238 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:36.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.241 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.241 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:36.243 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.243 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.243 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:36.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.246 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.246 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:36.248 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.248 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.249 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:36.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.251 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.251 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:36.254 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.254 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.254 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:36.256 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.256 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.257 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).cumcount()
2022-08-06 09:19:36.259 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.259 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.259 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby('Label').size()
2022-08-06 09:19:36.261 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.261 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.261 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:36.264 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.264 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.264 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby('Label').count()
2022-08-06 09:19:36.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.268 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.268 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:36.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.271 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.271 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:36.273 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.274 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.274 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:36.276 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:36.276 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 09:19:36.276 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 09:19:36.279 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:38.367 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and number of unique rows
2022-08-06 09:19:38.368 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique().sum() - dfin.shape[0]
2022-08-06 09:19:38.372 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:38.372 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and number of unique rows
2022-08-06 09:19:38.372 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:38.373 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:40.194 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and unique number of rows
2022-08-06 09:19:40.195 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(pd.Series.nunique, axis=0) - dfin.shape[0]
2022-08-06 09:19:40.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:40.198 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and unique number of rows
2022-08-06 09:19:40.198 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(pd.Series.nunique) - dfin.apply(pd.Series.nunique).apply(lambda x: x-1)
2022-08-06 09:19:40.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:40.202 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and unique number of rows
2022-08-06 09:19:40.202 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.nunique()
2022-08-06 09:19:40.204 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:40.204 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and unique number of rows
2022-08-06 09:19:40.205 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:40.206 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:41.629 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and number of 'unique rows'
2022-08-06 09:19:41.630 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:19:41.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:42.811 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows and number of distinct rows
2022-08-06 09:19:42.812 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:42.815 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:44.387 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.388 | DEBUG    | __main__:run_benchmark:432 - #  in original dataframe
2022-08-06 09:19:44.389 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.390 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.390 | DEBUG    | __main__:run_benchmark:432 - #  in the original dataframe
2022-08-06 09:19:44.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.390 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.390 | DEBUG    | __main__:run_benchmark:432 - #  after dropping missing values
2022-08-06 09:19:44.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.391 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.391 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 09:19:44.393 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.393 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.394 | DEBUG    | __main__:run_benchmark:432 - #  in df
2022-08-06 09:19:44.394 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.394 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.394 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 09:19:44.396 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.396 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.397 | DEBUG    | __main__:run_benchmark:432 - #  in df
2022-08-06 09:19:44.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.397 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.397 | DEBUG    | __main__:run_benchmark:432 - dfin['f1'].drop_duplicates().count() - dfin.shape[0]
2022-08-06 09:19:44.398 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.398 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.398 | DEBUG    | __main__:run_benchmark:432 - #  after dropping missing values
2022-08-06 09:19:44.399 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.399 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.399 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 09:19:44.401 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.401 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.401 | DEBUG    | __main__:run_benchmark:432 - #  in df
2022-08-06 09:19:44.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.402 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.402 | DEBUG    | __main__:run_benchmark:432 - #  in df
2022-08-06 09:19:44.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.402 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.402 | DEBUG    | __main__:run_benchmark:432 - #  in df
2022-08-06 09:19:44.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.402 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.402 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 09:19:44.405 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.405 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.405 | DEBUG    | __main__:run_benchmark:432 - #  in df after drop_duplicates
2022-08-06 09:19:44.405 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.405 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.405 | DEBUG    | __main__:run_benchmark:432 - dfin['f1'].drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 09:19:44.407 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.407 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.407 | DEBUG    | __main__:run_benchmark:432 - #  in df after drop duplicates
2022-08-06 09:19:44.407 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.407 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.407 | DEBUG    | __main__:run_benchmark:432 - #  in df
2022-08-06 09:19:44.407 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.408 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.408 | DEBUG    | __main__:run_benchmark:432 - #  in df that are duplicates of rows that have already been seen
2022-08-06 09:19:44.408 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.408 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 09:19:44.408 | DEBUG    | __main__:run_benchmark:432 - #  in df after drop duplicates
2022-08-06 09:19:44.408 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:44.431 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 09:19:45.741 | DEBUG    | __main__:run_benchmark:431 - Query: find number of duplicate rows in dfin
2022-08-06 09:19:45.742 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:19:45.745 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:46.750 | DEBUG    | __main__:run_benchmark:431 - Query: find count of duplicate rows in dfin
2022-08-06 09:19:46.751 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:19:46.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:48.427 | DEBUG    | __main__:run_benchmark:431 - Query: find number of non unique rows in the table
2022-08-06 09:19:48.428 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=1)
2022-08-06 09:19:48.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:48.431 | DEBUG    | __main__:run_benchmark:431 - Query: find number of non unique rows in the table
2022-08-06 09:19:48.432 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:19:48.433 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:50.132 | DEBUG    | __main__:run_benchmark:431 - Query: find number of rows which occur more than once in the table
2022-08-06 09:19:50.133 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:19:50.135 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:50.160 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 09:19:51.676 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.677 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:19:51.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.686 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.687 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 09:19:51.693 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.694 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.694 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:19:51.696 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.696 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.696 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:19:51.703 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.704 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.704 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:19:51.710 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.711 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.711 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, keep='first')
2022-08-06 09:19:51.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.713 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.713 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:19:51.720 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.720 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.721 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:19:51.727 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.727 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.728 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:19:51.734 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.735 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.735 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:19:51.737 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.737 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.738 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:19:51.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.744 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.745 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:19:51.751 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.752 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.752 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates()
2022-08-06 09:19:51.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.754 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.754 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates()
2022-08-06 09:19:51.757 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.757 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.757 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates()
2022-08-06 09:19:51.759 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.760 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.760 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:19:51.767 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.767 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.767 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:19:51.769 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.770 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.770 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:19:51.772 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.772 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.772 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:19:51.779 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:51.780 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 09:19:51.780 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:19:51.782 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.236 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.237 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:19:53.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.241 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.241 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape
2022-08-06 09:19:53.243 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.244 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.244 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:19:53.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.251 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.251 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:19:53.253 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.253 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.254 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape
2022-08-06 09:19:53.256 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.256 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.256 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:19:53.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.258 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.259 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:19:53.261 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.261 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.261 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape
2022-08-06 09:19:53.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.264 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.264 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:53.266 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.266 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.266 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, keep='first')
2022-08-06 09:19:53.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.269 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.269 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 09:19:53.276 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.276 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.276 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:19:53.283 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.283 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.283 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:19:53.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.285 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.286 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:19:53.288 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.288 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.288 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 09:19:53.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.291 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.291 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 09:19:53.293 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.293 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.294 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:19:53.296 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.296 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.296 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 09:19:53.303 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.303 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.303 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape
2022-08-06 09:19:53.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:53.306 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 09:19:53.306 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:19:53.308 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:54.644 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows
2022-08-06 09:19:54.645 | DEBUG    | __main__:run_benchmark:432 - len(df[df.duplicated()])
2022-08-06 09:19:54.646 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:19:54.646 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows
2022-08-06 09:19:54.646 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:19:54.648 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:19:54.840 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Count the number of repeated rows', 'user': 'u9'}, {'query': 'Count the number of duplicate rows', 'u...
    │               └ {'queries': [{'query': 'Count the number of repeated rows', 'user': 'u9'}, {'query': 'Count the number of duplicate rows', 'u...
    └ {'query': 'Given a dataframe df, count the number of duplicate rows and return the sum', 'user': 'u18'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return the number of infinite values...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dff150e90>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:19:54 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:19:54 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dfe5b9210>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:19:54.866 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:20:26.264 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.265 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 09:20:26.265 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.266 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.266 | DEBUG    | __main__:run_benchmark:432 - df.duplicated().sum()
2022-08-06 09:20:26.267 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.267 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.268 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 09:20:26.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.268 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.268 | DEBUG    | __main__:run_benchmark:432 - df.duplicated().sum()
2022-08-06 09:20:26.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.269 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.269 | DEBUG    | __main__:run_benchmark:432 - def count_dups(df):
2022-08-06 09:20:26.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.269 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.270 | DEBUG    | __main__:run_benchmark:432 - df.duplicated().sum()
2022-08-06 09:20:26.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.271 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.271 | DEBUG    | __main__:run_benchmark:432 - def count_dups(df):
2022-08-06 09:20:26.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.271 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.271 | DEBUG    | __main__:run_benchmark:432 - def count_dups(df):
2022-08-06 09:20:26.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.271 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.272 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 09:20:26.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.272 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.272 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 09:20:26.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.272 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.272 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 09:20:26.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.272 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.273 | DEBUG    | __main__:run_benchmark:432 - def count_dups(df):
2022-08-06 09:20:26.273 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.273 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.273 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 09:20:26.273 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.273 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.273 | DEBUG    | __main__:run_benchmark:432 - df.duplicated().sum()
2022-08-06 09:20:26.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.274 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.274 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 09:20:26.275 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.275 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.275 | DEBUG    | __main__:run_benchmark:432 - df.duplicated().sum()
2022-08-06 09:20:26.276 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.276 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.276 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 09:20:26.276 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.276 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.276 | DEBUG    | __main__:run_benchmark:432 - def count_dups(df):
2022-08-06 09:20:26.277 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.277 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.277 | DEBUG    | __main__:run_benchmark:432 - df.duplicated().sum()
2022-08-06 09:20:26.278 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:26.278 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 09:20:26.278 | DEBUG    | __main__:run_benchmark:432 - def count_dups(df):
2022-08-06 09:20:26.278 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:27.731 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 09:20:27.732 | DEBUG    | __main__:run_benchmark:432 - def count_dups(df):
2022-08-06 09:20:27.732 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:27.733 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 09:20:27.733 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.duplicated()].sum()
2022-08-06 09:20:27.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:27.736 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 09:20:27.737 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:20:27.738 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:20:27.761 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 09:20:29.156 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.157 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:20:29.166 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.166 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.166 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, keep=False)
2022-08-06 09:20:29.169 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.169 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.169 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:20:29.171 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.171 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.172 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:20:29.174 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.174 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.174 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:20:29.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.177 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.177 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:20:29.184 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.184 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.184 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:20:29.186 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.186 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.186 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:20:29.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.189 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.189 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:20:29.196 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.196 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.196 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 09:20:29.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.198 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.198 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:20:29.205 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.205 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.205 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:20:29.212 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.212 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.212 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:20:29.219 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.219 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.219 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:20:29.226 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.226 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.226 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:20:29.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.233 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.233 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:20:29.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.240 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.240 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 09:20:29.247 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.247 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.247 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:20:29.254 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.254 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.254 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:20:29.261 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:29.261 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 09:20:29.261 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 09:20:29.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:30.596 | DEBUG    | __main__:run_benchmark:431 - Query: return the number of duplicate rows
2022-08-06 09:20:30.597 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:20:30.599 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:20:32.392 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - unique rows
2022-08-06 09:20:32.393 | DEBUG    | __main__:run_benchmark:432 - dfin['inputA'].nunique()
2022-08-06 09:20:32.395 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:32.395 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - unique rows
2022-08-06 09:20:32.395 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:20:32.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:20:34.184 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - duplicate rows
2022-08-06 09:20:34.185 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.duplicated().sum()
2022-08-06 09:20:34.188 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:34.188 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - duplicate rows
2022-08-06 09:20:34.188 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.duplicated(keep=False).sum()
2022-08-06 09:20:34.190 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:34.191 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - duplicate rows
2022-08-06 09:20:34.191 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.duplicated().sum()
2022-08-06 09:20:34.193 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:20:34.193 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - duplicate rows
2022-08-06 09:20:34.193 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.drop_duplicates().shape[0]
2022-08-06 09:20:34.195 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:20:35.841 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows of dfin - unique rows of dfin
2022-08-06 09:20:35.842 | DEBUG    | __main__:run_benchmark:432 - len(dfin) - len(dfin.drop_duplicates())
2022-08-06 09:20:35.845 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:20:37.377 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows of 'dfin' - unique rows of 'dfin'
2022-08-06 09:20:37.377 | DEBUG    | __main__:run_benchmark:432 - len(dfin) - len(dfin.drop_duplicates())
2022-08-06 09:20:37.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:20:37.562 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Count number of duplicate rows', 'user': 'u5'}, {'query': 'output number of duplicate rows in dfin', ...
    │               └ {'queries': [{'query': 'Count number of duplicate rows', 'user': 'u5'}, {'query': 'output number of duplicate rows in dfin', ...
    └ {'query': 'return number of nonunique rows', 'user': 'u16'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return the number of rows in "df"\ni...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dfe5b9f50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:20:37 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:20:37 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dfe55de10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:20:37.587 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:21:09.058 | DEBUG    | __main__:run_benchmark:431 - Query: return number of nonunique rows
2022-08-06 09:21:09.059 | DEBUG    | __main__:run_benchmark:432 - int(dfin.count())
2022-08-06 09:21:09.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:09.063 | DEBUG    | __main__:run_benchmark:431 - Query: return number of nonunique rows
2022-08-06 09:21:09.063 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:21:09.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:21:10.607 | DEBUG    | __main__:run_benchmark:431 - Query: return length - length of drop duplicates
2022-08-06 09:21:10.607 | DEBUG    | __main__:run_benchmark:432 - print(len(dfin) - len(dfin.drop_duplicates()))
2022-08-06 09:21:10.608 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: (len(dfin) - len(dfin.drop_duplicates()))

2022-08-06 09:21:10.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:21:12.394 | DEBUG    | __main__:run_benchmark:431 - Query: return length of din - length of drop duplicates of dfin
2022-08-06 09:21:12.394 | DEBUG    | __main__:run_benchmark:432 - len(dfin) - len(dfin.drop_duplicates())
2022-08-06 09:21:12.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:21:13.920 | DEBUG    | __main__:run_benchmark:431 - Query: find the number of repeated columns in 'dfin'
2022-08-06 09:21:13.921 | DEBUG    | __main__:run_benchmark:432 - dfin.columns.value_counts().sum()
2022-08-06 09:21:13.924 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:13.924 | DEBUG    | __main__:run_benchmark:431 - Query: find the number of repeated columns in 'dfin'
2022-08-06 09:21:13.924 | DEBUG    | __main__:run_benchmark:432 - dfin.columns.duplicated().sum()
2022-08-06 09:21:13.925 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:13.925 | DEBUG    | __main__:run_benchmark:431 - Query: find the number of repeated columns in 'dfin'
2022-08-06 09:21:13.926 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:21:13.926 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:13.926 | DEBUG    | __main__:run_benchmark:431 - Query: find the number of repeated columns in 'dfin'
2022-08-06 09:21:13.926 | DEBUG    | __main__:run_benchmark:432 - dfin.columns.value_counts().max()
2022-08-06 09:21:13.928 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:13.928 | DEBUG    | __main__:run_benchmark:431 - Query: find the number of repeated columns in 'dfin'
2022-08-06 09:21:13.928 | DEBUG    | __main__:run_benchmark:432 - dfin.columns.duplicated().sum()
2022-08-06 09:21:13.929 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:13.929 | DEBUG    | __main__:run_benchmark:431 - Query: find the number of repeated columns in 'dfin'
2022-08-06 09:21:13.930 | DEBUG    | __main__:run_benchmark:432 - dfin.columns.duplicated().sum()
2022-08-06 09:21:13.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:13.931 | DEBUG    | __main__:run_benchmark:431 - Query: find the number of repeated columns in 'dfin'
2022-08-06 09:21:13.931 | DEBUG    | __main__:run_benchmark:432 - dfin.columns.duplicated().sum()
2022-08-06 09:21:13.932 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:13.932 | DEBUG    | __main__:run_benchmark:431 - Query: find the number of repeated columns in 'dfin'
2022-08-06 09:21:13.932 | DEBUG    | __main__:run_benchmark:432 - #  Hint: use the .duplicated() method
2022-08-06 09:21:13.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:13.933 | DEBUG    | __main__:run_benchmark:431 - Query: find the number of repeated columns in 'dfin'
2022-08-06 09:21:13.933 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 09:21:13.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:21:13.959 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 09:21:13.959 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 09:21:13.959 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 09:21:15.734 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:15.735 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset='f2')
2022-08-06 09:21:15.750 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:15.750 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:15.751 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2', keep='first')
2022-08-06 09:21:15.770 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:15.770 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:15.770 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2', keep='first')
2022-08-06 09:21:15.790 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:15.790 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:15.790 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['f2'])
2022-08-06 09:21:15.810 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:15.810 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:15.810 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset='f2')
2022-08-06 09:21:15.824 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:15.824 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:15.825 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 09:21:15.844 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:15.844 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:15.844 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset=['f2'])
2022-08-06 09:21:15.858 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:15.859 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:15.859 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset='f2', keep='first')
2022-08-06 09:21:15.873 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:15.873 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:15.873 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 09:21:15.893 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:15.893 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:15.893 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['f2'])
2022-08-06 09:21:15.913 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:15.913 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:15.913 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['f2'])
2022-08-06 09:21:15.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:15.933 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:15.933 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 09:21:15.952 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:15.953 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:15.953 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2', keep='first')
2022-08-06 09:21:15.972 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:15.973 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:15.973 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['f2'])
2022-08-06 09:21:15.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:15.992 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:15.992 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2', keep='first')
2022-08-06 09:21:16.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:16.013 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:16.013 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['f2'])
2022-08-06 09:21:16.032 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:16.032 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:16.032 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 09:21:16.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:16.052 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:16.052 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset='f2', keep='first')
2022-08-06 09:21:16.066 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:16.067 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:16.067 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 09:21:16.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:16.086 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 09:21:16.087 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 09:21:16.106 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:16.132 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:21:17.621 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, drop all rows that are duplicated for column 'feat2' and keep the last occurence unmarked
2022-08-06 09:21:17.621 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='feat2', keep='last')
2022-08-06 09:21:17.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:21:17.657 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 09:21:19.024 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 09:21:19.025 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset=['inputB'])
2022-08-06 09:21:19.040 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:19.040 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 09:21:19.040 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset=['inputB'])
2022-08-06 09:21:19.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:19.054 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 09:21:19.054 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 09:21:19.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:19.073 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 09:21:19.073 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset=['inputB'])
2022-08-06 09:21:19.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:19.087 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 09:21:19.087 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset = 'inputB', keep = 'first', inplace = True)
2022-08-06 09:21:19.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:19.101 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 09:21:19.101 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset = 'inputB', keep = False, inplace = True)
2022-08-06 09:21:19.109 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:21:20.836 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 09:21:20.837 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 09:21:20.857 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:20.857 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 09:21:20.857 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 09:21:20.876 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:20.876 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 09:21:20.876 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], inplace=True)
2022-08-06 09:21:20.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:20.890 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 09:21:20.891 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB', inplace=True)
2022-08-06 09:21:20.904 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:20.904 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 09:21:20.905 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 09:21:20.923 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:20.924 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 09:21:20.924 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 09:21:20.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:20.943 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 09:21:20.943 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset ="inputB", keep = False, inplace = True)
2022-08-06 09:21:20.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:21:22.738 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:22.739 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 09:21:22.759 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:22.759 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:22.759 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 09:21:22.778 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:22.778 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:22.779 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep='first', inplace=True)
2022-08-06 09:21:22.792 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:22.793 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:22.793 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep='first', inplace=True)
2022-08-06 09:21:22.807 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:22.807 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:22.807 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB', keep='first', inplace=True)
2022-08-06 09:21:22.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:22.821 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:22.821 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 09:21:22.840 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:22.840 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:22.840 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset = 'inputB')
2022-08-06 09:21:22.859 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:22.859 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:22.860 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep='first', inplace=True)
2022-08-06 09:21:22.873 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:22.873 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:22.874 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 09:21:22.892 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:22.893 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:22.893 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep='first', inplace=True)
2022-08-06 09:21:22.907 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:22.907 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:22.907 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep='first')
2022-08-06 09:21:22.926 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:22.926 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:22.926 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep='first')
2022-08-06 09:21:22.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:22.945 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:22.945 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset = 'inputB', keep = 'first', inplace = True)
2022-08-06 09:21:22.959 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:22.960 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:22.960 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep='first', inplace=True)
2022-08-06 09:21:22.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:22.974 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:22.974 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 09:21:22.993 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:22.993 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:22.993 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep='first', inplace=True)
2022-08-06 09:21:23.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:23.007 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:23.008 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep='first')
2022-08-06 09:21:23.027 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:23.027 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:23.027 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 09:21:23.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:23.046 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:23.046 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 09:21:23.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:23.065 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 09:21:23.065 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset ='inputB', keep = 'first', inplace = True)
2022-08-06 09:21:23.079 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:24.852 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB' without keeping first
2022-08-06 09:21:24.853 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB', keep=False)
2022-08-06 09:21:24.864 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:21:26.644 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB' dont keep first or last
2022-08-06 09:21:26.645 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep=False)
2022-08-06 09:21:26.657 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:21:26.684 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 09:21:28.453 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 09:21:28.454 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:28.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:28.474 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 09:21:28.474 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:28.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:28.493 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 09:21:28.494 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:28.512 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:28.513 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 09:21:28.513 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 09:21:28.532 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:28.532 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 09:21:28.532 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 09:21:28.551 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:28.551 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 09:21:28.551 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:28.570 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:28.570 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 09:21:28.571 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'], keep='first', inplace=True)
2022-08-06 09:21:28.584 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:28.584 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 09:21:28.585 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 09:21:28.604 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:28.604 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 09:21:28.604 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 09:21:28.623 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:28.623 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 09:21:28.623 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:28.642 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:28.642 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 09:21:28.642 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'], keep='first')
2022-08-06 09:21:28.661 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:28.662 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 09:21:28.662 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset=['inp2'])
2022-08-06 09:21:28.675 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:28.675 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 09:21:28.675 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:28.694 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:28.694 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 09:21:28.695 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first', inplace=True)
2022-08-06 09:21:28.708 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:28.708 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 09:21:28.709 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:28.727 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:28.727 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 09:21:28.728 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep=False)
2022-08-06 09:21:28.738 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:21:30.506 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 09:21:30.507 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'], keep='first')
2022-08-06 09:21:30.527 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:30.527 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 09:21:30.527 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'], keep=False)
2022-08-06 09:21:30.538 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:21:32.140 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.141 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:32.161 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.161 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.162 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, subset='inp2', keep='first')
2022-08-06 09:21:32.175 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.175 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.176 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:32.195 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.195 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.195 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:32.214 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.214 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.214 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:32.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.233 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.233 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset = 'inp2')
2022-08-06 09:21:32.252 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.252 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.252 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:32.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.271 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.272 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first')
2022-08-06 09:21:32.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.291 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.291 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:32.310 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.310 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.310 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:32.329 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.329 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.329 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:32.348 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.348 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.348 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:32.367 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.368 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.368 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:32.387 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.387 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.387 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, subset='inp2')
2022-08-06 09:21:32.401 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.401 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.401 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:32.420 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.420 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.420 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', inplace=True)
2022-08-06 09:21:32.434 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.435 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.435 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', inplace=True)
2022-08-06 09:21:32.448 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.449 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.449 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:32.468 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.468 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.468 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:32.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.487 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 09:21:32.487 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 09:21:32.506 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:32.530 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 09:21:32.531 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 09:21:32.531 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 09:21:34.060 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.061 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:34.070 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.070 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.070 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:34.078 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.078 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.078 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin < 10)] = 10
2022-08-06 09:21:34.085 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.086 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.086 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin > 10, 10)
2022-08-06 09:21:34.097 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.097 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.097 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:34.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.105 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.105 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:34.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.113 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.113 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:34.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.120 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.121 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:34.128 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.128 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.128 | DEBUG    | __main__:run_benchmark:432 - dfin['f1'].map((lambda x: (10 if (x < 10) else x)))
2022-08-06 09:21:34.136 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.136 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.137 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:34.144 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.144 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.145 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:34.152 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.152 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.152 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:34.160 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.160 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.160 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:34.168 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.168 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.168 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:34.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.176 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.176 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:34.183 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.184 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.184 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:34.191 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.191 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.192 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:34.199 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.199 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.199 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin['f1'] > 10, 10)
2022-08-06 09:21:34.211 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.211 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.211 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:34.219 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:34.219 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 09:21:34.219 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:34.226 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.408 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.409 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin < 10)] = 10
2022-08-06 09:21:35.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.418 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.418 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:35.426 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.426 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.426 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin < 10)] = 10
2022-08-06 09:21:35.433 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.434 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.434 | DEBUG    | __main__:run_benchmark:432 - dfin['f1'].map((lambda x: (10 if (x < 10) else x)))
2022-08-06 09:21:35.441 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.442 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.442 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:35.449 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.449 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.450 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:35.457 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.457 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.458 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:35.465 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.465 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.465 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:35.473 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.473 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.473 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:35.480 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.481 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.481 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:35.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.489 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.489 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:35.496 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.496 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.496 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin > 10).fillna(10)
2022-08-06 09:21:35.509 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.509 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.509 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin > 10, 10)
2022-08-06 09:21:35.520 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.521 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.521 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:35.528 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.528 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.528 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:35.536 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.536 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.536 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:35.543 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.544 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.544 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:35.551 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.551 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.551 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:35.559 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.559 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.559 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:35.566 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:35.567 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 09:21:35.567 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin > 10, 10)
2022-08-06 09:21:35.578 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.696 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.696 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:36.704 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.704 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.705 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:36.712 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.712 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.713 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:36.720 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.720 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.721 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:36.728 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.728 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.728 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:36.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.736 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.736 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:36.743 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.744 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.744 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:36.751 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.752 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.752 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:36.759 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.759 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.760 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:36.767 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.767 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.767 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:36.775 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.775 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.775 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:36.783 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.783 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.783 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:36.791 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.791 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.791 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:36.798 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.799 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.799 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:36.806 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.806 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.806 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:36.814 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.814 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.814 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:36.822 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.822 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.822 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:36.829 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.829 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.830 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 09:21:36.837 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.837 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.837 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:36.845 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:36.845 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 09:21:36.845 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 09:21:36.852 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:38.700 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'f2' in dataframe 'dfin' set values that are smaller than 10 to 10 inplace
2022-08-06 09:21:38.700 | DEBUG    | __main__:run_benchmark:432 - dfin['f2'].where(dfin['f2'] > 10, 10, inplace=True)
2022-08-06 09:21:38.708 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:21:38.734 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 09:21:40.379 | DEBUG    | __main__:run_benchmark:431 - Query: if "ftr2" value is less than 5 then change it to 5 and return all rows
2022-08-06 09:21:40.380 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['ftr2'] < 5, 'ftr2'] = 5
2022-08-06 09:21:40.388 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:21:42.278 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 09:21:42.279 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].map((lambda x: (1 if (x < 5) else 0)))
2022-08-06 09:21:42.288 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:42.288 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 09:21:42.288 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=5 if val>5
2022-08-06 09:21:42.288 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:42.289 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 09:21:42.289 | DEBUG    | __main__:run_benchmark:432 - dfin.apply((lambda x: (1 if (x['ftr2'] < 5) else 0)), axis=1)
2022-08-06 09:21:42.296 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:42.297 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 09:21:42.297 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=12 if val>12
2022-08-06 09:21:42.297 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:42.297 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 09:21:42.297 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=0 if val>=5
2022-08-06 09:21:42.297 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:42.297 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 09:21:42.298 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].map((lambda x: (1 if (x < 5) else 0)))
2022-08-06 09:21:42.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:42.305 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 09:21:42.305 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].map((lambda x: (5 if (x < 5) else x)))
2022-08-06 09:21:42.313 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:42.313 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 09:21:42.313 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=0 if val>5
2022-08-06 09:21:42.313 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:42.314 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 09:21:42.314 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (x if (x < 5) else 0)))
2022-08-06 09:21:42.321 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:42.322 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 09:21:42.322 | DEBUG    | __main__:run_benchmark:432 - #  return 1 else return 0
2022-08-06 09:21:42.322 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:42.322 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 09:21:42.322 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=5 if val>5
2022-08-06 09:21:42.323 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:42.323 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 09:21:42.323 | DEBUG    | __main__:run_benchmark:432 - #  val=12 if val>12
2022-08-06 09:21:42.323 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:42.323 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 09:21:42.323 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=5 if val>5
2022-08-06 09:21:42.323 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:42.323 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 09:21:42.323 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=0 if val<5
2022-08-06 09:21:42.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:42.324 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 09:21:42.324 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=5 if val>5
2022-08-06 09:21:42.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:42.324 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 09:21:42.324 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].map((lambda x: (x if (x < 5) else np.nan)))
2022-08-06 09:21:42.332 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:42.332 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 09:21:42.332 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'] = dfin['ftr2'].apply(lambda val: 5 if val<5 else val)
2022-08-06 09:21:42.340 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:21:43.994 | DEBUG    | __main__:run_benchmark:431 - Query: if val of "ftr2" <5 then val=5
2022-08-06 09:21:43.995 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].map((lambda x: (5 if (x < 5) else x)))
2022-08-06 09:21:44.004 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:44.004 | DEBUG    | __main__:run_benchmark:431 - Query: if val of "ftr2" <5 then val=5
2022-08-06 09:21:44.004 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'] = dfin['ftr2'].apply(lambda x: 5 if x < 5 else x)
2022-08-06 09:21:44.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:21:44.039 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 09:21:45.575 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, if 'feat2' is greater than 10, replace the cell value to 10
2022-08-06 09:21:45.576 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['feat2'] > 10, 'feat2'] = 10
2022-08-06 09:21:45.585 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:21:47.325 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, if 'feat2' is greater than 10 replace the cell value to 10
2022-08-06 09:21:47.326 | DEBUG    | __main__:run_benchmark:432 - #  If 'feat2' is less than -5 replace the cell value to -5
2022-08-06 09:21:47.326 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:47.327 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, if 'feat2' is greater than 10 replace the cell value to 10
2022-08-06 09:21:47.327 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['feat2'] > 10, 'feat2'] = 10
2022-08-06 09:21:47.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:21:47.362 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 09:21:48.683 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.684 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.696 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.696 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.696 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.707 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.707 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.708 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.718 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.719 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.719 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.730 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.730 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.730 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.741 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.741 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.741 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.752 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.752 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.752 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.763 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.763 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.763 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.774 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.774 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.774 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.785 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.785 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.786 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.797 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.797 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.797 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.808 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.808 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.808 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.819 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.819 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.819 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.830 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.830 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.830 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.841 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.841 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.841 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.852 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.852 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.853 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.863 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.863 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.864 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.874 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.874 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.875 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.885 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.886 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.896 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.896 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 09:21:48.897 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 09:21:48.907 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:21:48.932 | DEBUG    | __main__:run:515 - Number of queries: 25
2022-08-06 09:21:49.224 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "replace elements that are greater than 0 with 0 in column 'inputB'", 'user': 'u5'}, {'query': "replac...
    │               └ {'queries': [{'query': "replace elements that are greater than 0 with 0 in column 'inputB'", 'user': 'u5'}, {'query': "replac...
    └ {'query': 'Set inputB=0 if inputB<0', 'user': 'u16'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ["#  Use the following code example as a guide to write code for the comment below\n\n#  Set the max column width to -1\npd.s...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dfe543810>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:21:49 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:21:49 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dfe5afc10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:21:49.250 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:22:20.900 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:20.901 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].where(dfin['inputB'] >= 0, 0)
2022-08-06 09:22:20.910 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:20.910 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:20.910 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['inputB'] < 0, 'inputB'] = 0
2022-08-06 09:22:20.918 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:20.918 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:20.918 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].map((lambda x: 0 if x < 0 else x))
2022-08-06 09:22:20.926 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:20.926 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:20.926 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['inputB'] < 0, 'inputB'] = 0
2022-08-06 09:22:20.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:20.934 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:20.934 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['inputB'] < 0, 'inputB'] = 0
2022-08-06 09:22:20.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:20.942 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:20.942 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['inputB'] < 0, 'inputB'] = 0
2022-08-06 09:22:20.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:20.949 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:20.950 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].where(dfin['inputB'] >= 0, 0)
2022-08-06 09:22:20.957 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:20.958 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:20.958 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['inputB'] < 0, 'inputB'] = 0
2022-08-06 09:22:20.965 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:20.965 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:20.966 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].where(dfin['inputB'] >= 0, 0)
2022-08-06 09:22:20.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:20.973 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:20.974 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['inputB'] < 0, 'inputB'] = 0
2022-08-06 09:22:20.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:20.981 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:20.982 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['inputB'] < 0, 'inputB'] = 0
2022-08-06 09:22:20.989 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:20.989 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:20.989 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply(lambda x: 0 if x < 0 else x)
2022-08-06 09:22:20.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:20.997 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:20.997 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'][(dfin['inputB'] < 0)] = 0
2022-08-06 09:22:21.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:21.005 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:21.006 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].where(dfin['inputB'] >= 0, 0)
2022-08-06 09:22:21.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:21.013 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:21.013 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].map((lambda x: 0 if x < 0 else x))
2022-08-06 09:22:21.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:21.021 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:21.021 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['inputB'] < 0, 'inputB'] = 0
2022-08-06 09:22:21.029 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:21.029 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:21.029 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['inputB'] < 0, 'inputB'] = 0
2022-08-06 09:22:21.036 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:21.037 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:21.037 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply(lambda x: 0 if x < 0 else x)
2022-08-06 09:22:21.044 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:21.044 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:21.044 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['inputB'] < 0, 'inputB'] = 0
2022-08-06 09:22:21.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:21.052 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 09:22:21.052 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['inputB'] < 0, 'inputB'] = 0
2022-08-06 09:22:21.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:22.903 | DEBUG    | __main__:run_benchmark:431 - Query: 'inputB' = 0 if 'inputB' > 0 in dfin
2022-08-06 09:22:22.904 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] > 0, 0, dfin['inputB'])
2022-08-06 09:22:22.913 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:22:22.940 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 09:22:22.940 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 09:22:22.940 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 09:22:24.735 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-06 09:22:24.736 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '-')].index)
2022-08-06 09:22:24.755 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:24.755 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-06 09:22:24.756 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '-']
2022-08-06 09:22:24.772 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:24.772 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-06 09:22:24.773 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:22:24.796 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:24.796 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-06 09:22:24.796 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:22:24.820 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:24.820 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-06 09:22:24.820 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '-')]
2022-08-06 09:22:24.837 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:24.837 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-06 09:22:24.838 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:22:24.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:24.861 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-06 09:22:24.861 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any')
2022-08-06 09:22:24.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:24.885 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-06 09:22:24.885 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:22:24.908 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:24.908 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-06 09:22:24.908 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index).reset_index(drop=True)
2022-08-06 09:22:24.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:24.932 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-06 09:22:24.932 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin.values != '-']
2022-08-06 09:22:24.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:24.950 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-06 09:22:24.950 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin.isin(['-'])].any(axis=1))
2022-08-06 09:22:24.954 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:24.954 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-06 09:22:24.954 | DEBUG    | __main__:run_benchmark:432 - dfin[(~ dfin.isin(['-'])).all(axis=1)]
2022-08-06 09:22:24.966 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:22:26.295 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.296 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] == '-']
2022-08-06 09:22:26.320 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.320 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.320 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['B'] == '-')]
2022-08-06 09:22:26.342 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.343 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.343 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.applymap(lambda x: x == '-').any(1)]
2022-08-06 09:22:26.366 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.366 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.367 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-')]
2022-08-06 09:22:26.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.390 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.391 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 09:22:26.413 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.413 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.413 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 09:22:26.436 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.436 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.436 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 09:22:26.458 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.459 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.459 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 09:22:26.481 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.481 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.482 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 09:22:26.504 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.504 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.504 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 09:22:26.527 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.527 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.527 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 09:22:26.549 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.550 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.550 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 09:22:26.572 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.572 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.573 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 09:22:26.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.595 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.595 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 09:22:26.618 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.618 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.618 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 09:22:26.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.640 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.641 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 09:22:26.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.663 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.663 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 09:22:26.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.686 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.686 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 09:22:26.708 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.708 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.709 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] == '-']
2022-08-06 09:22:26.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:26.731 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 09:22:26.731 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['B'] == '-')]
2022-08-06 09:22:26.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:28.894 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:28.895 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 09:22:28.918 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:28.918 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:28.918 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 09:22:28.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:28.941 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:28.941 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 09:22:28.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:28.964 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:28.964 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 09:22:28.987 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:28.987 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:28.987 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['A'] == 0) | (dfin['B'] == 0) | (dfin['C'] == 0) | (dfin['D'] == 0)]
2022-08-06 09:22:29.011 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:29.011 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:29.012 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 09:22:29.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:29.034 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:29.034 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 09:22:29.057 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:29.058 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:29.058 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 09:22:29.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:29.081 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:29.081 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.apply(lambda x: x.str.contains('-').any(), axis=1)]
2022-08-06 09:22:29.083 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:29.083 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:29.084 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 09:22:29.106 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:29.107 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:29.107 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:22:29.107 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:29.107 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:29.107 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-').any(axis=1)]
2022-08-06 09:22:29.130 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:29.130 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:29.130 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.isin(['-']).any(axis=1)]
2022-08-06 09:22:29.153 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:29.153 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:29.154 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 09:22:29.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:29.176 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:29.177 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 09:22:29.199 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:29.199 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:29.200 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 09:22:29.223 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:29.223 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:29.223 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 09:22:29.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:29.246 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:29.246 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-']).any(axis=1)]
2022-08-06 09:22:29.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:29.269 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:29.270 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.isin(['-']).any(axis=1)]
2022-08-06 09:22:29.292 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:29.292 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 09:22:29.293 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin({'A': ['-'], 'B': ['-'], 'C': ['-'], 'D': ['-']}).any(axis=1)]
2022-08-06 09:22:29.318 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.079 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.080 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '-')]
2022-08-06 09:22:31.098 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.098 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.098 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index, inplace=True)
2022-08-06 09:22:31.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.115 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.115 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:22:31.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.139 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.139 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', subset=['B', 'C', 'D'])
2022-08-06 09:22:31.163 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.163 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.163 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:22:31.186 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.186 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.187 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:22:31.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.210 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.210 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:22:31.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.233 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.234 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index, inplace=True)
2022-08-06 09:22:31.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.251 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.251 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:22:31.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.274 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.275 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:22:31.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.298 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.298 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index, inplace=True)
2022-08-06 09:22:31.315 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.315 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.316 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.index[dfin['B'] == '-'], inplace=True)
2022-08-06 09:22:31.333 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.333 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.333 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:22:31.356 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.356 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.356 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 09:22:31.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.380 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.380 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index, inplace=True)
2022-08-06 09:22:31.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.398 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.398 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:22:31.421 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.421 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.421 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:22:31.444 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.444 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.445 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:22:31.468 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.468 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.468 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '-')].index)
2022-08-06 09:22:31.486 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.486 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing '-'
2022-08-06 09:22:31.486 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.index[dfin['B'] == '-'])
2022-08-06 09:22:31.509 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:22:31.695 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Given a dataframe dfin, remove all rows where there exists a cell with value '-'", 'user': 'u18'}, {'...
    │               └ {'queries': [{'query': "Given a dataframe dfin, remove all rows where there exists a cell with value '-'", 'user': 'u18'}, {'...
    └ {'query': "Drop rows containing value equal to '-'", 'user': 'u2'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Drop rows where "rate" is equal to "...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dfe5b9ad0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:22:31 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:22:31 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dfe4fc710>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:22:31.720 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:23:03.417 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.417 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['B'] != '-')].reset_index(drop=True)
2022-08-06 09:23:03.441 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.442 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.442 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '-')].index)
2022-08-06 09:23:03.460 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.460 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.460 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:03.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.483 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.483 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 09:23:03.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.507 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.508 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:03.531 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.531 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.531 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 09:23:03.554 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.555 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.555 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:03.578 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.578 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.579 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin.values != '-']
2022-08-06 09:23:03.596 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.596 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.596 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:03.620 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.620 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.620 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', subset=['B', 'C'])
2022-08-06 09:23:03.644 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.644 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.644 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:03.667 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.667 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.668 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index, inplace=True)
2022-08-06 09:23:03.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.685 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.685 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index, inplace=True)
2022-08-06 09:23:03.702 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.702 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.703 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:03.726 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.726 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.726 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:03.749 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.749 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.749 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:03.772 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.773 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.773 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index, inplace=True)
2022-08-06 09:23:03.790 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.790 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.790 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:03.813 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.813 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.814 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:03.837 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:03.837 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows containing value equal to '-'
2022-08-06 09:23:03.837 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index, inplace=True)
2022-08-06 09:23:03.854 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.393 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.394 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '-')].index)
2022-08-06 09:23:05.414 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.414 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.414 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['B'] != '-')].reset_index(drop=True)
2022-08-06 09:23:05.437 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.437 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.437 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:05.460 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.460 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.460 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:05.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.484 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.484 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '-']
2022-08-06 09:23:05.501 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.501 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.501 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index)
2022-08-06 09:23:05.524 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.524 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.524 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:05.548 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.548 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.548 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:05.571 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.571 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.572 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index, inplace=True)
2022-08-06 09:23:05.589 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.589 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.589 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '-')]
2022-08-06 09:23:05.606 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.606 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.606 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:05.629 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.629 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.630 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:05.653 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.653 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.653 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '-')].index, inplace=True)
2022-08-06 09:23:05.670 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.670 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.670 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:05.693 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.694 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.694 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:05.717 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.717 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.717 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:05.741 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.741 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.741 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:05.764 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.764 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.764 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 09:23:05.788 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.788 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.788 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:05.811 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.812 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 09:23:05.812 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-06 09:23:05.835 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:05.864 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 09:23:07.718 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?' in any column
2022-08-06 09:23:07.719 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?'].dropna()
2022-08-06 09:23:07.730 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:23:09.183 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 09:23:09.184 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0)
2022-08-06 09:23:09.208 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:09.208 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 09:23:09.209 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 09:23:09.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:09.227 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 09:23:09.227 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:23:09.251 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:09.251 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 09:23:09.251 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '?')]
2022-08-06 09:23:09.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:09.268 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 09:23:09.268 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:09.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:09.285 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 09:23:09.285 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 09:23:09.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:23:10.560 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 09:23:10.560 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 09:23:10.579 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:10.579 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 09:23:10.579 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis='rows', how='any')
2022-08-06 09:23:10.603 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:10.603 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 09:23:10.603 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(inplace=True)
2022-08-06 09:23:10.620 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:10.621 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 09:23:10.621 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:23:10.644 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:10.645 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 09:23:10.645 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '?')]
2022-08-06 09:23:10.661 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:10.661 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 09:23:10.662 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0)
2022-08-06 09:23:10.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:10.685 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 09:23:10.685 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:23:10.703 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:10.703 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 09:23:10.703 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any')
2022-08-06 09:23:10.727 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:10.727 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 09:23:10.727 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any', inplace=True)
2022-08-06 09:23:10.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:10.745 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 09:23:10.745 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 09:23:10.768 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:10.768 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 09:23:10.769 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:10.785 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:10.785 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 09:23:10.785 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:23:10.803 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:10.803 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 09:23:10.803 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 09:23:10.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:10.822 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 09:23:10.822 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '?').all(1)]
2022-08-06 09:23:10.831 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:23:12.866 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with ? in any column of dfin
2022-08-06 09:23:12.867 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:23:12.892 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:12.892 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with ? in any column of dfin
2022-08-06 09:23:12.892 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 09:23:12.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:12.916 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with ? in any column of dfin
2022-08-06 09:23:12.916 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 09:23:12.940 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:12.940 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with ? in any column of dfin
2022-08-06 09:23:12.940 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis='rows', how='any')
2022-08-06 09:23:12.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:12.963 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with ? in any column of dfin
2022-08-06 09:23:12.964 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:12.980 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:12.980 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with ? in any column of dfin
2022-08-06 09:23:12.980 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any', inplace=True)
2022-08-06 09:23:12.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:12.997 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with ? in any column of dfin
2022-08-06 09:23:12.997 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any')
2022-08-06 09:23:13.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:13.021 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with ? in any column of dfin
2022-08-06 09:23:13.021 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(~ dfin.isin(['?'])).all(axis=1)]
2022-08-06 09:23:13.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:23:14.741 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with 'NaN' and Remove rows which has any column value missing
2022-08-06 09:23:14.742 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 09:23:14.756 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:23:15.926 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with 'NaN' and then drop rows which has any column value missing
2022-08-06 09:23:15.927 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 09:23:15.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:23:17.643 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with 'NaN' in dfin and then drop rows which has any column value missing
2022-08-06 09:23:17.644 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 09:23:17.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:17.663 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with 'NaN' in dfin and then drop rows which has any column value missing
2022-08-06 09:23:17.663 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 09:23:17.677 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:23:18.922 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with numpy NaN in dfin and then drop rows which has any column value missing
2022-08-06 09:23:18.923 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna(how='any')
2022-08-06 09:23:18.938 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:23:19.851 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with numpy NaN in dfin and then drop rows which has any missing value
2022-08-06 09:23:19.852 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 09:23:19.867 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:23:21.159 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with numpy NaN in dfin and drop rows which has any missing value
2022-08-06 09:23:21.160 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 09:23:21.175 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:23:22.864 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 09:23:22.865 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 09:23:22.889 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:22.889 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 09:23:22.889 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?')].index)
2022-08-06 09:23:22.907 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:22.907 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 09:23:22.907 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.loc[dfin['B'] == '?'].index)
2022-08-06 09:23:22.930 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:22.930 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 09:23:22.931 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 09:23:22.954 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:22.954 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 09:23:22.954 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '?').all(1)]
2022-08-06 09:23:22.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:23:24.559 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where values are '?'
2022-08-06 09:23:24.560 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?')].index)
2022-08-06 09:23:24.580 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:24.580 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where values are '?'
2022-08-06 09:23:24.580 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:23:24.604 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:24.604 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where values are '?'
2022-08-06 09:23:24.604 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any')
2022-08-06 09:23:24.628 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:24.628 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where values are '?'
2022-08-06 09:23:24.628 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any', inplace=True)
2022-08-06 09:23:24.646 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:24.646 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where values are '?'
2022-08-06 09:23:24.646 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:23:24.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:24.664 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where values are '?'
2022-08-06 09:23:24.664 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:23:24.687 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:24.687 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where values are '?'
2022-08-06 09:23:24.688 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:23:24.711 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:24.711 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where values are '?'
2022-08-06 09:23:24.712 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 09:23:24.729 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:24.729 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where values are '?'
2022-08-06 09:23:24.729 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any', subset=['B', 'C'])
2022-08-06 09:23:24.753 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:24.753 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where values are '?'
2022-08-06 09:23:24.753 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 09:23:24.770 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:24.771 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where values are '?'
2022-08-06 09:23:24.771 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, thresh=2)
2022-08-06 09:23:24.794 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:24.795 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where values are '?'
2022-08-06 09:23:24.795 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 09:23:24.812 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:24.812 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where values are '?'
2022-08-06 09:23:24.812 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any', inplace=True)
2022-08-06 09:23:24.830 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:24.830 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where values are '?'
2022-08-06 09:23:24.830 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '?').all(axis=1)]
2022-08-06 09:23:24.839 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:23:26.821 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 09:23:26.821 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', subset=['B', 'C'])
2022-08-06 09:23:26.847 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:26.847 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 09:23:26.847 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.index[dfin['B'] == '?'])
2022-08-06 09:23:26.870 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:26.870 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 09:23:26.870 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.index[dfin['B'] == '?'])
2022-08-06 09:23:26.893 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:26.893 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 09:23:26.893 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.columns[dfin.apply(lambda col: col.str.contains('?').any())], axis=1)
2022-08-06 09:23:26.896 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:26.896 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 09:23:26.896 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.index[dfin['B'] == '?'])
2022-08-06 09:23:26.919 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:26.919 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 09:23:26.920 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin.values == '?'].index)
2022-08-06 09:23:26.932 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:23:28.650 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:28.650 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:23:28.675 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:28.675 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:28.676 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 09:23:28.699 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:28.699 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:28.699 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:23:28.717 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:28.717 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:28.717 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any', subset=['B', 'C'])
2022-08-06 09:23:28.741 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:28.741 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:28.741 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:23:28.759 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:28.759 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:28.759 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, thresh=2)
2022-08-06 09:23:28.783 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:28.783 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:28.783 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 09:23:28.806 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:28.806 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:28.807 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:23:28.830 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:28.830 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:28.831 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 09:23:28.854 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:28.854 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:28.854 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 09:23:28.877 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:28.877 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:28.877 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:23:28.901 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:28.901 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:28.901 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 09:23:28.924 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:28.924 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:28.925 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 09:23:28.942 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:28.942 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:28.942 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 09:23:28.965 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:28.965 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:28.965 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 09:23:28.989 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:28.989 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:28.989 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:23:29.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:29.013 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:29.013 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'])
2022-08-06 09:23:29.037 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:29.037 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:29.037 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B', 'C'], how='any', inplace=True)
2022-08-06 09:23:29.055 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:29.055 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:29.055 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 09:23:29.078 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:29.079 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 09:23:29.079 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 09:23:29.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:30.713 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:30.714 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False)
2022-08-06 09:23:30.739 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:30.739 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:30.740 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', subset=['B', 'C'], inplace=True)
2022-08-06 09:23:30.757 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:30.757 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:30.757 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:23:30.775 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:30.775 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:30.775 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], how='all')
2022-08-06 09:23:30.799 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:30.799 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:30.799 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', subset=['B', 'C'], inplace=True)
2022-08-06 09:23:30.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:30.817 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:30.817 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], how='any')
2022-08-06 09:23:30.841 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:30.841 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:30.841 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any', subset=['B', 'C'])
2022-08-06 09:23:30.865 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:30.865 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:30.865 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(inplace=True)
2022-08-06 09:23:30.883 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:30.883 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:30.883 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, subset=['B', 'C'])
2022-08-06 09:23:30.907 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:30.907 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:30.907 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 09:23:30.925 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:30.925 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:30.925 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:23:30.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:30.943 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:30.943 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 09:23:30.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:30.961 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:30.961 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:23:30.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:30.978 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:30.978 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', subset=['B', 'C'], inplace=True)
2022-08-06 09:23:30.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:30.996 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:30.996 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 09:23:31.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:31.014 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:31.014 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'])
2022-08-06 09:23:31.038 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:31.038 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:31.038 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', subset=['B', 'C'], inplace=True)
2022-08-06 09:23:31.056 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:31.056 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:31.056 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 09:23:31.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:31.074 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:31.074 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 09:23:31.091 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:31.091 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 09:23:31.092 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, inplace=True)
2022-08-06 09:23:31.109 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:32.317 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 09:23:32.318 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:23:32.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:32.336 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 09:23:32.337 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:23:32.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:32.360 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where any value is '?'
2022-08-06 09:23:32.361 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin != '?').all(1)]
2022-08-06 09:23:32.370 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:23:32.399 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 09:23:33.493 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.494 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis='rows', how='any')
2022-08-06 09:23:33.519 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.519 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.520 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 09:23:33.537 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.537 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.537 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:23:33.561 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.561 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.561 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '?')]
2022-08-06 09:23:33.577 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.577 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.578 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(inplace=True)
2022-08-06 09:23:33.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.595 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.595 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0)
2022-08-06 09:23:33.619 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.619 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.619 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any')
2022-08-06 09:23:33.643 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.643 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.643 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 09:23:33.661 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.662 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.662 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:23:33.679 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.680 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.680 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 09:23:33.698 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.698 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.698 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, inplace=True)
2022-08-06 09:23:33.716 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.716 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.716 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0)
2022-08-06 09:23:33.740 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.740 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.740 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 09:23:33.764 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.764 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.764 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:33.781 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.781 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.781 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.index[dfin['B'] == '?'])
2022-08-06 09:23:33.804 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.804 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.804 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:33.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.821 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.821 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:33.838 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.838 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.838 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?')].index)
2022-08-06 09:23:33.856 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.856 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.856 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:33.873 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:33.873 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 09:23:33.873 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 09:23:33.892 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.236 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.237 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any')
2022-08-06 09:23:35.261 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.261 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.262 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis='rows', how='any')
2022-08-06 09:23:35.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.285 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.285 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 09:23:35.309 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.309 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.309 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(inplace=True)
2022-08-06 09:23:35.327 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.327 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.327 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, inplace=True)
2022-08-06 09:23:35.344 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.345 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.345 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:35.361 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.361 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.361 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0)
2022-08-06 09:23:35.385 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.385 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.385 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.index[dfin['B'] == '?'])
2022-08-06 09:23:35.408 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.408 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.408 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any', inplace=True)
2022-08-06 09:23:35.426 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.426 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.426 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(dfin['B'] != '?')]
2022-08-06 09:23:35.442 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.443 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.443 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:23:35.466 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.466 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.467 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, inplace=True)
2022-08-06 09:23:35.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.484 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.484 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 09:23:35.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.508 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.508 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 09:23:35.525 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.526 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.526 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:23:35.543 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.543 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.543 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:35.560 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.560 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.560 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 09:23:35.583 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.584 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.584 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index, inplace=True)
2022-08-06 09:23:35.601 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.601 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.601 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:23:35.625 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:35.625 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 09:23:35.625 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:23:35.643 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:36.640 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:36.641 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:23:36.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:36.665 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:36.666 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis='rows', how='any')
2022-08-06 09:23:36.689 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:36.689 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:36.690 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 09:23:36.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:36.713 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:36.713 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:23:36.737 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:36.737 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:36.737 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:23:36.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:36.755 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:36.755 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0)
2022-08-06 09:23:36.778 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:36.778 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:36.779 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, inplace=True)
2022-08-06 09:23:36.796 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:36.796 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:36.796 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 09:23:36.820 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:36.820 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:36.820 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0)
2022-08-06 09:23:36.844 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:36.844 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:36.844 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(inplace=True)
2022-08-06 09:23:36.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:36.862 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:36.862 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any', inplace=True)
2022-08-06 09:23:36.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:36.879 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:36.880 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, inplace=True)
2022-08-06 09:23:36.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:36.897 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:36.898 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 09:23:36.921 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:36.921 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:36.921 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 09:23:36.944 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:36.945 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:36.945 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any')
2022-08-06 09:23:36.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:36.968 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:36.969 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 09:23:36.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:36.992 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:36.992 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?')].index)
2022-08-06 09:23:37.010 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:37.010 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:37.010 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 09:23:37.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:37.033 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:37.034 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:23:37.057 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:37.057 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 09:23:37.057 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.loc[dfin['B'] == '?'].index)
2022-08-06 09:23:37.081 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:38.710 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:38.710 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] != '?']
2022-08-06 09:23:38.734 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:38.734 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:38.735 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] != '?']
2022-08-06 09:23:38.757 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:38.757 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:38.758 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] != '?']
2022-08-06 09:23:38.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:38.780 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:38.780 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin.apply(lambda x: x != '?', axis=1)]
2022-08-06 09:23:38.799 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:38.800 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:38.800 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['B'] != '?')]
2022-08-06 09:23:38.822 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:38.823 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:38.823 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] != '?']
2022-08-06 09:23:38.845 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:38.845 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:38.846 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] != '?']
2022-08-06 09:23:38.868 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:38.868 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:38.869 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] != '?']
2022-08-06 09:23:38.891 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:38.892 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:38.892 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] != '?']
2022-08-06 09:23:38.914 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:38.915 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:38.915 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] != '?']
2022-08-06 09:23:38.938 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:38.938 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:38.938 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] != '?']
2022-08-06 09:23:38.961 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:38.961 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:38.961 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] != '?']
2022-08-06 09:23:38.983 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:38.984 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:38.984 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] != '?']
2022-08-06 09:23:39.006 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:39.006 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:39.007 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:39.023 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:39.023 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:39.023 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] != '?']
2022-08-06 09:23:39.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:39.046 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:39.046 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] != '?']
2022-08-06 09:23:39.069 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:39.069 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:39.069 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['B'] != '?']
2022-08-06 09:23:39.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:39.092 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:39.092 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] != '?']
2022-08-06 09:23:39.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:39.115 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:39.115 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(~ dfin['B'].isin(['?']))]
2022-08-06 09:23:39.138 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:39.138 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 09:23:39.139 | DEBUG    | __main__:run_benchmark:432 - dfin[(~ dfin.isin(['?'])).all(axis=1)]
2022-08-06 09:23:39.151 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:23:40.641 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.642 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:40.661 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.661 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.661 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any')
2022-08-06 09:23:40.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.685 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.685 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:23:40.702 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.703 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.703 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any', inplace=True)
2022-08-06 09:23:40.720 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.720 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.720 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, inplace=True)
2022-08-06 09:23:40.738 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.738 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.738 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:40.754 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.755 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.755 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:40.771 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.771 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.772 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(inplace=True)
2022-08-06 09:23:40.789 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.789 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.789 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:23:40.807 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.807 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.807 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B', 'C'], inplace=True)
2022-08-06 09:23:40.824 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.825 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.825 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:40.841 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.841 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.842 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?')].index)
2022-08-06 09:23:40.859 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.859 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.860 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:40.876 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.876 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.876 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:40.893 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.893 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.893 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:40.910 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.910 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.910 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:40.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.927 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.927 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:40.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.944 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.944 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:40.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.960 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.961 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:40.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:40.977 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 09:23:40.977 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:40.994 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.045 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.046 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:42.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.063 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.064 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any')
2022-08-06 09:23:42.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.087 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.087 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'], inplace=True)
2022-08-06 09:23:42.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.105 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.105 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:42.122 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.122 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.122 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(inplace=True)
2022-08-06 09:23:42.140 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.140 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.140 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:42.156 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.157 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.157 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:42.173 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.174 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.174 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, inplace=True)
2022-08-06 09:23:42.191 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.191 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.191 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any', inplace=True)
2022-08-06 09:23:42.209 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.209 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.209 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:42.226 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.226 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.226 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 09:23:42.243 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.243 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.243 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:23:42.261 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.261 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.261 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:23:42.279 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.279 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.279 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:42.295 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.295 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.295 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 09:23:42.313 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.313 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.313 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:42.329 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.329 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.329 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 09:23:42.347 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.347 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.347 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:42.363 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.363 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.364 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:23:42.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.380 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have '?'
2022-08-06 09:23:42.380 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?')].index)
2022-08-06 09:23:42.398 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:23:42.591 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Remove rows having '?'", 'user': 'u16'}, {'query': "drop rows having '?'", 'user': 'u16'}, {'query': ...
    │               └ {'queries': [{'query': "Remove rows having '?'", 'user': 'u16'}, {'query': "drop rows having '?'", 'user': 'u16'}, {'query': ...
    └ {'query': "drop rows from 'dfin' that contain '?'", 'user': 'u3'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return the column names that start w...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dfe55ed90>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:23:42 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:23:42 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dfe5068d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:23:42.617 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:24:12.773 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Remove rows having '?'", 'user': 'u16'}, {'query': "drop rows having '?'", 'user': 'u16'}, {'query': ...
    │               └ {'queries': [{'query': "Remove rows having '?'", 'user': 'u16'}, {'query': "drop rows having '?'", 'user': 'u16'}, {'query': ...
    └ {'query': "drop rows from 'dfin' that contain '?'", 'user': 'u3'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return the column names that start w...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dfe544090>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:24:12 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:24:12 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dfe577d50>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:24:12.798 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:24:44.302 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.303 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 09:24:44.321 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.321 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.321 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(inplace=True)
2022-08-06 09:24:44.339 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.339 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.339 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any')
2022-08-06 09:24:44.363 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.363 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.363 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:24:44.379 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.380 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.380 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:24:44.403 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.403 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.404 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B', 'C'], how='any', inplace=True)
2022-08-06 09:24:44.421 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.421 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.421 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0)
2022-08-06 09:24:44.445 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.445 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.445 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0)
2022-08-06 09:24:44.469 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.469 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.469 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 09:24:44.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.493 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.493 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 09:24:44.510 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.510 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.511 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:24:44.527 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.527 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.527 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:24:44.551 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.551 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.551 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:24:44.568 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.568 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.568 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, inplace=True)
2022-08-06 09:24:44.586 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.586 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.586 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index).reset_index(drop=True)
2022-08-06 09:24:44.609 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.609 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.610 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:24:44.627 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.627 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.628 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False)
2022-08-06 09:24:44.651 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.651 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.652 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[(~ (dfin['B'] == '?'))]
2022-08-06 09:24:44.668 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.668 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.668 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, inplace=True)
2022-08-06 09:24:44.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:44.686 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 09:24:44.686 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any', inplace=True)
2022-08-06 09:24:44.704 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.018 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.019 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:24:46.044 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.044 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.044 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0)
2022-08-06 09:24:46.068 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.068 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.068 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B', 'C'], how='any', inplace=True)
2022-08-06 09:24:46.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.086 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.086 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:24:46.110 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.110 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.110 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any')
2022-08-06 09:24:46.133 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.134 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.134 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 09:24:46.157 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.157 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.157 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?')].index)
2022-08-06 09:24:46.175 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.175 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.175 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 09:24:46.199 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.200 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.200 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:24:46.217 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.217 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.218 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(inplace=True)
2022-08-06 09:24:46.235 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.235 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.235 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna()
2022-08-06 09:24:46.259 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.259 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.260 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:24:46.276 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.276 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.276 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B'])
2022-08-06 09:24:46.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.300 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.300 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any', inplace=True)
2022-08-06 09:24:46.318 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.318 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.318 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, inplace=True)
2022-08-06 09:24:46.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.336 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.336 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, thresh=2)
2022-08-06 09:24:46.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.360 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.360 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0)
2022-08-06 09:24:46.384 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.384 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.384 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(how='any', inplace=True)
2022-08-06 09:24:46.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.402 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.402 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['B'] != '?']
2022-08-06 09:24:46.419 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.419 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain ?
2022-08-06 09:24:46.419 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-06 09:24:46.442 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:46.473 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 09:24:46.473 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 09:24:46.473 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 09:24:46.474 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 09:24:48.256 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows from "data" that are not present in "test"
2022-08-06 09:24:48.257 | DEBUG    | __main__:run_benchmark:432 - data.drop(test, inplace=True)
2022-08-06 09:24:48.262 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:48.262 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows from "data" that are not present in "test"
2022-08-06 09:24:48.262 | DEBUG    | __main__:run_benchmark:432 - data[~data.isin(test)].dropna()
2022-08-06 09:24:48.280 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:24:50.268 | DEBUG    | __main__:run_benchmark:431 - Query: remove all common rows that "data" and "test" contain
2022-08-06 09:24:50.269 | DEBUG    | __main__:run_benchmark:432 - data.drop(test.index, inplace=True)
2022-08-06 09:24:50.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:24:50.311 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 09:24:51.850 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 09:24:51.851 | DEBUG    | __main__:run_benchmark:432 - data = data.append(test)
2022-08-06 09:24:51.874 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:51.874 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 09:24:51.874 | DEBUG    | __main__:run_benchmark:432 - data_test = data.sub(test)
2022-08-06 09:24:51.904 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:51.904 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 09:24:51.904 | DEBUG    | __main__:run_benchmark:432 - test_data = data.append(test)
2022-08-06 09:24:51.932 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:51.933 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 09:24:51.933 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 09:24:51.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:51.963 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 09:24:51.963 | DEBUG    | __main__:run_benchmark:432 - data = data.append(test)
2022-08-06 09:24:51.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:51.985 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 09:24:51.985 | DEBUG    | __main__:run_benchmark:432 - data = data.append(test)
2022-08-06 09:24:52.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:52.007 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 09:24:52.007 | DEBUG    | __main__:run_benchmark:432 - data = data.append(test)
2022-08-06 09:24:52.029 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:52.029 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 09:24:52.030 | DEBUG    | __main__:run_benchmark:432 - data = data.append(test)
2022-08-06 09:24:52.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:52.052 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 09:24:52.052 | DEBUG    | __main__:run_benchmark:432 - data = data[~data.isin(test)].dropna()
2022-08-06 09:24:52.066 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:24:53.918 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:53.919 | DEBUG    | __main__:run_benchmark:432 - test_df = data.append(test)
2022-08-06 09:24:53.948 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:53.948 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:53.948 | DEBUG    | __main__:run_benchmark:432 - test = data.iloc[0:7]
2022-08-06 09:24:53.970 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:53.970 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:53.970 | DEBUG    | __main__:run_benchmark:432 - test_sub = test.drop(columns=['target'])
2022-08-06 09:24:53.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:53.997 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:53.997 | DEBUG    | __main__:run_benchmark:432 - test = data.iloc[0:7]
2022-08-06 09:24:54.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:54.019 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:54.019 | DEBUG    | __main__:run_benchmark:432 - test = data.iloc[0:7, 0:3]
2022-08-06 09:24:54.040 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:54.040 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:54.040 | DEBUG    | __main__:run_benchmark:432 - test = data.iloc[5:7]
2022-08-06 09:24:54.061 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:54.061 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:54.061 | DEBUG    | __main__:run_benchmark:432 - test = data.iloc[5:7]
2022-08-06 09:24:54.083 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:54.083 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:54.083 | DEBUG    | __main__:run_benchmark:432 - test_sub = test[cols].copy()
2022-08-06 09:24:54.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:54.087 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:54.087 | DEBUG    | __main__:run_benchmark:432 - test = data.sub(test)
2022-08-06 09:24:54.111 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:54.111 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:54.111 | DEBUG    | __main__:run_benchmark:432 - test = data.loc[:, (data.dtypes == object)]
2022-08-06 09:24:54.128 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:54.128 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:54.129 | DEBUG    | __main__:run_benchmark:432 - test = data.sub(test)
2022-08-06 09:24:54.153 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:54.153 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:54.154 | DEBUG    | __main__:run_benchmark:432 - test = data.sub(test)
2022-08-06 09:24:54.178 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:54.178 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:54.178 | DEBUG    | __main__:run_benchmark:432 - test = data.loc[meses[mes]]
2022-08-06 09:24:54.182 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:54.182 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:54.182 | DEBUG    | __main__:run_benchmark:432 - test = data.iloc[5:7]
2022-08-06 09:24:54.203 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:54.204 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:54.204 | DEBUG    | __main__:run_benchmark:432 - test_sub = data.sub(test)
2022-08-06 09:24:54.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:54.234 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:54.234 | DEBUG    | __main__:run_benchmark:432 - sub = data[['inp1', 'inp2', 'inp3']]
2022-08-06 09:24:54.261 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:54.261 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:54.261 | DEBUG    | __main__:run_benchmark:432 - test = data.iloc[5:7]
2022-08-06 09:24:54.283 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:54.283 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:54.283 | DEBUG    | __main__:run_benchmark:432 - test = data.iloc[::2]
2022-08-06 09:24:54.304 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:54.305 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:54.305 | DEBUG    | __main__:run_benchmark:432 - test_sub = test.drop(val_index)
2022-08-06 09:24:54.308 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:54.308 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 09:24:54.308 | DEBUG    | __main__:run_benchmark:432 - test = data.iloc[0:7]
2022-08-06 09:24:54.330 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:56.559 | DEBUG    | __main__:run_benchmark:431 - Query: Choose row from 'data' which is not in 'test'
2022-08-06 09:24:56.560 | DEBUG    | __main__:run_benchmark:432 - data[~data.isin(test).all(1)]
2022-08-06 09:24:56.576 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:24:56.606 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 09:24:58.480 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.481 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:24:58.509 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.509 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.509 | DEBUG    | __main__:run_benchmark:432 - test_indexes = test.index
2022-08-06 09:24:58.530 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.530 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.530 | DEBUG    | __main__:run_benchmark:432 - data.loc[(data.index.isin(test.index))]
2022-08-06 09:24:58.557 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.557 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.558 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:24:58.584 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.585 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.585 | DEBUG    | __main__:run_benchmark:432 - data.loc[test.index]
2022-08-06 09:24:58.611 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.612 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.612 | DEBUG    | __main__:run_benchmark:432 - data.index.intersection(test.index)
2022-08-06 09:24:58.633 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.633 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.633 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:24:58.660 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.660 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.661 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:24:58.687 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.688 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.688 | DEBUG    | __main__:run_benchmark:432 - test_index = test.index
2022-08-06 09:24:58.709 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.709 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.709 | DEBUG    | __main__:run_benchmark:432 - test_indexes = data.index.isin(test.index)
2022-08-06 09:24:58.730 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.730 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.731 | DEBUG    | __main__:run_benchmark:432 - data.index.isin(test.index)
2022-08-06 09:24:58.752 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.752 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.752 | DEBUG    | __main__:run_benchmark:432 - test_indexes = test.index
2022-08-06 09:24:58.773 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.773 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.774 | DEBUG    | __main__:run_benchmark:432 - idx_to_drop = data.index.isin(test.index)
2022-08-06 09:24:58.795 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.795 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.795 | DEBUG    | __main__:run_benchmark:432 - test_indexes = test.index.values
2022-08-06 09:24:58.816 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.816 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.817 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:24:58.844 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.844 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.844 | DEBUG    | __main__:run_benchmark:432 - test_index = test.index
2022-08-06 09:24:58.865 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.865 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.865 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:24:58.865 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.866 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.866 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:24:58.866 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.866 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.866 | DEBUG    | __main__:run_benchmark:432 - series = pd.Series(test.index)
2022-08-06 09:24:58.887 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:24:58.888 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 09:24:58.888 | DEBUG    | __main__:run_benchmark:432 - train_idx = data.index.isin(test.index)
2022-08-06 09:24:58.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.426 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.427 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 09:25:00.455 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.455 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.455 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:00.482 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.482 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.482 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:00.509 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.510 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.510 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:00.537 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.537 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.537 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:00.564 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.564 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.564 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:00.591 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.592 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.592 | DEBUG    | __main__:run_benchmark:432 - data = data[data.index.isin(test.index)]
2022-08-06 09:25:00.613 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.613 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.613 | DEBUG    | __main__:run_benchmark:432 - data.index.isin(test.index)
2022-08-06 09:25:00.634 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.634 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.634 | DEBUG    | __main__:run_benchmark:432 - data = data[data.index.isin(test.index)]
2022-08-06 09:25:00.655 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.655 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.656 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:00.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.683 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.683 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:00.710 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.710 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.710 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:00.738 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.738 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.738 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:00.765 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.765 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.765 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:00.792 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.792 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.792 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:00.819 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.819 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.820 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:00.847 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.847 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.847 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:00.874 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.874 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.875 | DEBUG    | __main__:run_benchmark:432 - data.index.difference(test.index)
2022-08-06 09:25:00.896 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:00.896 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are not in test
2022-08-06 09:25:00.896 | DEBUG    | __main__:run_benchmark:432 - data.loc[~data.index.isin(test.index)]
2022-08-06 09:25:00.910 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:25:02.382 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.383 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:02.411 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.411 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.411 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:02.438 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.438 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.438 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:02.465 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.465 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.465 | DEBUG    | __main__:run_benchmark:432 - data[data['id'].isin(test['id'])]
2022-08-06 09:25:02.469 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.469 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.469 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:02.496 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.496 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.496 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:02.523 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.523 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.523 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 09:25:02.550 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.550 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.550 | DEBUG    | __main__:run_benchmark:432 - data = data[data.index.isin(test.index)]
2022-08-06 09:25:02.571 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.571 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.571 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:02.599 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.600 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.600 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:02.626 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.627 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.627 | DEBUG    | __main__:run_benchmark:432 - data.loc[(data['feat1'].isin(test['feat1'])) & (data['feat2'].isin(test['feat2'])) & (data['feat3'].isin(test['feat3']))]
2022-08-06 09:25:02.655 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.655 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.655 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:02.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.682 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.683 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:02.710 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.710 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.711 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:02.737 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.737 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.738 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 09:25:02.764 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.765 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.765 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:02.792 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.793 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.793 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:02.820 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.820 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.821 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:02.847 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.847 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.848 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:02.874 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:02.874 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows in data that are not in test
2022-08-06 09:25:02.875 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 09:25:02.901 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:04.494 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows in df data that are in df test
2022-08-06 09:25:04.495 | DEBUG    | __main__:run_benchmark:432 - df = df[~df.isin(test)].dropna()
2022-08-06 09:25:04.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:04.500 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows in df data that are in df test
2022-08-06 09:25:04.500 | DEBUG    | __main__:run_benchmark:432 - df = data.drop(test.index)
2022-08-06 09:25:04.514 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:25:06.541 | DEBUG    | __main__:run_benchmark:431 - Query: Given data and test, return all rows in data which are not in test
2022-08-06 09:25:06.542 | DEBUG    | __main__:run_benchmark:432 - data[~data.isin(test)].dropna()
2022-08-06 09:25:06.560 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:25:08.045 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return all rows in data which are not in test
2022-08-06 09:25:08.046 | DEBUG    | __main__:run_benchmark:432 - data.loc[~data.index.isin(test.index)]
2022-08-06 09:25:08.061 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:25:09.804 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.805 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 09:25:09.847 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.847 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.847 | DEBUG    | __main__:run_benchmark:432 - data.subtract(test)
2022-08-06 09:25:09.889 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.889 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.889 | DEBUG    | __main__:run_benchmark:432 - def data_test_diff(data, test):
2022-08-06 09:25:09.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.890 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.890 | DEBUG    | __main__:run_benchmark:432 - def data_test_diff(data, test):
2022-08-06 09:25:09.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.890 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.890 | DEBUG    | __main__:run_benchmark:432 - def data_test_diff(data, test):
2022-08-06 09:25:09.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.891 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.891 | DEBUG    | __main__:run_benchmark:432 - def data_test_diff(data, test):
2022-08-06 09:25:09.891 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.891 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.891 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 09:25:09.921 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.921 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.922 | DEBUG    | __main__:run_benchmark:432 - def diff(data, test):
2022-08-06 09:25:09.922 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.922 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.922 | DEBUG    | __main__:run_benchmark:432 - def data_test_diff(data, test):
2022-08-06 09:25:09.922 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.922 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.923 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 09:25:09.954 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.954 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.955 | DEBUG    | __main__:run_benchmark:432 - def data_test_diff(data, test):
2022-08-06 09:25:09.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.955 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.955 | DEBUG    | __main__:run_benchmark:432 - def data_diff(data, test):
2022-08-06 09:25:09.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.955 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.956 | DEBUG    | __main__:run_benchmark:432 - def get_difference(data, test):
2022-08-06 09:25:09.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.956 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.956 | DEBUG    | __main__:run_benchmark:432 - def data_test_diff(data, test):
2022-08-06 09:25:09.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.956 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.956 | DEBUG    | __main__:run_benchmark:432 - def data_test_diff(data, test):
2022-08-06 09:25:09.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.956 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.956 | DEBUG    | __main__:run_benchmark:432 - def data_test_diff(data, test):
2022-08-06 09:25:09.957 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.957 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.957 | DEBUG    | __main__:run_benchmark:432 - def data_test_diff(data, test):
2022-08-06 09:25:09.957 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.957 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.957 | DEBUG    | __main__:run_benchmark:432 - def data_test_diff(data, test):
2022-08-06 09:25:09.957 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.957 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.957 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 09:25:09.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:09.988 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 09:25:09.988 | DEBUG    | __main__:run_benchmark:432 - def diff(data, test):
2022-08-06 09:25:09.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:10.018 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 09:25:11.893 | DEBUG    | __main__:run_benchmark:431 - Query: remove similar rows between dataframe 'data' and dataframe 'test'
2022-08-06 09:25:11.893 | DEBUG    | __main__:run_benchmark:432 - data = data[~data.isin(test)].dropna()
2022-08-06 09:25:11.910 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:25:13.513 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:13.514 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 09:25:13.545 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:13.545 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:13.545 | DEBUG    | __main__:run_benchmark:432 - data.subtract(test)
2022-08-06 09:25:13.575 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:13.575 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:13.575 | DEBUG    | __main__:run_benchmark:432 - data.subtract(test)
2022-08-06 09:25:13.605 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:13.605 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:13.605 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 09:25:13.635 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:13.635 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:13.635 | DEBUG    | __main__:run_benchmark:432 - data.subtract(test)
2022-08-06 09:25:13.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:13.665 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:13.665 | DEBUG    | __main__:run_benchmark:432 - (data - test)
2022-08-06 09:25:13.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:13.695 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:13.695 | DEBUG    | __main__:run_benchmark:432 - diff = data.sub(test)
2022-08-06 09:25:13.725 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:13.725 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:13.725 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 09:25:13.755 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:13.755 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:13.755 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 09:25:13.785 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:13.785 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:13.786 | DEBUG    | __main__:run_benchmark:432 - (data - test)
2022-08-06 09:25:13.815 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:13.815 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:13.816 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 09:25:13.845 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:13.846 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:13.846 | DEBUG    | __main__:run_benchmark:432 - diff = data - test
2022-08-06 09:25:13.876 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:13.876 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:13.876 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 09:25:13.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:13.906 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:13.906 | DEBUG    | __main__:run_benchmark:432 - diff = data - test
2022-08-06 09:25:13.936 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:13.936 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:13.936 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 09:25:13.966 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:13.966 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:13.966 | DEBUG    | __main__:run_benchmark:432 - data = data.append(test)
2022-08-06 09:25:13.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:13.988 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:13.989 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 09:25:14.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:14.018 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:14.019 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 09:25:14.048 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:14.049 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:14.049 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 09:25:14.079 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:14.079 | DEBUG    | __main__:run_benchmark:431 - Query: Subtract test from data
2022-08-06 09:25:14.079 | DEBUG    | __main__:run_benchmark:432 - (data - test)
2022-08-06 09:25:14.109 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:15.994 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'train' from 'data'
2022-08-06 09:25:15.995 | DEBUG    | __main__:run_benchmark:432 - data = data.drop('train', axis=0)
2022-08-06 09:25:16.000 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:16.000 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'train' from 'data'
2022-08-06 09:25:16.000 | DEBUG    | __main__:run_benchmark:432 - data = data.drop(axis=0, labels='train')
2022-08-06 09:25:16.004 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:16.004 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'train' from 'data'
2022-08-06 09:25:16.004 | DEBUG    | __main__:run_benchmark:432 - data = data.drop(axis=0, labels='train')
2022-08-06 09:25:16.008 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:16.008 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'train' from 'data'
2022-08-06 09:25:16.008 | DEBUG    | __main__:run_benchmark:432 - data = data.drop(['train'])
2022-08-06 09:25:16.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:16.012 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'train' from 'data'
2022-08-06 09:25:16.012 | DEBUG    | __main__:run_benchmark:432 - data = data[:-1]
2022-08-06 09:25:16.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:25:17.727 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 09:25:17.728 | DEBUG    | __main__:run_benchmark:432 - data.drop(train.index, inplace=True)
2022-08-06 09:25:17.732 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:17.732 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 09:25:17.732 | DEBUG    | __main__:run_benchmark:432 - data = data[~data.index.isin(train.index)]
2022-08-06 09:25:17.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:17.736 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 09:25:17.736 | DEBUG    | __main__:run_benchmark:432 - data = data[~data.isin(train)].dropna()
2022-08-06 09:25:17.739 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:17.740 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 09:25:17.740 | DEBUG    | __main__:run_benchmark:432 - data = data[data.index != 'ham']
2022-08-06 09:25:17.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:17.762 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 09:25:17.762 | DEBUG    | __main__:run_benchmark:432 - train = data[data.GoldTarget != 0]
2022-08-06 09:25:17.789 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:17.789 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 09:25:17.789 | DEBUG    | __main__:run_benchmark:432 - data = data[~data.index.isin(train.index)]
2022-08-06 09:25:17.793 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:17.793 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 09:25:17.793 | DEBUG    | __main__:run_benchmark:432 - data = data[data.index.isin(series.index) == False]
2022-08-06 09:25:17.796 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:17.796 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 09:25:17.797 | DEBUG    | __main__:run_benchmark:432 - data = data[~data.index.isin(train.index)]
2022-08-06 09:25:17.800 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:17.800 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 09:25:17.800 | DEBUG    | __main__:run_benchmark:432 - data = data[~data.isin(test)].dropna()
2022-08-06 09:25:17.815 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:25:17.843 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 09:25:17.843 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 09:25:17.843 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 09:25:19.743 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.744 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.746 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.747 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.747 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.748 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.748 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.749 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.750 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.750 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.750 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.752 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.752 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.752 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.753 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.753 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.753 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.755 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.755 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.755 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.756 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.756 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.757 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.758 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.758 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.758 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.759 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.760 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.760 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.761 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.761 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.761 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.763 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.763 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.763 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.764 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.764 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.764 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.766 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.766 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.767 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.767 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.767 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.769 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.769 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.769 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.770 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.770 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.771 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.772 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.772 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.772 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.773 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.774 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.774 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.775 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:19.775 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 09:25:19.775 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:19.777 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.856 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.856 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.859 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.859 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.860 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.861 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.861 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.863 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.863 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.863 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.865 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.865 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.865 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.866 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.866 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.866 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.868 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.868 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.868 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.869 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.870 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.870 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.871 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.871 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.871 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.873 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.873 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.873 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.874 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.875 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.875 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.876 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.876 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.876 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.878 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.878 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.878 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.879 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.880 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.881 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.881 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.881 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.883 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.883 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.883 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.884 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.884 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.884 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.886 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.886 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.886 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.887 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.888 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.888 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.889 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:21.889 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 09:25:21.889 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:21.891 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:23.920 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 09:25:23.921 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:23.923 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:23.924 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 09:25:23.924 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:23.925 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:23.925 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 09:25:23.926 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 09:25:23.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:23.927 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 09:25:23.927 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.drop('Label', axis=1).idxmax(axis=1)
2022-08-06 09:25:23.938 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:25:23.970 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 09:25:26.369 | DEBUG    | __main__:run_benchmark:431 - Query: find maximum value of first three columns of row and add its column name to a new column "output"
2022-08-06 09:25:26.370 | DEBUG    | __main__:run_benchmark:432 - dfin['output'] = dfin.apply(lambda x: x.nlargest(3).index.tolist(), axis=1)
2022-08-06 09:25:26.384 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:26.384 | DEBUG    | __main__:run_benchmark:431 - Query: find maximum value of first three columns of row and add its column name to a new column "output"
2022-08-06 09:25:26.384 | DEBUG    | __main__:run_benchmark:432 - dfin['output'] = dfin.apply(lambda x: x.idxmax(), axis=1)
2022-08-06 09:25:26.395 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:26.395 | DEBUG    | __main__:run_benchmark:431 - Query: find maximum value of first three columns of row and add its column name to a new column "output"
2022-08-06 09:25:26.396 | DEBUG    | __main__:run_benchmark:432 - dfin['output'] = dfin.apply(lambda x: x[0:3].idxmax(), axis=1)
2022-08-06 09:25:26.406 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:25:26.439 | DEBUG    | __main__:run:515 - Number of queries: 17
2022-08-06 09:25:28.423 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.423 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 09:25:28.439 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.439 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.439 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 09:25:28.453 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.453 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.453 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1).values
2022-08-06 09:25:28.467 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.467 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.467 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 09:25:28.481 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.481 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.482 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 09:25:28.495 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.496 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.496 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 09:25:28.510 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.510 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.510 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 09:25:28.524 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.524 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.524 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 09:25:28.538 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.538 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.538 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 09:25:28.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.552 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.552 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 09:25:28.566 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.566 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.567 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 09:25:28.580 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.581 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.581 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.idxmax(axis=1)
2022-08-06 09:25:28.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.595 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.595 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 09:25:28.609 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.609 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.609 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 09:25:28.623 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.623 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.623 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.idxmax(axis=1)
2022-08-06 09:25:28.637 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.637 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.637 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.idxmax(axis=1)
2022-08-06 09:25:28.651 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.651 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.652 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 09:25:28.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.666 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.666 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1).values
2022-08-06 09:25:28.680 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.680 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.680 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 09:25:28.694 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:28.694 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 09:25:28.694 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 09:25:28.708 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.330 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.331 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.333 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.334 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.334 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.335 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.336 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.336 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.337 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.337 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.339 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.339 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.339 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.341 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.341 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.341 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.342 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.342 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.343 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.344 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.344 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.344 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.346 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.346 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.346 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.348 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.348 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.348 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.349 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.349 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.350 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.351 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.351 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.351 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.353 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.353 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.353 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.355 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.355 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.356 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.356 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.356 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.358 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.358 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.358 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.360 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.360 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.361 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.362 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.362 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.363 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.363 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.363 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.365 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.365 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:25:31.365 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:25:31.367 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:25:31.613 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f6eb5d9a7a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7f6eb5f1b8c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7f6e20f457d0>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Get maximum value of rows and store in a new column 'prediction'", 'user': 'u6'}, {'query': "Get maxi...
    │               └ {'queries': [{'query': "Get maximum value of rows and store in a new column 'prediction'", 'user': 'u6'}, {'query': "Get maxi...
    └ {'query': "Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'", 'user': 'u6'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>
    │    │               └ ["#  Use the following code example as a guide to write code for the comment below\n\n#  Create a Series with 4 elements from...
    │    └ 'code-davinci-001'
    └ <__main__.Algorithm1 object at 0x7f6e20f457d0>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f6e2105ddd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f6dfe506c90>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 16:25:31 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f6ea988cfb0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 16:25:31 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f6dfe4dd090>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 09:25:31.641 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 09:26:03.937 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.938 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:03.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.941 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.941 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:03.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.943 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.943 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:03.944 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.945 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.945 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:03.946 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.946 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.946 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:03.948 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.948 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.948 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:03.950 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.950 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.950 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:03.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.951 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.952 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:03.953 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.953 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.953 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:03.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.955 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.955 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:03.957 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.957 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.957 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:03.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.959 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.959 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:03.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.960 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.960 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:03.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.962 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.962 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:03.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.964 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.964 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:03.965 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.965 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.966 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:03.967 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.967 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.967 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:03.969 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.969 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.969 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:03.970 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.971 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.971 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:03.972 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:03.972 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:03.973 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:03.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.670 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.671 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.674 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.674 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.674 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.676 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.676 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.676 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.677 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.677 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.678 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.679 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.679 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.679 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.681 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.681 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.681 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.683 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.683 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.684 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.684 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.684 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.686 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.686 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.688 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.688 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.688 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.689 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.690 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.690 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.691 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.691 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.691 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.693 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.693 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.693 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.695 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.695 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.696 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.696 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.697 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.698 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.698 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.698 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.700 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.700 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.700 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.702 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.702 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.702 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.703 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.704 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.704 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.705 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:05.705 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:05.706 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 09:26:05.707 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.454 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.455 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.458 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.458 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.458 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.460 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.460 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.460 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.461 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.462 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.462 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.463 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.463 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.463 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.465 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.465 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.465 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.467 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.467 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.467 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.468 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.468 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.468 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.470 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.470 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.470 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.472 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.472 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.472 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.473 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.474 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.474 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.475 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.475 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.475 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.477 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.477 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.477 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.479 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.479 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.479 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].values.argmax(axis=1)
2022-08-06 09:26:07.480 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.480 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.480 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.482 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.482 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.482 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.484 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.484 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.485 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.485 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.486 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.487 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.487 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.489 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:07.489 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 09:26:07.489 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:07.491 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.097 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.098 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:09.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.101 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.101 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:09.103 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.103 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.103 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:09.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.105 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.105 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:09.106 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.106 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.107 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:09.108 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.108 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.108 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:09.110 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.110 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.110 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:09.111 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.112 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.112 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:09.113 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.113 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.113 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].values.argmax(axis=1)
2022-08-06 09:26:09.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.115 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.115 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:09.117 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.117 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.117 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:09.118 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.118 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.119 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:09.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.120 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.120 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:09.122 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.122 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.122 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:09.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.124 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.124 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(lambda x: x.argmax(), axis=1)
2022-08-06 09:26:09.138 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.138 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.138 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:09.140 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.140 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.140 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:09.141 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.142 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.142 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:09.143 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.143 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.144 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:09.145 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:09.145 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 09:26:09.145 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:09.147 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.684 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.685 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:26:10.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.686 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.686 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:10.688 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.688 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.688 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:10.690 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.690 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.690 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:10.692 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.692 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.692 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:10.693 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.694 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.694 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:10.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.695 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.695 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:26:10.696 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.696 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.696 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:10.697 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.697 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.697 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:10.699 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.699 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.699 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:10.701 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.701 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.701 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:10.702 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.703 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.703 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:10.704 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.704 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.704 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:26:10.704 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.705 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.705 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:10.706 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.706 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.706 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:10.708 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.708 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.708 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:10.710 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.710 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.710 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:10.711 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.711 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.712 | DEBUG    | __main__:run_benchmark:432 - #  in the dataframe "dfin"
2022-08-06 09:26:10.712 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.712 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.712 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:10.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:10.713 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 09:26:10.714 | DEBUG    | __main__:run_benchmark:432 - #  in the dataframe 'dfin'
2022-08-06 09:26:10.714 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.296 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.297 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.301 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.301 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.302 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.302 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.303 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.304 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.304 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.304 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.306 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.306 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.306 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.308 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.308 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.308 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.309 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.309 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.310 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.311 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.311 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.311 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.313 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.313 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.313 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.314 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.315 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.315 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.316 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.316 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.316 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.318 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.318 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.318 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.320 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.320 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.320 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.321 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.322 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.322 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.323 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.323 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.323 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.325 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.325 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.325 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.327 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.327 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.327 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.328 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.328 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.329 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:26:12.329 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.329 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.329 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.330 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:12.331 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 09:26:12.331 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:12.332 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.025 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.026 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.029 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.029 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.029 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.031 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.031 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.031 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.032 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.032 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.033 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.034 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.034 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.036 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.036 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.036 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.038 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.038 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.038 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.039 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.039 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.039 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.041 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.041 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.041 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.043 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.043 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.044 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.044 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.045 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.046 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.046 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.048 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.048 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.048 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.049 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.050 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.050 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.051 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.051 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.051 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.053 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.053 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.055 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.055 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.055 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.056 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.057 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.057 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.058 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.058 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.058 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:14.060 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 09:26:14.060 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 09:26:14.062 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:16.523 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among columns 0, 1, 2, 3 and 4 and store it as column name prediction
2022-08-06 09:26:16.524 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, [0, 1, 2, 3, 4]].idxmax(axis=1)
2022-08-06 09:26:16.540 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:26:18.743 | DEBUG    | __main__:run_benchmark:431 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-06 09:26:18.743 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, :5].idxmax(axis=1)
2022-08-06 09:26:18.758 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 09:26:18.790 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 09:26:18.791 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 09:26:21.546 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.546 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:26:21.546 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.546 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.547 | DEBUG    | __main__:run_benchmark:432 - dfin['OurPred'] = dfin.idxmax(axis=1)
2022-08-06 09:26:21.562 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.562 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.562 | DEBUG    | __main__:run_benchmark:432 - dfin['OurPred'] = dfin.apply(lambda row: row.idxmax() if row.name != 'GoldTarget' else '', axis=1)
2022-08-06 09:26:21.576 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.576 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.577 | DEBUG    | __main__:run_benchmark:432 - dfin['OurPred'] = dfin.idxmax(axis=1)
2022-08-06 09:26:21.591 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.591 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.591 | DEBUG    | __main__:run_benchmark:432 - dfin['OurPred'] = dfin.apply(lambda x: x.idxmax() if x.name != 'GoldTarget' else x['GoldTarget'], axis=1)
2022-08-06 09:26:21.605 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.605 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.605 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.idxmax(axis=1)
2022-08-06 09:26:21.617 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.617 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.617 | DEBUG    | __main__:run_benchmark:432 - dfin['OurPred'] = dfin.idxmax(axis=1)
2022-08-06 09:26:21.631 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.631 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.631 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:26:21.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.632 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.632 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 09:26:21.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.632 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.632 | DEBUG    | __main__:run_benchmark:432 - dfin['OurPred'] = dfin.apply(lambda x: x.idxmax() if x.name != 'GoldTarget' else x.name, axis=1)
2022-08-06 09:26:21.646 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.647 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.647 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.idxmax(axis=1)
2022-08-06 09:26:21.658 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.659 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.659 | DEBUG    | __main__:run_benchmark:432 - dfin['OurPred'] = dfin.idxmax(axis=1)
2022-08-06 09:26:21.673 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.673 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.673 | DEBUG    | __main__:run_benchmark:432 - dfin['OurPred'] = dfin.apply(lambda x: x.idxmax() if x.name != 'GoldTarget' else x.name, axis=1)
2022-08-06 09:26:21.687 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.687 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.687 | DEBUG    | __main__:run_benchmark:432 - dfin['OurPred'] = dfin.idxmax(axis=1)
2022-08-06 09:26:21.701 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.701 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.702 | DEBUG    | __main__:run_benchmark:432 - dfin['OurPred'] = dfin.apply(lambda x: x.idxmax() if x.name != 'GoldTarget' else x.name, axis=1)
2022-08-06 09:26:21.715 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.716 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.716 | DEBUG    | __main__:run_benchmark:432 - dfin['OurPred'] = dfin.idxmax(axis=1)
2022-08-06 09:26:21.730 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.730 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.730 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:26:21.730 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.730 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.730 | DEBUG    | __main__:run_benchmark:432 - dfin['OurPred'] = dfin.idxmax(axis=1)
2022-08-06 09:26:21.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.745 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.745 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.idxmax(axis=1)
2022-08-06 09:26:21.756 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 09:26:21.757 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 09:26:21.757 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 09:26:21.757 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False

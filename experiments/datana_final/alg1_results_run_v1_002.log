2022-08-06 05:31:35.327 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval1
2022-08-06 05:31:35.328 | DEBUG    | __main__:run:495 - Found 68 benchmarks in PandasEval1
2022-08-06 05:31:35.328 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 05:31:35.328 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:31:35.328 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:31:35.328 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 05:31:35.328 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:31:35.328 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:31:35.329 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 05:31:35.329 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:31:35.329 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 05:31:35.329 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 05:31:35.329 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 05:31:35.329 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:55.140 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval1
2022-08-06 06:39:55.140 | DEBUG    | __main__:run:495 - Found 68 benchmarks in PandasEval1
2022-08-06 06:39:55.140 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 06:39:55.140 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:55.140 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:55.140 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 06:39:55.141 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:55.141 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:55.141 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 06:39:55.141 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:55.141 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:39:55.141 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 06:39:55.141 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:39:55.141 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:06.426 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 06:40:06.426 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -5}, {'id': 1005, 'idnew': -1005})
2022-08-06 06:40:06.440 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:06.440 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 06:40:06.440 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -45}, {'id': 1005, 'idnew': -1005})
2022-08-06 06:40:06.453 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:06.453 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 06:40:06.453 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace([5, -5], [1005, -1005])
2022-08-06 06:40:06.465 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:06.465 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 06:40:06.466 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': -5}, {'id': 1005, 'idnew': -1005})
2022-08-06 06:40:06.478 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:06.478 | DEBUG    | __main__:run_benchmark:431 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-06 06:40:06.478 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.replace({'id': 5, 'idnew': 5}, {'id': 1005, 'idnew': -1005})
2022-08-06 06:40:06.490 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:40:06.490 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 06:40:06.490 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:06.490 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:06.491 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 06:40:06.491 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:06.491 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:06.491 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 06:40:06.491 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:06.491 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:06.491 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 06:40:06.492 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:06.492 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:06.492 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 06:40:06.492 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:06.492 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:06.492 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 06:40:06.492 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:06.492 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:06.492 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 06:40:06.492 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:06.493 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:06.493 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 06:40:06.493 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:06.493 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:08.987 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:40:08.988 | DEBUG    | __main__:run_benchmark:432 - df1['score'].notnull().mean()
2022-08-06 06:40:08.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:08.990 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:40:08.990 | DEBUG    | __main__:run_benchmark:432 - df1['score'].notna().mean()
2022-08-06 06:40:08.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:08.992 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:40:08.992 | DEBUG    | __main__:run_benchmark:432 - df1['score'].count() / df1['score'].size
2022-08-06 06:40:08.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:08.992 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:40:08.993 | DEBUG    | __main__:run_benchmark:432 - pd.notna(df1['score']).mean()
2022-08-06 06:40:08.993 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:08.994 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:40:08.994 | DEBUG    | __main__:run_benchmark:432 - df1['score'].count() / len(df1)
2022-08-06 06:40:08.994 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:08.994 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:40:08.995 | DEBUG    | __main__:run_benchmark:432 - df1['score'].count() / df1.shape[0]
2022-08-06 06:40:08.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:08.995 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:40:08.995 | DEBUG    | __main__:run_benchmark:432 - df1['score'].count() / df1.shape[0]
2022-08-06 06:40:08.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:08.996 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:40:08.996 | DEBUG    | __main__:run_benchmark:432 - df1['score'].count() / len(df1)
2022-08-06 06:40:08.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:08.997 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:40:08.997 | DEBUG    | __main__:run_benchmark:432 - df1['score'].count() / df1.shape[0]
2022-08-06 06:40:08.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:08.998 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:40:08.998 | DEBUG    | __main__:run_benchmark:432 - df1.score.value_counts(dropna=False, normalize=True)
2022-08-06 06:40:09.000 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:09.000 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:40:09.000 | DEBUG    | __main__:run_benchmark:432 - df1['score'].count() / len(df1)
2022-08-06 06:40:09.001 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:09.001 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:40:09.001 | DEBUG    | __main__:run_benchmark:432 - df1['score'].count() / df1['score'].size
2022-08-06 06:40:09.002 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:09.002 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:40:09.002 | DEBUG    | __main__:run_benchmark:432 - df1['score'].count() / df1['score'].size
2022-08-06 06:40:09.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:09.003 | DEBUG    | __main__:run_benchmark:431 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-06 06:40:09.003 | DEBUG    | __main__:run_benchmark:432 - df1.score.astype(bool).sum() / df1.shape[0]
2022-08-06 06:40:09.004 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:40:09.004 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 06:40:09.004 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:09.004 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:09.004 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 06:40:09.005 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:09.005 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:13.339 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.340 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max().reset_index()
2022-08-06 06:40:13.383 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.383 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.384 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x.loc[x['Earnings'].idxmax()])
2022-08-06 06:40:13.401 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.402 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.402 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x['Subsidiary'][x['Earnings'].idxmax()])
2022-08-06 06:40:13.411 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.411 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.411 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x['Subsidiary'][x['Earnings'].idxmax()])
2022-08-06 06:40:13.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.418 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.419 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x.loc[x['Earnings'].idxmax()])
2022-08-06 06:40:13.428 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.428 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.428 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x.loc[x['Earnings'].idxmax()])
2022-08-06 06:40:13.438 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.438 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.438 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 06:40:13.445 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.445 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.445 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x['Subsidiary'][x['Earnings'].argmax()])
2022-08-06 06:40:13.447 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.447 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.447 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 06:40:13.453 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.454 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.454 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].transform(np.max)
2022-08-06 06:40:13.460 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.461 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.461 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x.loc[x['Earnings'].idxmax()])
2022-08-06 06:40:13.470 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.471 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.471 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].transform('max')
2022-08-06 06:40:13.477 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.477 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.477 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 06:40:13.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.484 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.484 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].idxmax()
2022-08-06 06:40:13.491 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.491 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.491 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 06:40:13.497 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.498 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.498 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x.loc[x['Earnings'].idxmax()])
2022-08-06 06:40:13.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.507 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.508 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter').apply(lambda x: x.loc[x['Earnings'].idxmax()])
2022-08-06 06:40:13.517 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.517 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.518 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 06:40:13.524 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.524 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.524 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].transform(max)
2022-08-06 06:40:13.531 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.531 | DEBUG    | __main__:run_benchmark:431 - Query: For each quarter find the subsidiary with top earnings value
2022-08-06 06:40:13.531 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('Quarter')['Earnings'].max()
2022-08-06 06:40:13.537 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:13.538 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 06:40:13.538 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:13.538 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:13.538 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 06:40:13.539 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:13.539 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:13.539 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 06:40:13.539 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:13.539 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:13.539 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 06:40:13.539 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:13.539 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:13.539 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 06:40:13.540 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:13.540 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:13.540 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 06:40:13.540 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:13.540 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:13.540 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 06:40:13.540 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:13.540 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:13.541 | DEBUG    | __main__:run:508 - Running benchmark 21
2022-08-06 06:40:13.541 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:13.541 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:13.541 | DEBUG    | __main__:run:508 - Running benchmark 22
2022-08-06 06:40:13.541 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:13.541 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:17.516 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.517 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame(df1.isnull().sum()).T
2022-08-06 06:40:17.519 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.520 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.520 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum().to_frame('nulls')
2022-08-06 06:40:17.521 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.521 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.521 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum(axis=1).reset_index()
2022-08-06 06:40:17.522 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.523 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.523 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum().to_frame()
2022-08-06 06:40:17.524 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.524 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.524 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 06:40:17.525 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.525 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.525 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum().to_frame()[0]
2022-08-06 06:40:17.526 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.526 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.526 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 06:40:17.527 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.527 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.528 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.isna(df1).sum()
2022-08-06 06:40:17.529 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.529 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.529 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum()
2022-08-06 06:40:17.530 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.530 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.530 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 06:40:17.531 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.531 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.531 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum()
2022-08-06 06:40:17.532 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.532 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.532 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame(df1.isnull().sum())
2022-08-06 06:40:17.533 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.533 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.534 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum()
2022-08-06 06:40:17.534 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.535 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.535 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum()
2022-08-06 06:40:17.536 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.536 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.536 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum(0)
2022-08-06 06:40:17.537 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.537 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.537 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isnull().sum(axis=0).reset_index()
2022-08-06 06:40:17.538 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.539 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.539 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().count()
2022-08-06 06:40:17.540 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.540 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.540 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.apply((lambda x: x.isnull().sum()))
2022-08-06 06:40:17.541 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.541 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.541 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum()
2022-08-06 06:40:17.542 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.543 | DEBUG    | __main__:run_benchmark:431 - Query: count the number of null values in df1 and return it to dfout
2022-08-06 06:40:17.543 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.isna().sum()
2022-08-06 06:40:17.544 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:17.544 | DEBUG    | __main__:run:508 - Running benchmark 23
2022-08-06 06:40:17.544 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:17.545 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:17.545 | DEBUG    | __main__:run:508 - Running benchmark 24
2022-08-06 06:40:17.545 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:17.545 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:17.545 | DEBUG    | __main__:run:508 - Running benchmark 25
2022-08-06 06:40:17.545 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:17.545 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:17.545 | DEBUG    | __main__:run:508 - Running benchmark 26
2022-08-06 06:40:17.545 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:17.546 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:20.844 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:20.845 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:40:20.855 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:20.855 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:20.855 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:40:20.864 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:20.864 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:20.864 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:40:20.872 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:20.872 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:20.873 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:40:20.881 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:20.881 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:20.881 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:40:20.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:20.890 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:20.890 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:40:20.899 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:20.899 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:20.899 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg([np.mean, np.median])
2022-08-06 06:40:20.907 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:20.907 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:20.908 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame({'mean': df1.mean(), 'median': df1.median()})
2022-08-06 06:40:20.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:20.916 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:20.916 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:40:20.924 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:20.925 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:20.925 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:40:20.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:20.933 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:20.934 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:40:20.942 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:20.942 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:20.942 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:40:20.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:20.951 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:20.951 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:40:20.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:20.961 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:20.961 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:40:20.969 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:20.969 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:20.969 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:40:20.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:20.978 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:20.978 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:40:20.986 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:20.987 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:20.987 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:40:20.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:20.995 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:20.995 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:40:21.004 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:21.004 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:21.004 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:40:21.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:21.012 | DEBUG    | __main__:run_benchmark:431 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-06 06:40:21.013 | DEBUG    | __main__:run_benchmark:432 - dfout = df1.agg(['mean', 'median'])
2022-08-06 06:40:21.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:21.022 | DEBUG    | __main__:run:508 - Running benchmark 27
2022-08-06 06:40:21.022 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:21.022 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:21.022 | DEBUG    | __main__:run:508 - Running benchmark 28
2022-08-06 06:40:21.022 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:21.022 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:23.575 | DEBUG    | __main__:run_benchmark:431 - Query: Set 'A' as 5 in 6th row of df1
2022-08-06 06:40:23.575 | DEBUG    | __main__:run_benchmark:432 - df1.loc[6, 'A'] = 5
2022-08-06 06:40:23.608 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:23.609 | DEBUG    | __main__:run_benchmark:431 - Query: Set 'A' as 5 in 6th row of df1
2022-08-06 06:40:23.609 | DEBUG    | __main__:run_benchmark:432 - df1.loc[6, 'A'] = 5
2022-08-06 06:40:23.624 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:23.624 | DEBUG    | __main__:run_benchmark:431 - Query: Set 'A' as 5 in 6th row of df1
2022-08-06 06:40:23.624 | DEBUG    | __main__:run_benchmark:432 - df1.at[6, 'A'] = 5
2022-08-06 06:40:23.634 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:23.634 | DEBUG    | __main__:run_benchmark:431 - Query: Set 'A' as 5 in 6th row of df1
2022-08-06 06:40:23.634 | DEBUG    | __main__:run_benchmark:432 - df1.loc[6, 'A'] = 5
2022-08-06 06:40:23.642 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:23.642 | DEBUG    | __main__:run_benchmark:431 - Query: Set 'A' as 5 in 6th row of df1
2022-08-06 06:40:23.642 | DEBUG    | __main__:run_benchmark:432 - df1.loc[6, 'A'] = 5
2022-08-06 06:40:23.649 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:23.649 | DEBUG    | __main__:run_benchmark:431 - Query: Set 'A' as 5 in 6th row of df1
2022-08-06 06:40:23.649 | DEBUG    | __main__:run_benchmark:432 - df1.loc[6, 'A'] = 5
2022-08-06 06:40:23.655 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:23.655 | DEBUG    | __main__:run_benchmark:431 - Query: Set 'A' as 5 in 6th row of df1
2022-08-06 06:40:23.655 | DEBUG    | __main__:run_benchmark:432 - df1.loc[5, 'A'] = 5
2022-08-06 06:40:23.660 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:40:23.661 | DEBUG    | __main__:run:508 - Running benchmark 29
2022-08-06 06:40:23.661 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:23.662 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:23.662 | DEBUG    | __main__:run:508 - Running benchmark 30
2022-08-06 06:40:23.662 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:23.662 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:26.340 | DEBUG    | __main__:run_benchmark:431 - Query: Concatenate two data frames and drop duplicates
2022-08-06 06:40:26.341 | DEBUG    | __main__:run_benchmark:432 - pd.concat([df1, df2]).drop_duplicates()
2022-08-06 06:40:26.385 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:26.385 | DEBUG    | __main__:run_benchmark:431 - Query: Concatenate two data frames and drop duplicates
2022-08-06 06:40:26.386 | DEBUG    | __main__:run_benchmark:432 - pd.concat([df1, df2], axis=0, ignore_index=True).drop_duplicates()
2022-08-06 06:40:26.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:40:26.403 | DEBUG    | __main__:run:508 - Running benchmark 31
2022-08-06 06:40:26.404 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:26.404 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:26.404 | DEBUG    | __main__:run:508 - Running benchmark 32
2022-08-06 06:40:26.404 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:26.404 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:26.404 | DEBUG    | __main__:run:508 - Running benchmark 33
2022-08-06 06:40:26.404 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:26.405 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:26.405 | DEBUG    | __main__:run:508 - Running benchmark 34
2022-08-06 06:40:26.405 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:26.405 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:29.129 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.130 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 06:40:29.151 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.151 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.151 | DEBUG    | __main__:run_benchmark:432 - df1.loc[:, (df1.dtypes == 'float64')]
2022-08-06 06:40:29.170 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.170 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.170 | DEBUG    | __main__:run_benchmark:432 - df1.loc[:, (df1.dtypes == float)]
2022-08-06 06:40:29.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.189 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.190 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=['float64'])
2022-08-06 06:40:29.209 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.209 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.209 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=np.float64)
2022-08-06 06:40:29.229 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.229 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.229 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 06:40:29.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.249 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.249 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=['float64'])
2022-08-06 06:40:29.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.272 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.272 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=['float64'])
2022-08-06 06:40:29.292 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.292 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.292 | DEBUG    | __main__:run_benchmark:432 - df1.dtypes[(df1.dtypes == 'float64')]
2022-08-06 06:40:29.307 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.307 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.307 | DEBUG    | __main__:run_benchmark:432 - df1.columns[(df1.dtypes == np.float64)]
2022-08-06 06:40:29.321 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.321 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.321 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 06:40:29.341 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.341 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.341 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=['float64'])
2022-08-06 06:40:29.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.361 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.361 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=['float64'])
2022-08-06 06:40:29.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.380 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.381 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 06:40:29.400 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.400 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.400 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include='float64')
2022-08-06 06:40:29.420 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.420 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.420 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=['float64'])
2022-08-06 06:40:29.440 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.440 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.440 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=['float64'])
2022-08-06 06:40:29.459 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.460 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.460 | DEBUG    | __main__:run_benchmark:432 - df1.dtypes[(df1.dtypes == np.float64)]
2022-08-06 06:40:29.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.474 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.474 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=['float64'])
2022-08-06 06:40:29.494 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.494 | DEBUG    | __main__:run_benchmark:431 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-06 06:40:29.494 | DEBUG    | __main__:run_benchmark:432 - df1.select_dtypes(include=np.float64)
2022-08-06 06:40:29.514 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:29.515 | DEBUG    | __main__:run:508 - Running benchmark 35
2022-08-06 06:40:29.516 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:29.516 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:32.058 | DEBUG    | __main__:run_benchmark:431 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-06 06:40:32.059 | DEBUG    | __main__:run_benchmark:432 - df1['C1'].isin([1, 2, 3])
2022-08-06 06:40:32.062 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:40:32.063 | DEBUG    | __main__:run:508 - Running benchmark 36
2022-08-06 06:40:32.063 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:32.063 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:32.064 | DEBUG    | __main__:run:508 - Running benchmark 37
2022-08-06 06:40:32.064 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:32.064 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:32.064 | DEBUG    | __main__:run:508 - Running benchmark 38
2022-08-06 06:40:32.064 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:32.064 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:32.064 | DEBUG    | __main__:run:508 - Running benchmark 39
2022-08-06 06:40:32.064 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:32.065 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:32.065 | DEBUG    | __main__:run:508 - Running benchmark 40
2022-08-06 06:40:32.065 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:32.065 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:32.065 | DEBUG    | __main__:run:508 - Running benchmark 41
2022-08-06 06:40:32.065 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:32.065 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:34.318 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.318 | DEBUG    | __main__:run_benchmark:432 - df.drop(df[df['time'].diff() < pd.Timedelta(minutes=10)].index)
2022-08-06 06:40:34.336 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.336 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.336 | DEBUG    | __main__:run_benchmark:432 - df.drop(df[(df['time'].diff() < pd.Timedelta(minutes=10))].index)
2022-08-06 06:40:34.352 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.352 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.353 | DEBUG    | __main__:run_benchmark:432 - df.loc[df['time'].diff() > pd.Timedelta(minutes=10)]
2022-08-06 06:40:34.368 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.369 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.369 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 06:40:34.385 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.385 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.385 | DEBUG    | __main__:run_benchmark:432 - df.drop(df[(df['time'] - df['time'].shift(1) < pd.Timedelta(minutes=10))].index)
2022-08-06 06:40:34.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.402 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.402 | DEBUG    | __main__:run_benchmark:432 - df.drop(df[df['time'].diff() < pd.Timedelta(minutes=10)].index)
2022-08-06 06:40:34.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.418 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.419 | DEBUG    | __main__:run_benchmark:432 - df.drop(df[df['time'].diff() < pd.Timedelta(minutes=10)].index)
2022-08-06 06:40:34.435 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.435 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.435 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 06:40:34.452 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.452 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.452 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-06 06:40:34.464 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.464 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.464 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 06:40:34.481 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.481 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.481 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 06:40:34.497 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.497 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.497 | DEBUG    | __main__:run_benchmark:432 - df.drop(df[df['time'].diff() < pd.Timedelta(minutes=10)].index)
2022-08-06 06:40:34.514 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.514 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.514 | DEBUG    | __main__:run_benchmark:432 - df.drop(df[(df['time'].diff() < pd.Timedelta(minutes=10))].index)
2022-08-06 06:40:34.530 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.530 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.530 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 06:40:34.546 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.547 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.547 | DEBUG    | __main__:run_benchmark:432 - df.drop(df[df['time'].diff() < pd.Timedelta(minutes=10)].index)
2022-08-06 06:40:34.563 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.563 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.563 | DEBUG    | __main__:run_benchmark:432 - df.drop(df[df['time'].diff() < pd.Timedelta(minutes=10)].index)
2022-08-06 06:40:34.580 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.580 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.580 | DEBUG    | __main__:run_benchmark:432 - df.drop(df[df['time'].diff() < pd.Timedelta(minutes=10)].index)
2022-08-06 06:40:34.596 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.596 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.596 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='first')
2022-08-06 06:40:34.612 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.613 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.613 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 06:40:34.629 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.629 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-06 06:40:34.629 | DEBUG    | __main__:run_benchmark:432 - df.drop_duplicates(subset='time', keep='last')
2022-08-06 06:40:34.645 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:34.647 | DEBUG    | __main__:run:508 - Running benchmark 42
2022-08-06 06:40:34.647 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:34.647 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:36.260 | DEBUG    | __main__:run_benchmark:431 - Query: Group df1 on column 'b' and keep half of the elements at random
2022-08-06 06:40:36.261 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('b').apply(lambda x: x.sample(frac=0.5))
2022-08-06 06:40:36.273 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:36.273 | DEBUG    | __main__:run_benchmark:431 - Query: Group df1 on column 'b' and keep half of the elements at random
2022-08-06 06:40:36.273 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('b').apply(lambda x: x.sample(frac=0.5))
2022-08-06 06:40:36.283 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:36.283 | DEBUG    | __main__:run_benchmark:431 - Query: Group df1 on column 'b' and keep half of the elements at random
2022-08-06 06:40:36.283 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('b').apply(lambda x: x.sample(frac=0.5))
2022-08-06 06:40:36.294 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:36.294 | DEBUG    | __main__:run_benchmark:431 - Query: Group df1 on column 'b' and keep half of the elements at random
2022-08-06 06:40:36.294 | DEBUG    | __main__:run_benchmark:432 - df1.groupby('b').apply(lambda x: x.sample(frac=0.5))
2022-08-06 06:40:36.304 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:40:36.305 | DEBUG    | __main__:run:508 - Running benchmark 43
2022-08-06 06:40:36.306 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:36.306 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:39.487 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 06:40:39.488 | DEBUG    | __main__:run_benchmark:432 - df['X'].replace({15: 1015, -15: -1015})
2022-08-06 06:40:39.521 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:39.521 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 06:40:39.522 | DEBUG    | __main__:run_benchmark:432 - df['X'].replace({15: 1015, -15: -1015})
2022-08-06 06:40:39.536 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:39.536 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 06:40:39.536 | DEBUG    | __main__:run_benchmark:432 - df['X'].replace(15, 1015).replace(-15, -1015)
2022-08-06 06:40:39.546 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:39.546 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 06:40:39.546 | DEBUG    | __main__:run_benchmark:432 - df.replace({15: 1015, -15: -1015}, inplace=True)
2022-08-06 06:40:39.554 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:39.554 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 06:40:39.554 | DEBUG    | __main__:run_benchmark:432 - df['X'].replace([15, -15], [1015, -1015])
2022-08-06 06:40:39.560 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:39.560 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 06:40:39.561 | DEBUG    | __main__:run_benchmark:432 - df['X'].replace([15, -15], [1015, -1015])
2022-08-06 06:40:39.566 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:39.567 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 06:40:39.567 | DEBUG    | __main__:run_benchmark:432 - df['X'].replace([15, -15], [1015, -1015])
2022-08-06 06:40:39.573 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:39.573 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 06:40:39.573 | DEBUG    | __main__:run_benchmark:432 - df['X'].replace([15, -15], [1015, -1015])
2022-08-06 06:40:39.579 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:39.579 | DEBUG    | __main__:run_benchmark:431 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-06 06:40:39.579 | DEBUG    | __main__:run_benchmark:432 - df['X'].replace(inplace=True, to_replace={15: 1015, -15: -1015})
2022-08-06 06:40:39.585 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:40:39.586 | DEBUG    | __main__:run:508 - Running benchmark 44
2022-08-06 06:40:39.586 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:39.586 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:43.002 | DEBUG    | __main__:run_benchmark:431 - Query: Make columns of df1 same as that of df2
2022-08-06 06:40:43.002 | DEBUG    | __main__:run_benchmark:432 - df1 = df1.reindex(columns=df2.columns, fill_value=0)
2022-08-06 06:40:43.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:43.012 | DEBUG    | __main__:run_benchmark:431 - Query: Make columns of df1 same as that of df2
2022-08-06 06:40:43.013 | DEBUG    | __main__:run_benchmark:432 - df1[df2.columns]
2022-08-06 06:40:43.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:43.014 | DEBUG    | __main__:run_benchmark:431 - Query: Make columns of df1 same as that of df2
2022-08-06 06:40:43.014 | DEBUG    | __main__:run_benchmark:432 - df1 = df1[list(df2.columns)]
2022-08-06 06:40:43.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:43.016 | DEBUG    | __main__:run_benchmark:431 - Query: Make columns of df1 same as that of df2
2022-08-06 06:40:43.016 | DEBUG    | __main__:run_benchmark:432 - df1 = df1[['A', 'B', 'C']]
2022-08-06 06:40:43.025 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:43.025 | DEBUG    | __main__:run_benchmark:431 - Query: Make columns of df1 same as that of df2
2022-08-06 06:40:43.025 | DEBUG    | __main__:run_benchmark:432 - df1.columns = df2.columns
2022-08-06 06:40:43.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:40:43.035 | DEBUG    | __main__:run:508 - Running benchmark 45
2022-08-06 06:40:43.035 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:43.035 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:43.036 | DEBUG    | __main__:run:508 - Running benchmark 46
2022-08-06 06:40:43.036 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:43.036 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:43.036 | DEBUG    | __main__:run:508 - Running benchmark 47
2022-08-06 06:40:43.036 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:43.036 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:43.037 | DEBUG    | __main__:run:508 - Running benchmark 48
2022-08-06 06:40:43.037 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:43.037 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:43.037 | DEBUG    | __main__:run:508 - Running benchmark 49
2022-08-06 06:40:43.037 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:43.037 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:45.849 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.850 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:40:45.853 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.853 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.853 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg(lambda x: list(x))
2022-08-06 06:40:45.859 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.860 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.860 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:40:45.862 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.862 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.862 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').score.apply(list)
2022-08-06 06:40:45.864 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.864 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.864 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:40:45.866 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.867 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.867 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:40:45.869 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.869 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.869 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg({'score': list})
2022-08-06 06:40:45.873 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.873 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.874 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg({'score': lambda x: list(x)})
2022-08-06 06:40:45.878 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.878 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.878 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg({'score': lambda x: list(x)})
2022-08-06 06:40:45.882 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.882 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.882 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg(lambda x: list(x))
2022-08-06 06:40:45.888 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.888 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.889 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg(lambda x: list(x))
2022-08-06 06:40:45.894 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.895 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.895 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').groups
2022-08-06 06:40:45.896 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.897 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.897 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg({'score': list})
2022-08-06 06:40:45.901 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.901 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.901 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].apply(list)
2022-08-06 06:40:45.903 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.903 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.903 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').score.apply(list)
2022-08-06 06:40:45.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.906 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.906 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').score.apply(list)
2022-08-06 06:40:45.908 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.908 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.908 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg(lambda x: list(x))
2022-08-06 06:40:45.914 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.914 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.914 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg(lambda x: list(x))
2022-08-06 06:40:45.920 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.921 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.921 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').score.apply(list)
2022-08-06 06:40:45.923 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.923 | DEBUG    | __main__:run_benchmark:431 - Query: for each student, get a list of scores obtained
2022-08-06 06:40:45.923 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg({'score': lambda x: list(x)})
2022-08-06 06:40:45.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:45.929 | DEBUG    | __main__:run:508 - Running benchmark 50
2022-08-06 06:40:45.929 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:45.929 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:47.964 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:47.965 | DEBUG    | __main__:run_benchmark:432 - df.pivot_table(index='student', aggfunc='max')
2022-08-06 06:40:47.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:47.973 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:47.973 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 06:40:47.975 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:47.975 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:47.975 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 06:40:47.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:47.977 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:47.977 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max().reset_index()
2022-08-06 06:40:47.980 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:47.980 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:47.981 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform(np.max)
2022-08-06 06:40:47.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:47.982 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:47.982 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:40:47.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:47.982 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:47.983 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').apply(lambda x: x['score'].max())
2022-08-06 06:40:47.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:47.984 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:47.985 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform('max')
2022-08-06 06:40:47.986 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:47.986 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:47.986 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform('max')
2022-08-06 06:40:47.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:47.988 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:47.988 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform('max')
2022-08-06 06:40:47.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:47.990 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:47.990 | DEBUG    | __main__:run_benchmark:432 - df.groupby(by='student')['score'].transform(max)
2022-08-06 06:40:47.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:47.991 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:47.992 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 06:40:47.993 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:47.993 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:47.993 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform('max')
2022-08-06 06:40:47.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:47.995 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:47.995 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 06:40:47.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:47.997 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:47.997 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 06:40:47.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:47.998 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:47.999 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg({'score': 'max'})
2022-08-06 06:40:48.002 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:48.002 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:48.002 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student').agg({'score': 'max'})
2022-08-06 06:40:48.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:48.005 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:48.006 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform('max')
2022-08-06 06:40:48.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:48.007 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:48.008 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].transform(np.max)
2022-08-06 06:40:48.009 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:48.009 | DEBUG    | __main__:run_benchmark:431 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-06 06:40:48.010 | DEBUG    | __main__:run_benchmark:432 - df.groupby('student')['score'].max()
2022-08-06 06:40:48.011 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:48.013 | DEBUG    | __main__:run:508 - Running benchmark 51
2022-08-06 06:40:48.013 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:48.013 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:48.014 | DEBUG    | __main__:run:508 - Running benchmark 52
2022-08-06 06:40:48.014 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:48.014 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:48.014 | DEBUG    | __main__:run:508 - Running benchmark 53
2022-08-06 06:40:48.014 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:48.014 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:48.014 | DEBUG    | __main__:run:508 - Running benchmark 54
2022-08-06 06:40:48.014 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:48.015 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:48.015 | DEBUG    | __main__:run:508 - Running benchmark 55
2022-08-06 06:40:48.015 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:48.015 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:48.015 | DEBUG    | __main__:run:508 - Running benchmark 56
2022-08-06 06:40:48.015 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:48.015 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:48.015 | DEBUG    | __main__:run:508 - Running benchmark 57
2022-08-06 06:40:48.015 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:48.015 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:48.016 | DEBUG    | __main__:run:508 - Running benchmark 58
2022-08-06 06:40:48.016 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:48.016 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:48.016 | DEBUG    | __main__:run:508 - Running benchmark 59
2022-08-06 06:40:48.016 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:48.016 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:48.016 | DEBUG    | __main__:run:508 - Running benchmark 60
2022-08-06 06:40:48.016 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:48.016 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:50.166 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.167 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['col_name'])
2022-08-06 06:40:50.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.172 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.172 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data)
2022-08-06 06:40:50.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.176 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.176 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['A'])
2022-08-06 06:40:50.180 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.180 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.180 | DEBUG    | __main__:run_benchmark:432 - df = data.unstack()
2022-08-06 06:40:50.181 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.181 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.181 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]])
2022-08-06 06:40:50.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.187 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.187 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['A'])
2022-08-06 06:40:50.191 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.191 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.191 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['col1'])
2022-08-06 06:40:50.195 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.195 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.196 | DEBUG    | __main__:run_benchmark:432 - #  and rows as the innermost level of index
2022-08-06 06:40:50.196 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.196 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.196 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['A'])
2022-08-06 06:40:50.200 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.200 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.200 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data)
2022-08-06 06:40:50.204 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.204 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.205 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]])
2022-08-06 06:40:50.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.210 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.210 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['col1'])
2022-08-06 06:40:50.214 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.215 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.215 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=pd.MultiIndex.from_product([['a', 'b', 'c'], [1, 2]]))
2022-08-06 06:40:50.220 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.220 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.220 | DEBUG    | __main__:run_benchmark:432 - #  and index as the innermost level of index
2022-08-06 06:40:50.221 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.221 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.221 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['x', 'y', 'z', 'w'])
2022-08-06 06:40:50.222 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.222 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.222 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]])
2022-08-06 06:40:50.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.228 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.228 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]])
2022-08-06 06:40:50.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.233 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.234 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, columns=['A', 'B', 'C', 'D'])
2022-08-06 06:40:50.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.234 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.235 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[['a', 'a', 'b', 'b'], ['c', 'd', 'c', 'd']])
2022-08-06 06:40:50.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.240 | DEBUG    | __main__:run_benchmark:431 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-06 06:40:50.241 | DEBUG    | __main__:run_benchmark:432 - df = pd.DataFrame(data, index=[['a', 'a', 'b', 'b'], ['c', 'd', 'c', 'd']])
2022-08-06 06:40:50.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:50.248 | DEBUG    | __main__:run:508 - Running benchmark 62
2022-08-06 06:40:50.248 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:50.248 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:50.249 | DEBUG    | __main__:run:508 - Running benchmark 63
2022-08-06 06:40:50.249 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:50.249 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:52.966 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 06:40:52.967 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:40:52.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:52.968 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 06:40:52.968 | DEBUG    | __main__:run_benchmark:432 - len(df[df['pet1'].isin(['mouse'])])
2022-08-06 06:40:52.970 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:52.970 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 06:40:52.970 | DEBUG    | __main__:run_benchmark:432 - df[df['pet1'].str.contains('mouse')].shape[0]
2022-08-06 06:40:52.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:52.971 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 06:40:52.971 | DEBUG    | __main__:run_benchmark:432 - df['pet1'].isin(['mouse']).sum()
2022-08-06 06:40:52.972 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:52.972 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 06:40:52.973 | DEBUG    | __main__:run_benchmark:432 - df[df['pet1'].str.contains(pat='mouse')].shape[0]
2022-08-06 06:40:52.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:52.974 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 06:40:52.974 | DEBUG    | __main__:run_benchmark:432 - df.where(df == 'mouse').count()
2022-08-06 06:40:52.975 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:52.976 | DEBUG    | __main__:run_benchmark:431 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-06 06:40:52.976 | DEBUG    | __main__:run_benchmark:432 - len(df[(df['pet1'] == 'mouse') | (df['pet2'] == 'mouse')])
2022-08-06 06:40:52.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:40:52.979 | DEBUG    | __main__:run:508 - Running benchmark 64
2022-08-06 06:40:52.979 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:52.979 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:52.979 | DEBUG    | __main__:run:508 - Running benchmark 65
2022-08-06 06:40:52.979 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:52.979 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:40:57.587 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.588 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:40:57.603 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.603 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.604 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:40:57.619 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.619 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.619 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:40:57.635 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.635 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.635 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:40:57.650 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.651 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.651 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:40:57.666 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.666 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.666 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:40:57.682 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.682 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.682 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:40:57.698 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.698 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.698 | DEBUG    | __main__:run_benchmark:432 - df[df['X'].between(4, 10, inclusive=True)]
2022-08-06 06:40:57.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.714 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.714 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:40:57.729 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.729 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.729 | DEBUG    | __main__:run_benchmark:432 - df[df['X'].between(4, 10)]
2022-08-06 06:40:57.745 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.745 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.745 | DEBUG    | __main__:run_benchmark:432 - df[df['X'].between(4, 10, inclusive=True)]
2022-08-06 06:40:57.761 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.761 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.761 | DEBUG    | __main__:run_benchmark:432 - df.loc[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:40:57.776 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.776 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.777 | DEBUG    | __main__:run_benchmark:432 - df[df['X'].between(4, 10)]
2022-08-06 06:40:57.792 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.792 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.792 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:40:57.808 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.808 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.808 | DEBUG    | __main__:run_benchmark:432 - df[df['X'].between(4, 10)]
2022-08-06 06:40:57.823 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.823 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.824 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:40:57.839 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.839 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.839 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:40:57.855 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.855 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.855 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:40:57.870 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.871 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.871 | DEBUG    | __main__:run_benchmark:432 - df.loc[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:40:57.886 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.886 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-06 06:40:57.887 | DEBUG    | __main__:run_benchmark:432 - df[(df['X'] >= 4) & (df['X'] <= 10)]
2022-08-06 06:40:57.902 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:40:57.904 | DEBUG    | __main__:run:508 - Running benchmark 66
2022-08-06 06:40:57.904 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:40:57.904 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:41:03.420 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.421 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:41:03.439 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.439 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.439 | DEBUG    | __main__:run_benchmark:432 - df[(df['Y'] >= 4) & (df['Y'] <= 10) | (df['Y'] >= 14) & (df['Y'] <= 20)]
2022-08-06 06:41:03.455 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.455 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.455 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:41:03.472 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.472 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.472 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:41:03.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.488 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.489 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:41:03.505 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.505 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.505 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:41:03.521 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.521 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.522 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:41:03.538 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.538 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.538 | DEBUG    | __main__:run_benchmark:432 - df.loc[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:41:03.554 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.554 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.555 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:41:03.571 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.571 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.571 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:41:03.588 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.588 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.588 | DEBUG    | __main__:run_benchmark:432 - df[df['Y'].between(4, 10, inclusive=True) | df['Y'].between(14, 20, inclusive=True)]
2022-08-06 06:41:03.604 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.604 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.604 | DEBUG    | __main__:run_benchmark:432 - df[df['Y'].between(4, 10, inclusive=True) | df['Y'].between(14, 20, inclusive=True)]
2022-08-06 06:41:03.621 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.621 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.621 | DEBUG    | __main__:run_benchmark:432 - df[(df['Y'] >= 4) & (df['Y'] <= 10) | (df['Y'] >= 14) & (df['Y'] <= 20)]
2022-08-06 06:41:03.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.640 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.640 | DEBUG    | __main__:run_benchmark:432 - df[df['Y'].between(4, 10, inclusive=True) | df['Y'].between(14, 20, inclusive=True)]
2022-08-06 06:41:03.657 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.657 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.657 | DEBUG    | __main__:run_benchmark:432 - df[np.logical_or(np.logical_and(df['Y'] > 4, df['Y'] < 11), np.logical_and(df['Y'] > 14, df['Y'] < 21))]
2022-08-06 06:41:03.674 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.674 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.674 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:41:03.690 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.690 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.690 | DEBUG    | __main__:run_benchmark:432 - df.loc[(((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20)))]
2022-08-06 06:41:03.707 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.707 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.707 | DEBUG    | __main__:run_benchmark:432 - df[(((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20)))]
2022-08-06 06:41:03.723 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.723 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.723 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:41:03.740 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.740 | DEBUG    | __main__:run_benchmark:431 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-06 06:41:03.740 | DEBUG    | __main__:run_benchmark:432 - df[((df['Y'] >= 4) & (df['Y'] <= 10)) | ((df['Y'] >= 14) & (df['Y'] <= 20))]
2022-08-06 06:41:03.756 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:03.758 | DEBUG    | __main__:run:508 - Running benchmark 67
2022-08-06 06:41:03.758 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 06:41:03.758 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:41:03.759 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval2
2022-08-06 06:41:03.759 | DEBUG    | __main__:run:495 - Found 21 benchmarks in PandasEval2
2022-08-06 06:41:03.759 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 06:41:03.759 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:41:03.759 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:41:07.433 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, rename the column 'a' to 'Person Name' and 'b' to 'Credit'
2022-08-06 06:41:07.434 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name', 'b': 'Credit'})
2022-08-06 06:41:07.443 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:41:07.446 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:41:07.446 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:41:07.446 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:41:07.446 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:41:10.280 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.281 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, index=str)
2022-08-06 06:41:10.301 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.301 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.301 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:41:10.320 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.320 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.320 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, index=str, inplace=True)
2022-08-06 06:41:10.333 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.333 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.333 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:41:10.352 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.352 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.352 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 06:41:10.365 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.365 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.366 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:41:10.384 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.384 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.385 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:41:10.403 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.403 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.404 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:41:10.422 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.422 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.422 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 06:41:10.436 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.436 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.436 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 06:41:10.449 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.449 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.449 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 06:41:10.462 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.463 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.463 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:41:10.481 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.482 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.482 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 06:41:10.495 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.495 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.495 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:41:10.514 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.514 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.514 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 06:41:10.527 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.528 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.528 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:41:10.546 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.547 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.547 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:41:10.565 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.566 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.566 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:41:10.584 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.585 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.585 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'})
2022-08-06 06:41:10.603 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.604 | DEBUG    | __main__:run_benchmark:431 - Query: change column one name of dfin to 'Person Name'
2022-08-06 06:41:10.604 | DEBUG    | __main__:run_benchmark:432 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-06 06:41:10.617 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:10.620 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 06:41:10.620 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:41:10.620 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:41:12.845 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where 'value1' is divisible by 3
2022-08-06 06:41:12.846 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['value1'] % 3) == 0]
2022-08-06 06:41:12.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:41:12.891 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:41:12.891 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:41:12.891 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:41:18.092 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.093 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 06:41:18.144 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.144 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.145 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 06:41:18.163 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.163 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.163 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin[(dfin['colA'] % 5) != 0]
2022-08-06 06:41:18.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.178 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.178 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['colA'] % 5) != 0]
2022-08-06 06:41:18.192 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.192 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.192 | DEBUG    | __main__:run_benchmark:432 - mask = dfin['colA'] % 5 == 0
2022-08-06 06:41:18.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.202 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.202 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 06:41:18.216 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.216 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.216 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['colA'] % 5) != 0]
2022-08-06 06:41:18.230 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.230 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.230 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 06:41:18.244 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.244 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.244 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 06:41:18.259 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.259 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.259 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin.colA % 5) != 0]
2022-08-06 06:41:18.273 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.273 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.273 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 06:41:18.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.287 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.287 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['colA'] % 5) != 0]
2022-08-06 06:41:18.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.300 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.301 | DEBUG    | __main__:run_benchmark:432 - dfin[~ dfin['colA'].isin([5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100])]
2022-08-06 06:41:18.314 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.314 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.314 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 06:41:18.328 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.328 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.328 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 06:41:18.342 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.342 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.342 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 06:41:18.355 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.355 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.356 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['colA'] % 5) != 0]
2022-08-06 06:41:18.369 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.369 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.369 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 06:41:18.383 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.383 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.383 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['colA'] % 5) != 0]
2022-08-06 06:41:18.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.397 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where colA is not a multiple of 5
2022-08-06 06:41:18.397 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['colA'] % 5 != 0]
2022-08-06 06:41:18.410 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:18.413 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:41:19.634 | DEBUG    | __main__:run_benchmark:431 - Query: select all rows from dfin such that column A mod 4 = 1
2022-08-06 06:41:19.634 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['A'] % 4 == 1]
2022-08-06 06:41:19.643 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:41:19.646 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 06:41:19.646 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:41:19.646 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:41:20.764 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:20.765 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:20.781 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:20.781 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:20.781 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:20.797 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:20.797 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:20.797 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:20.812 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:20.812 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:20.813 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(3))
2022-08-06 06:41:20.828 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:20.828 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:20.828 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:20.847 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:20.847 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:20.847 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:20.863 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:20.863 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:20.863 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:20.878 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:20.879 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:20.879 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:20.894 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:20.894 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:20.894 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:20.910 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:20.910 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:20.910 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:41:20.921 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:20.921 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:20.921 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:20.937 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:20.937 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:20.937 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:20.953 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:20.953 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:20.953 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:41:20.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:20.964 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:20.964 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:20.980 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:20.980 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:20.980 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:20.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:20.996 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:20.996 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:21.011 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:21.011 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:21.011 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:21.027 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:21.027 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:21.027 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:21.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:21.042 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:21.043 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:21.058 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:21.058 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat the rows of dfin thrice
2022-08-06 06:41:21.058 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:21.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:22.415 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:41:22.416 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 06:41:22.432 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:22.433 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:41:22.433 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 06:41:22.447 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:22.448 | DEBUG    | __main__:run_benchmark:431 - Query: Copy the rows of dfin thrice
2022-08-06 06:41:22.448 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3)
2022-08-06 06:41:22.455 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:41:23.850 | DEBUG    | __main__:run_benchmark:431 - Query: Concatenate the rows of dfin thrice
2022-08-06 06:41:23.851 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3)
2022-08-06 06:41:23.860 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:41:23.864 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 06:41:25.356 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.357 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:25.374 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.374 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.374 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:25.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.390 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.390 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:25.405 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.405 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.406 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4), axis=0)
2022-08-06 06:41:25.407 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.408 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.408 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:25.423 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.423 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.424 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:25.439 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.439 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.439 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:25.455 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.455 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.455 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:41:25.470 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.470 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.470 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:25.486 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.486 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.486 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:25.502 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.502 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.502 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:41:25.517 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.517 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.517 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:25.533 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.533 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.533 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:25.548 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.548 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.549 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:25.564 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.564 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.564 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:25.580 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.580 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.580 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3,ignore_index=True)
2022-08-06 06:41:25.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.595 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.595 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:25.611 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.611 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.611 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:25.626 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.626 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.627 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:25.642 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:25.642 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 4 times
2022-08-06 06:41:25.642 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:25.658 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.519 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.520 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 06:41:28.523 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.523 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.524 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4), axis=0)
2022-08-06 06:41:28.525 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.526 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.526 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:28.542 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.542 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.542 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:28.558 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.558 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.558 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:28.574 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.574 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.574 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:28.590 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.590 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.590 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin] * 4, ignore_index=True)
2022-08-06 06:41:28.605 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.605 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.606 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:28.621 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.621 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.621 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:28.637 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.637 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.637 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:28.652 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.653 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.653 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:41:28.667 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.667 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.667 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:28.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.683 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.683 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:28.698 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.699 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.699 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:28.714 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.714 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.714 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:28.730 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.730 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.730 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:41:28.741 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.741 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.741 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:28.757 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.757 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.757 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:28.773 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.773 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.773 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:41:28.788 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:28.788 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of the dataframe 4 times
2022-08-06 06:41:28.788 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 06:41:28.800 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:30.990 | DEBUG    | __main__:run_benchmark:431 - Query: concatenate the input dataframe 'dfin' 4 times
2022-08-06 06:41:30.990 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 06:41:30.999 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:41:33.503 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.504 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:33.521 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.521 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.521 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:33.537 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.537 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.537 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:33.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.552 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.553 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:33.568 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.569 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.569 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3, ignore_index=True)
2022-08-06 06:41:33.584 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.584 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.584 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:33.600 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.600 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.600 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:33.615 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.616 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.616 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:33.631 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.631 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.631 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:41:33.647 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.647 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.647 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:33.662 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.663 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.663 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:33.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.678 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.678 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:33.694 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.694 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.694 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:33.710 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.710 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.710 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:33.725 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.725 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.725 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:33.741 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.741 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.741 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:33.757 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.757 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.757 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:33.772 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.772 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.773 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:33.788 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.788 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.788 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:33.804 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:33.804 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat table 4 times
2022-08-06 06:41:33.804 | DEBUG    | __main__:run_benchmark:432 - dfin.repeat(4)
2022-08-06 06:41:33.805 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:37.402 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:41:37.403 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:41:37.457 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:37.458 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:41:37.458 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:41:37.477 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:37.477 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:41:37.477 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:41:37.492 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:37.492 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:41:37.493 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:41:37.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:37.508 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:41:37.508 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:41:37.524 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:37.524 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:41:37.524 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:41:37.539 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:37.539 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:41:37.540 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:41:37.555 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:37.555 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:41:37.555 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:41:37.570 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:37.571 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append input dataframe 4 times
2022-08-06 06:41:37.571 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append([dfin, dfin, dfin])
2022-08-06 06:41:37.578 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:41:39.084 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:41:39.085 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:41:39.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:39.102 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate and append 4 times
2022-08-06 06:41:39.102 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4)
2022-08-06 06:41:39.111 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:41:40.514 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate 4 times
2022-08-06 06:41:40.515 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 06:41:40.523 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:41:41.813 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:41.814 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.sum(), axis=1)
2022-08-06 06:41:41.826 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:41.827 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:41.827 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, 0] = dfin.iloc[:, 0] * 4
2022-08-06 06:41:41.837 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:41.837 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:41.838 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x * 4)
2022-08-06 06:41:41.852 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:41.853 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:41.853 | DEBUG    | __main__:run_benchmark:432 - dfin.repeat(4)
2022-08-06 06:41:41.854 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:41.855 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:41.855 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x**2)
2022-08-06 06:41:41.870 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:41.870 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:41.870 | DEBUG    | __main__:run_benchmark:432 - dfin.repeat(4)
2022-08-06 06:41:41.872 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:41.872 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:41.872 | DEBUG    | __main__:run_benchmark:432 - dfin.repeat(4)
2022-08-06 06:41:41.874 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:41.874 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:41.874 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.sum(), axis=1)
2022-08-06 06:41:41.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:41.885 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:41.885 | DEBUG    | __main__:run_benchmark:432 - for i in range(4):
2022-08-06 06:41:41.886 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:41.886 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:41.886 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:41.901 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:41.901 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:41.902 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x**2, axis=1)
2022-08-06 06:41:41.918 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:41.918 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:41.918 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x**2, axis=1)
2022-08-06 06:41:41.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:41.934 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:41.934 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x*4)
2022-08-06 06:41:41.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:41.949 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:41.949 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x**2, axis=1)
2022-08-06 06:41:41.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:41.964 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:41.965 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, 0] *= 4
2022-08-06 06:41:41.975 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:41.975 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:41.975 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(4).mean()
2022-08-06 06:41:41.990 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:41.991 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:41.991 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:42.006 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:42.006 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:42.006 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:42.022 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:42.022 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:42.022 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x**2, axis=1)
2022-08-06 06:41:42.037 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:42.037 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat 4 times
2022-08-06 06:41:42.037 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:42.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:44.856 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe 4 times
2022-08-06 06:41:44.857 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:44.874 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:44.874 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe 4 times
2022-08-06 06:41:44.874 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 06:41:44.882 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:41:47.863 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:47.864 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 3))
2022-08-06 06:41:47.866 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:47.867 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:47.867 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3)
2022-08-06 06:41:47.881 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:47.881 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:47.882 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 3), axis=0)
2022-08-06 06:41:47.883 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:47.884 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:47.884 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin, dfin], ignore_index=True)
2022-08-06 06:41:47.898 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:47.898 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:47.898 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 06:41:47.912 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:47.912 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:47.913 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 06:41:47.923 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:47.923 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:47.923 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(3))
2022-08-06 06:41:47.938 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:47.938 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:47.938 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*2, ignore_index=True)
2022-08-06 06:41:47.952 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:47.952 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:47.953 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 06:41:47.967 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:47.967 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:47.967 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 06:41:47.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:47.982 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:47.982 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3)
2022-08-06 06:41:47.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:47.996 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:47.996 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin] * 3, ignore_index=True)
2022-08-06 06:41:48.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:48.007 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:48.007 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*2, ignore_index=True)
2022-08-06 06:41:48.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:48.021 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:48.021 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(range(3), method='ffill')
2022-08-06 06:41:48.035 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:48.036 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:48.036 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 06:41:48.050 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:48.050 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:48.050 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3)
2022-08-06 06:41:48.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:48.065 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:48.065 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(3))
2022-08-06 06:41:48.079 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:48.079 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:48.079 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*2, ignore_index=True)
2022-08-06 06:41:48.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:48.094 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:48.094 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(range(3))
2022-08-06 06:41:48.108 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:48.108 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate dataframe 3 times
2022-08-06 06:41:48.108 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat((dfin * 3), ignore_index=True)
2022-08-06 06:41:48.110 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.198 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.199 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin, dfin, dfin), axis=0)
2022-08-06 06:41:50.214 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.214 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.214 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:50.229 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.229 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.229 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:50.243 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.243 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.244 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:50.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.258 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.258 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:50.272 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.273 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.273 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:50.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.287 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.288 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:50.302 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.302 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.302 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:50.316 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.317 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.317 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 06:41:50.331 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.331 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.331 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:50.346 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.346 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.346 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:50.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.361 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.361 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 06:41:50.375 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.375 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.375 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:50.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.390 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.390 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 06:41:50.404 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.404 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.404 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:50.419 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.419 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.419 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 06:41:50.433 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.433 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.433 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.reindex(dfin.index.repeat(3))
2022-08-06 06:41:50.444 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.444 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.444 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:50.458 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.458 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.458 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:50.473 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:50.473 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate all rows 3 times
2022-08-06 06:41:50.473 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(3)]
2022-08-06 06:41:50.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:52.226 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 06:41:52.226 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:41:52.244 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:52.245 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 06:41:52.245 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:41:52.261 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:52.262 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 06:41:52.262 | DEBUG    | __main__:run_benchmark:432 - dfin.repeat(4)
2022-08-06 06:41:52.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:52.264 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all entries in dfin four times
2022-08-06 06:41:52.264 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 06:41:52.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:41:52.275 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:41:53.565 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate rows of dfin once
2022-08-06 06:41:53.566 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:41:53.620 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:53.621 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate rows of dfin once
2022-08-06 06:41:53.621 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin)
2022-08-06 06:41:53.631 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:41:56.987 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin once
2022-08-06 06:41:56.988 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*2, axis=0, sort=False)
2022-08-06 06:41:56.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:41:58.597 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 06:41:58.597 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:41:58.644 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:58.644 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 06:41:58.644 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:41:58.661 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:58.661 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 06:41:58.661 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:41:58.673 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:41:58.673 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat rows of dfin
2022-08-06 06:41:58.674 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin)
2022-08-06 06:41:58.681 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:41:58.834 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fd44bfb47a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7fd44c1348c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7fd3b9425b10>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7fd3b9425b10>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Duplicate rows of dfin once', 'user': 'u1'}, {'query': 'Repeat rows of dfin once', 'user': 'u1'}, {'q...
    │               └ {'queries': [{'query': 'Duplicate rows of dfin once', 'user': 'u1'}, {'query': 'Repeat rows of dfin once', 'user': 'u1'}, {'q...
    └ {'query': 'Repeat dataframe dfin', 'user': 'u1'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7fd3b9425b10>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Do a concat of "df" and "df" on rows...
    │    └ 'code-davinci-002'
    └ <__main__.Algorithm1 object at 0x7fd3b9425b10>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-002', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fd3b727cdd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7fd3a529e3d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:41:58 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fd43baa6f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:41:58 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on reques...
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fd3a520cf90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeie...

openai.error.RateLimitError: Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:41:58.861 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:42:30.525 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe dfin
2022-08-06 06:42:30.526 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin, ignore_index=True)
2022-08-06 06:42:30.542 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:30.543 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe dfin
2022-08-06 06:42:30.543 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3)
2022-08-06 06:42:30.557 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:30.557 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe dfin
2022-08-06 06:42:30.557 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(2))
2022-08-06 06:42:30.573 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:30.573 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe dfin
2022-08-06 06:42:30.573 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(2))
2022-08-06 06:42:30.589 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:30.589 | DEBUG    | __main__:run_benchmark:431 - Query: Repeat dataframe dfin
2022-08-06 06:42:30.589 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin)
2022-08-06 06:42:30.596 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:42:33.779 | DEBUG    | __main__:run_benchmark:431 - Query: duplicate rows
2022-08-06 06:42:33.780 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin)
2022-08-06 06:42:33.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:42:35.583 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:42:35.584 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:35.596 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:35.596 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:42:35.596 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0:2, :].copy()
2022-08-06 06:42:35.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:35.610 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:42:35.610 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:42:35.624 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:35.624 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:42:35.624 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:42:35.639 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:35.639 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:42:35.639 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:42:35.653 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:35.653 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:42:35.653 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:42:35.670 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:35.670 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:42:35.670 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0:2, :].copy()
2022-08-06 06:42:35.684 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:35.684 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:42:35.685 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 0:]
2022-08-06 06:42:35.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:35.686 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:42:35.687 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:42:35.700 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:35.700 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:42:35.701 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:42:35.714 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:35.715 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:42:35.715 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:35.726 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:35.726 | DEBUG    | __main__:run_benchmark:431 - Query: copy rows
2022-08-06 06:42:35.726 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin)
2022-08-06 06:42:35.733 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:42:37.430 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows
2022-08-06 06:42:37.431 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin)
2022-08-06 06:42:37.439 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:42:38.845 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:38.846 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin.iloc[0]).reset_index(drop=True)
2022-08-06 06:42:38.901 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:38.902 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:38.902 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:38.921 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:38.921 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:38.921 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin, ignore_index=True)
2022-08-06 06:42:38.936 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:38.936 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:38.936 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin.iloc[0]).reset_index(drop=True)
2022-08-06 06:42:38.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:38.952 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:38.952 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:38.967 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:38.967 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:38.967 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin).reset_index(drop=True)
2022-08-06 06:42:38.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:38.982 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:38.982 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin.iloc[0]).reset_index(drop=True)
2022-08-06 06:42:38.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:38.998 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:38.998 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin).reset_index(drop=True)
2022-08-06 06:42:39.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:39.013 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:39.013 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin.iloc[0]).reset_index(drop=True)
2022-08-06 06:42:39.028 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:39.028 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:39.028 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin, ignore_index=True)
2022-08-06 06:42:39.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:39.043 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:39.043 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin, ignore_index=True)
2022-08-06 06:42:39.058 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:39.058 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:39.059 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin).reset_index(drop=True)
2022-08-06 06:42:39.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:39.073 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:39.074 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin, ignore_index=True)
2022-08-06 06:42:39.088 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:39.088 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:39.089 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin).reset_index(drop=True)
2022-08-06 06:42:39.103 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:39.103 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:39.103 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin).reset_index(drop=True)
2022-08-06 06:42:39.118 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:39.118 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:39.119 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin).reset_index(drop=True)
2022-08-06 06:42:39.133 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:39.133 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:39.134 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin).reset_index(drop=True)
2022-08-06 06:42:39.148 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:39.148 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:39.149 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin).reset_index(drop=True)
2022-08-06 06:42:39.163 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:39.164 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:39.164 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin.iloc[0]).reset_index(drop=True)
2022-08-06 06:42:39.179 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:39.179 | DEBUG    | __main__:run_benchmark:431 - Query: copy and append rows and reset index
2022-08-06 06:42:39.179 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.append(dfin).reset_index(drop=True)
2022-08-06 06:42:39.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:39.198 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 06:42:41.901 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 06:42:41.902 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(columns=dfin.columns.tolist() * 3)
2022-08-06 06:42:41.961 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:41.961 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 06:42:41.961 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, axis=1)
2022-08-06 06:42:41.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:41.982 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 06:42:41.982 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: [x] * 3)
2022-08-06 06:42:41.994 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:41.994 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the columns thrice
2022-08-06 06:42:41.995 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3)
2022-08-06 06:42:42.002 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:42:46.100 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.101 | DEBUG    | __main__:run_benchmark:432 - dfin.assign(**{c: dfin[c] for c in dfin.columns})
2022-08-06 06:42:46.155 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.155 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.155 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].values.repeat(3)
2022-08-06 06:42:46.159 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.159 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.159 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: [x] * 3)
2022-08-06 06:42:46.174 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.174 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.174 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].repeat(3)
2022-08-06 06:42:46.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.177 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.177 | DEBUG    | __main__:run_benchmark:432 - dfin.T.reindex(dfin.T.index.repeat(3)).T
2022-08-06 06:42:46.195 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.196 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.196 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: [x] * 3)
2022-08-06 06:42:46.208 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.208 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.208 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A':'B'] = dfin.loc[:, 'A':'B'].apply(lambda x: x.values.repeat(3))
2022-08-06 06:42:46.219 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.219 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.219 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].values[:, None].repeat(3, axis=1)
2022-08-06 06:42:46.230 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.230 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.230 | DEBUG    | __main__:run_benchmark:432 - dfin.columns = pd.MultiIndex.from_product([dfin.columns, ['a', 'b', 'c']])
2022-08-06 06:42:46.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.233 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.233 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, :]
2022-08-06 06:42:46.247 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.247 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.248 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, axis=1)
2022-08-06 06:42:46.265 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.266 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.266 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*3, axis=1)
2022-08-06 06:42:46.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.284 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.284 | DEBUG    | __main__:run_benchmark:432 - dfin.assign(**{c: dfin[c] for c in dfin.columns})
2022-08-06 06:42:46.298 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.298 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.298 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, 0:2].apply(lambda x: pd.Series(x.values), axis=1).join(dfin, lsuffix='_')
2022-08-06 06:42:46.316 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.316 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.316 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ['A', 'B', 'A', 'B', 'A', 'B']]
2022-08-06 06:42:46.333 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.333 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.333 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, ignore_index=True)
2022-08-06 06:42:46.348 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.348 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.348 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'A'] = dfin.loc[:, 'A'].apply(lambda x: [x] * 3)
2022-08-06 06:42:46.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.360 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.360 | DEBUG    | __main__:run_benchmark:432 - dfin.stack().unstack(0).unstack(0)
2022-08-06 06:42:46.372 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.373 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.373 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, axis=1)
2022-08-06 06:42:46.391 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:46.391 | DEBUG    | __main__:run_benchmark:431 - Query: Replicate the columns thrice
2022-08-06 06:42:46.391 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*3, axis=1)
2022-08-06 06:42:46.409 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.404 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.405 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(2))
2022-08-06 06:42:48.420 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.420 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.420 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:48.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.432 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.432 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, :].append(dfin.iloc[:, :])
2022-08-06 06:42:48.446 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.446 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.446 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(2))
2022-08-06 06:42:48.460 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.460 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.461 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(2))
2022-08-06 06:42:48.475 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.475 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.475 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:48.486 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.486 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.486 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:48.497 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.497 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.497 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:48.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.508 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.508 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:48.519 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.519 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.519 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(2))
2022-08-06 06:42:48.534 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.534 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.534 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:48.545 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.545 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.545 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*2)
2022-08-06 06:42:48.559 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.559 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.560 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:48.570 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.571 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.571 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:48.582 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.582 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.582 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:42:48.596 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.596 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.596 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.loc[dfin.index.repeat(2)].reset_index(drop=True)
2022-08-06 06:42:48.611 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.611 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.611 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin, dfin], ignore_index=True)
2022-08-06 06:42:48.625 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.625 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.625 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(2))
2022-08-06 06:42:48.639 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.639 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.639 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:48.650 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:48.650 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows teice
2022-08-06 06:42:48.650 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:48.661 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:50.870 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:50.871 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*2)
2022-08-06 06:42:50.887 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:50.887 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:50.887 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:50.898 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:50.899 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:50.899 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:50.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:50.910 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:50.910 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:50.921 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:50.921 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:50.921 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*2, ignore_index=True)
2022-08-06 06:42:50.935 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:50.935 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:50.935 | DEBUG    | __main__:run_benchmark:432 - dfin.melt(id_vars=['A'], value_vars=['B'], value_name='C')
2022-08-06 06:42:50.953 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:50.953 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:50.953 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:50.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:50.964 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:50.964 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*2)
2022-08-06 06:42:50.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:50.978 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:50.979 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:50.989 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:50.989 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:50.990 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:51.000 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:51.001 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:51.001 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:51.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:51.012 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:51.012 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.loc[dfin.index.repeat(2)].reset_index(drop=True)
2022-08-06 06:42:51.026 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:51.027 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:51.027 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*2)
2022-08-06 06:42:51.041 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:51.041 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:51.041 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:51.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:51.052 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:51.052 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:51.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:51.063 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:51.064 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*2)
2022-08-06 06:42:51.078 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:51.078 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:51.078 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*2, ignore_index=True)
2022-08-06 06:42:51.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:51.092 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:51.093 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:51.103 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:51.103 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:51.103 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.loc[dfin.index.repeat(2)].reset_index(drop=True)
2022-08-06 06:42:51.118 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:51.118 | DEBUG    | __main__:run_benchmark:431 - Query: replicate the rows twice
2022-08-06 06:42:51.118 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*2, ignore_index=True)
2022-08-06 06:42:51.132 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.248 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.249 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:54.294 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.295 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.295 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:54.312 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.312 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.312 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:54.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.324 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.324 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(2))
2022-08-06 06:42:54.338 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.339 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.339 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 2))
2022-08-06 06:42:54.341 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.341 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.341 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:54.352 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.352 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.352 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:54.363 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.363 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.363 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:42:54.377 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.377 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.378 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:54.388 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.388 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.388 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:54.399 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.399 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.399 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 06:42:54.411 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.411 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.411 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:54.422 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.422 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.422 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 06:42:54.433 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.434 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.434 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:54.445 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.445 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.445 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(2)]
2022-08-06 06:42:54.459 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.459 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.459 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 06:42:54.470 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.471 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.471 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:54.481 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.482 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.482 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 06:42:54.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.493 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.493 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[pd.Index(range(len(dfin))).repeat(2)]
2022-08-06 06:42:54.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:54.508 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows twice
2022-08-06 06:42:54.508 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:54.519 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:56.842 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:56.843 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:56.855 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:56.855 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:56.855 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:56.870 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:56.870 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:56.870 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:56.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:56.886 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:56.886 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:56.901 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:56.901 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:56.901 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:56.912 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:56.912 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:56.913 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:56.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:56.927 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:56.927 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:56.938 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:56.939 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:56.939 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:56.950 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:56.950 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:56.950 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:56.965 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:56.965 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:56.966 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:56.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:56.977 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:56.977 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:56.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:56.988 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:56.988 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:57.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:57.004 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:57.004 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:42:57.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:57.015 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:57.015 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:57.026 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:57.026 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:57.026 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:57.041 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:57.041 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:57.041 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:57.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:57.053 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:57.053 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:57.068 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:57.068 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:57.068 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:57.083 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:57.083 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:57.083 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:57.099 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:42:57.099 | DEBUG    | __main__:run_benchmark:431 - Query: add rows with same values as existing rows
2022-08-06 06:42:57.099 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.append(dfin.iloc[0], ignore_index=True)
2022-08-06 06:42:57.110 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:00.674 | DEBUG    | __main__:run_benchmark:431 - Query: concatenate dfin vertically to itself thrice
2022-08-06 06:43:00.675 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin], ignore_index=True)
2022-08-06 06:43:00.691 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:00.691 | DEBUG    | __main__:run_benchmark:431 - Query: concatenate dfin vertically to itself thrice
2022-08-06 06:43:00.691 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin], axis=0)
2022-08-06 06:43:00.699 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:43:01.985 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:43:01.985 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin, dfin, dfin])
2022-08-06 06:43:02.001 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:02.001 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:43:02.001 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin, dfin, dfin])
2022-08-06 06:43:02.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:02.016 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:43:02.016 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin, dfin, dfin])
2022-08-06 06:43:02.030 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:02.031 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:43:02.031 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin, dfin, dfin])
2022-08-06 06:43:02.045 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:02.045 | DEBUG    | __main__:run_benchmark:431 - Query: Append dfin to dfin 3 times
2022-08-06 06:43:02.046 | DEBUG    | __main__:run_benchmark:432 - dfin.append(dfin).append(dfin)
2022-08-06 06:43:02.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:43:02.058 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:43:04.476 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.477 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:04.494 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.494 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.494 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 06:43:04.496 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.496 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.496 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:43:04.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.507 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.508 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:43:04.519 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.519 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.519 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:43:04.530 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.530 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.530 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin] * 4, ignore_index=True)
2022-08-06 06:43:04.546 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.546 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.546 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:04.562 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.562 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.562 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:04.578 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.578 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.578 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:04.593 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.594 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.594 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:43:04.609 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.609 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.609 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:43:04.625 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.625 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.625 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 06:43:04.636 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.636 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.637 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:43:04.647 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.648 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.648 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:43:04.659 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.659 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.659 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 06:43:04.670 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.671 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.671 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:43:04.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.686 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.686 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:43:04.697 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.697 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.697 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 06:43:04.709 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.709 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.709 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:43:04.725 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:04.725 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the rows 4 times
2022-08-06 06:43:04.725 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:43:04.740 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:06.764 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:06.765 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:06.782 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:06.782 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:06.782 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:06.797 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:06.797 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:06.798 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 06:43:06.799 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:06.800 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:06.800 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:06.815 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:06.815 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:06.816 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:06.831 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:06.831 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:06.831 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:43:06.846 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:06.846 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:06.847 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:06.862 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:06.862 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:06.862 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:06.878 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:06.878 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:06.878 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:06.893 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:06.894 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:06.894 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:43:06.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:06.909 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:06.909 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin] * 4, ignore_index=True)
2022-08-06 06:43:06.924 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:06.924 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:06.924 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)].reset_index(drop=True)
2022-08-06 06:43:06.940 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:06.940 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:06.940 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:06.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:06.955 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:06.956 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:06.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:06.971 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:06.971 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame(np.repeat(dfin.values, 4, axis=0), columns=dfin.columns)
2022-08-06 06:43:06.986 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:06.987 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:06.987 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 06:43:06.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:06.999 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:06.999 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)].reset_index(drop=True)
2022-08-06 06:43:07.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:07.014 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:07.015 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:07.030 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:07.030 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:07.030 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:07.049 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:07.049 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows 4 times
2022-08-06 06:43:07.050 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:43:07.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:09.007 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 06:43:09.008 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 06:43:09.011 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:09.011 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 06:43:09.011 | DEBUG    | __main__:run_benchmark:432 - dfin.repeat(4)
2022-08-06 06:43:09.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:09.013 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 06:43:09.013 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:43:09.029 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:09.029 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 06:43:09.029 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:43:09.045 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:09.045 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 06:43:09.045 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:43:09.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:09.063 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 06:43:09.064 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:43:09.080 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:09.080 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 06:43:09.080 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:43:09.096 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:09.096 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 06:43:09.096 | DEBUG    | __main__:run_benchmark:432 - dfin.repeat(4)
2022-08-06 06:43:09.098 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:09.098 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 06:43:09.098 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:43:09.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:09.113 | DEBUG    | __main__:run_benchmark:431 - Query: repeat the dataframe 4 times
2022-08-06 06:43:09.113 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 06:43:09.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:43:10.738 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:10.739 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:10.755 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:10.756 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:10.756 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:10.771 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:10.771 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:10.772 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 06:43:10.773 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:10.774 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:10.774 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:10.789 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:10.789 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:10.790 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:43:10.805 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:10.805 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:10.805 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:43:10.820 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:10.821 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:10.821 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:10.836 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:10.836 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:10.837 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:10.852 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:10.852 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:10.852 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:10.868 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:10.868 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:10.868 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:10.884 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:10.884 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:10.884 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:10.900 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:10.900 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:10.900 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:10.915 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:10.915 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:10.915 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:10.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:10.931 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:10.931 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:10.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:10.947 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:10.947 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:10.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:10.962 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:10.962 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:10.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:10.978 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:10.978 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(dfin.index.repeat(4))
2022-08-06 06:43:10.994 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:10.994 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:10.994 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:11.009 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:11.010 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:11.010 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:11.025 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:11.025 | DEBUG    | __main__:run_benchmark:431 - Query: repeat rows 4 times
2022-08-06 06:43:11.026 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:11.041 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:12.752 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 06:43:12.753 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:12.770 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:12.770 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 06:43:12.770 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:12.786 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:12.786 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 06:43:12.786 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:43:12.801 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:12.801 | DEBUG    | __main__:run_benchmark:431 - Query: repeat all rows of input 4 times
2022-08-06 06:43:12.801 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0, sort=False)
2022-08-06 06:43:12.809 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:43:14.363 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 06:43:14.364 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:14.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:14.418 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 06:43:14.418 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 06:43:14.433 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:14.434 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 06:43:14.434 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4), axis=0)
2022-08-06 06:43:14.436 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:14.436 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 06:43:14.436 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:43:14.451 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:14.452 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 06:43:14.452 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 06:43:14.454 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:14.454 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate rows 4 times
2022-08-06 06:43:14.454 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 06:43:14.461 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:43:19.402 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:43:19.403 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:43:19.450 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:19.450 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:43:19.451 | DEBUG    | __main__:run_benchmark:432 - dfin.reindex(np.arange(4), method='ffill')
2022-08-06 06:43:19.471 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:19.472 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:43:19.472 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:43:19.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:19.488 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:43:19.488 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:43:19.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:19.499 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:43:19.499 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:43:19.510 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:19.511 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:43:19.511 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3, ignore_index=True)
2022-08-06 06:43:19.526 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:19.526 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:43:19.526 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:43:19.538 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:19.538 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:43:19.538 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3, ignore_index=True)
2022-08-06 06:43:19.553 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:19.553 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:43:19.553 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*3, ignore_index=True)
2022-08-06 06:43:19.568 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:19.569 | DEBUG    | __main__:run_benchmark:431 - Query: dublicate table 4 times
2022-08-06 06:43:19.569 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, sort=True)
2022-08-06 06:43:19.576 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:43:22.632 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:43:22.633 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:43:22.648 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:22.649 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:43:22.649 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = [44, -4]
2022-08-06 06:43:22.655 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:22.655 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:43:22.655 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = [44, -4]
2022-08-06 06:43:22.662 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:22.662 | DEBUG    | __main__:run_benchmark:431 - Query: repeat inserting rows 4 times
2022-08-06 06:43:22.662 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin, dfin, dfin, dfin))
2022-08-06 06:43:22.669 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:43:24.131 | DEBUG    | __main__:run_benchmark:431 - Query: concat rows 4 times
2022-08-06 06:43:24.132 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4)
2022-08-06 06:43:24.141 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:43:28.823 | DEBUG    | __main__:run_benchmark:431 - Query: concat dfin*4
2022-08-06 06:43:28.824 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:43:28.840 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:28.840 | DEBUG    | __main__:run_benchmark:431 - Query: concat dfin*4
2022-08-06 06:43:28.841 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin*4, dfin*5])
2022-08-06 06:43:28.855 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:28.855 | DEBUG    | __main__:run_benchmark:431 - Query: concat dfin*4
2022-08-06 06:43:28.855 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0, sort=False)
2022-08-06 06:43:28.863 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:43:33.661 | DEBUG    | __main__:run_benchmark:431 - Query: concat row 0, row 1 4 times
2022-08-06 06:43:33.662 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin.loc[0], dfin.loc[1]] * 4, axis=1)
2022-08-06 06:43:33.723 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:33.723 | DEBUG    | __main__:run_benchmark:431 - Query: concat row 0, row 1 4 times
2022-08-06 06:43:33.723 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:43:33.741 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:33.741 | DEBUG    | __main__:run_benchmark:431 - Query: concat row 0, row 1 4 times
2022-08-06 06:43:33.741 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:43:33.756 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:33.756 | DEBUG    | __main__:run_benchmark:431 - Query: concat row 0, row 1 4 times
2022-08-06 06:43:33.757 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, ignore_index=True)
2022-08-06 06:43:33.772 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:43:33.772 | DEBUG    | __main__:run_benchmark:431 - Query: concat row 0, row 1 4 times
2022-08-06 06:43:33.772 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin, dfin, dfin, dfin], axis=0, sort=False)
2022-08-06 06:43:33.779 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:43:33.940 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fd44bfb47a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7fd44c1348c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7fd3b9425b10>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7fd3b9425b10>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'repeat the rows 4 times', 'user': 'u5'}, {'query': 'repeat all rows 4 times', 'user': 'u5'}, {'query'...
    │               └ {'queries': [{'query': 'repeat the rows 4 times', 'user': 'u5'}, {'query': 'repeat all rows 4 times', 'user': 'u5'}, {'query'...
    └ {'query': 'concat rows of dfin 4 times', 'user': 'u14'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7fd3b9425b10>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Concatenate the first 5 dataframes i...
    │    └ 'code-davinci-002'
    └ <__main__.Algorithm1 object at 0x7fd3b9425b10>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-002', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fd3b727cdd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7fd3a526db50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:43:33 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fd43baa6f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:43:33 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on reques...
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fd3a5204c10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeie...

openai.error.RateLimitError: Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:43:33.965 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:44:05.892 | DEBUG    | __main__:run_benchmark:431 - Query: concat rows of dfin 4 times
2022-08-06 06:44:05.893 | DEBUG    | __main__:run_benchmark:432 - pd.concat([dfin]*4, axis=0)
2022-08-06 06:44:05.901 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:44:07.896 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:07.897 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:44:07.914 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:07.914 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:07.914 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:44:07.929 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:07.930 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:07.930 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:44:07.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:07.946 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:07.946 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:44:07.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:07.962 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:07.962 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:44:07.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:07.973 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:07.973 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:44:07.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:07.988 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:07.988 | DEBUG    | __main__:run_benchmark:432 - dfin.append([dfin]*4, ignore_index=True)
2022-08-06 06:44:08.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:08.003 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:08.003 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:44:08.019 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:08.019 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:08.019 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:44:08.035 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:08.035 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:08.035 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4))
2022-08-06 06:44:08.037 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:08.037 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:08.037 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:44:08.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:08.053 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:08.053 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:44:08.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:08.064 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:08.064 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:44:08.075 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:08.075 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:08.076 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:44:08.091 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:08.091 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:08.091 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:44:08.107 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:08.107 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:08.107 | DEBUG    | __main__:run_benchmark:432 - pd.concat((dfin * 4), axis=0)
2022-08-06 06:44:08.109 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:08.109 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:08.109 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:44:08.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:08.125 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:08.125 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.index.repeat(4)]
2022-08-06 06:44:08.140 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:08.141 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:08.141 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[len(dfin)] = dfin.loc[0]
2022-08-06 06:44:08.152 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:08.152 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate the rows 4 times
2022-08-06 06:44:08.153 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2] = dfin.loc[0]
2022-08-06 06:44:08.163 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.089 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.090 | DEBUG    | __main__:run_benchmark:432 - dfin.multiply(4)
2022-08-06 06:44:10.105 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.105 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.106 | DEBUG    | __main__:run_benchmark:432 - np.matmul(dfin, np.ones((2, 4)))
2022-08-06 06:44:10.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.115 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.115 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 06:44:10.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.126 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.126 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 06:44:10.136 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.136 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.137 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 06:44:10.147 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.147 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.147 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 06:44:10.158 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.158 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.158 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 06:44:10.169 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.169 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.169 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 06:44:10.180 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.180 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.180 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x * 4, axis=1)
2022-08-06 06:44:10.195 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.195 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.196 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 06:44:10.206 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.206 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.206 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 06:44:10.217 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.217 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.217 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x*4, axis=1)
2022-08-06 06:44:10.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.233 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.233 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x * 4, axis=1)
2022-08-06 06:44:10.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.249 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.249 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x * 4, axis=1)
2022-08-06 06:44:10.264 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.265 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.265 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0:2, 0:2] * 4
2022-08-06 06:44:10.279 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.279 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.279 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[:, :] * 4
2022-08-06 06:44:10.293 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.293 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.293 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x * 4, axis=1)
2022-08-06 06:44:10.308 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.309 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.309 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 06:44:10.319 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.319 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.320 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 06:44:10.330 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:10.330 | DEBUG    | __main__:run_benchmark:431 - Query: Multiply the rows 4 times
2022-08-06 06:44:10.330 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[0] * 4
2022-08-06 06:44:10.341 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:12.805 | DEBUG    | __main__:run_benchmark:431 - Query: Duplicate table 4 times
2022-08-06 06:44:12.805 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.concat([dfin]*4, axis=0, sort=False)
2022-08-06 06:44:12.815 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:44:12.822 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 06:44:12.822 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:44:12.822 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:44:12.822 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 06:44:14.141 | DEBUG    | __main__:run_benchmark:431 - Query: return value of 1st row and 3rd column
2022-08-06 06:44:14.142 | DEBUG    | __main__:run_benchmark:432 - dfin.values[(1, 2)]
2022-08-06 06:44:14.144 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:44:16.138 | DEBUG    | __main__:run_benchmark:431 - Query: return value from ColC's 1st row
2022-08-06 06:44:16.139 | DEBUG    | __main__:run_benchmark:432 - dfin['colC'][1]
2022-08-06 06:44:16.141 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:44:19.707 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.708 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 06:44:19.710 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.711 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.711 | DEBUG    | __main__:run_benchmark:432 - dfin.at[2, 'colC']
2022-08-06 06:44:19.712 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.712 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.712 | DEBUG    | __main__:run_benchmark:432 - dfin.at[2, 'colC']
2022-08-06 06:44:19.714 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.714 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.714 | DEBUG    | __main__:run_benchmark:432 - dfin.at[2, 'colC']
2022-08-06 06:44:19.715 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.715 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.715 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 06:44:19.717 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.717 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.717 | DEBUG    | __main__:run_benchmark:432 - dfin['colC'][2]
2022-08-06 06:44:19.718 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.718 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.718 | DEBUG    | __main__:run_benchmark:432 - dfin['colC'][2]
2022-08-06 06:44:19.720 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.720 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.720 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[2, dfin.columns.get_loc('colC')]
2022-08-06 06:44:19.721 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.721 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.721 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 06:44:19.723 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.723 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.723 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 06:44:19.724 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.724 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.724 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 06:44:19.726 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.726 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.726 | DEBUG    | __main__:run_benchmark:432 - dfin.values[(2, 'colC')]
2022-08-06 06:44:19.727 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.727 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.727 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 06:44:19.728 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.729 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.729 | DEBUG    | __main__:run_benchmark:432 - dfin.at[2, 'colC']
2022-08-06 06:44:19.730 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.730 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.730 | DEBUG    | __main__:run_benchmark:432 - dfin['colC'].ix[2]
2022-08-06 06:44:19.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.732 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.732 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 06:44:19.733 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.733 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.733 | DEBUG    | __main__:run_benchmark:432 - dfin.iloc[2]['colC']
2022-08-06 06:44:19.734 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.735 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.735 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 06:44:19.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.736 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.736 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 06:44:19.737 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.738 | DEBUG    | __main__:run_benchmark:431 - Query: Get value of column 'colC' in row 2
2022-08-06 06:44:19.738 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[2, 'colC']
2022-08-06 06:44:19.739 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:19.746 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:44:19.746 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 06:44:21.516 | DEBUG    | __main__:run_benchmark:431 - Query: from column colC, select index 3
2022-08-06 06:44:21.517 | DEBUG    | __main__:run_benchmark:432 - dfin['colC'][3]
2022-08-06 06:44:21.519 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:44:21.525 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:44:21.526 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 06:44:21.526 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:44:21.526 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:44:23.061 | DEBUG    | __main__:run_benchmark:431 - Query: Filter all rows with alpha less than 40 or greater than 59 from dfin
2022-08-06 06:44:23.062 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] < 40) | (dfin['alpha'] > 59)]
2022-08-06 06:44:23.072 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:44:25.320 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.321 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['alpha'].between(40, 59)]
2022-08-06 06:44:25.339 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.339 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.339 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] > 40) & (dfin['alpha'] < 59)]
2022-08-06 06:44:25.356 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.357 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.357 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] > 40) & (dfin['alpha'] < 59)]
2022-08-06 06:44:25.374 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.374 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.374 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:44:25.392 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.392 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.392 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:44:25.410 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.410 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.410 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['alpha'].between(40, 59)]
2022-08-06 06:44:25.427 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.428 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.428 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] > 40) & (dfin['alpha'] < 59)]
2022-08-06 06:44:25.445 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.445 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.445 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] > 40) & (dfin['alpha'] < 59)]
2022-08-06 06:44:25.463 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.463 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.463 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:44:25.481 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.481 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.481 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] > 40) & (dfin['alpha'] < 59)]
2022-08-06 06:44:25.498 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.499 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.499 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:44:25.516 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.516 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.516 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:44:25.534 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.534 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.534 | DEBUG    | __main__:run_benchmark:432 - dfin[np.logical_and((dfin['alpha'] > 40), (dfin['alpha'] < 60))]
2022-08-06 06:44:25.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.552 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.552 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] > 40) & (dfin['alpha'] < 59)]
2022-08-06 06:44:25.569 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.570 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.570 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:44:25.587 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.587 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.587 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:44:25.605 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.605 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.605 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-06 06:44:25.622 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.622 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.623 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] > 40) & (dfin['alpha'] < 59)]
2022-08-06 06:44:25.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.640 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.640 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] > 40) & (dfin['alpha'] < 59)]
2022-08-06 06:44:25.658 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:25.658 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-06 06:44:25.658 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['alpha'].between(40, 59)]
2022-08-06 06:44:25.675 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:27.520 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-06 06:44:27.521 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] < 40) | (dfin['alpha'] > 59)]
2022-08-06 06:44:27.531 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:44:30.249 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows where value of 'alpha' is less than '40' or greater than '59'
2022-08-06 06:44:30.250 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59))]
2022-08-06 06:44:30.259 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:44:30.266 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:44:30.267 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:44:30.267 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:44:32.274 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where 'gamma' is less than 40 or greater than 53
2022-08-06 06:44:32.275 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) | (dfin['gamma'] > 53))]
2022-08-06 06:44:32.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:44:32.292 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:44:33.747 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:44:33.748 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:44:33.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:33.763 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:44:33.763 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:44:33.776 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:33.776 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:44:33.776 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:44:33.789 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:33.789 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:44:33.789 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:44:33.802 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:33.803 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:44:33.803 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:44:33.816 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:33.816 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:44:33.816 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:44:33.829 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:33.829 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:44:33.830 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] < 38) & (dfin['bar'] > 60))]
2022-08-06 06:44:33.843 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:33.843 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:44:33.843 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:44:33.856 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:33.856 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:44:33.856 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:44:33.869 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:33.869 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:44:33.869 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:44:33.882 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:33.883 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:44:33.883 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar']<38) & (dfin['bar']>60)]
2022-08-06 06:44:33.896 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:33.896 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:44:33.896 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:44:33.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:33.909 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:44:33.909 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-06 06:44:33.922 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:33.922 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:44:33.922 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar']<38) & (dfin['bar']>60)]
2022-08-06 06:44:33.935 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:44:33.935 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where bar<38 and bar>60
2022-08-06 06:44:33.936 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60)]
2022-08-06 06:44:33.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:44:39.081 | DEBUG    | __main__:run_benchmark:431 - Query: select rows from dfin such that column 'bar' is less than 38 or greater than 60
2022-08-06 06:44:39.082 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60))]
2022-08-06 06:44:39.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:44:39.100 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 06:44:39.100 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:44:39.100 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:44:41.940 | DEBUG    | __main__:run_benchmark:431 - Query: Filter all rows with alpha less than 40 or greater than 59 and filter all rows with beta equal to 3 from dfin
2022-08-06 06:44:41.941 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3)]
2022-08-06 06:44:41.950 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:44:48.131 | DEBUG    | __main__:run_benchmark:431 - Query: Filter all rows with alpha less than 40 or greater than 59 and beta equal to 3 from dfin
2022-08-06 06:44:48.131 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3)]
2022-08-06 06:44:48.140 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:44:51.944 | DEBUG    | __main__:run_benchmark:431 - Query: Filter all rows with alpha less than 40 or greater than 59 with beta equal to 3
2022-08-06 06:44:51.945 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3)]
2022-08-06 06:44:51.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:44:55.681 | DEBUG    | __main__:run_benchmark:431 - Query: Select all rows with alpha less than 40 or greater than 59 with beta equal to 3
2022-08-06 06:44:55.682 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) & (dfin['beta'] == 3)]
2022-08-06 06:44:55.691 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:44:55.698 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:45:01.295 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 34 or greater than 70 and value in column 'bar' is 8
2022-08-06 06:45:01.296 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:45:01.307 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:45:05.741 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.741 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.756 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.756 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.756 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.769 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.769 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.769 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.782 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.782 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.783 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.796 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.796 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.796 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.809 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.809 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.810 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.823 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.823 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.823 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.836 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.836 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.836 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.850 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.850 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.850 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.863 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.863 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.863 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.876 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.877 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.877 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.890 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.890 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.903 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.903 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.903 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.916 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.917 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.930 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.930 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.930 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.943 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.943 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.956 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.956 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.969 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.970 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.970 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.983 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.983 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.983 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:05.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:05.996 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-06 06:45:05.996 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 1)]
2022-08-06 06:45:06.009 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:09.885 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 8 of table dfin
2022-08-06 06:45:09.886 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:45:09.896 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:45:13.726 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-06 06:45:13.727 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:45:13.737 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:45:18.181 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-06 06:45:18.182 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:45:18.192 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:45:21.487 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-06 06:45:21.488 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:45:21.498 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:45:26.264 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-06 06:45:26.265 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:45:26.275 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:45:29.309 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.310 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) & (dfin['foo'] < 34)]
2022-08-06 06:45:29.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.324 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.324 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:29.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.337 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.337 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) & (dfin['foo'] < 34)]
2022-08-06 06:45:29.350 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.351 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.351 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:29.364 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.364 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.364 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:29.377 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.378 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.378 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:29.391 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.391 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.391 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:29.404 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.405 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.405 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:29.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.418 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.418 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:29.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.431 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.432 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:29.445 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.445 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.445 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:29.458 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.459 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.459 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:29.472 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.472 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.472 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 06:45:29.485 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.486 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.486 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:29.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.499 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.499 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:29.512 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.512 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.512 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:29.525 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.526 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.526 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:29.539 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.539 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.539 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 06:45:29.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.552 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.552 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) | (dfin['foo'] < 34)]
2022-08-06 06:45:29.570 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:29.570 | DEBUG    | __main__:run_benchmark:431 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:29.570 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 06:45:29.583 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:33.771 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:33.772 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:33.786 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:33.786 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:33.786 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:33.799 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:33.799 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:33.799 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) & (dfin['foo'] < 34)]
2022-08-06 06:45:33.812 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:33.813 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:33.813 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:33.826 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:33.826 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:33.826 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:33.839 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:33.840 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:33.840 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:33.853 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:33.853 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:33.853 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:33.866 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:33.867 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:33.867 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) & (dfin['foo'] < 34)]
2022-08-06 06:45:33.880 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:33.880 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:33.880 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:33.893 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:33.893 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:33.894 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:33.907 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:33.907 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:33.907 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:33.920 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:33.920 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:33.920 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:33.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:33.933 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:33.934 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:33.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:33.947 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:33.947 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) | (dfin['foo'] < 34)]
2022-08-06 06:45:33.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:33.965 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:33.965 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:33.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:33.978 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:33.978 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:33.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:33.991 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:33.991 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) & (dfin['foo'] < 34)]
2022-08-06 06:45:34.004 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:34.004 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:34.005 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34))]
2022-08-06 06:45:34.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:34.018 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:34.018 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-06 06:45:34.031 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:34.031 | DEBUG    | __main__:run_benchmark:431 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-06 06:45:34.031 | DEBUG    | __main__:run_benchmark:432 - dfin[np.logical_and(dfin['bar'] == 8, np.logical_and(dfin['foo'] > 70, dfin['foo'] < 34))]
2022-08-06 06:45:34.045 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:37.604 | DEBUG    | __main__:run_benchmark:431 - Query: Choose rows such that in column 'foo' it is less than 34 or greater than 70, in column 'bar' equals 8
2022-08-06 06:45:37.605 | DEBUG    | __main__:run_benchmark:432 - #  and in column 'yah' it is less than 0
2022-08-06 06:45:37.605 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:37.606 | DEBUG    | __main__:run_benchmark:431 - Query: Choose rows such that in column 'foo' it is less than 34 or greater than 70, in column 'bar' equals 8
2022-08-06 06:45:37.606 | DEBUG    | __main__:run_benchmark:432 - #  and in column 'yah' it is less than or equal to 3
2022-08-06 06:45:37.606 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:45:37.606 | DEBUG    | __main__:run_benchmark:431 - Query: Choose rows such that in column 'foo' it is less than 34 or greater than 70, in column 'bar' equals 8
2022-08-06 06:45:37.606 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:45:37.616 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:45:39.905 | DEBUG    | __main__:run_benchmark:431 - Query: Choose rows such that in column 'foo' it is less than 34 or greater than 70 and in column 'bar' equals 8
2022-08-06 06:45:39.906 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:45:39.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:45:41.839 | DEBUG    | __main__:run_benchmark:431 - Query: Get rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:45:41.840 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:45:41.850 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:45:45.886 | DEBUG    | __main__:run_benchmark:431 - Query: retain rows where 'foo' greater than 70 or 'foo' less than 34 and 'bar' is 8
2022-08-06 06:45:45.886 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 06:45:45.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:45:50.472 | DEBUG    | __main__:run_benchmark:431 - Query: retain rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 06:45:50.473 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 06:45:50.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:45:53.823 | DEBUG    | __main__:run_benchmark:431 - Query: select entries in column 'foo' which are greater than 70 or less than 34 and select entries in column 'bar' which are equal to 8
2022-08-06 06:45:53.824 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 06:45:53.835 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:45:56.666 | DEBUG    | __main__:run_benchmark:431 - Query: select entries where column 'foo' is greater than 70 or less than 34 and column 'bar' is equal to 8
2022-08-06 06:45:56.667 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)]
2022-08-06 06:45:56.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:45:56.685 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:46:01.530 | DEBUG    | __main__:run_benchmark:431 - Query: get rows with beta greater than 53 or less than 40 and gamma equal to 9
2022-08-06 06:46:01.531 | DEBUG    | __main__:run_benchmark:432 - dfin[np.logical_or(dfin['beta'] > 53, dfin['beta'] < 40) & (dfin['gamma'] == 9)]
2022-08-06 06:46:01.575 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:46:06.564 | DEBUG    | __main__:run_benchmark:431 - Query: get rows with beta greater than 53 or less than 40 AND gamma equal to 9
2022-08-06 06:46:06.565 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['beta'] > 53) | (dfin['beta'] < 40)) & (dfin['gamma'] == 9)]
2022-08-06 06:46:06.575 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:46:13.906 | DEBUG    | __main__:run_benchmark:431 - Query: get rows with beta greater than 53 or less than 40, filter rows with gamma equal to 9
2022-08-06 06:46:13.907 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['beta'] > 53) | (dfin['beta'] < 40)) & (dfin['gamma'] == 9)]
2022-08-06 06:46:13.918 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:46:13.926 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:46:16.600 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where 'alpha' is equal to 4 and 'gamma' is not between 40 and 53
2022-08-06 06:46:16.601 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['alpha'] == 4) & ~((dfin['gamma'] >= 40) & (dfin['gamma'] <= 53))]
2022-08-06 06:46:16.611 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:46:19.341 | DEBUG    | __main__:run_benchmark:431 - Query: From dfin, filter rows with column gamma less than 40 or more than 53, and column alpha equal to 4
2022-08-06 06:46:19.342 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['gamma'] < 40) | (dfin['gamma'] > 53)) & (dfin['alpha'] == 4)]
2022-08-06 06:46:19.352 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:46:19.360 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:46:21.768 | DEBUG    | __main__:run_benchmark:431 - Query: retain those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is equal to 11
2022-08-06 06:46:21.769 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] > 37) & (dfin['bar'] < 61))) & (dfin['foo'] == 11)]
2022-08-06 06:46:21.779 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:46:26.838 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:26.839 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))].index)
2022-08-06 06:46:26.859 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:26.859 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:26.859 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 06:46:26.876 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:26.877 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:26.877 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 06:46:26.894 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:26.895 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:26.895 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 06:46:26.912 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:26.912 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:26.913 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)]
2022-08-06 06:46:26.930 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:26.930 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:26.930 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 06:46:26.948 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:26.948 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:26.948 | DEBUG    | __main__:run_benchmark:432 - dfin[~(((dfin['bar'] >= 37) & (dfin['bar'] <= 61)) & (dfin['foo'] != 11))]
2022-08-06 06:46:26.966 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:26.966 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:26.966 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 06:46:26.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:26.984 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:26.984 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)]
2022-08-06 06:46:27.002 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:27.002 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:27.002 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 06:46:27.020 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:27.020 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:27.020 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 06:46:27.038 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:27.038 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:27.038 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)]
2022-08-06 06:46:27.055 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:27.056 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:27.056 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 06:46:27.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:27.074 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:27.074 | DEBUG    | __main__:run_benchmark:432 - dfin[(~ dfin['bar'].between(left=37, right=61)) | (dfin['foo'] != 11)]
2022-08-06 06:46:27.091 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:27.092 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:27.092 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 06:46:27.109 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:27.109 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:27.110 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 37) | (dfin['bar'] > 61)) | (dfin['foo'] != 11)]
2022-08-06 06:46:27.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:27.127 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:27.128 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 06:46:27.145 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:27.145 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:27.145 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] > 37) & (dfin['bar'] < 61)) & (dfin['foo'] != 11)]
2022-08-06 06:46:27.163 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:27.163 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:27.163 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] > 37) & (dfin['bar'] < 61) & (dfin['foo'] != 11))]
2022-08-06 06:46:27.181 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:27.181 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-06 06:46:27.181 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)]
2022-08-06 06:46:27.199 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:46:30.252 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where (bar < 38 or bar > 60) and foo = 11
2022-08-06 06:46:30.252 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:46:30.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:46:30.430 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fd44bfb47a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7fd44c1348c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7fd3b9425b10>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7fd3b9425b10>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "retain those rows where value in cell of column 'foo' is equal to 11 and value in column 'bar' is eit...
    │               └ {'queries': [{'query': "retain those rows where value in cell of column 'foo' is equal to 11 and value in column 'bar' is eit...
    └ {'query': 'print rows where bar < 38 or bar > 60 and foo = 11', 'user': 'u14'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7fd3b9425b10>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a dataframe containing rows i...
    │    └ 'code-davinci-002'
    └ <__main__.Algorithm1 object at 0x7fd3b9425b10>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-002', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fd3b727cdd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7fd3a51e5090>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:46:30 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fd43baa6f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:46:30 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on reques...
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fd3a521fad0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeie...

openai.error.RateLimitError: Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:46:30.456 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:47:04.000 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where bar < 38 or bar > 60 and foo = 11
2022-08-06 06:47:04.001 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:47:04.011 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:47:08.349 | DEBUG    | __main__:run_benchmark:431 - Query: filter rows where (bar<38 || bar>60) && foo==11
2022-08-06 06:47:08.350 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:47:08.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:47:11.118 | DEBUG    | __main__:run_benchmark:431 - Query: select rows from dfin such that column 'bar' is less than 38 or greater than 60 and column 'foo' equals 11
2022-08-06 06:47:11.119 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:47:11.129 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:47:11.137 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 06:47:11.137 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 06:47:11.137 | DEBUG    | __main__:run:515 - Number of queries: 27
2022-08-06 06:47:14.808 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:14.809 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:14.831 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:14.831 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:14.831 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'].unique())]
2022-08-06 06:47:14.852 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:14.853 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:14.853 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:14.874 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:14.874 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:14.874 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:14.895 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:14.896 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:14.896 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:14.917 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:14.917 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:14.917 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'] == dfin2['alpha'])]
2022-08-06 06:47:14.920 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:14.920 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:14.920 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:14.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:14.941 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:14.941 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:14.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:14.963 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:14.963 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:14.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:14.984 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:14.984 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:15.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:15.005 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:15.005 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:15.027 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:15.027 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:15.027 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:15.048 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:15.048 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:15.048 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:15.069 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:15.069 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:15.069 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:15.090 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:15.090 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:15.091 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:15.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:15.112 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:15.112 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:15.133 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:15.133 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:15.133 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:15.154 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:15.154 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:15.154 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:15.175 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:15.175 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:15.176 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:15.197 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:15.197 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-06 06:47:15.197 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:15.218 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.251 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.251 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:18.270 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.270 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.271 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:18.288 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.288 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.288 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:18.306 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.306 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.306 | DEBUG    | __main__:run_benchmark:432 - dfin1.alpha - dfin2.alpha
2022-08-06 06:47:18.323 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.324 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.324 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:18.341 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.341 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.342 | DEBUG    | __main__:run_benchmark:432 - (dfin1['alpha'] - dfin2)
2022-08-06 06:47:18.374 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.374 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.374 | DEBUG    | __main__:run_benchmark:432 - dfin1.sub(dfin2, axis=0)
2022-08-06 06:47:18.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.398 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.398 | DEBUG    | __main__:run_benchmark:432 - dfin1.sub(dfin2, axis=0)
2022-08-06 06:47:18.421 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.421 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.422 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:18.439 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.439 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.439 | DEBUG    | __main__:run_benchmark:432 - dfin1.merge(dfin2, on='alpha', how='left', suffixes=('_x', '_y')).fillna(0).sub(dfin2, fill_value=0)
2022-08-06 06:47:18.472 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.472 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.473 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:18.490 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.490 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.490 | DEBUG    | __main__:run_benchmark:432 - dfin1.sub(dfin2, axis=0)
2022-08-06 06:47:18.514 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.514 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.514 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:18.531 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.532 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.532 | DEBUG    | __main__:run_benchmark:432 - dfin1.sub(dfin2, axis=0)
2022-08-06 06:47:18.555 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.555 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.555 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:18.573 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.573 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.573 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:18.591 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.591 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.591 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:47:18.591 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.591 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.591 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:18.609 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.609 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.609 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[:, 'alpha'] - dfin2.loc[:, 'alpha']
2022-08-06 06:47:18.627 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:18.627 | DEBUG    | __main__:run_benchmark:431 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-06 06:47:18.627 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:18.645 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:21.979 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:21.980 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:21.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:21.999 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:21.999 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:22.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:22.016 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:22.016 | DEBUG    | __main__:run_benchmark:432 - np.setdiff1d(dfin1['alpha'], dfin2['alpha'])
2022-08-06 06:47:22.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:22.033 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:22.033 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:22.050 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:22.051 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:22.051 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:22.068 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:22.068 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:22.069 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:22.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:22.086 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:22.086 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:22.104 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:22.104 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:22.104 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'].diff()
2022-08-06 06:47:22.121 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:22.121 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:22.121 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:22.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:22.139 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:22.139 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:22.156 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:22.157 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:22.157 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:22.174 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:22.174 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:22.174 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:22.192 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:22.192 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:22.192 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:47:22.192 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:22.192 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:22.193 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:22.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:22.210 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:22.210 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:22.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:22.228 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:22.228 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:22.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:22.246 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:22.246 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:22.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:22.264 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:22.264 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:22.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:22.282 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:22.282 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:22.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:22.300 | DEBUG    | __main__:run_benchmark:431 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-06 06:47:22.300 | DEBUG    | __main__:run_benchmark:432 - dfin1['alpha'] - dfin2['alpha']
2022-08-06 06:47:22.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:26.886 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:26.887 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:26.910 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:26.910 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:26.910 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:26.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:26.931 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:26.931 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:26.952 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:26.952 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:26.952 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:26.973 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:26.973 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:26.973 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:47:26.976 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:26.976 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:26.976 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] != dfin2['alpha'])]['alpha']
2022-08-06 06:47:26.979 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:26.979 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:26.979 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2[dfin1['alpha'] != dfin2['alpha']]['alpha'])]
2022-08-06 06:47:26.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:26.982 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:26.982 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:27.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:27.003 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:27.004 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:27.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:27.025 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:27.025 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:27.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:27.046 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:27.046 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:27.067 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:27.067 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:27.067 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:27.088 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:27.088 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:27.088 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:27.109 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:27.109 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:27.110 | DEBUG    | __main__:run_benchmark:432 - df1[(df1['alpha'].isin(dfin2['alpha'])) & (df1['alpha'].isin(dfin1['alpha'])) & (dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:47:27.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:27.112 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:27.113 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:27.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:27.134 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:27.134 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:27.155 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:27.155 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:27.155 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['alpha'].isin(dfin2['alpha']) & ~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:27.173 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:27.173 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:27.173 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:27.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:27.194 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:27.194 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:27.215 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:27.216 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:27.216 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:27.237 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:29.425 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:29.426 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:47:29.430 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:29.430 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:29.430 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:29.452 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:29.452 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:29.452 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:29.473 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:29.473 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:29.473 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:29.494 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:29.495 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:29.495 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:47:29.497 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:29.498 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:29.498 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] != dfin2['alpha'])]['alpha']
2022-08-06 06:47:29.500 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:29.501 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:29.501 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'] != dfin2['alpha']), :]
2022-08-06 06:47:29.503 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:29.504 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:29.504 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:29.525 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:29.525 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:29.525 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:47:29.528 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:29.528 | DEBUG    | __main__:run_benchmark:431 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-06 06:47:29.528 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:29.539 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:47:33.552 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:47:33.552 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha'])) & (dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:47:33.557 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:33.557 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:47:33.557 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'].isin(dfin2['alpha'])) & (dfin1['alpha'] != dfin2['alpha']), :]
2022-08-06 06:47:33.560 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:33.560 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:47:33.560 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:47:33.563 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:33.563 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:47:33.563 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:33.585 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:33.585 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:47:33.585 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha'].unique())) & (dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:47:33.588 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:33.589 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:47:33.589 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha']) & (dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:47:33.592 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:33.592 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:47:33.592 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[(dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:47:33.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:33.595 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:47:33.595 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:33.616 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:33.616 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:47:33.616 | DEBUG    | __main__:run_benchmark:432 - dfin1[(dfin1['alpha'].isin(dfin2['alpha'])) & (dfin1['alpha'] != dfin2['alpha'])]
2022-08-06 06:47:33.619 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:33.619 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:47:33.619 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:33.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:33.640 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:47:33.641 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:33.662 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:33.662 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:47:33.662 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:33.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:33.683 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:47:33.683 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:33.704 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:33.704 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:47:33.705 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:33.725 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:33.726 | DEBUG    | __main__:run_benchmark:431 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-06 06:47:33.726 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-06 06:47:33.737 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:47:33.746 | DEBUG    | __main__:run:515 - Number of queries: 26
2022-08-06 06:47:37.251 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.252 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:47:37.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.275 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.275 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'].unique())]
2022-08-06 06:47:37.296 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.296 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.296 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:47:37.317 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.317 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.318 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'].to_list())]
2022-08-06 06:47:37.339 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.339 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.339 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:47:37.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.360 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.360 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:47:37.381 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.382 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.382 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:47:37.403 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.403 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.403 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:47:37.424 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.424 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.424 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:47:37.445 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.445 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.446 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:47:37.467 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.467 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.467 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:47:37.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.488 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.488 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:47:37.509 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.509 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.510 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:47:37.530 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.531 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.531 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:47:37.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.552 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.552 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:47:37.573 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.573 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.574 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:47:37.594 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.595 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.595 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:47:37.616 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.616 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.616 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:47:37.637 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.637 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.638 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:47:37.659 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.659 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-06 06:47:37.659 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['bar'].isin(dfin2['bar'])]
2022-08-06 06:47:37.680 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:37.689 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:47:37.689 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:47:40.189 | DEBUG    | __main__:run_benchmark:431 - Query: From dfin, filter rows with dfin1.yah values not in column dfin2.yah
2022-08-06 06:47:40.190 | DEBUG    | __main__:run_benchmark:432 - dfin1[~dfin1.yah.isin(dfin2.yah)].reset_index(drop=True)
2022-08-06 06:47:40.213 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:40.213 | DEBUG    | __main__:run_benchmark:431 - Query: From dfin, filter rows with dfin1.yah values not in column dfin2.yah
2022-08-06 06:47:40.213 | DEBUG    | __main__:run_benchmark:432 - dfin1.loc[~dfin1['yah'].isin(dfin2['yah'])]
2022-08-06 06:47:40.224 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:47:40.234 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 06:47:40.234 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 06:47:40.234 | DEBUG    | __main__:run:515 - Number of queries: 21
2022-08-06 06:47:44.996 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:44.997 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.017 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.017 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.035 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.035 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.053 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.053 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.071 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.071 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.071 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.089 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.089 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.089 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.107 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.107 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.107 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.125 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.126 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.144 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.144 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.144 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.162 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.162 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.162 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.180 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.180 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.180 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.198 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.198 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.216 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.216 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.217 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.235 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.235 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.253 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.253 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.253 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.271 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.271 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.271 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.289 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.289 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.289 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.307 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.308 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.308 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.325 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.326 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.326 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.344 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:45.344 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-06 06:47:45.344 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:45.362 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.201 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.202 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))
2022-08-06 06:47:49.203 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.203 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.203 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 06:47:49.223 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.224 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.224 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 06:47:49.243 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.243 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.243 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 06:47:49.262 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.262 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.262 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 06:47:49.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.281 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.281 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:47:49.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.282 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.282 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 06:47:49.301 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.301 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.301 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 06:47:49.320 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.320 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.320 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 06:47:49.339 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.339 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.339 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 06:47:49.358 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.358 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.358 | DEBUG    | __main__:run_benchmark:432 - dfin[(((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))
2022-08-06 06:47:49.359 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.359 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.359 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 06:47:49.378 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.378 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.378 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 06:47:49.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.397 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.397 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 06:47:49.416 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.416 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.416 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 06:47:49.435 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.436 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.436 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8
2022-08-06 06:47:49.436 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.436 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.436 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 06:47:49.455 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.455 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.455 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-06 06:47:49.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.474 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.474 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 06:47:49.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:49.493 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-06 06:47:49.494 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)) | ((dfin['foo'] > 40) & (dfin['foo'] < 50) & (dfin['bar'] == 8))]
2022-08-06 06:47:49.512 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.113 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.113 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'yah' is less than 5)
2022-08-06 06:47:51.113 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.113 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.113 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:47:51.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.114 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.114 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'yah' is less than or equal to 5)
2022-08-06 06:47:51.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.114 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.114 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:47:51.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.114 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.114 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'yah' is greater than 10)
2022-08-06 06:47:51.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.115 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.115 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'yah' is greater than 10)
2022-08-06 06:47:51.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.115 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.115 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:47:51.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.115 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.115 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:47:51.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.116 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.116 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'yah' is less than 5)
2022-08-06 06:47:51.116 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.116 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.116 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'yah' is less than or equal to 5)
2022-08-06 06:47:51.116 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.116 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.116 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:47:51.116 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.117 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.117 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:47:51.117 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.117 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.117 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'yah' is less than 5)
2022-08-06 06:47:51.117 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.117 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.117 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:47:51.117 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.118 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.118 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:47:51.118 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.118 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.118 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:47:51.118 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.118 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.118 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'yah' is less than 5)
2022-08-06 06:47:51.118 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.118 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.119 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'yah' is less than 5)
2022-08-06 06:47:51.119 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.119 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.119 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:47:51.119 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:51.119 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-06 06:47:51.119 | DEBUG    | __main__:run_benchmark:432 - #  and value in column 'bar' is equal to 8)
2022-08-06 06:47:51.119 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:53.787 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:53.787 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 06:47:53.806 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:53.806 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:53.806 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 06:47:53.824 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:53.824 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:53.824 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8)]
2022-08-06 06:47:53.842 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:53.842 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:53.842 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 06:47:53.860 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:53.861 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:53.861 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 06:47:53.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:53.879 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:53.879 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:53.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:53.897 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:53.897 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:53.915 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:53.915 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:53.915 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 06:47:53.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:53.933 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:53.934 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:47:53.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:53.934 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:53.934 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 06:47:53.952 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:53.952 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:53.952 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 06:47:53.970 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:53.970 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:53.971 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 06:47:53.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:53.989 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:53.989 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 06:47:54.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:54.007 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:54.007 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 06:47:54.025 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:54.025 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:54.025 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:54.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:54.043 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:54.043 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 06:47:54.061 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:54.061 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:54.061 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 06:47:54.079 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:54.079 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:54.079 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 06:47:54.097 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:54.098 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:54.098 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) & (dfin['bar'] != 8)]
2022-08-06 06:47:54.116 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:54.116 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-06 06:47:54.116 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50) & (dfin['bar'] != 8))]
2022-08-06 06:47:54.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:56.859 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:56.860 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:47:56.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:56.879 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:56.879 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:47:56.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:56.897 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:56.898 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:47:56.915 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:56.915 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:56.916 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:47:56.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:56.934 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:56.934 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:47:56.952 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:56.952 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:56.952 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:47:56.970 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:56.970 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:56.970 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:47:56.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:56.988 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:56.988 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:47:57.006 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:57.006 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:57.006 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:47:57.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:57.024 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:57.024 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:47:57.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:57.042 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:57.043 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:47:57.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:57.061 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:57.061 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:47:57.079 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:57.079 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:57.079 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:47:57.097 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:57.097 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:57.097 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:47:57.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:57.115 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:57.115 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:47:57.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:57.134 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:57.134 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:47:57.152 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:57.152 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:57.152 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:47:57.170 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:57.170 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:57.170 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:47:57.188 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:57.188 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:57.188 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:47:57.206 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:47:57.207 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:47:57.207 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:47:57.225 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.289 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.290 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:01.309 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.309 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.309 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:01.327 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.327 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.328 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:01.345 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.346 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.346 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:01.364 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.364 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.364 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:48:01.382 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.382 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.382 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:01.400 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.400 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.400 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:01.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.418 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.418 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:48:01.436 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.436 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.436 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:01.455 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.455 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.455 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:01.473 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.473 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.473 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:48:01.491 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.491 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.491 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:01.509 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.509 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.509 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:01.527 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.527 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.527 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:48:01.527 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.527 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.528 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:01.546 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.547 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.547 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:01.565 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.565 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.565 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:01.583 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.583 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.583 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:01.601 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.601 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.601 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:01.619 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:01.619 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-06 06:48:01.619 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:01.638 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:03.797 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:03.798 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:48:03.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:03.817 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:03.817 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:03.835 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:03.835 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:03.835 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:03.853 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:03.853 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:03.854 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:03.872 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:03.872 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:03.872 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50)))]
2022-08-06 06:48:03.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:03.890 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:03.890 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:03.908 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:03.908 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:03.909 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:48:03.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:03.909 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:03.909 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:48:03.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:03.909 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:03.909 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] != 8) & ((dfin['foo'] < 40) | (dfin['foo'] > 50))]
2022-08-06 06:48:03.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:03.928 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:03.928 | DEBUG    | __main__:run_benchmark:432 - #  Return the 'foo' and 'bar' columns
2022-08-06 06:48:03.928 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:03.928 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:03.928 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:03.946 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:03.947 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:03.947 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:48:03.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:03.947 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:03.947 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:48:03.948 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:03.948 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:03.948 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:03.966 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:03.966 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:03.966 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:03.984 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:03.984 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:03.984 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:04.002 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:04.002 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:04.002 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:48:04.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:04.003 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:04.003 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:48:04.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:04.003 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:04.003 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:04.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:04.021 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-06 06:48:04.021 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] != 8) & (dfin['foo'] < 40)) | (dfin['foo'] > 50)]
2022-08-06 06:48:04.039 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.620 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.621 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40)) & (dfin['foo'] < 50)]
2022-08-06 06:48:08.640 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.640 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.640 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 06:48:08.658 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.658 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.658 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:48:08.676 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.676 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.677 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:48:08.694 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.695 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.695 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40)) & (dfin['foo'] < 50)]
2022-08-06 06:48:08.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.713 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.713 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:48:08.731 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.731 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.731 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:48:08.749 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.749 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.749 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:48:08.767 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.767 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.767 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 06:48:08.785 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.785 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.785 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 06:48:08.803 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.803 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.803 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:48:08.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.821 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.821 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:48:08.838 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.839 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.839 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:48:08.856 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.857 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.857 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:48:08.875 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.875 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.875 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:48:08.893 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.893 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.893 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 06:48:08.911 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.911 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.911 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 06:48:08.929 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.929 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.929 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 06:48:08.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.947 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.947 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-06 06:48:08.965 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:08.965 | DEBUG    | __main__:run_benchmark:431 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-06 06:48:08.965 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50))]
2022-08-06 06:48:08.983 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:12.175 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:12.176 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:48:12.195 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:12.195 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:12.195 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:48:12.213 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:12.213 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:12.213 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:48:12.231 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:12.231 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:12.231 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] != 8))]
2022-08-06 06:48:12.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:12.249 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:12.249 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] == 8))]
2022-08-06 06:48:12.267 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:12.267 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:12.267 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 06:48:12.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:12.286 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:12.286 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70) & (dfin['bar'] == 8))]
2022-08-06 06:48:12.303 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:12.304 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:12.304 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] != 8))]
2022-08-06 06:48:12.321 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:12.322 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:12.322 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70) & (dfin['bar'] == 8))]
2022-08-06 06:48:12.339 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:12.340 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:12.340 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] != 8)]
2022-08-06 06:48:12.357 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:12.358 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:12.358 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)].index)
2022-08-06 06:48:12.367 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:48:15.339 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:15.339 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:48:15.358 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:15.358 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:15.358 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:48:15.376 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:15.376 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:15.376 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:48:15.394 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:15.395 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:15.395 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] != 8))]
2022-08-06 06:48:15.413 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:15.413 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:15.413 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70) & (dfin['bar'] != 8))]
2022-08-06 06:48:15.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:15.431 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:15.431 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] != 8))]
2022-08-06 06:48:15.449 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:15.449 | DEBUG    | __main__:run_benchmark:431 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:15.449 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)].index)
2022-08-06 06:48:15.459 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:48:18.841 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:18.842 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:48:18.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:18.861 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:18.861 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] != 8)]
2022-08-06 06:48:18.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:18.879 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:18.879 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:48:18.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:18.897 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:18.898 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:48:18.915 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:18.915 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:18.916 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 06:48:18.934 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:18.934 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:18.934 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] != 8))]
2022-08-06 06:48:18.952 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:18.952 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:18.952 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] != 8))]
2022-08-06 06:48:18.970 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:18.970 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:18.970 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70) & (dfin['bar'] != 8))]
2022-08-06 06:48:18.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:18.988 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:18.988 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] != 8)]
2022-08-06 06:48:19.006 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:19.006 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:19.006 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70) & (dfin['bar'] == 8))]
2022-08-06 06:48:19.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:19.024 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:19.025 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70) & (dfin['bar'] != 8))]
2022-08-06 06:48:19.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:19.043 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:19.043 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 34) | (dfin['foo'] > 70)) & (dfin['bar'] == 8)]
2022-08-06 06:48:19.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:19.061 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:19.061 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] != 8)]
2022-08-06 06:48:19.079 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:19.079 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:19.079 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] != 8)]
2022-08-06 06:48:19.097 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:19.097 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:19.097 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] == 8)]
2022-08-06 06:48:19.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:19.115 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:19.115 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) & (dfin['bar'] != 8)]
2022-08-06 06:48:19.133 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:19.133 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:19.133 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70) & (dfin['bar'] == 8))]
2022-08-06 06:48:19.151 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:19.151 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:19.152 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] != 8)]
2022-08-06 06:48:19.169 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:19.169 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:19.170 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] != 8)]
2022-08-06 06:48:19.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:19.188 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-06 06:48:19.188 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] > 34) & (dfin['foo'] < 70)) & (dfin['bar'] != 8)]
2022-08-06 06:48:19.206 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:22.317 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 06:48:22.318 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)].index)
2022-08-06 06:48:22.329 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:48:24.279 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 06:48:24.279 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)].index)
2022-08-06 06:48:24.290 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:48:27.399 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.400 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 06:48:27.419 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.419 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.419 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 06:48:27.437 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.437 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.438 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8))]
2022-08-06 06:48:27.455 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.456 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.456 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8))]
2022-08-06 06:48:27.473 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.474 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.474 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 06:48:27.491 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.492 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.492 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 06:48:27.509 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.510 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.510 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 06:48:27.528 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.528 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.528 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 06:48:27.546 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.546 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.546 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:48:27.564 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.564 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.564 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 06:48:27.582 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.582 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.583 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 06:48:27.600 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.600 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.601 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 06:48:27.618 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.618 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.619 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8))]
2022-08-06 06:48:27.636 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.637 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.637 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8))]
2022-08-06 06:48:27.655 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.655 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.655 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 06:48:27.672 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.673 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.673 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 06:48:27.691 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.691 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.691 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['foo'] < 70) | (dfin['foo'] > 34)) & (dfin['bar'] != 8)]
2022-08-06 06:48:27.709 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.709 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.709 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 06:48:27.727 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.727 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.727 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 06:48:27.745 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:27.745 | DEBUG    | __main__:run_benchmark:431 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-06 06:48:27.745 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-06 06:48:27.763 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:32.266 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 06:48:32.267 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)].index)
2022-08-06 06:48:32.278 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:48:35.759 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 06:48:35.760 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)].index)
2022-08-06 06:48:35.770 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:48:39.662 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-06 06:48:39.662 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['foo'] > 70) | (dfin['foo'] < 34)) & (dfin['bar'] == 8)].index)
2022-08-06 06:48:39.673 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:48:43.725 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:48:43.726 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) | ((dfin['bar'] == 8) & (dfin['foo'] < 34))].index)
2022-08-06 06:48:43.737 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:48:48.366 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in dfin where 'bar' is 8, and and 'foo' greater than 70 or 'foo' less than 34
2022-08-06 06:48:48.367 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] == 8) & (dfin['foo'] > 70)) | ((dfin['bar'] == 8) & (dfin['foo'] < 34))].index)
2022-08-06 06:48:48.377 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:48:48.388 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:48:53.365 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.366 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.384 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.385 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.385 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.403 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.403 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.403 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.421 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.421 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.421 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.439 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.439 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.439 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.457 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.457 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.458 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.475 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.475 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.476 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.494 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.494 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.512 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.512 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.512 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.530 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.530 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.530 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.548 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.548 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.548 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.566 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.566 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.566 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.584 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.584 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.584 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.602 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.602 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.603 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.620 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.621 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.621 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.639 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.639 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.639 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.657 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.657 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.657 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.675 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.675 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.675 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.693 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.693 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.693 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.711 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:53.712 | DEBUG    | __main__:run_benchmark:431 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:53.712 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:53.730 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.612 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.613 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.632 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.632 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.632 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.650 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.650 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.651 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.668 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.669 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.669 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.687 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.687 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.687 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.705 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.705 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.705 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.723 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.723 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.723 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.741 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.741 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.742 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.760 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.760 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.760 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.778 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.778 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.778 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.796 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.796 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.797 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.814 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.815 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.815 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.832 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.833 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.833 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.850 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.851 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.851 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.869 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.869 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.869 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.887 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.887 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.887 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.905 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.905 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.905 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.923 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.923 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.923 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.941 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.941 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.959 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:48:57.959 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:48:57.959 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:48:57.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.372 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.373 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.392 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.392 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.393 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.411 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.411 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.411 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.429 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.429 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.447 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.447 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.447 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.465 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.465 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.465 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.483 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.483 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.501 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.501 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.502 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.519 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.519 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.520 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.537 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.538 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.538 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.556 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.556 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.556 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.574 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.574 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.574 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.592 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.592 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.592 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.610 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.611 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.628 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.629 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.629 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.647 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.647 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.647 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.665 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.665 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.683 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.683 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.701 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.701 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.701 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.719 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.719 | DEBUG    | __main__:run_benchmark:431 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-06 06:49:00.719 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['alpha'] < 40) | (dfin['alpha'] > 59)) | (dfin['beta'] == 3)]
2022-08-06 06:49:00.737 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:00.748 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:49:05.459 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:49:05.460 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] >= 37) & (dfin['bar'] <= 61)) & (dfin['foo'] != 11)]
2022-08-06 06:49:05.479 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:05.479 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:49:05.479 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] > 37) & (dfin['bar'] < 61)) & (dfin['foo'] == 11)]
2022-08-06 06:49:05.497 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:05.497 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:49:05.497 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] >= 37) & (dfin['bar'] <= 61)) & (dfin['foo'] != 11)]
2022-08-06 06:49:05.515 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:05.515 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-06 06:49:05.515 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] < 37) | (dfin['bar'] > 61)) & (dfin['foo'] == 11)].index)
2022-08-06 06:49:05.525 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:49:11.502 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 06:49:11.503 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 06:49:11.522 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:11.522 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 06:49:11.523 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 06:49:11.540 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:11.540 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 06:49:11.541 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 06:49:11.558 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:11.558 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 06:49:11.559 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 06:49:11.576 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:11.577 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 06:49:11.577 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 06:49:11.594 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:11.595 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 06:49:11.595 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 06:49:11.613 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:11.613 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 06:49:11.613 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 06:49:11.631 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:11.631 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 06:49:11.631 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin.loc[((dfin['bar'] >= 38) & (dfin['bar'] <= 60)) | (dfin['foo'] != 11)].index)
2022-08-06 06:49:11.649 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:11.649 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 06:49:11.649 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 06:49:11.667 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:11.667 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 06:49:11.668 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 06:49:11.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:11.686 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 06:49:11.686 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[((dfin['bar'] >= 38) & (dfin['bar'] <= 60)) | (dfin['foo'] != 11)].index)
2022-08-06 06:49:11.704 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:11.704 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 06:49:11.704 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 06:49:11.722 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:11.722 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 06:49:11.722 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 06:49:11.740 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:11.740 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 06:49:11.740 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 06:49:11.758 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:11.758 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 06:49:11.759 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] != 11)]
2022-08-06 06:49:11.776 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:11.776 | DEBUG    | __main__:run_benchmark:431 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-06 06:49:11.777 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[((dfin['bar'] >= 38) & (dfin['bar'] <= 60)) | (dfin['foo'] != 11)]
2022-08-06 06:49:11.786 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:49:14.178 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.179 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 06:49:14.197 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.198 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.198 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 06:49:14.215 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.216 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.216 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]
2022-08-06 06:49:14.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.234 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.234 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(~((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]
2022-08-06 06:49:14.252 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.252 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.252 | DEBUG    | __main__:run_benchmark:432 - print(dfin[(~(dfin['bar'] < 38) | ~(dfin['bar'] > 60)) & (dfin['foo'] == 11)])
2022-08-06 06:49:14.252 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((~ (dfin['bar'] < 38)) | (~ (dfin['bar'] > 60))) & (dfin['foo'] == 11))]

2022-08-06 06:49:14.261 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(((~ (dfin['bar'] < 38)) | (~ (dfin['bar'] > 60))) & (dfin['foo'] == 11))]

2022-08-06 06:49:14.270 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.270 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.271 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]
2022-08-06 06:49:14.288 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.288 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.289 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 06:49:14.306 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.306 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.307 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 06:49:14.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.324 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.325 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 06:49:14.342 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.343 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.343 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 06:49:14.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.361 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.361 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 06:49:14.378 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.379 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.379 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]
2022-08-06 06:49:14.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.397 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.397 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 06:49:14.415 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.415 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.415 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 06:49:14.433 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.433 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.433 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:49:14.451 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.451 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.451 | DEBUG    | __main__:run_benchmark:432 - print(dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)])
2022-08-06 06:49:14.452 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((~ ((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11))]

2022-08-06 06:49:14.460 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((~ ((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11))]

2022-08-06 06:49:14.470 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.470 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.470 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60))) & (dfin['foo'] == 11)]
2022-08-06 06:49:14.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.488 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.488 | DEBUG    | __main__:run_benchmark:432 - dfin[((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11)]
2022-08-06 06:49:14.506 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.506 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.506 | DEBUG    | __main__:run_benchmark:432 - dfin[(~((dfin['bar'] < 38) | (dfin['bar'] > 60)) & (dfin['foo'] == 11))]
2022-08-06 06:49:14.524 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:14.524 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-06 06:49:14.524 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)]
2022-08-06 06:49:14.542 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.033 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.033 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:49:19.054 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.054 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.054 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:49:19.072 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.072 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.072 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:49:19.090 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.090 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.090 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:49:19.108 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.108 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.108 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:49:19.126 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.126 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.127 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:49:19.144 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.145 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.145 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:49:19.163 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.163 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.163 | DEBUG    | __main__:run_benchmark:432 - print(dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))])
2022-08-06 06:49:19.163 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(~ ((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11))))]

2022-08-06 06:49:19.172 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[(~ ((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11))))]

2022-08-06 06:49:19.181 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.182 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.182 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:49:19.200 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.200 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.200 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:49:19.218 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.218 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.218 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:49:19.236 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.236 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.236 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:49:19.254 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.254 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.255 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11))]
2022-08-06 06:49:19.273 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.273 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.273 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:49:19.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.291 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.291 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:49:19.309 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.309 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.310 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:49:19.327 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.328 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.328 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:49:19.346 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.346 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.346 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:49:19.364 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.364 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.364 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:49:19.382 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.382 | DEBUG    | __main__:run_benchmark:431 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-06 06:49:19.382 | DEBUG    | __main__:run_benchmark:432 - dfin[~((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]
2022-08-06 06:49:19.400 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:19.412 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 06:49:19.412 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 06:49:19.413 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:49:22.492 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:49:22.493 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 06:49:22.501 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:22.501 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:49:22.501 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(min_periods=1, window=3).mean()
2022-08-06 06:49:22.507 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:22.508 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:49:22.508 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(window=3, min_periods=1).mean()
2022-08-06 06:49:22.514 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:22.514 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:49:22.514 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean().shift(1)
2022-08-06 06:49:22.521 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:22.521 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-06 06:49:22.521 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean()
2022-08-06 06:49:22.527 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:49:27.380 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:49:27.381 | DEBUG    | __main__:run_benchmark:432 - dfin['a_avg'] = dfin['a'].rolling(3).mean()
2022-08-06 06:49:27.388 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:27.389 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:49:27.389 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 06:49:27.395 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:27.395 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:49:27.396 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 06:49:27.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:27.402 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:49:27.402 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 06:49:27.409 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:27.409 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:49:27.409 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 06:49:27.415 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:27.416 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-06 06:49:27.416 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean()
2022-08-06 06:49:27.422 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:49:29.008 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:49:29.009 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 06:49:29.017 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:29.017 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:49:29.017 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 06:49:29.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:29.024 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:49:29.024 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 06:49:29.030 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:29.031 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:49:29.031 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2).fillna(0)
2022-08-06 06:49:29.037 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:29.037 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:49:29.038 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 06:49:29.044 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:29.044 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:49:29.044 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 06:49:29.050 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:29.051 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:49:29.051 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(1).fillna(0)
2022-08-06 06:49:29.057 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:29.057 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:49:29.058 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean().shift(-2)
2022-08-06 06:49:29.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:29.064 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-06 06:49:29.064 | DEBUG    | __main__:run_benchmark:432 - dfin['a'] = dfin['a'].rolling(3).mean()
2022-08-06 06:49:29.071 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:49:31.006 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.007 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(min_periods=1, window=3).mean()
2022-08-06 06:49:31.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.014 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.014 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 06:49:31.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.021 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.021 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 06:49:31.027 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.027 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.028 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 06:49:31.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.034 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.034 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).mean()
2022-08-06 06:49:31.044 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.044 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.044 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 06:49:31.050 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.050 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.051 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 06:49:31.057 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.057 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.057 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(window=3).mean()
2022-08-06 06:49:31.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.064 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.064 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'a'].rolling(window=3).mean()
2022-08-06 06:49:31.070 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.070 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.071 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 06:49:31.077 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.077 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.077 | DEBUG    | __main__:run_benchmark:432 - dfin.a.rolling(3).mean()
2022-08-06 06:49:31.084 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.084 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.084 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(window=3).mean()
2022-08-06 06:49:31.090 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.091 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.091 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 06:49:31.097 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.097 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.097 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).mean()
2022-08-06 06:49:31.107 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.107 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.107 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 06:49:31.113 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.113 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.113 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(window=3).mean()
2022-08-06 06:49:31.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.120 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.120 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 06:49:31.126 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.126 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.127 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(window=3).mean()
2022-08-06 06:49:31.133 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.133 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.133 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(3).mean()
2022-08-06 06:49:31.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.139 | DEBUG    | __main__:run_benchmark:431 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-06 06:49:31.139 | DEBUG    | __main__:run_benchmark:432 - dfin['a'].rolling(center=False, window=3).mean()
2022-08-06 06:49:31.146 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:31.157 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:49:32.917 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:32.918 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:49:32.926 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:32.926 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:32.926 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(window=3).mean()
2022-08-06 06:49:32.936 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:32.936 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:32.936 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'colA'].rolling(window=3).mean()
2022-08-06 06:49:32.942 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:32.942 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:32.943 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:32.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:32.949 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:32.949 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:32.956 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:32.956 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:32.956 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:32.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:32.963 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:32.963 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).mean()
2022-08-06 06:49:32.972 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:32.972 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:32.972 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:32.979 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:32.979 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:32.979 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:49:32.985 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:32.985 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:32.986 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:49:32.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:32.992 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:32.992 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:32.999 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:32.999 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:32.999 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:49:33.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:33.005 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:33.006 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:33.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:33.012 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:33.012 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:33.019 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:33.019 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:33.019 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:33.025 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:33.025 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:33.026 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:33.032 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:33.032 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:33.032 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(window=3).mean()
2022-08-06 06:49:33.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:33.042 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:33.042 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:49:33.048 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:33.049 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:33.049 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(window=3).mean()
2022-08-06 06:49:33.058 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:33.058 | DEBUG    | __main__:run_benchmark:431 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-06 06:49:33.058 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:49:33.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.791 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.792 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:49:36.799 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.799 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.799 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:36.806 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.806 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.806 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, min_periods=1, window=3).mean()
2022-08-06 06:49:36.812 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.812 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.813 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:49:36.819 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.819 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.819 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:36.825 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.826 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.826 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:36.832 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.832 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.832 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'colA'].rolling(window=3).mean()
2022-08-06 06:49:36.839 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.839 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.839 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:36.845 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.846 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.846 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:49:36.852 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.852 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.852 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:49:36.859 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.859 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.859 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:36.865 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.866 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.866 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:36.872 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.872 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.872 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, window=3).mean()
2022-08-06 06:49:36.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.879 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.879 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).mean()
2022-08-06 06:49:36.888 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.888 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.888 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:36.895 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.895 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.895 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(window=3)['colA'].mean()
2022-08-06 06:49:36.901 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.901 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.901 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:49:36.908 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.908 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.908 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:36.914 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.914 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.914 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:36.921 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:36.921 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-06 06:49:36.921 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:36.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.465 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.465 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:49:40.472 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.472 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.472 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:49:40.479 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.479 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.479 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:40.485 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.485 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.486 | DEBUG    | __main__:run_benchmark:432 - dfin.colA.rolling(window=3).mean()
2022-08-06 06:49:40.492 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.492 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.492 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:40.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.499 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.499 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, min_periods=1, window=3).mean()
2022-08-06 06:49:40.505 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.505 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.506 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:49:40.512 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.512 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.512 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:49:40.513 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.513 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.513 | DEBUG    | __main__:run_benchmark:432 - dfin.colA.rolling(3).mean()
2022-08-06 06:49:40.519 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.519 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.520 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:49:40.526 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.526 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.526 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, window=3).mean()
2022-08-06 06:49:40.532 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.533 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.533 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:40.539 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.539 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.539 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:40.546 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.546 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.546 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:40.553 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.553 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.553 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'colA'].rolling(window=3).mean()
2022-08-06 06:49:40.560 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.560 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.560 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:40.566 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.567 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.567 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:40.573 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.573 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.573 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(min_periods=1, window=3).mean()
2022-08-06 06:49:40.580 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.580 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.580 | DEBUG    | __main__:run_benchmark:432 - dfin.colA.rolling(window=3).mean()
2022-08-06 06:49:40.586 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:40.586 | DEBUG    | __main__:run_benchmark:431 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-06 06:49:40.586 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:40.593 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:43.933 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:43.934 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:49:43.942 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:43.942 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:43.942 | DEBUG    | __main__:run_benchmark:432 - dfin.colA.rolling(window=3).mean()
2022-08-06 06:49:43.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:43.949 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:43.949 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:43.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:43.955 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:43.956 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:43.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:43.962 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:43.962 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:49:43.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:43.963 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:43.963 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:43.969 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:43.969 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:43.969 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, 'colA'].rolling(window=3).mean()
2022-08-06 06:49:43.976 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:43.976 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:43.976 | DEBUG    | __main__:run_benchmark:432 - dfin.colA.rolling(3).mean()
2022-08-06 06:49:43.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:43.982 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:43.983 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:43.989 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:43.989 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:43.989 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:43.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:43.996 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:43.996 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, min_periods=1, window=3).mean()
2022-08-06 06:49:44.002 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:44.002 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:44.003 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(window=3).mean()
2022-08-06 06:49:44.009 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:44.009 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:44.009 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(center=False, window=3).mean()
2022-08-06 06:49:44.015 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:44.016 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:44.016 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:49:44.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:44.016 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:44.016 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(min_periods=1, window=3).mean()
2022-08-06 06:49:44.023 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:44.023 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:44.023 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:49:44.029 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:44.030 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:44.030 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(3).mean()
2022-08-06 06:49:44.036 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:44.036 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:44.036 | DEBUG    | __main__:run_benchmark:432 - dfin.colA.rolling(window=3).mean()
2022-08-06 06:49:44.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:44.043 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:44.043 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:49:44.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:44.043 | DEBUG    | __main__:run_benchmark:431 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-06 06:49:44.044 | DEBUG    | __main__:run_benchmark:432 - dfin['colA'].rolling(min_periods=1, window=3).mean()
2022-08-06 06:49:44.050 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:44.063 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 06:49:48.203 | DEBUG    | __main__:run_benchmark:431 - Query: in column two choose median of previous 3 rows and assign back
2022-08-06 06:49:48.204 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = pd.rolling_median(dfin['column2'], 3, min_periods=1)
2022-08-06 06:49:48.206 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:48.207 | DEBUG    | __main__:run_benchmark:431 - Query: in column two choose median of previous 3 rows and assign back
2022-08-06 06:49:48.207 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-1)
2022-08-06 06:49:48.214 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:48.214 | DEBUG    | __main__:run_benchmark:431 - Query: in column two choose median of previous 3 rows and assign back
2022-08-06 06:49:48.214 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(window=3).quantile(0.5)
2022-08-06 06:49:48.221 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:48.221 | DEBUG    | __main__:run_benchmark:431 - Query: in column two choose median of previous 3 rows and assign back
2022-08-06 06:49:48.221 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].rolling(3).median()
2022-08-06 06:49:48.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:49:51.224 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-06 06:49:51.225 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(window=3).quantile(0.5)
2022-08-06 06:49:51.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:51.233 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-06 06:49:51.233 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = pd.rolling_median(dfin['column2'], 3, min_periods=1)
2022-08-06 06:49:51.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:51.234 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-06 06:49:51.234 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 06:49:51.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:51.241 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-06 06:49:51.241 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].fillna(dfin['column2'].rolling(3, min_periods=1).median())
2022-08-06 06:49:51.248 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:51.248 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-06 06:49:51.248 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 06:49:51.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:51.255 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-06 06:49:51.255 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 06:49:51.262 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:51.262 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-06 06:49:51.262 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 06:49:51.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:51.269 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-06 06:49:51.269 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].rolling(3).median().shift(1)
2022-08-06 06:49:51.276 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:51.276 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-06 06:49:51.276 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].rolling(3).median()
2022-08-06 06:49:51.283 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:49:53.280 | DEBUG    | __main__:run_benchmark:431 - Query: in 'column2' choose median of previous 3 rows and assign back to 'column2'
2022-08-06 06:49:53.281 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].rolling(window=3).quantile(0.5)
2022-08-06 06:49:53.289 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:49:55.088 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.089 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(window=3).median()
2022-08-06 06:49:55.100 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.101 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.101 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:49:55.110 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.111 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.111 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:49:55.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.120 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.121 | DEBUG    | __main__:run_benchmark:432 - dfin['column1'].rolling(3).median().fillna(method='bfill')
2022-08-06 06:49:55.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.127 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.128 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:49:55.137 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.138 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.138 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:49:55.147 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.148 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.148 | DEBUG    | __main__:run_benchmark:432 - dfin['column1'].rolling(3).median()
2022-08-06 06:49:55.154 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.154 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.155 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:49:55.164 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.165 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.165 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:49:55.174 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.175 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.175 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:49:55.184 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.185 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.185 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:49:55.194 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.195 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.195 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:49:55.204 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.205 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.205 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:49:55.215 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.215 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.215 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:49:55.225 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.225 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.225 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:49:55.235 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.235 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.235 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:49:55.245 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.245 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.245 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:49:55.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.255 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.255 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:49:55.265 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.265 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.265 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:49:55.275 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:55.275 | DEBUG    | __main__:run_benchmark:431 - Query: Rolling median of last 3 values in place
2022-08-06 06:49:55.275 | DEBUG    | __main__:run_benchmark:432 - dfin.rolling(3).median()
2022-08-06 06:49:55.285 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.350 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.351 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(window=3).median()
2022-08-06 06:49:59.359 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.359 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.359 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 06:49:59.366 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.366 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.366 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].fillna(dfin['column2'].rolling(3).median())
2022-08-06 06:49:59.373 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.373 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.373 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 06:49:59.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.380 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.380 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:49:59.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.380 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.381 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(1)
2022-08-06 06:49:59.387 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.388 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.388 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:49:59.388 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.388 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.388 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 06:49:59.395 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.395 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.395 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 06:49:59.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.402 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.402 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(1)
2022-08-06 06:49:59.409 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.409 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.409 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:49:59.410 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.410 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.410 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace(dfin['column2'].values, dfin['column2'].rolling(3).median().shift(1).values)
2022-08-06 06:49:59.417 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.417 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.417 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 06:49:59.424 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.424 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.424 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 06:49:59.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.431 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.431 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(1)
2022-08-06 06:49:59.438 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.438 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.439 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:49:59.439 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.439 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.439 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 06:49:59.446 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.446 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.446 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 06:49:59.453 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.453 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.453 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].shift(1).rolling(3).median()
2022-08-06 06:49:59.460 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:49:59.460 | DEBUG    | __main__:run_benchmark:431 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-06 06:49:59.460 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(1)
2022-08-06 06:49:59.467 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.223 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.224 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:50:03.224 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.225 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.225 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(1)
2022-08-06 06:50:03.232 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.232 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.232 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace(np.nan, dfin['column2'].median())
2022-08-06 06:50:03.239 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.239 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.239 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].shift(1).rolling(3).median()
2022-08-06 06:50:03.246 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.246 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.246 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(window=3).median()
2022-08-06 06:50:03.253 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.253 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.253 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace({-1: dfin['column2'].median(), -2: dfin['column2'].median(), 2: dfin['column2'].median()})
2022-08-06 06:50:03.260 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.260 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.261 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace(np.nan, dfin['column2'].median())
2022-08-06 06:50:03.267 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.267 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.267 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].fillna(np.median(dfin['column2'].shift(1).rolling(3).mean()))
2022-08-06 06:50:03.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.274 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.274 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median()
2022-08-06 06:50:03.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.281 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.281 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace(0, dfin['column2'].median())
2022-08-06 06:50:03.288 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.288 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.288 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:50:03.288 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.289 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.289 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].mask((dfin['column2'] == -1), dfin['column2'].shift(1).rolling(3).median())
2022-08-06 06:50:03.296 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.296 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.296 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median()
2022-08-06 06:50:03.303 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.303 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.303 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace(dfin['column2'], dfin['column2'].rolling(3).median())
2022-08-06 06:50:03.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.305 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.305 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 06:50:03.312 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.312 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.312 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace((-1, -2, 2), (np.median(dfin['column2'][0:3]), np.median(dfin['column2'][0:3]), np.median(dfin['column2'][0
2022-08-06 06:50:03.312 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.312 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.312 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].replace(dfin['column2'], dfin['column2'].rolling(3).median())
2022-08-06 06:50:03.314 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.314 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.314 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3).median().shift(-2)
2022-08-06 06:50:03.321 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.321 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.321 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:50:03.321 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:03.321 | DEBUG    | __main__:run_benchmark:431 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:03.322 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:50:03.322 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.433 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.434 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.444 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.445 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.445 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.454 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.455 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.455 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.465 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.465 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.465 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.475 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.475 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.475 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.485 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.485 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.486 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.495 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.495 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.495 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.504 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.504 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.504 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.514 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.514 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.514 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:50:05.514 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.514 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.514 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.523 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.523 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.524 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.533 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.533 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.533 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.542 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.542 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.542 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.551 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.552 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.552 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.561 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.561 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.561 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.570 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.570 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.570 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.580 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.580 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.580 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.589 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.589 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.590 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.599 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.599 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.599 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.608 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:05.608 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-06 06:50:05.609 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:50:05.618 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:10.775 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:50:10.775 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'].rolling(3, min_periods=1).median()
2022-08-06 06:50:10.782 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:10.783 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-06 06:50:10.783 | DEBUG    | __main__:run_benchmark:432 - dfin['column2'] = dfin['column2'].rolling(3).median()
2022-08-06 06:50:10.789 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:50:10.802 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 06:50:10.802 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:50:10.802 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:50:14.499 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.499 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.515 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.515 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.515 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.529 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.529 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.530 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.544 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.544 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.544 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.558 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.559 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.559 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.573 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.573 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.573 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.587 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.587 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.588 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.602 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.602 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.602 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.616 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.616 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.617 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.631 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.631 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.631 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.645 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.645 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.646 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.660 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.660 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.660 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.674 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.675 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.675 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.689 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.689 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.689 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.703 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.703 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.704 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.718 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.718 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.718 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.732 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.733 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.733 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.747 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.747 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.747 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.762 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.762 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.762 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.776 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.776 | DEBUG    | __main__:run_benchmark:431 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-06 06:50:14.776 | DEBUG    | __main__:run_benchmark:432 - dfin1[dfin1['Date1'].isin(dfin2['Date2'])]
2022-08-06 06:50:14.790 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:14.804 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:50:14.804 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:50:14.804 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:50:18.226 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 06:50:18.227 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:50:18.227 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:18.228 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 06:50:18.228 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:50:18.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:18.228 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 06:50:18.229 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:50:18.229 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:18.229 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 06:50:18.229 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:50:18.229 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:18.229 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 06:50:18.229 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:50:18.229 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:18.229 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 06:50:18.230 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:50:18.230 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:18.230 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 06:50:18.230 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:50:18.230 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:18.230 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-06 06:50:18.230 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, how='inner', left_on='left_key', right_on='right_key')
2022-08-06 06:50:18.245 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:50:18.258 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:50:21.786 | DEBUG    | __main__:run_benchmark:431 - Query: join dfin1 and dfin2 on column 'Type1'=='Type2' && 'Date1'=='Date2'
2022-08-06 06:50:21.787 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:50:21.787 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:21.788 | DEBUG    | __main__:run_benchmark:431 - Query: join dfin1 and dfin2 on column 'Type1'=='Type2' && 'Date1'=='Date2'
2022-08-06 06:50:21.788 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-06 06:50:21.808 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:50:27.370 | DEBUG    | __main__:run_benchmark:431 - Query: combine rows from dfin1 and dfin2 such that column 'Type1' and column 'Date1' in dfin1 are equal to column 'Type2' and column 'Date2' in dfin2
2022-08-06 06:50:27.371 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:50:27.372 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:27.373 | DEBUG    | __main__:run_benchmark:431 - Query: combine rows from dfin1 and dfin2 such that column 'Type1' and column 'Date1' in dfin1 are equal to column 'Type2' and column 'Date2' in dfin2
2022-08-06 06:50:27.373 | DEBUG    | __main__:run_benchmark:432 - pd.merge(dfin1, dfin2, left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-06 06:50:27.392 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:50:27.405 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 06:50:27.406 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:50:27.406 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:50:31.225 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.225 | DEBUG    | __main__:run_benchmark:432 - dfin[(pd.isnull(dfin['delta']) == False) & (pd.isnull(dfin['phi']) == False)]
2022-08-06 06:50:31.239 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.239 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.240 | DEBUG    | __main__:run_benchmark:432 - dfin['delta'].dropna(inplace=True)
2022-08-06 06:50:31.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.249 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.249 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:50:31.262 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.262 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.262 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:50:31.275 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.275 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.275 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:50:31.288 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.288 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.288 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:50:31.301 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.301 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.301 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:50:31.314 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.314 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.314 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:50:31.327 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.327 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.327 | DEBUG    | __main__:run_benchmark:432 - dfin[(~ pd.isnull(dfin['delta'])) & (~ pd.isnull(dfin['phi']))]
2022-08-06 06:50:31.339 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.339 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.340 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:50:31.352 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.352 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.352 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:50:31.365 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.365 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.365 | DEBUG    | __main__:run_benchmark:432 - dfin[['delta', 'phi']][(~ dfin['delta'].isna()) & (~ dfin['phi'].isna())]
2022-08-06 06:50:31.377 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.377 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.377 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'], inplace=True)
2022-08-06 06:50:31.386 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.386 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.386 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:50:31.399 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.399 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.399 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:50:31.412 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.412 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.412 | DEBUG    | __main__:run_benchmark:432 - dfin['delta'][(dfin['delta'].isnull() == False)]
2022-08-06 06:50:31.421 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.422 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.422 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:50:31.434 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.435 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.435 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['delta'].isna() == False) & (dfin['phi'].isna() == False)]
2022-08-06 06:50:31.447 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.447 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.448 | DEBUG    | __main__:run_benchmark:432 - dfin[(~ dfin['delta'].isnull()) & (~ dfin['phi'].isnull())]
2022-08-06 06:50:31.460 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.460 | DEBUG    | __main__:run_benchmark:431 - Query: remove NaN values from "delta" and "phi" columns
2022-08-06 06:50:31.460 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['delta', 'phi'])
2022-08-06 06:50:31.473 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:31.485 | DEBUG    | __main__:run:515 - Number of queries: 23
2022-08-06 06:50:35.240 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.241 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:35.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.256 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.256 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:35.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.269 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.269 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:35.283 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.283 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.283 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:35.296 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.297 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.297 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:35.310 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.311 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.311 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:35.324 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.324 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.325 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:35.338 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.338 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.338 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:35.352 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.352 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.352 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:35.365 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.366 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.366 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:35.379 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.379 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.380 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:35.393 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.393 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.393 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].replace(np.nan, 11.0)
2022-08-06 06:50:35.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.403 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.403 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:35.416 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.416 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.416 | DEBUG    | __main__:run_benchmark:432 - dfin.apply((lambda x: (x['phi'] if pd.isnull(x['phi']) else 11.0) if pd.isnull(x['omega']) else 13.0), axis=1)
2022-08-06 06:50:35.426 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.426 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.426 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:35.440 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.440 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.440 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:35.453 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.454 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.454 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:35.467 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.467 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.467 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 06:50:35.481 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.481 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.481 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:35.495 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:35.495 | DEBUG    | __main__:run_benchmark:431 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-06 06:50:35.495 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:35.509 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.708 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.709 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:38.723 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.724 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.724 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:38.737 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.737 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.738 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:38.751 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.752 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.752 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:38.765 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.765 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.766 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:38.779 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.779 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.780 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:38.793 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.793 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.793 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:38.807 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.807 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.807 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 06:50:38.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.817 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.817 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:38.830 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.831 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.831 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:38.844 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.844 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.845 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:38.858 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.858 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.858 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 06:50:38.872 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.872 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.872 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:38.886 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.886 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.886 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:38.900 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.900 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.900 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:38.914 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.914 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.914 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:38.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.928 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.928 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:38.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.941 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.941 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:38.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.955 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.955 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:38.969 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:38.969 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-06 06:50:38.969 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].apply((lambda x: (11.0 if pd.isnull(x) else x)))
2022-08-06 06:50:38.978 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:43.977 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:43.978 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:43.992 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:43.993 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:43.993 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:50:44.002 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:44.002 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:44.002 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].fillna(11.0)
2022-08-06 06:50:44.011 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:44.012 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:44.012 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isna(), 11.0, dfin['phi'])
2022-08-06 06:50:44.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:44.021 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:44.021 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:44.035 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:44.035 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:44.035 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:50:44.044 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:44.044 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:44.044 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:44.058 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:44.058 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:44.058 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin['phi'].isnull(), other=11.0).where(dfin['omega'].isnull(), other=13.0)
2022-08-06 06:50:44.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:44.073 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:44.073 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 06:50:44.083 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:44.083 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:44.083 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isna(), 11.0, dfin['phi'])
2022-08-06 06:50:44.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:44.093 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:44.093 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].map((lambda x: (x if (x != np.nan) else 11.0)))
2022-08-06 06:50:44.102 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:44.102 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:44.102 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 06:50:44.112 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:44.112 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:44.112 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].apply((lambda x: (11.0 if (x == np.nan) else x)))
2022-08-06 06:50:44.121 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:44.121 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:44.121 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:50:44.130 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:44.131 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:44.131 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 06:50:44.140 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:44.140 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:44.140 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].transform((lambda x: (11.0 if pd.isnull(x) else x)))
2022-08-06 06:50:44.149 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:44.149 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:44.149 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:44.163 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:44.163 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:44.163 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].fillna(11.0)
2022-08-06 06:50:44.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:44.172 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:44.173 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'phi': {np.nan: 11.0}, 'omega': {np.nan: 13.0}})
2022-08-06 06:50:44.186 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:44.186 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-06 06:50:44.187 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:44.200 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.378 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.379 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].apply((lambda x: (11.0 if (x == np.nan) else x)))
2022-08-06 06:50:46.389 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.389 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.390 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:50:46.399 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.399 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.399 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0)
2022-08-06 06:50:46.409 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.409 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.409 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:46.422 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.423 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.423 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:46.436 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.436 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.437 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:46.450 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.450 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.450 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].replace({np.nan: 11.0})
2022-08-06 06:50:46.459 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.460 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.460 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].map((lambda x: (x if (x != np.nan) else 11.0)))
2022-08-06 06:50:46.469 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.469 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.469 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].apply((lambda x: (11.0 if (x == np.nan) else x)))
2022-08-06 06:50:46.478 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.479 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.479 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:46.492 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.492 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.492 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].apply((lambda x: (11.0 if (np.isnan(x)) else x)))
2022-08-06 06:50:46.502 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.502 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.502 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].fillna(11.0)
2022-08-06 06:50:46.511 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.511 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.511 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:46.525 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.525 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.525 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].where((~ (dfin['phi'] == np.nan)), other=11.0)
2022-08-06 06:50:46.534 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.534 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.534 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isnull(), 11.0, dfin['phi'])
2022-08-06 06:50:46.544 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.544 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.544 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-06 06:50:46.553 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.553 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.553 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:46.567 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.567 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.567 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:46.581 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.581 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.581 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isnull(), 11.0, dfin['phi'])
2022-08-06 06:50:46.590 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:46.590 | DEBUG    | __main__:run_benchmark:431 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-06 06:50:46.590 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isnull(), 11.0, dfin['phi'])
2022-08-06 06:50:46.599 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:49.905 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:49.905 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 06:50:49.919 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:49.919 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:49.919 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 06:50:49.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:49.933 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:49.933 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13) if x.name == 'omega' else x)
2022-08-06 06:50:49.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:49.947 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:49.947 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.nan)), axis=0)
2022-08-06 06:50:49.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:49.949 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:49.949 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: np.where(x.isnull(), 11.0 if x.name == 'phi' else 13, x))
2022-08-06 06:50:49.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:49.963 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:49.963 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'phi': {np.NaN: 11.0}, 'omega': {np.NaN: 13.0}})
2022-08-06 06:50:49.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:49.977 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:49.977 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'phi': {np.nan: 11.0}, 'omega': {np.nan: 13.0}})
2022-08-06 06:50:49.991 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:49.991 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:49.991 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.nan)))
2022-08-06 06:50:49.993 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:49.993 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:49.993 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.nan)), axis=0)
2022-08-06 06:50:49.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:49.995 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:49.995 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 06:50:50.009 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:50.009 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:50.009 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.isnull(), other=np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, dfin)))
2022-08-06 06:50:50.023 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:50.023 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:50.023 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.nan)))
2022-08-06 06:50:50.025 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:50.025 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:50.025 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 06:50:50.039 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:50.039 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:50.039 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.nan)), axis=0)
2022-08-06 06:50:50.041 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:50.041 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:50.041 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: np.where(x.name == 'phi', 11.0, np.where(x.name == 'omega', 13.0, x)), axis=0)
2022-08-06 06:50:50.055 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:50.055 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:50.055 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin['phi'].isnull(), 11.0, inplace=True)
2022-08-06 06:50:50.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:50.065 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:50.065 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin['phi'].isnull(), 11.0)
2022-08-06 06:50:50.079 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:50.079 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:50.079 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), {'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:50.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:50.093 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:50.094 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.nan)))
2022-08-06 06:50:50.095 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:50.095 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-06 06:50:50.095 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.NaN)))
2022-08-06 06:50:50.097 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.149 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.150 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.nan)))
2022-08-06 06:50:55.153 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.153 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.153 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 06:50:55.167 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.168 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.168 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 06:50:55.182 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.182 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.182 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.isna(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, dfin)), axis=1)
2022-08-06 06:50:55.196 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.196 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.196 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), {'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:55.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.210 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.210 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:55.224 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.224 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.224 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.nan)), axis=0)
2022-08-06 06:50:55.226 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.226 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.226 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0) if x.name == 'omega' else x)
2022-08-06 06:50:55.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.240 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.240 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 13})
2022-08-06 06:50:55.254 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.254 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.254 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), {'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:55.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.268 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.268 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notna(), np.where(dfin.columns == 'phi', 11.0, 13.0), axis=0)
2022-08-06 06:50:55.270 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.270 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.270 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 06:50:55.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.284 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.284 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 06:50:55.297 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.298 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.298 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), {'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:55.312 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.312 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.312 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13) if x.name == 'omega' else x)
2022-08-06 06:50:55.326 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.326 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.326 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), {'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:55.340 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.340 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.340 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 06:50:55.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.354 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.354 | DEBUG    | __main__:run_benchmark:432 - dfin.transform(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0))
2022-08-06 06:50:55.368 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.368 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.368 | DEBUG    | __main__:run_benchmark:432 - dfin.apply(lambda x: x.fillna(11.0) if x.name == 'phi' else x.fillna(13.0), axis=0)
2022-08-06 06:50:55.382 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:55.382 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-06 06:50:55.382 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notnull(), np.where(dfin.columns == 'phi', 11.0, np.where(dfin.columns == 'omega', 13.0, np.nan)), axis=0)
2022-08-06 06:50:55.383 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.314 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.315 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')] = dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 06:50:59.318 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.318 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.319 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 06:50:59.320 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.320 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.320 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 06:50:59.321 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.322 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.322 | DEBUG    | __main__:run_benchmark:432 - dfin[['phi', 'omega']].replace(np.nan, (11.0, 13.0))
2022-08-06 06:50:59.323 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.323 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.323 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 06:50:59.325 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.325 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.325 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 06:50:59.326 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.326 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.326 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')] = dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 06:50:59.328 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.328 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.328 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 06:50:59.329 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.329 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.329 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 06:50:59.331 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.331 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.331 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].replace(np.nan, (11.0, 13.0), inplace=True)
2022-08-06 06:50:59.332 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.332 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.332 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 06:50:59.334 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.334 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.334 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 06:50:59.335 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.335 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.335 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 06:50:59.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.337 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.337 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ('phi', 'omega')] = (11.0, 13.0)
2022-08-06 06:50:59.347 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.347 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.347 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 06:50:59.349 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.349 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.349 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')] = dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 06:50:59.350 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.351 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.351 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['phi'].isnull()) & (dfin['omega'].isnull()), ['phi', 'omega']] = (11.0, 13.0)
2022-08-06 06:50:59.360 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.360 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.361 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[:, ('phi', 'omega')] = dfin.loc[:, ('phi', 'omega')].fillna((11.0, 13.0))
2022-08-06 06:50:59.362 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.362 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.362 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin.notna(), {'phi': 11.0, 'omega': 13.0})
2022-08-06 06:50:59.376 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:50:59.376 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-06 06:50:59.376 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'phi': {np.nan: (11.0, 13.0)}, 'omega': {np.nan: (11.0, 13.0)}})
2022-08-06 06:50:59.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:01.665 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' with '11.0' and column 'omega' with value '33.0'
2022-08-06 06:51:01.666 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(inplace=True, value={'phi': 11.0, 'omega': 33.0})
2022-08-06 06:51:01.676 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:51:03.686 | DEBUG    | __main__:run_benchmark:431 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of dfin with value '33.0'
2022-08-06 06:51:03.687 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna(inplace=True, value={'phi': 11.0, 'omega': 33.0})
2022-08-06 06:51:03.697 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:51:06.796 | DEBUG    | __main__:run_benchmark:431 - Query: Fill missing values of column 'phi' with '11.0' and column 'omega' with value '33.0' in dataframe dfin
2022-08-06 06:51:06.797 | DEBUG    | __main__:run_benchmark:432 - dfin[['phi', 'omega']].fillna(value=[11.0, 33.0])
2022-08-06 06:51:06.799 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:06.800 | DEBUG    | __main__:run_benchmark:431 - Query: Fill missing values of column 'phi' with '11.0' and column 'omega' with value '33.0' in dataframe dfin
2022-08-06 06:51:06.800 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11.0, 'omega': 33.0})
2022-08-06 06:51:06.813 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:51:08.671 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in phi by 11 and nan in omega by 33
2022-08-06 06:51:08.672 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11, 'omega': 33})
2022-08-06 06:51:08.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:51:11.808 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.809 | DEBUG    | __main__:run_benchmark:432 - dfin.where(pd.notnull(dfin), {'phi': 11, 'omega': 33})
2022-08-06 06:51:11.824 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.824 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.824 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isna(), 11, dfin['phi'])
2022-08-06 06:51:11.833 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.834 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.834 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isna(), 11, dfin['phi'])
2022-08-06 06:51:11.843 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.843 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.843 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].apply((lambda x: (11 if pd.isnull(x) else x)))
2022-08-06 06:51:11.853 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.853 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.853 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isna(), 11, dfin['phi'])
2022-08-06 06:51:11.862 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.862 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.862 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isnull(), 11, dfin['phi'])
2022-08-06 06:51:11.871 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.871 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.872 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isnull(), 11, dfin['phi'])
2022-08-06 06:51:11.881 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.881 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.881 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isnull(), 11, dfin['phi'])
2022-08-06 06:51:11.890 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.890 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.891 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(11)
2022-08-06 06:51:11.900 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.900 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.900 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isnull(), 11, dfin['phi'])
2022-08-06 06:51:11.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.909 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.910 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].apply((lambda x: (11 if pd.isnull(x) else x)))
2022-08-06 06:51:11.919 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.919 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.919 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].fillna(11)
2022-08-06 06:51:11.928 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.928 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.929 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].map(lambda x: 11 if pd.isnull(x) else x)
2022-08-06 06:51:11.938 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.938 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.938 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isna(), 11, dfin['phi'])
2022-08-06 06:51:11.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.948 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.948 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].mask(dfin['phi'].isnull(), 11)
2022-08-06 06:51:11.957 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.957 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.957 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].apply((lambda x: (11 if pd.isna(x) else x)))
2022-08-06 06:51:11.967 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.967 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.967 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isna(), 11, dfin['phi'])
2022-08-06 06:51:11.976 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.976 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.976 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = dfin['phi'].apply(lambda x: 11 if pd.isnull(x) else x)
2022-08-06 06:51:11.986 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.986 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.986 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'] = np.where(dfin['phi'].isnull(), 11, dfin['phi'])
2022-08-06 06:51:11.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:11.995 | DEBUG    | __main__:run_benchmark:431 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-06 06:51:11.995 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 11, 'omega': 33})
2022-08-06 06:51:12.008 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:51:12.022 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:51:14.138 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaNs in column 'mu' with 24 and NaNs in column 'delta' with 45
2022-08-06 06:51:14.139 | DEBUG    | __main__:run_benchmark:432 - dfin['mu'].fillna(24)
2022-08-06 06:51:14.149 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:14.150 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaNs in column 'mu' with 24 and NaNs in column 'delta' with 45
2022-08-06 06:51:14.150 | DEBUG    | __main__:run_benchmark:432 - dfin['mu'].replace(np.nan, float(24))
2022-08-06 06:51:14.159 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:14.159 | DEBUG    | __main__:run_benchmark:431 - Query: Replace NaNs in column 'mu' with 24 and NaNs in column 'delta' with 45
2022-08-06 06:51:14.160 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'mu': 24, 'delta': 45})
2022-08-06 06:51:14.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:51:14.187 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 06:51:14.345 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fd44bfb47a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7fd44c1348c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7fd3b9425b10>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7fd3b9425b10>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "replace all 'Nan' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17...
    │               └ {'queries': [{'query': "replace all 'Nan' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17...
    └ {'query': "replace all 'Nan' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17.0", 'user': ...

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7fd3b9425b10>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Replace 0\'s with NaN in the column ...
    │    └ 'code-davinci-002'
    └ <__main__.Algorithm1 object at 0x7fd3b9425b10>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-002', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fd3b727cdd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7fd3a513f490>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:51:14 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fd43baa6f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:51:14 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on reques...
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fd3a50ce2d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeie...

openai.error.RateLimitError: Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:51:14.371 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:51:47.606 | DEBUG    | __main__:run_benchmark:431 - Query: replace all 'Nan' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17.0
2022-08-06 06:51:47.607 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-06 06:51:47.621 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:51:47.634 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:51:50.952 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:50.953 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:51:50.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:50.968 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:50.968 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:51:50.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:50.982 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:50.982 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(to_replace={'phi': np.nan, 'mu': np.nan}, value={'phi': 10, 'mu': 20})
2022-08-06 06:51:50.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:50.995 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:50.996 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:51:51.009 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:51.009 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:51.009 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:51:51.023 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:51.023 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:51.023 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:51:51.036 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:51.037 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:51.037 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].replace(np.nan, float(10))
2022-08-06 06:51:51.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:51.046 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:51.046 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:51:51.059 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:51.060 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:51.060 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:51:51.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:51.073 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:51.073 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:51:51.087 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:51.087 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:51.087 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:51:51.100 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:51.101 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:51.101 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].fillna(10, inplace=True)
2022-08-06 06:51:51.110 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:51.110 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:51.110 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:51:51.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:51.123 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:51.123 | DEBUG    | __main__:run_benchmark:432 - dfin['phi'].apply((lambda x: (10 if pd.isnull(x) else x)))
2022-08-06 06:51:51.133 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:51.133 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:51.133 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:51:51.146 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:51.146 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:51.147 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:51:51.160 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:51.160 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:51.160 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:51:51.173 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:51.174 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:51.174 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:51:51.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:51.187 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:51.187 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:51:51.200 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:51.201 | DEBUG    | __main__:run_benchmark:431 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-06 06:51:51.201 | DEBUG    | __main__:run_benchmark:432 - dfin.fillna({'phi': 10, 'mu': 20})
2022-08-06 06:51:51.214 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:51.228 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 06:51:51.228 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:51:51.228 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:51:57.317 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:51:57.318 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['location'] == 'UK', ['location', 'zip']] = ['UK', '4343']
2022-08-06 06:51:57.326 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:51:57.327 | DEBUG    | __main__:run_benchmark:431 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-06 06:51:57.327 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'location': {'United States': 'US'}, 'zip': {3434: 4343}}, inplace=True)
2022-08-06 06:51:57.334 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:51:57.507 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fd44bfb47a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7fd44c1348c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7fd3b9425b10>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7fd3b9425b10>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' i...
    │               └ {'queries': [{'query': "in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' i...
    └ {'query': "replace 'United States' in 'location' by 'US'", 'user': 'u0'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7fd3b9425b10>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a series containing all value...
    │    └ 'code-davinci-002'
    └ <__main__.Algorithm1 object at 0x7fd3b9425b10>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-002', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fd3b727cdd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7fd3a50cf550>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:51:57 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fd43baa6f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:51:57 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on reques...
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fd3a50cf1d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeie...

openai.error.RateLimitError: Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:51:57.533 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:52:32.365 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.366 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].str.replace('United States', 'US', regex=True)
2022-08-06 06:52:32.375 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.375 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.375 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US', inplace=True)
2022-08-06 06:52:32.382 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.383 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.383 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 06:52:32.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.390 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.390 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 06:52:32.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.398 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.398 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US', inplace=True)
2022-08-06 06:52:32.405 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.405 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.405 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace({'United States': 'US'})
2022-08-06 06:52:32.413 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.413 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.413 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:52:32.420 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.421 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.421 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('United States', 'US')
2022-08-06 06:52:32.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.431 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.432 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(inplace=True, to_replace='United States', value='US', subset='location')
2022-08-06 06:52:32.433 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.433 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.433 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 06:52:32.440 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.440 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.441 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(to_replace='United States', value='US')
2022-08-06 06:52:32.448 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.448 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.448 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:52:32.455 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.455 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.456 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:52:32.463 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.463 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.463 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace(inplace=True, to_replace='United States', value='US')
2022-08-06 06:52:32.470 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.471 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.471 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:52:32.478 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.478 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.478 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].str.replace('United States', 'US')
2022-08-06 06:52:32.485 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.486 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.486 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].str.replace('United States', 'US')
2022-08-06 06:52:32.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.493 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.493 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:52:32.500 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.500 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.500 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:52:32.508 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:32.508 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'United States' in 'location' by 'US'
2022-08-06 06:52:32.508 | DEBUG    | __main__:run_benchmark:432 - dfin['location'].replace('United States', 'US')
2022-08-06 06:52:32.515 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:35.007 | DEBUG    | __main__:run_benchmark:431 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-06 06:52:35.008 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'location': 'United States', 'zip': 3434}, {'location': 'US', 'zip': 4343}, inplace=True)
2022-08-06 06:52:35.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:52:35.031 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:52:35.032 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:52:38.474 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'London' in column 'city' with 'LON' and 'India' in column 'country' with 'IN'
2022-08-06 06:52:38.474 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'city': 'London', 'country': 'India'}, {'city': 'LON', 'country': 'IN'})
2022-08-06 06:52:38.486 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:52:40.695 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'London' in column 'city' with 'LON', and 'India' in column 'country' with 'IN'
2022-08-06 06:52:40.696 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'city': 'London', 'country': 'India'}, {'city': 'LON', 'country': 'IN'})
2022-08-06 06:52:40.707 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:52:43.875 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values 'London' in column 'city' with 'LON', and values 'India' in column 'country' with 'IN'
2022-08-06 06:52:43.876 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'city': 'London', 'country': 'India'}, {'city': 'LON', 'country': 'IN'})
2022-08-06 06:52:43.887 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:52:43.903 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:52:43.903 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:52:46.937 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:46.938 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:46.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:46.947 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:46.947 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': {'France': 'FR'}})
2022-08-06 06:52:46.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:46.958 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:46.959 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:52:46.966 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:46.966 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:46.966 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:46.974 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:46.974 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:46.974 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:52:46.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:46.982 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:46.982 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(inplace=True, to_replace='France', value='FR')
2022-08-06 06:52:46.989 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:46.989 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:46.990 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:46.997 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:46.997 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:46.997 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:47.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:47.005 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:47.005 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:47.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:47.013 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:47.013 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:47.020 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:47.020 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:47.021 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:47.028 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:47.028 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:47.028 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:52:47.036 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:47.036 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:47.036 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:47.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:47.044 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:47.044 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:47.051 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:47.051 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:47.052 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:52:47.059 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:47.059 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:47.059 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:52:47.067 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:47.067 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:47.067 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:47.074 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:47.075 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:47.075 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:52:47.082 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:47.082 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:47.082 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:52:47.090 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:47.090 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country
2022-08-06 06:52:47.090 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:52:47.098 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.315 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.316 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:49.355 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.355 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.355 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(inplace=True, to_replace='France', value='FR')
2022-08-06 06:52:49.371 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.371 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.371 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:49.381 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.381 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.382 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:52:49.390 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.390 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.390 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:52:49.398 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.398 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.398 | DEBUG    | __main__:run_benchmark:432 - dfin.country.replace('France', 'FR')
2022-08-06 06:52:49.405 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.406 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.406 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': {'France': 'FR'}})
2022-08-06 06:52:49.417 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.417 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.417 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:49.425 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.425 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.425 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:49.432 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.432 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.433 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(inplace=True, to_replace='France', value='FR')
2022-08-06 06:52:49.440 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.440 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.441 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:49.448 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.448 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.448 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:49.456 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.456 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.456 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:52:49.464 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.464 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.464 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:49.471 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.471 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.472 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:49.479 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.479 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.479 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:52:49.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.487 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.487 | DEBUG    | __main__:run_benchmark:432 - #  for column city, replace 'Paris' with 'PAR'
2022-08-06 06:52:49.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.487 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.487 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': {'France': 'FR'}})
2022-08-06 06:52:49.498 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.498 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.498 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:49.506 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:49.506 | DEBUG    | __main__:run_benchmark:431 - Query: for column country, replace 'France' with 'FR'
2022-08-06 06:52:49.506 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:49.513 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.091 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.092 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 06:52:53.104 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.104 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.104 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 06:52:53.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.115 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.115 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:52:53.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.123 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.123 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR'})
2022-08-06 06:52:53.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.134 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.134 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(inplace=True, to_replace='France', value='FR')
2022-08-06 06:52:53.142 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.142 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.142 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('France', 'FR')
2022-08-06 06:52:53.153 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.153 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.153 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR', inplace=True)
2022-08-06 06:52:53.161 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.161 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.161 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:53.168 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.168 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.169 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:52:53.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.176 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.176 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:52:53.184 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.184 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.184 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:52:53.191 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.191 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.192 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:52:53.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.202 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.202 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].apply((lambda x: (x.replace('France', 'FR') if ('France' in str(x)) else x)))
2022-08-06 06:52:53.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.210 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.210 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR', inplace=True)
2022-08-06 06:52:53.217 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.218 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.218 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(inplace=True, to_replace='France', value='FR')
2022-08-06 06:52:53.225 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.225 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.225 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:52:53.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.233 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.233 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:53.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.240 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.240 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:53.248 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.248 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.248 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:52:53.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:53.256 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR'
2022-08-06 06:52:53.256 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:53.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.476 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.477 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:52:56.515 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.516 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.516 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:56.531 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.531 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.531 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:56.541 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.542 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.542 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:52:56.550 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.550 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.551 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:56.558 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.558 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.558 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:56.566 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.566 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.566 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(inplace=True, to_replace='France', value='FR')
2022-08-06 06:52:56.574 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.574 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.574 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:56.582 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.582 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.582 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:52:56.589 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.589 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.590 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:52:56.597 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.597 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.597 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:52:56.605 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.605 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.605 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace({'France': 'FR'})
2022-08-06 06:52:56.612 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.612 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.612 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].map((lambda x: x.replace('France', 'FR')))
2022-08-06 06:52:56.620 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.620 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.620 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace('France', 'FR')
2022-08-06 06:52:56.627 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.628 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.628 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:52:56.635 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.635 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.635 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:52:56.643 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.643 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.643 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].str.replace('France', 'FR')
2022-08-06 06:52:56.650 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.650 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.651 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].apply((lambda x: (x.replace('France', 'FR') if ('France' in str(x)) else x)))
2022-08-06 06:52:56.658 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.658 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.658 | DEBUG    | __main__:run_benchmark:432 - dfin['country'].replace(to_replace='France', value='FR')
2022-08-06 06:52:56.666 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:52:56.666 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' in country column
2022-08-06 06:52:56.666 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'country': 'France'}, 'FR')
2022-08-06 06:52:56.677 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.635 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.636 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:00.683 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.683 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.683 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:00.700 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.701 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.701 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'})
2022-08-06 06:53:00.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.713 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.713 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'}, regex=True)
2022-08-06 06:53:00.724 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.724 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.725 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'}, regex=True)
2022-08-06 06:53:00.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.736 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.736 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'], inplace=True)
2022-08-06 06:53:00.744 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.744 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.744 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:00.755 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.755 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.756 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'}, inplace=True)
2022-08-06 06:53:00.763 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.764 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.764 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'}, regex=True)
2022-08-06 06:53:00.775 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.775 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.775 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:00.786 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.786 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.786 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'], inplace=True, limit=1)
2022-08-06 06:53:00.794 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.794 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.794 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(to_replace=['France', 'Paris'], value=['FR', 'PAR'], inplace=True, limit=None, regex=False, method='pad', axis=None)
2022-08-06 06:53:00.795 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.795 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.796 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:00.806 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.807 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.807 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'}, inplace=True)
2022-08-06 06:53:00.814 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.815 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.815 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:00.826 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.826 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.826 | DEBUG    | __main__:run_benchmark:432 - dfin['city'].str.replace('France', 'FR').str.replace('Paris', 'PAR')
2022-08-06 06:53:00.833 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.834 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.834 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:00.845 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.845 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.845 | DEBUG    | __main__:run_benchmark:432 - dfin['city'].str.replace('France', 'FR').replace('Paris', 'PAR')
2022-08-06 06:53:00.852 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.853 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.853 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:00.864 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:00.864 | DEBUG    | __main__:run_benchmark:431 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-06 06:53:00.864 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:00.875 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.714 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.714 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:03.727 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.727 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.727 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:03.738 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.738 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.738 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:03.749 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.750 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.750 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'})
2022-08-06 06:53:03.761 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.761 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.761 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'}, regex=True)
2022-08-06 06:53:03.772 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.772 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.773 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'}, inplace=True, regex=True)
2022-08-06 06:53:03.780 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.781 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.781 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:03.792 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.792 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.792 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:03.803 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.803 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.803 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:03.814 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.814 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.815 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'}, regex=True)
2022-08-06 06:53:03.826 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.826 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.826 | DEBUG    | __main__:run_benchmark:432 - dfin['city'].str.replace('France', 'FR').str.replace('Paris', 'PAR')
2022-08-06 06:53:03.834 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.834 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.834 | DEBUG    | __main__:run_benchmark:432 - dfin.replace({'France': 'FR', 'Paris': 'PAR'}, inplace=True)
2022-08-06 06:53:03.842 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.842 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.842 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:03.853 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.853 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.854 | DEBUG    | __main__:run_benchmark:432 - dfin['city'].replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:03.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.861 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.861 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:03.872 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.873 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.873 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:03.884 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.884 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.884 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(to_replace=['France', 'Paris'], value=['FR', 'PAR'])
2022-08-06 06:53:03.895 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.895 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.895 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:03.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.906 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.907 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:03.918 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.918 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-06 06:53:03.918 | DEBUG    | __main__:run_benchmark:432 - dfin.replace(['France', 'Paris'], ['FR', 'PAR'])
2022-08-06 06:53:03.929 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:03.944 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 06:53:03.944 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:53:03.944 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:53:03.944 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:53:03.944 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:53:03.944 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:53:03.944 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:53:08.627 | DEBUG    | __main__:run_benchmark:431 - Query: sort rows of dfin1
2022-08-06 06:53:08.627 | DEBUG    | __main__:run_benchmark:432 - dfin.sort_index(axis=0)
2022-08-06 06:53:08.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:53:08.690 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 06:53:08.690 | DEBUG    | __main__:run:509 - Number of Sets: 2
2022-08-06 06:53:08.691 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 06:53:08.691 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:53:12.605 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 06:53:12.606 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='date', columns='name', values='value')
2022-08-06 06:53:12.648 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:12.649 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 06:53:12.649 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='date', columns='name', values='value')
2022-08-06 06:53:12.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:12.665 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 06:53:12.665 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='date', columns='name', values='value')
2022-08-06 06:53:12.676 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:12.676 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 06:53:12.676 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='date', columns='name', values='value')
2022-08-06 06:53:12.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:12.686 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 06:53:12.686 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='date', columns='name', values='value')
2022-08-06 06:53:12.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:12.695 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 06:53:12.695 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='date', columns='name', values='value')
2022-08-06 06:53:12.704 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:12.704 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 06:53:12.704 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(columns='date')
2022-08-06 06:53:12.717 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:12.717 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 06:53:12.717 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='date', columns='name', values='value')
2022-08-06 06:53:12.726 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:12.726 | DEBUG    | __main__:run_benchmark:431 - Query: Pivot dfin on column 'date'
2022-08-06 06:53:12.726 | DEBUG    | __main__:run_benchmark:432 - dfin.pivot(index='name', columns='date', values='value')
2022-08-06 06:53:12.736 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:53:12.753 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 06:53:12.753 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:53:12.753 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 06:53:17.445 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 06:53:17.446 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '').astype('category')
2022-08-06 06:53:17.459 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:17.460 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 06:53:17.460 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '')
2022-08-06 06:53:17.468 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:17.468 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 06:53:17.468 | DEBUG    | __main__:run_benchmark:432 - dfin['target'].replace({'classA': 1, 'classB': 2, 'classC': 3})
2022-08-06 06:53:17.476 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:17.477 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 06:53:17.477 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '')
2022-08-06 06:53:17.485 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:17.485 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 06:53:17.485 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '')
2022-08-06 06:53:17.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:17.493 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 06:53:17.493 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].apply(lambda x: x.replace('class', ''))
2022-08-06 06:53:17.501 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:17.501 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 06:53:17.501 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '')
2022-08-06 06:53:17.509 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:17.510 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-06 06:53:17.510 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].map({'classA': 0, 'classB': 1, 'classC': 2})
2022-08-06 06:53:17.518 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:53:20.465 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column in 'dfin'; replace values in 'target' column by enums
2022-08-06 06:53:20.465 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '').astype('category')
2022-08-06 06:53:20.475 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:20.475 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column in 'dfin'; replace values in 'target' column by enums
2022-08-06 06:53:20.476 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].str.replace('class', '')
2022-08-06 06:53:20.486 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:20.487 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column in 'dfin'; replace values in 'target' column by enums
2022-08-06 06:53:20.487 | DEBUG    | __main__:run_benchmark:432 - dfin['target'].replace({'classA': 1, 'classB': 2, 'classC': 3})
2022-08-06 06:53:20.495 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:20.495 | DEBUG    | __main__:run_benchmark:431 - Query: remove 'class' from values in 'target' column in 'dfin'; replace values in 'target' column by enums
2022-08-06 06:53:20.496 | DEBUG    | __main__:run_benchmark:432 - dfin['target'] = dfin['target'].map({'classA': 0, 'classB': 1, 'classC': 2})
2022-08-06 06:53:20.504 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:53:20.520 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 06:53:24.507 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.508 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'])
2022-08-06 06:53:24.518 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.518 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.519 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:24.529 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.529 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.529 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=unique_cat)
2022-08-06 06:53:24.531 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.531 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.531 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'], ordered=True)
2022-08-06 06:53:24.539 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.539 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.540 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical.from_array(dfin['goldLabel'])
2022-08-06 06:53:24.541 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.541 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.541 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'], ordered=True)
2022-08-06 06:53:24.549 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.550 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.550 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:24.558 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.558 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.558 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:24.567 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.567 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.567 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:24.576 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.576 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.576 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:24.584 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.584 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.585 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=dfin['goldLabel'].unique())
2022-08-06 06:53:24.593 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.593 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.593 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:24.601 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.601 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.601 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:24.610 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.610 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.610 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], ordered=False)
2022-08-06 06:53:24.618 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.618 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.618 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:24.627 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.627 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.627 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:24.635 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.635 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.635 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'])
2022-08-06 06:53:24.644 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.644 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.644 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:24.652 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.652 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.652 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype(pd.api.types.CategoricalDtype(categories=['class1', 'class2', 'class3']))
2022-08-06 06:53:24.661 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:24.661 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categories
2022-08-06 06:53:24.661 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:24.669 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.555 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.555 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:26.564 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.564 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.564 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:26.573 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.573 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.573 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:26.581 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.581 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.581 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:26.590 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.590 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.590 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:26.598 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.599 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.599 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:26.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.607 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.607 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:26.616 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.616 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.616 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=unique_cat)
2022-08-06 06:53:26.617 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.617 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.617 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'].values)
2022-08-06 06:53:26.626 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.626 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.626 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], ordered=False)
2022-08-06 06:53:26.634 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.634 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.634 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical.from_array(dfin['goldLabel'])
2022-08-06 06:53:26.636 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.636 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.636 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:26.644 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.644 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.644 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:26.653 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.653 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.653 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:26.661 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.661 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.662 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:26.670 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.670 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.670 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:26.678 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.679 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.679 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:26.687 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.687 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.687 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:26.695 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.695 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.696 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:26.704 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:26.704 | DEBUG    | __main__:run_benchmark:431 - Query: convert goldLabel column into categorical variables
2022-08-06 06:53:26.704 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=dfin['goldLabel'].unique())
2022-08-06 06:53:26.712 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:31.123 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:53:31.124 | DEBUG    | __main__:run_benchmark:432 - pd.DataFrame(LabelEncoder().fit_transform(dfin['goldLabel']))
2022-08-06 06:53:31.126 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:31.126 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:53:31.126 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:53:31.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:31.127 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:53:31.128 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:53:31.129 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:31.129 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:53:31.129 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = preprocessing.LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:53:31.130 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:31.130 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:53:31.130 | DEBUG    | __main__:run_benchmark:432 - labelEnc[0].fit_transform(dfin['goldLabel'])
2022-08-06 06:53:31.131 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:31.131 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:53:31.132 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder().fit(dfin['goldLabel'])
2022-08-06 06:53:31.133 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:31.133 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:53:31.133 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:53:31.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:31.134 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:53:31.134 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:53:31.135 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:31.135 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:53:31.136 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].apply(preprocessing.LabelEncoder().fit_transform)
2022-08-06 06:53:31.137 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:31.137 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:53:31.137 | DEBUG    | __main__:run_benchmark:432 - enc_y = preprocessing.LabelEncoder()
2022-08-06 06:53:31.138 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:31.138 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:53:31.138 | DEBUG    | __main__:run_benchmark:432 - LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:53:31.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:31.139 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:53:31.140 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:31.149 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:31.149 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:53:31.149 | DEBUG    | __main__:run_benchmark:432 - label.transform(dfin['goldLabel'])
2022-08-06 06:53:31.150 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:31.150 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:53:31.150 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:31.159 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:31.159 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:53:31.159 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:53:31.160 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:31.160 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:53:31.160 | DEBUG    | __main__:run_benchmark:432 - LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:53:31.161 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:31.161 | DEBUG    | __main__:run_benchmark:431 - Query: encode labels of "goldLabel" column
2022-08-06 06:53:31.162 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].factorize(sort=True)[0]
2022-08-06 06:53:31.169 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:53:34.459 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.460 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 06:53:34.463 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:34.463 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.463 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 06:53:34.464 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:34.464 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.464 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:53:34.465 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:34.466 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.466 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = preprocessing.LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:53:34.467 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:34.467 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.467 | DEBUG    | __main__:run_benchmark:432 - le = preprocessing.LabelEncoder()
2022-08-06 06:53:34.468 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:34.468 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.468 | DEBUG    | __main__:run_benchmark:432 - le = preprocessing.LabelEncoder()
2022-08-06 06:53:34.469 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:34.469 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.469 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:53:34.470 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:34.471 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.471 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 06:53:34.472 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:34.472 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.472 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = preprocessing.LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:53:34.473 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:34.473 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.473 | DEBUG    | __main__:run_benchmark:432 - enc_y = LabelEncoder()
2022-08-06 06:53:34.474 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:34.474 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.474 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 06:53:34.475 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:34.476 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.476 | DEBUG    | __main__:run_benchmark:432 - le = preprocessing.LabelEncoder()
2022-08-06 06:53:34.477 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:34.477 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.477 | DEBUG    | __main__:run_benchmark:432 - le = preprocessing.LabelEncoder()
2022-08-06 06:53:34.478 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:34.478 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.478 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = LabelEncoder().fit_transform(dfin['goldLabel'])
2022-08-06 06:53:34.479 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:34.479 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.479 | DEBUG    | __main__:run_benchmark:432 - LE().fit_transform(dfin['goldLabel'])
2022-08-06 06:53:34.480 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:34.481 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.481 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 06:53:34.482 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:34.482 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.482 | DEBUG    | __main__:run_benchmark:432 - le = preprocessing.LabelEncoder()
2022-08-06 06:53:34.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:34.483 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.483 | DEBUG    | __main__:run_benchmark:432 - le = LabelEncoder()
2022-08-06 06:53:34.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:34.484 | DEBUG    | __main__:run_benchmark:431 - Query: label encode goldlabel column
2022-08-06 06:53:34.484 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].factorize(sort=True)[0]
2022-08-06 06:53:34.492 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:53:37.934 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.935 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.935 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.936 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.937 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.937 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.938 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.939 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.939 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.940 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.941 | DEBUG    | __main__:run_benchmark:432 - #  use the following code as a guide
2022-08-06 06:53:37.941 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.942 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.943 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.944 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.945 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.946 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.947 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.948 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.949 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.950 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.951 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.952 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.953 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.953 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.954 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.955 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.956 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.957 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.957 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.958 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.959 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.959 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.960 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.961 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.961 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.962 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.962 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.964 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.964 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.965 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.966 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.966 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.967 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.967 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.968 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.969 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.969 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.970 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:37.970 | DEBUG    | __main__:run_benchmark:431 - Query: convert each row of "goldLabel" column into integer labels
2022-08-06 06:53:37.970 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:37.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:41.228 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:53:41.229 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:41.238 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:41.239 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:53:41.239 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:41.247 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:41.247 | DEBUG    | __main__:run_benchmark:431 - Query: replace column 'goldLabel' with categorical classes
2022-08-06 06:53:41.248 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.factorize(dfin['goldLabel'])[0]
2022-08-06 06:53:41.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:53:44.085 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.086 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype(pd.api.types.CategoricalDtype(categories=['class1', 'class2', 'class3']))
2022-08-06 06:53:44.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.128 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.128 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:44.143 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.143 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.144 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:44.154 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.155 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.155 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:44.164 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.164 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.164 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:44.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.172 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.172 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:44.181 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.181 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.181 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:44.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.189 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.190 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype(CategoricalDtype(categories=['class1', 'class2', 'class3'], ordered=True))
2022-08-06 06:53:44.191 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.191 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.191 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:44.199 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.199 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.200 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:44.208 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.209 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.209 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:44.218 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.218 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.218 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:44.226 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.226 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.227 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:44.235 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.235 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.235 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=['class1', 'class2', 'class3'], ordered=True)
2022-08-06 06:53:44.244 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.244 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.244 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:44.252 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.252 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.252 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:44.261 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.261 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.261 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:44.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.269 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.270 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype(pd.api.types.CategoricalDtype(categories=['class1', 'class2', 'class3']))
2022-08-06 06:53:44.278 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.278 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.278 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=('class1', 'class2', 'class3'), ordered=True)
2022-08-06 06:53:44.286 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:44.286 | DEBUG    | __main__:run_benchmark:431 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-06 06:53:44.287 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:44.295 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.162 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.163 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:49.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.172 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.173 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=dfin['goldLabel'].unique())
2022-08-06 06:53:49.181 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.181 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.181 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:49.190 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.190 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.190 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:49.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.198 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.199 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:49.207 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.207 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.207 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:49.216 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.216 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.216 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:49.224 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.224 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.225 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:49.233 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.233 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.233 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:49.241 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.241 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.242 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:49.250 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.250 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.250 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:49.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.259 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.259 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:49.267 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.267 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.267 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:49.276 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.276 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.276 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:49.284 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.284 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.285 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:49.293 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.293 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.293 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:49.301 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.301 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.301 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:49.310 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.310 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.310 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical.from_array(dfin['goldLabel'])
2022-08-06 06:53:49.311 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.311 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.311 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:49.319 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:49.319 | DEBUG    | __main__:run_benchmark:431 - Query: convert column 'goldLabel' to categorical data
2022-08-06 06:53:49.320 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=unique_cat)
2022-08-06 06:53:49.321 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.531 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.532 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:51.542 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.542 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.542 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:51.551 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.551 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.551 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:51.559 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.559 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.559 | DEBUG    | __main__:run_benchmark:432 - pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:51.568 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.568 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.568 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:51.576 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.576 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.576 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:51.585 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.585 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.585 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], categories=unique_cat)
2022-08-06 06:53:51.586 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.586 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.586 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:51.595 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.595 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.595 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:51.603 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.603 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.604 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:51.612 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.612 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.612 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:51.620 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.620 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.621 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'], ordered=False)
2022-08-06 06:53:51.629 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.629 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.629 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:51.637 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.638 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.638 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:51.646 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.646 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.646 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:51.654 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.655 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.655 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:51.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.663 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.663 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = pd.Categorical(dfin['goldLabel'])
2022-08-06 06:53:51.671 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.672 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.672 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:51.680 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.680 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.680 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:51.689 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.689 | DEBUG    | __main__:run_benchmark:431 - Query: apply categorical function to column 'goldLabel' data
2022-08-06 06:53:51.689 | DEBUG    | __main__:run_benchmark:432 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-06 06:53:51.697 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:51.713 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:53:53.850 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:53:53.850 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].asfactor()
2022-08-06 06:53:53.851 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:53.851 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:53:53.851 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:53.851 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:53.852 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:53:53.852 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:53.852 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:53.852 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:53:53.852 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:53:53.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:53.861 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:53:53.862 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:53:53.871 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:53.871 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:53:53.871 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:53:53.880 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:53.880 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:53:53.880 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:53.880 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:53.880 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:53:53.880 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:53:53.889 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:53.889 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:53:53.889 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = pd.Categorical(dfin['labels'])
2022-08-06 06:53:53.897 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:53.897 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:53:53.898 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:53:53.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:53.906 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:53:53.906 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:53.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:53.907 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:53:53.907 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:53:53.915 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:53.915 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-06 06:53:53.916 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = pd.factorize(dfin['labels'])[0]
2022-08-06 06:53:53.923 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:53:57.719 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 06:53:57.720 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = preprocessing.LabelEncoder().fit_transform(dfin['labels'])
2022-08-06 06:53:57.723 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:57.723 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 06:53:57.723 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:53:57.723 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:57.723 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 06:53:57.724 | DEBUG    | __main__:run_benchmark:432 - dfout = pd.DataFrame({'feat1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, 'feat2': {0: 12, 1: -5, 2: 7, 3: 14, 4: 1}, 'feat3
2022-08-06 06:53:57.724 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:57.724 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 06:53:57.724 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:53:57.724 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:57.724 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 06:53:57.724 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category').apply((lambda x: x.cat.codes))
2022-08-06 06:53:57.726 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:57.726 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 06:53:57.726 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:57.726 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:57.726 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 06:53:57.727 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:57.727 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:57.727 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-06 06:53:57.727 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category').cat.codes
2022-08-06 06:53:57.735 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:53:59.856 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.857 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:59.858 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.858 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.858 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:53:59.858 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.859 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.859 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:53:59.871 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.871 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.871 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:59.871 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.872 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.872 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:59.872 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.872 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.872 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:53:59.872 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.872 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.872 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:59.872 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.873 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.873 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:53:59.873 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.873 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.873 | DEBUG    | __main__:run_benchmark:432 - LabelEncoder().fit_transform(dfin['labels'])
2022-08-06 06:53:59.874 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.874 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.874 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:59.874 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.875 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.875 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:59.875 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.875 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.875 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:59.875 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.875 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.875 | DEBUG    | __main__:run_benchmark:432 - 
2022-08-06 06:53:59.875 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.876 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.876 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:59.876 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.876 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.876 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:59.876 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.876 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.876 | DEBUG    | __main__:run_benchmark:432 - LabelEncoder().fit_transform(dfin['labels'])
2022-08-06 06:53:59.877 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.877 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.878 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:59.878 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.878 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.878 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:59.878 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.878 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.878 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = LabelEncoder().fit_transform(dfin['labels'])
2022-08-06 06:53:59.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:53:59.879 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-06 06:53:59.879 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:53:59.880 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.136 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.137 | DEBUG    | __main__:run_benchmark:432 - labels = dfin['labels']
2022-08-06 06:54:03.176 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.176 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.176 | DEBUG    | __main__:run_benchmark:432 - for i, label in enumerate(dfin['labels']):
2022-08-06 06:54:03.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.177 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.177 | DEBUG    | __main__:run_benchmark:432 - for i, label in enumerate(dfin['labels']):
2022-08-06 06:54:03.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.178 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.178 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:54:03.193 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.194 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.194 | DEBUG    | __main__:run_benchmark:432 - labels = dfin['labels'].unique()
2022-08-06 06:54:03.204 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.204 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.204 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:54:03.213 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.213 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.213 | DEBUG    | __main__:run_benchmark:432 - labels = dfin['labels']
2022-08-06 06:54:03.221 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.221 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.222 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:54:03.222 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.222 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.222 | DEBUG    | __main__:run_benchmark:432 - for i, label in enumerate(dfin['labels']):
2022-08-06 06:54:03.222 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.223 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.223 | DEBUG    | __main__:run_benchmark:432 - labels = dfin['labels'].unique()
2022-08-06 06:54:03.230 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.231 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.231 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:54:03.239 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.239 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.239 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:54:03.248 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.248 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.248 | DEBUG    | __main__:run_benchmark:432 - for i, label in enumerate(dfin['labels']):
2022-08-06 06:54:03.248 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.248 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.248 | DEBUG    | __main__:run_benchmark:432 - for index, value in dfin['labels'].items():
2022-08-06 06:54:03.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.249 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.249 | DEBUG    | __main__:run_benchmark:432 - for i, label in enumerate(dfin['labels']):
2022-08-06 06:54:03.249 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.249 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.249 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].items()
2022-08-06 06:54:03.257 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.257 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.257 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:54:03.266 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.266 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.266 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:54:03.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.274 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.275 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-06 06:54:03.283 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.283 | DEBUG    | __main__:run_benchmark:431 - Query: Enumerate the 'labels' column
2022-08-06 06:54:03.283 | DEBUG    | __main__:run_benchmark:432 - dfin['labels'].apply(lambda x: x)
2022-08-06 06:54:03.291 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:03.308 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 06:54:06.007 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.007 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 06:54:06.027 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.027 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.028 | DEBUG    | __main__:run_benchmark:432 - enc_x = OneHotEncoder(sparse=False)
2022-08-06 06:54:06.030 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.030 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.031 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'], drop_first=True)
2022-08-06 06:54:06.046 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.046 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.047 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 06:54:06.058 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.058 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.058 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'], drop_first=True)
2022-08-06 06:54:06.067 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.067 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.067 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 06:54:06.075 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.075 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.075 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'], drop_first=True)
2022-08-06 06:54:06.083 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.083 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.083 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 06:54:06.092 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.092 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.092 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 06:54:06.100 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.100 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.101 | DEBUG    | __main__:run_benchmark:432 - pd.get_dummies(dfin['GoldTarget'])
2022-08-06 06:54:06.111 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.111 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.111 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 06:54:06.119 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.119 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.120 | DEBUG    | __main__:run_benchmark:432 - pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 06:54:06.132 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.132 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.132 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:54:06.132 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.132 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.132 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 06:54:06.141 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.141 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.141 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'])
2022-08-06 06:54:06.149 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.149 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.149 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:54:06.150 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.150 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.150 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:54:06.150 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.150 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.150 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.get_dummies(dfin, columns=['GoldTarget'], prefix='GoldTarget')
2022-08-06 06:54:06.159 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.159 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.159 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:54:06.159 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:06.159 | DEBUG    | __main__:run_benchmark:431 - Query: do one hot encoding of column 'GoldTarget'
2022-08-06 06:54:06.160 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.concat([dfin, pd.get_dummies(dfin['GoldTarget'], drop_first=True)], axis=1)
2022-08-06 06:54:06.167 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.241 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.242 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Series(dfin['GoldTarget'], dtype='category')
2022-08-06 06:54:11.283 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.283 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.283 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'])
2022-08-06 06:54:11.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.299 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.299 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'], ordered=False)
2022-08-06 06:54:11.310 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.310 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.310 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'])
2022-08-06 06:54:11.319 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.319 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.319 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical.from_array(dfin['GoldTarget'])
2022-08-06 06:54:11.320 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.320 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.320 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:11.328 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.329 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.329 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:11.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.337 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.337 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'], categories=dfin['GoldTarget'].unique())
2022-08-06 06:54:11.346 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.346 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.346 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype(dtype='category')
2022-08-06 06:54:11.354 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.354 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.355 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:11.363 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.363 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.363 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:11.371 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.372 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.372 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:11.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.380 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.380 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:11.388 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.389 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.389 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:11.397 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.397 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.397 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:11.406 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.406 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.406 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'])
2022-08-06 06:54:11.414 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.414 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.414 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:11.423 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.423 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.423 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'], categories=unique_cat)
2022-08-06 06:54:11.424 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.424 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.424 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'].values)
2022-08-06 06:54:11.432 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:11.433 | DEBUG    | __main__:run_benchmark:431 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-06 06:54:11.433 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:11.441 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:14.493 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:54:14.493 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype(np.number)
2022-08-06 06:54:14.496 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:14.496 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:54:14.496 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:14.505 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:14.505 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:54:14.505 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].apply(pd.to_numeric, errors='coerce')
2022-08-06 06:54:14.513 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:14.514 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:54:14.514 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 06:54:14.515 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:14.515 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:54:14.515 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 06:54:14.516 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:14.516 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:54:14.516 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-06 06:54:14.518 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:14.518 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:54:14.518 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:14.526 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:14.526 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:54:14.527 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:14.535 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:14.535 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:54:14.535 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:14.543 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:14.543 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:54:14.544 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:14.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:14.552 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:54:14.552 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:14.560 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:14.561 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:54:14.561 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'].astype(str).str[-1])
2022-08-06 06:54:14.562 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:14.562 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:54:14.563 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:14.571 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:14.571 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:54:14.571 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:14.579 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:14.580 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:54:14.580 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:14.588 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:14.588 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to numeric
2022-08-06 06:54:14.588 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category').cat.codes
2022-08-06 06:54:14.596 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:54:18.865 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to category and encode to numeric
2022-08-06 06:54:18.866 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:18.875 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:18.876 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to category and encode to numeric
2022-08-06 06:54:18.876 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:18.884 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:18.884 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to category and encode to numeric
2022-08-06 06:54:18.884 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-06 06:54:18.893 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:18.893 | DEBUG    | __main__:run_benchmark:431 - Query: change 'GoldTarget' column's data type to category and encode to numeric
2022-08-06 06:54:18.893 | DEBUG    | __main__:run_benchmark:432 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category').cat.codes
2022-08-06 06:54:18.900 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:54:18.920 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:54:23.338 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 06:54:23.339 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:54:23.378 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:23.379 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 06:54:23.379 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:54:23.394 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:23.394 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 06:54:23.394 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'].replace({'class1': 0, 'class2': 1, 'class3': 2}).astype('category')
2022-08-06 06:54:23.405 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:23.405 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 06:54:23.405 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'].replace(list(dfin['Label'].unique()), range(0, len(list(dfin['Label'].unique()))))
2022-08-06 06:54:23.414 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:23.414 | DEBUG    | __main__:run_benchmark:431 - Query: Replace 'Label' with categorical numbers
2022-08-06 06:54:23.414 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category').cat.codes
2022-08-06 06:54:23.422 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:54:27.167 | DEBUG    | __main__:run_benchmark:431 - Query: Replace strings in 'Label' with categorical numbers
2022-08-06 06:54:27.168 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].map({'class1': 0, 'class2': 1, 'class3': 2})
2022-08-06 06:54:27.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:54:31.648 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:54:31.649 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:54:31.659 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:31.659 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:54:31.659 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:54:31.667 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:31.667 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:54:31.667 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:54:31.676 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:31.676 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:54:31.676 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:54:31.684 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:31.684 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:54:31.685 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:54:31.693 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:31.693 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:54:31.693 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:54:31.701 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:31.702 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:54:31.702 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-06 06:54:31.710 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:31.710 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:54:31.710 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = dfin['Label'].astype('category').cat.rename_categories(range(len(dfin['Label'].unique())))
2022-08-06 06:54:31.718 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:31.718 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:54:31.719 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = preprocessing.LabelEncoder().fit_transform(dfin['Label'])
2022-08-06 06:54:31.720 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:31.720 | DEBUG    | __main__:run_benchmark:431 - Query: make strings in 'Label' with categorical numbers
2022-08-06 06:54:31.720 | DEBUG    | __main__:run_benchmark:432 - dfin['Label'] = pd.factorize(dfin['Label'])[0]
2022-08-06 06:54:31.727 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:54:31.747 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 06:54:31.747 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:54:31.747 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 06:54:33.781 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.782 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 06:54:33.785 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.785 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.786 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:54:33.788 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.788 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.788 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:54:33.791 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.791 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.791 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated(keep=False).sum()
2022-08-06 06:54:33.793 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.793 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.793 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=0)
2022-08-06 06:54:33.795 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.795 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.796 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 06:54:33.798 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.798 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.798 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:54:33.800 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.800 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.801 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:54:33.803 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.803 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.803 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=1)
2022-08-06 06:54:33.806 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.806 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.806 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 06:54:33.808 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.808 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.808 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=1).sum()
2022-08-06 06:54:33.811 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.811 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.811 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:54:33.813 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.814 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.814 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=1)
2022-08-06 06:54:33.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.817 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.817 | DEBUG    | __main__:run_benchmark:432 - dfin.index.value_counts()
2022-08-06 06:54:33.819 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.819 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.819 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:54:33.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.822 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.822 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique(axis=0)
2022-08-06 06:54:33.824 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.824 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.824 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:54:33.827 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.827 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.827 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:54:33.829 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.830 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.830 | DEBUG    | __main__:run_benchmark:432 - len(dfin.groupby(dfin.columns.tolist()).size())
2022-08-06 06:54:33.832 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:33.832 | DEBUG    | __main__:run_benchmark:431 - Query: count of unique rows in dataframe 'dfin'
2022-08-06 06:54:33.833 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:54:33.835 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:36.469 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:54:36.470 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 06:54:36.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:36.485 | DEBUG    | __main__:run_benchmark:431 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-06 06:54:36.486 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.drop_duplicates().shape[0]
2022-08-06 06:54:36.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:54:38.457 | DEBUG    | __main__:run_benchmark:431 - Query: Count duplicate rows in dfin
2022-08-06 06:54:38.458 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:54:38.465 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:54:40.060 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:54:40.061 | DEBUG    | __main__:run_benchmark:432 - dfin.index.value_counts()
2022-08-06 06:54:40.064 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:40.064 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:54:40.064 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.columns.tolist()).size()
2022-08-06 06:54:40.067 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:40.067 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe
2022-08-06 06:54:40.068 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:54:40.069 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:54:44.309 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:54:44.310 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.index).cumcount()
2022-08-06 06:54:44.313 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:44.313 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of repitions of each row in dataframe dfin
2022-08-06 06:54:44.314 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:54:44.315 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:54:48.464 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 06:54:48.464 | DEBUG    | __main__:run_benchmark:432 - dfin['duplicates'] = dfin.duplicated().sum()
2022-08-06 06:54:48.468 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:48.469 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 06:54:48.469 | DEBUG    | __main__:run_benchmark:432 - dfin.columns.duplicated().sum()
2022-08-06 06:54:48.471 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:48.471 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 06:54:48.471 | DEBUG    | __main__:run_benchmark:432 - dfin['duplicates'] = dfin.duplicated(keep=False).sum()
2022-08-06 06:54:48.475 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:48.475 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 06:54:48.475 | DEBUG    | __main__:run_benchmark:432 - dfin['duplicates'] = dfin.duplicated().sum()
2022-08-06 06:54:48.479 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:48.479 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 06:54:48.480 | DEBUG    | __main__:run_benchmark:432 - dfin['dup_count'] = dfin.duplicated(subset=['inp1', 'inp2', 'inp3'], keep=False).sum(axis=1)
2022-08-06 06:54:48.483 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:48.483 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 06:54:48.483 | DEBUG    | __main__:run_benchmark:432 - dfin['dup'] = dfin.duplicated(subset=['inp1', 'inp2', 'inp3']).sum()
2022-08-06 06:54:48.486 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:48.486 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 06:54:48.487 | DEBUG    | __main__:run_benchmark:432 - dfin['duplicates'] = dfin.duplicated(subset=['inp1', 'inp2', 'inp3'], keep=False).sum(axis=1)
2022-08-06 06:54:48.490 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:54:48.490 | DEBUG    | __main__:run_benchmark:431 - Query: Add number of duplicates in dataframe dfin
2022-08-06 06:54:48.490 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:54:48.492 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:54:51.936 | DEBUG    | __main__:run_benchmark:431 - Query: Count number of duplicates in dataframe dfin and add them
2022-08-06 06:54:51.937 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:54:51.939 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:54:54.237 | DEBUG    | __main__:run_benchmark:431 - Query: count number of duplicate rows in 'dfin'
2022-08-06 06:54:54.238 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:54:54.240 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:54:54.259 | DEBUG    | __main__:run:515 - Number of queries: 22
2022-08-06 06:54:57.369 | DEBUG    | __main__:run_benchmark:431 - Query: Find the number of duplicate rows in dataframe 'dfin'
2022-08-06 06:54:57.370 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:54:57.372 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:55:02.059 | DEBUG    | __main__:run_benchmark:431 - Query: Number of duplicate rows in dataframe 'dfin'
2022-08-06 06:55:02.060 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:55:02.062 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:55:03.784 | DEBUG    | __main__:run_benchmark:431 - Query: Count of repeated rows in dataframe 'dfin'
2022-08-06 06:55:03.785 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:55:03.792 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:55:06.361 | DEBUG    | __main__:run_benchmark:431 - Query: count number of repeated rows
2022-08-06 06:55:06.362 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.columns.tolist()).size()
2022-08-06 06:55:06.366 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:55:06.366 | DEBUG    | __main__:run_benchmark:431 - Query: count number of repeated rows
2022-08-06 06:55:06.367 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:55:06.368 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:55:08.465 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:55:08.466 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:55:08.469 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:55:08.469 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:55:08.470 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates())
2022-08-06 06:55:08.472 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:55:08.472 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:55:08.472 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0]
2022-08-06 06:55:08.473 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:55:08.474 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:55:08.474 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(list(dfin.columns)).size()
2022-08-06 06:55:08.477 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:55:08.477 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:55:08.477 | DEBUG    | __main__:run_benchmark:432 - dfin.nunique()
2022-08-06 06:55:08.479 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:55:08.479 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:55:08.479 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:55:08.482 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:55:08.482 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:55:08.482 | DEBUG    | __main__:run_benchmark:432 - dfin.index.value_counts()
2022-08-06 06:55:08.484 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:55:08.484 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:55:08.484 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.duplicated().sum()
2022-08-06 06:55:08.486 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:55:08.486 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:55:08.486 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated(keep=False).sum()
2022-08-06 06:55:08.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:55:08.488 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:55:08.489 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:55:08.491 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:55:08.491 | DEBUG    | __main__:run_benchmark:431 - Query: count number of unique rows
2022-08-06 06:55:08.491 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.drop_duplicates().shape[0]
2022-08-06 06:55:08.492 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:55:08.679 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fd44bfb47a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7fd44c1348c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7fd3b9425b10>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7fd3b9425b10>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Find the number of duplicate rows in dataframe 'dfin'", 'user': 'u1'}, {'query': "Number of duplicate...
    │               └ {'queries': [{'query': "Find the number of duplicate rows in dataframe 'dfin'", 'user': 'u1'}, {'query': "Number of duplicate...
    └ {'query': 'difference between number of rows in drop duplicates and number of rows', 'user': 'u7'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7fd3b9425b10>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a dictionary of counts of uni...
    │    └ 'code-davinci-002'
    └ <__main__.Algorithm1 object at 0x7fd3b9425b10>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-002', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fd3b727cdd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7fd3a509e6d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:55:08 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fd43baa6f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:55:08 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on reques...
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fd3a5083250>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeie...

openai.error.RateLimitError: Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:55:08.691 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:55:41.746 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:55:41.747 | DEBUG    | __main__:run_benchmark:432 - len(dfin.drop_duplicates()) - len(dfin)
2022-08-06 06:55:41.751 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:55:41.751 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:55:41.751 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0] - dfin.shape[0]
2022-08-06 06:55:41.753 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:55:41.754 | DEBUG    | __main__:run_benchmark:431 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-06 06:55:41.754 | DEBUG    | __main__:run_benchmark:432 - len(dfin) - len(dfin.drop_duplicates())
2022-08-06 06:55:41.755 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:55:41.773 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:55:44.316 | DEBUG    | __main__:run_benchmark:431 - Query: find number of duplicate rows in dfin
2022-08-06 06:55:44.317 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:55:44.325 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:55:44.535 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fd44bfb47a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7fd44c1348c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7fd3b9425b10>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7fd3b9425b10>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'find number of duplicate rows in dfin', 'user': 'u11'}, {'query': 'find count of duplicate rows in df...
    │               └ {'queries': [{'query': 'find number of duplicate rows in dfin', 'user': 'u11'}, {'query': 'find count of duplicate rows in df...
    └ {'query': 'find number of duplicate rows', 'user': 'u10'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7fd3b9425b10>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return the number of duplicate rows ...
    │    └ 'code-davinci-002'
    └ <__main__.Algorithm1 object at 0x7fd3b9425b10>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-002', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fd3b727cdd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7fd3a51b5dd0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:55:44 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fd43baa6f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:55:44 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on reques...
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fd3a509bdd0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeie...

openai.error.RateLimitError: Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:55:44.560 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:56:17.061 | DEBUG    | __main__:run_benchmark:431 - Query: find number of duplicate rows
2022-08-06 06:56:17.062 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:56:17.065 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:56:17.083 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:56:19.461 | DEBUG    | __main__:run_benchmark:431 - Query: Count the number of repeated rows
2022-08-06 06:56:19.462 | DEBUG    | __main__:run_benchmark:432 - dfin.groupby(dfin.columns.tolist()).size()
2022-08-06 06:56:19.475 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:19.476 | DEBUG    | __main__:run_benchmark:431 - Query: Count the number of repeated rows
2022-08-06 06:56:19.476 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:56:19.482 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:56:21.197 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.198 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 06:56:21.205 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.206 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.206 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:21.208 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.208 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.209 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:56:21.215 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.216 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.216 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:56:21.223 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.223 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.223 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, keep='first')
2022-08-06 06:56:21.225 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.226 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.226 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, subset=['feat1', 'feat2'])
2022-08-06 06:56:21.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.228 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.228 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:56:21.235 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.235 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.235 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:56:21.242 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.242 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.242 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['feat1', 'feat2', 'feat3'])
2022-08-06 06:56:21.247 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.247 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.247 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['feat1', 'feat2', 'feat3'])
2022-08-06 06:56:21.252 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.252 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.252 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:56:21.259 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.259 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.260 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False)
2022-08-06 06:56:21.266 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.266 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.267 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False, subset=dfin.columns[1:])
2022-08-06 06:56:21.273 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.274 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.274 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 06:56:21.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.281 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.281 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 06:56:21.288 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.288 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.288 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False)
2022-08-06 06:56:21.295 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.295 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.295 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 06:56:21.301 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.302 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.302 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=dfin.columns[0:(- 1)])
2022-08-06 06:56:21.309 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.309 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.309 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:56:21.316 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:21.316 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin
2022-08-06 06:56:21.316 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:21.318 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.002 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.003 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape
2022-08-06 06:56:24.007 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.007 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.007 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False, subset=dfin.columns[1:]).shape
2022-08-06 06:56:24.010 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.010 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.010 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=dfin.columns[1:]).shape
2022-08-06 06:56:24.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.013 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.013 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates().shape[0]
2022-08-06 06:56:24.015 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.016 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.016 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:24.018 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.018 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.019 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:24.021 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.021 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.021 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:24.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.024 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.024 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:24.026 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.027 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.027 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:24.029 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.029 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.029 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:24.032 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.032 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.032 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:24.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.034 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.034 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:24.037 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.037 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.037 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:24.040 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.040 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.040 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:24.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.043 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.043 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:24.045 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.045 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.046 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:24.048 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.048 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.048 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False)
2022-08-06 06:56:24.055 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.055 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.055 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:24.058 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.058 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.058 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(dfin.columns, inplace=True)
2022-08-06 06:56:24.061 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:24.061 | DEBUG    | __main__:run_benchmark:431 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-06 06:56:24.061 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False)
2022-08-06 06:56:24.068 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:27.326 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows
2022-08-06 06:56:27.327 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:56:27.327 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:27.328 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows
2022-08-06 06:56:27.328 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:56:27.328 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:27.328 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows
2022-08-06 06:56:27.328 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:56:27.330 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:56:29.445 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:56:29.446 | DEBUG    | __main__:run_benchmark:432 - #  of all duplicated rows in "df"
2022-08-06 06:56:29.446 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:29.447 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:56:29.447 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:56:29.447 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:29.447 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:56:29.447 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:56:29.448 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:29.448 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:56:29.448 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:56:29.448 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:29.448 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:56:29.448 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:56:29.448 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:29.448 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:56:29.449 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:56:29.449 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:29.449 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:56:29.449 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(df):
2022-08-06 06:56:29.449 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:29.449 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:56:29.449 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:56:29.450 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:29.450 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:56:29.450 | DEBUG    | __main__:run_benchmark:432 - def count_duplicate_rows(df):
2022-08-06 06:56:29.450 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:29.450 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:56:29.450 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:56:29.450 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:29.450 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-06 06:56:29.450 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:56:29.452 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:56:34.011 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 06:56:34.012 | DEBUG    | __main__:run_benchmark:432 - #  of all duplicated rows in "dfin"
2022-08-06 06:56:34.012 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:34.013 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 06:56:34.013 | DEBUG    | __main__:run_benchmark:432 - #  of the sums of all duplicated rows in "dfin"
2022-08-06 06:56:34.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:34.013 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 06:56:34.013 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:56:34.013 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:34.013 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 06:56:34.014 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(dfin):
2022-08-06 06:56:34.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:34.014 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 06:56:34.014 | DEBUG    | __main__:run_benchmark:432 - def count_duplicates(dfin):
2022-08-06 06:56:34.014 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:34.014 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-06 06:56:34.014 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated().sum()
2022-08-06 06:56:34.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:56:36.225 | DEBUG    | __main__:run_benchmark:431 - Query: Get total number of duplicate rows
2022-08-06 06:56:36.226 | DEBUG    | __main__:run_benchmark:432 - len(dfin[dfin.duplicated()])
2022-08-06 06:56:36.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:56:36.247 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:56:38.467 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.468 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, keep='first')
2022-08-06 06:56:38.471 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.471 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.471 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 06:56:38.478 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.478 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.479 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:38.481 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.481 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.481 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:56:38.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.488 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.489 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:56:38.495 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.495 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.496 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 06:56:38.502 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.503 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.503 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep='first')
2022-08-06 06:56:38.510 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.510 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.510 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:38.512 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.513 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.513 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:38.515 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.515 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.516 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True)
2022-08-06 06:56:38.518 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.518 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.518 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:56:38.525 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.525 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.525 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:56:38.532 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.532 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.533 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:56:38.539 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.540 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.540 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:56:38.547 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.547 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.548 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(keep=False)
2022-08-06 06:56:38.554 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.555 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.555 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:56:38.562 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.562 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.562 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:56:38.569 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.569 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.569 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates()
2022-08-06 06:56:38.576 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.576 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.576 | DEBUG    | __main__:run_benchmark:432 - dfin = pd.DataFrame.drop_duplicates(dfin)
2022-08-06 06:56:38.578 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:38.579 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate rows
2022-08-06 06:56:38.579 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates()
2022-08-06 06:56:38.581 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:41.812 | DEBUG    | __main__:run_benchmark:431 - Query: return the number of duplicate rows
2022-08-06 06:56:41.813 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.duplicated()].shape[0]
2022-08-06 06:56:41.821 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:56:44.435 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - duplicate rows
2022-08-06 06:56:44.436 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.duplicated().sum()
2022-08-06 06:56:44.439 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:44.439 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - duplicate rows
2022-08-06 06:56:44.439 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.duplicated().sum()
2022-08-06 06:56:44.441 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:44.441 | DEBUG    | __main__:run_benchmark:431 - Query: return total rows - duplicate rows
2022-08-06 06:56:44.442 | DEBUG    | __main__:run_benchmark:432 - dfin.shape[0] - dfin.drop_duplicates().shape[0]
2022-08-06 06:56:44.443 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:56:47.383 | DEBUG    | __main__:run_benchmark:431 - Query: return number of nonunique rows
2022-08-06 06:56:47.384 | DEBUG    | __main__:run_benchmark:432 - len(dfin) - len(dfin.drop_duplicates())
2022-08-06 06:56:47.387 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:56:50.053 | DEBUG    | __main__:run_benchmark:431 - Query: return length of din - length of drop duplicates of dfin
2022-08-06 06:56:50.054 | DEBUG    | __main__:run_benchmark:432 - len(dfin) - len(dfin.drop_duplicates())
2022-08-06 06:56:50.062 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:56:53.644 | DEBUG    | __main__:run_benchmark:431 - Query: find the number of repeated columns in 'dfin'
2022-08-06 06:56:53.644 | DEBUG    | __main__:run_benchmark:432 - dfin.columns.duplicated().sum()
2022-08-06 06:56:53.647 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:53.647 | DEBUG    | __main__:run_benchmark:431 - Query: find the number of repeated columns in 'dfin'
2022-08-06 06:56:53.647 | DEBUG    | __main__:run_benchmark:432 - dfin.duplicated(subset=['inputA', 'inputB', 'inputC']).sum()
2022-08-06 06:56:53.648 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:56:53.668 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 06:56:53.668 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 06:56:53.668 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:56:55.871 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:55.872 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:55.933 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:55.933 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:55.934 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:55.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:55.955 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:55.956 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:55.975 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:55.975 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:55.976 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:55.995 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:55.995 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:55.995 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:56.015 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:56.015 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:56.015 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2', keep='first', inplace=True)
2022-08-06 06:56:56.029 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:56.030 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:56.030 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:56.050 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:56.050 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:56.050 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:56.070 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:56.070 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:56.070 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:56.089 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:56.090 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:56.090 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:56.109 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:56.109 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:56.110 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:56.129 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:56.129 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:56.129 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:56.149 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:56.149 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:56.149 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:56.169 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:56.169 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:56.169 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:56.188 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:56.188 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:56.189 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:56.208 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:56.208 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:56.208 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:56.228 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:56.228 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:56.228 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:56.248 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:56.248 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:56.248 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:56.268 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:56.268 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:56.268 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:56.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:56.287 | DEBUG    | __main__:run_benchmark:431 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-06 06:56:56.288 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='f2')
2022-08-06 06:56:56.307 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:56.325 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 06:56:56.326 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:56:59.099 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 06:56:59.099 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 06:56:59.162 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:59.162 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 06:56:59.162 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inputB'].duplicated()]
2022-08-06 06:56:59.183 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:59.183 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 06:56:59.183 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inputB'].duplicated(keep=False)]
2022-08-06 06:56:59.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:59.202 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 06:56:59.202 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:56:59.221 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:59.221 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 06:56:59.221 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inputB'].duplicated()]
2022-08-06 06:56:59.239 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:59.240 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 06:56:59.240 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:56:59.258 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:56:59.259 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where element of column 'inputB' is not unique
2022-08-06 06:56:59.259 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB', keep=False)
2022-08-06 06:56:59.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:57:01.385 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 06:57:01.386 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:57:01.405 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:01.406 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 06:57:01.406 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:57:01.424 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:01.425 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 06:57:01.425 | DEBUG    | __main__:run_benchmark:432 - dfin[~dfin['inputB'].duplicated()]
2022-08-06 06:57:01.443 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:01.443 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 06:57:01.443 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:57:01.462 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:01.462 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 06:57:01.463 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB', inplace=True)
2022-08-06 06:57:01.476 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:01.476 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows where values in 'inputB' are duplicates
2022-08-06 06:57:01.476 | DEBUG    | __main__:run_benchmark:432 - dfin[~dfin.duplicated(keep=False, subset='inputB')]
2022-08-06 06:57:01.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:57:04.668 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.669 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:57:04.688 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.689 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.689 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'].drop_duplicates()
2022-08-06 06:57:04.702 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.702 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.702 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:57:04.720 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.720 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.721 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'].drop_duplicates(keep='first')
2022-08-06 06:57:04.733 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.734 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.734 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 06:57:04.752 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.752 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.753 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:57:04.771 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.771 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.772 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:57:04.790 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.790 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.790 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'].drop_duplicates(keep='first')
2022-08-06 06:57:04.803 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.803 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.803 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'], keep='first', inplace=True)
2022-08-06 06:57:04.817 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.817 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.817 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:57:04.836 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.836 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.836 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, subset='inputB')
2022-08-06 06:57:04.849 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.850 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.850 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:57:04.868 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.868 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.868 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:57:04.887 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.887 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.887 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:57:04.909 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.909 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.909 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 06:57:04.928 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.928 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.928 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 06:57:04.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.947 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.947 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB', inplace=True)
2022-08-06 06:57:04.960 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.961 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.961 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:57:04.979 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.979 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.979 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inputB'])
2022-08-06 06:57:04.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:04.998 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB'
2022-08-06 06:57:04.998 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB')
2022-08-06 06:57:05.017 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:08.362 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB' without keeping first
2022-08-06 06:57:08.363 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB', keep='first', inplace=True)
2022-08-06 06:57:08.378 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:08.379 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB' without keeping first
2022-08-06 06:57:08.379 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'].drop_duplicates(keep=False)
2022-08-06 06:57:08.392 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:08.392 | DEBUG    | __main__:run_benchmark:431 - Query: remove all duplicate entries of column 'inputB' without keeping first
2022-08-06 06:57:08.392 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inputB', keep=False)
2022-08-06 06:57:08.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:57:08.424 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:57:10.991 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:10.991 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:11.025 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.025 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.026 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:11.048 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.048 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.049 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:11.067 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.068 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.068 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:11.086 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.087 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.087 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, subset='inp2')
2022-08-06 06:57:11.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.101 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.101 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', inplace=True)
2022-08-06 06:57:11.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.115 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.115 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:11.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.134 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.134 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:11.153 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.153 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.153 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 06:57:11.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.172 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.172 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 06:57:11.191 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.191 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.191 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:11.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.210 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.210 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 06:57:11.229 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.229 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.229 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 06:57:11.248 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.248 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.248 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:11.267 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.267 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.267 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', inplace=True)
2022-08-06 06:57:11.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.281 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.281 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:11.300 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.300 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.300 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:11.319 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.319 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.319 | DEBUG    | __main__:run_benchmark:432 - pd.DataFrame.drop_duplicates(dfin, subset='inp2')
2022-08-06 06:57:11.338 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.338 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.338 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:11.357 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:11.358 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-06 06:57:11.358 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:11.376 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.650 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.651 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'] != dfin['inp2'].shift()]
2022-08-06 06:57:14.671 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.671 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.672 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:14.690 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.690 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.691 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'] != dfin['inp2'].shift()]
2022-08-06 06:57:14.709 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.709 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.709 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'].duplicated()]
2022-08-06 06:57:14.728 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.728 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.728 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:14.747 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.747 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.747 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:14.766 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.766 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.766 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:14.785 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.785 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.785 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:14.804 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.804 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.804 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:14.823 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.823 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.824 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', inplace=True)
2022-08-06 06:57:14.837 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.837 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.838 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:14.856 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.856 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.856 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:14.875 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.875 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.875 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'].duplicated()]
2022-08-06 06:57:14.894 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.894 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.894 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:14.913 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.913 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.913 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first', inplace=True)
2022-08-06 06:57:14.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.927 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.927 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:14.946 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.946 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.946 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'].duplicated(keep=False)].reset_index(drop=True)
2022-08-06 06:57:14.964 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.964 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.965 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'].duplicated()]
2022-08-06 06:57:14.983 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:14.983 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:14.983 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'].duplicated()]
2022-08-06 06:57:15.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:15.005 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-06 06:57:15.005 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:15.024 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.244 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.245 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:17.307 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.307 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.307 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'].duplicated()]
2022-08-06 06:57:17.328 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.328 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.328 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'] != dfin['inp2'].shift()]
2022-08-06 06:57:17.347 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.347 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.347 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset='inp2', keep='first')
2022-08-06 06:57:17.361 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.361 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.361 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first')
2022-08-06 06:57:17.380 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.380 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.380 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:17.399 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.399 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.399 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:17.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.418 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.418 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin['inp2'].shift() != dfin['inp2']]
2022-08-06 06:57:17.437 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.437 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.437 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:17.456 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.456 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.456 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first')
2022-08-06 06:57:17.475 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.475 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.475 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset='inp2', keep='first')
2022-08-06 06:57:17.488 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.489 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.489 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first', inplace=True)
2022-08-06 06:57:17.502 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.503 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.503 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:17.521 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.522 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.522 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first')
2022-08-06 06:57:17.540 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.541 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.541 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin['inp2'] != dfin['inp2'].shift()]
2022-08-06 06:57:17.554 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.554 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.554 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.loc[(dfin['inp2'] != 12)]
2022-08-06 06:57:17.567 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.567 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.567 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 06:57:17.586 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.586 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.586 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:17.600 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.600 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.600 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first', inplace=True)
2022-08-06 06:57:17.614 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:17.614 | DEBUG    | __main__:run_benchmark:431 - Query: delete rows with same 'inp2' value
2022-08-06 06:57:17.614 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', keep='first')
2022-08-06 06:57:17.633 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:21.822 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:21.822 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:21.843 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:21.843 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:21.843 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:21.862 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:21.862 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:21.862 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:21.881 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:21.881 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:21.881 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', inplace=True)
2022-08-06 06:57:21.895 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:21.895 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:21.895 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:21.914 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:21.914 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:21.914 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(inplace=True, subset='inp2')
2022-08-06 06:57:21.927 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:21.927 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:21.928 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:21.946 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:21.946 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:21.946 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:21.965 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:21.965 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:21.965 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2', inplace=True)
2022-08-06 06:57:21.979 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:21.979 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:21.979 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 06:57:21.998 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:21.998 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:21.998 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset=['inp2'])
2022-08-06 06:57:22.017 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:22.017 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:22.017 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:22.036 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:22.036 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:22.036 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:22.055 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:22.055 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:22.055 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:22.077 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:22.077 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:22.077 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:22.096 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:22.096 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:22.096 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:22.115 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:22.115 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:22.115 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:22.133 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:22.134 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:22.134 | DEBUG    | __main__:run_benchmark:432 - pd.DataFrame.drop_duplicates(dfin, subset='inp2')
2022-08-06 06:57:22.152 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:22.152 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:22.152 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:22.171 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:22.171 | DEBUG    | __main__:run_benchmark:431 - Query: drop duplicates on subset 'inp2'
2022-08-06 06:57:22.171 | DEBUG    | __main__:run_benchmark:432 - dfin.drop_duplicates(subset='inp2')
2022-08-06 06:57:22.190 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:22.212 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 06:57:22.212 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:57:22.212 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:57:27.221 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.222 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 06:57:27.269 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.270 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.270 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 06:57:27.287 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.287 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.287 | DEBUG    | __main__:run_benchmark:432 - dfin.mask(dfin < 10, 10)
2022-08-06 06:57:27.299 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.300 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.300 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: (x if (x >= 10) else 10))
2022-08-06 06:57:27.311 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.311 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.311 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 06:57:27.322 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.322 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.323 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 06:57:27.334 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.334 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.334 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:57:27.342 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.342 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.342 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 06:57:27.353 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.353 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.354 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if (x < 10) else x)
2022-08-06 06:57:27.365 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.365 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.365 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 06:57:27.376 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.376 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.377 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if (x < 10) else x)
2022-08-06 06:57:27.388 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.388 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.388 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 06:57:27.399 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.399 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.399 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 06:57:27.411 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.411 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.411 | DEBUG    | __main__:run_benchmark:432 - dfin['f1'] = np.where((dfin['f1'] < 10), 10, dfin['f1'])
2022-08-06 06:57:27.418 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.418 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.418 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 06:57:27.429 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.430 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.430 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if (x < 10) else x)
2022-08-06 06:57:27.441 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.441 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.441 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: (10 if (x < 10) else x))
2022-08-06 06:57:27.452 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.452 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.453 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if (x < 10) else x)
2022-08-06 06:57:27.464 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.464 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.464 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 06:57:27.475 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:27.475 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-06 06:57:27.475 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin > 10, 10)
2022-08-06 06:57:27.486 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.060 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.061 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 06:57:29.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.073 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.073 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 06:57:29.085 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.085 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.085 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin > 10, 10)
2022-08-06 06:57:29.096 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.096 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.096 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin > 10, 10)
2022-08-06 06:57:29.107 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.108 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.108 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if (x < 10) else x)
2022-08-06 06:57:29.119 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.119 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.119 | DEBUG    | __main__:run_benchmark:432 - dfin.mask(dfin < 10, 10)
2022-08-06 06:57:29.130 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.131 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.131 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 06:57:29.145 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.145 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.145 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 06:57:29.157 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.157 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.157 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin > 10, 10)
2022-08-06 06:57:29.168 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.168 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.168 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 06:57:29.179 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.180 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.180 | DEBUG    | __main__:run_benchmark:432 - dfin['f1'] = np.where((dfin['f1'] < 10), 10, dfin['f1'])
2022-08-06 06:57:29.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.187 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.187 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 06:57:29.198 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.198 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.198 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 06:57:29.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.210 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.210 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: (x if (x >= 10) else 10))
2022-08-06 06:57:29.221 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.221 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.221 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 06:57:29.232 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.233 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.233 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 06:57:29.244 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.244 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.244 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 06:57:29.255 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.256 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.256 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:57:29.263 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.263 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.263 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin > 10, 10)
2022-08-06 06:57:29.274 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:29.274 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-06 06:57:29.275 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: 10 if x < 10 else x)
2022-08-06 06:57:29.286 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:32.883 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:32.884 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:57:32.893 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:32.893 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:32.893 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 06:57:32.904 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:32.904 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:32.904 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 06:57:32.915 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:32.916 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:32.916 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:57:32.923 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:32.923 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:32.924 | DEBUG    | __main__:run_benchmark:432 - dfin.clip(lower=10)
2022-08-06 06:57:32.935 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:32.935 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:32.935 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:57:32.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:32.943 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:32.943 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:57:32.951 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:32.951 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:32.951 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:57:32.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:32.959 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:32.959 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin < 10)] = 10
2022-08-06 06:57:32.961 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:32.961 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:32.961 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:57:32.968 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:32.969 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:32.969 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:57:32.976 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:32.977 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:32.977 | DEBUG    | __main__:run_benchmark:432 - dfin.where(dfin < 10, 10)
2022-08-06 06:57:32.988 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:32.988 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:32.988 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:57:32.996 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:32.996 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:32.996 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:57:33.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:33.004 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:33.004 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:57:33.011 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:33.011 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:33.011 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:57:33.019 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:33.019 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:33.019 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:57:33.026 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:33.026 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:33.027 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-06 06:57:33.034 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:33.034 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:33.034 | DEBUG    | __main__:run_benchmark:432 - dfin.applymap(lambda x: (x if (x >= 10) else 10))
2022-08-06 06:57:33.045 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:33.045 | DEBUG    | __main__:run_benchmark:431 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-06 06:57:33.045 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin < 10] = 10
2022-08-06 06:57:33.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:33.074 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 06:57:35.130 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.130 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=10 if val>=5 and val<10
2022-08-06 06:57:35.131 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.132 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.132 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (5 if (x < 5) else x)))
2022-08-06 06:57:35.140 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.140 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.140 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (x if (x < 5) else 5)))
2022-08-06 06:57:35.148 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.148 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.148 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].mask((dfin['ftr2'] < 5), 5)
2022-08-06 06:57:35.156 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.156 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.157 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (5 if (x < 5) else x)))
2022-08-06 06:57:35.164 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.164 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.164 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].where((dfin['ftr2'] < 5), 5)
2022-08-06 06:57:35.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.172 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.172 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.172 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.173 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.173 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft3" val=10 if val<10
2022-08-06 06:57:35.173 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.173 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.173 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=10 if val>10
2022-08-06 06:57:35.173 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.173 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.174 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=10 if val>10
2022-08-06 06:57:35.174 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.174 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.174 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (x if (x < 5) else 5)))
2022-08-06 06:57:35.182 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.182 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.182 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (5 if (x < 5) else x)))
2022-08-06 06:57:35.189 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.189 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.189 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=10 if val>10
2022-08-06 06:57:35.190 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.190 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.190 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft3" val=5 if val<5
2022-08-06 06:57:35.190 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.190 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.190 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=10 if val>10
2022-08-06 06:57:35.190 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.190 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.191 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].apply((lambda x: (5 if (x < 5) else x)))
2022-08-06 06:57:35.201 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.202 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.202 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=val if val>=5
2022-08-06 06:57:35.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.202 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.202 | DEBUG    | __main__:run_benchmark:432 - dfin['ftr2'].map((lambda x: (5 if (x < 5) else x)))
2022-08-06 06:57:35.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.210 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.210 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.210 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.210 | DEBUG    | __main__:run_benchmark:431 - Query: for val in "ft2" val=5 if val<5
2022-08-06 06:57:35.210 | DEBUG    | __main__:run_benchmark:432 - #  for val in "ft2" val=10 if val>10
2022-08-06 06:57:35.211 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:35.233 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 06:57:35.233 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 06:57:36.849 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:36.850 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:36.862 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:36.862 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:36.862 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:36.873 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:36.873 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:36.873 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:36.884 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:36.884 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:36.884 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:36.895 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:36.895 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:36.895 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:36.906 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:36.906 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:36.906 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:36.917 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:36.917 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:36.917 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:36.928 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:36.928 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:36.928 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:36.939 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:36.939 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:36.939 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:36.950 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:36.950 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:36.950 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:36.961 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:36.961 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:36.961 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:36.972 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:36.972 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:36.972 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:36.983 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:36.983 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:36.983 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:36.994 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:36.994 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:36.994 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:37.005 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:37.005 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:37.005 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:37.016 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:37.016 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:37.016 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:37.027 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:37.027 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:37.027 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:37.037 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:37.038 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:37.038 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:37.048 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:37.049 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:37.049 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:37.059 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:37.059 | DEBUG    | __main__:run_benchmark:431 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-06 06:57:37.060 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.copy()
2022-08-06 06:57:37.070 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:37.091 | DEBUG    | __main__:run:515 - Number of queries: 25
2022-08-06 06:57:40.812 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.813 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].mask(dfin['inputB'] < 0, 0)
2022-08-06 06:57:40.823 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.823 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.823 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] < 0, 0, dfin['inputB'])
2022-08-06 06:57:40.830 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.830 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.831 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply((lambda x: (0 if (x < 0) else x)))
2022-08-06 06:57:40.838 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.838 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.838 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply((lambda x: (0 if (x < 0) else x)))
2022-08-06 06:57:40.846 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.846 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.846 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where((dfin['inputB'] < 0), 0, dfin['inputB'])
2022-08-06 06:57:40.853 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.854 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.854 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply((lambda x: (0 if (x < 0) else x)))
2022-08-06 06:57:40.861 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.861 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.862 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where((dfin['inputB'] < 0), 0, dfin['inputB'])
2022-08-06 06:57:40.869 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.869 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.869 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where((dfin['inputB'] < 0), 0, dfin['inputB'])
2022-08-06 06:57:40.877 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.877 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.877 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].map((lambda x: (0 if (x < 0) else x)))
2022-08-06 06:57:40.885 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.885 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.885 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where((dfin['inputB'] < 0), 0, dfin['inputB'])
2022-08-06 06:57:40.892 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.893 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.893 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] < 0, 0, dfin['inputB'])
2022-08-06 06:57:40.900 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.900 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.900 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply((lambda x: (0 if (x < 0) else x)))
2022-08-06 06:57:40.908 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.908 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.908 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply(lambda x: 0 if x < 0 else x)
2022-08-06 06:57:40.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.916 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.916 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] < 0, 0, dfin['inputB'])
2022-08-06 06:57:40.924 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.924 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.924 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply((lambda x: (x if (x > 0) else 0)))
2022-08-06 06:57:40.932 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.932 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.932 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['inputB'] < 0, 'inputB'] = 0
2022-08-06 06:57:40.939 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.940 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.940 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].where((dfin['inputB'] > 0), 0)
2022-08-06 06:57:40.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.947 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.948 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where((dfin['inputB'] < 0), 0, dfin['inputB'])
2022-08-06 06:57:40.955 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.955 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.956 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] < 0, 0, dfin['inputB'])
2022-08-06 06:57:40.963 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:40.963 | DEBUG    | __main__:run_benchmark:431 - Query: Set inputB=0 if inputB<0
2022-08-06 06:57:40.963 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = dfin['inputB'].apply((lambda x: 0 if (x < 0) else x))
2022-08-06 06:57:40.971 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:42.961 | DEBUG    | __main__:run_benchmark:431 - Query: if inputB>0 set inputB=0
2022-08-06 06:57:42.962 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['inputB'] > 0, 'inputB'] = 0
2022-08-06 06:57:42.970 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:57:45.214 | DEBUG    | __main__:run_benchmark:431 - Query: 'inputB' = 0 if 'inputB' > 0 in dfin
2022-08-06 06:57:45.215 | DEBUG    | __main__:run_benchmark:432 - #  'inputB' = 1 if 'inputB' < 0 in dfin
2022-08-06 06:57:45.215 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:45.216 | DEBUG    | __main__:run_benchmark:431 - Query: 'inputB' = 0 if 'inputB' > 0 in dfin
2022-08-06 06:57:45.216 | DEBUG    | __main__:run_benchmark:432 - #  'inputC' = 0 if 'inputC' > 0 in dfin
2022-08-06 06:57:45.216 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:45.216 | DEBUG    | __main__:run_benchmark:431 - Query: 'inputB' = 0 if 'inputB' > 0 in dfin
2022-08-06 06:57:45.217 | DEBUG    | __main__:run_benchmark:432 - #  'inputB' = 1 otherwise
2022-08-06 06:57:45.217 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:45.217 | DEBUG    | __main__:run_benchmark:431 - Query: 'inputB' = 0 if 'inputB' > 0 in dfin
2022-08-06 06:57:45.217 | DEBUG    | __main__:run_benchmark:432 - #  'inputB' = 1 if 'inputB' < 0 in dfin
2022-08-06 06:57:45.217 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:45.217 | DEBUG    | __main__:run_benchmark:431 - Query: 'inputB' = 0 if 'inputB' > 0 in dfin
2022-08-06 06:57:45.217 | DEBUG    | __main__:run_benchmark:432 - np.where(dfin['inputB'] > 0, 0, dfin['inputB'])
2022-08-06 06:57:45.226 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:45.226 | DEBUG    | __main__:run_benchmark:431 - Query: 'inputB' = 0 if 'inputB' > 0 in dfin
2022-08-06 06:57:45.226 | DEBUG    | __main__:run_benchmark:432 - dfin['inputB'] = np.where(dfin['inputB'] > 0, 0, dfin['inputB'])
2022-08-06 06:57:45.234 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:57:45.257 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 06:57:45.257 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 06:57:45.257 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 06:57:47.355 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.355 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin == '-']
2022-08-06 06:57:47.383 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.384 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.384 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])]
2022-08-06 06:57:47.407 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.407 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.407 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.astype(str) == '-']
2022-08-06 06:57:47.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.431 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.431 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])]
2022-08-06 06:57:47.455 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.455 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.455 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] == '-']
2022-08-06 06:57:47.477 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.478 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.478 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin == '-']
2022-08-06 06:57:47.501 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.501 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.501 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-').any(axis=1)]
2022-08-06 06:57:47.524 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.524 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.524 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[(dfin['B'] == '-')]
2022-08-06 06:57:47.547 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.547 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.547 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-')]
2022-08-06 06:57:47.570 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.571 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.571 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-').any(axis=1)]
2022-08-06 06:57:47.593 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.594 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.594 | DEBUG    | __main__:run_benchmark:432 - #  in any column and return the count of the number of rows
2022-08-06 06:57:47.594 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.594 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.594 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-')]
2022-08-06 06:57:47.618 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.618 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.618 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:57:47.618 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.619 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.619 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'] == '-']
2022-08-06 06:57:47.641 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.641 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.641 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:57:47.642 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.642 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.642 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin == '-']
2022-08-06 06:57:47.665 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.666 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.666 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-').any(axis=1)]
2022-08-06 06:57:47.688 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.689 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.689 | DEBUG    | __main__:run_benchmark:432 - #  in the column named "B"
2022-08-06 06:57:47.689 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.689 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.689 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])]
2022-08-06 06:57:47.713 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:47.713 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-06 06:57:47.713 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin['B'].isin(['-'])]
2022-08-06 06:57:47.735 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:49.789 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:49.790 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-').any(axis=1)]
2022-08-06 06:57:49.814 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:49.814 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:49.814 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])].dropna(how='all')
2022-08-06 06:57:49.838 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:49.839 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:49.839 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])].dropna(how='all')
2022-08-06 06:57:49.863 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:49.863 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:49.863 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])]
2022-08-06 06:57:49.887 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:49.887 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:49.887 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-').any(axis=1)]
2022-08-06 06:57:49.910 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:49.910 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:49.910 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])].dropna(how='all')
2022-08-06 06:57:49.935 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:49.935 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:49.935 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin['A'] == '-') | (dfin['B'] == '-') | (dfin['C'] == '-') | (dfin['D'] == '-')]
2022-08-06 06:57:49.958 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:49.959 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:49.959 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])]
2022-08-06 06:57:49.982 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:49.982 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:49.983 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:57:49.983 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:49.983 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:49.983 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-').any(axis=1)]
2022-08-06 06:57:50.006 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:50.006 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:50.006 | DEBUG    | __main__:run_benchmark:432 - dfin[(dfin == '-').any(axis=1)]
2022-08-06 06:57:50.029 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:50.029 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:50.029 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])]
2022-08-06 06:57:50.053 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:50.053 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:50.053 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])]
2022-08-06 06:57:50.076 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:50.076 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:50.077 | DEBUG    | __main__:run_benchmark:432 - dfin.loc[dfin.isin(['-'])]
2022-08-06 06:57:50.079 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:50.079 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:50.079 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])]
2022-08-06 06:57:50.103 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:50.103 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:50.103 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])]
2022-08-06 06:57:50.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:50.127 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:50.127 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:57:50.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:50.127 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:50.128 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])].dropna(how='all')
2022-08-06 06:57:50.152 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:50.153 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:50.153 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])].dropna(how='all')
2022-08-06 06:57:50.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:50.177 | DEBUG    | __main__:run_benchmark:431 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-06 06:57:50.177 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin.isin(['-'])].dropna(how='all')
2022-08-06 06:57:50.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:54.935 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows where containing value is equal to '-'
2022-08-06 06:57:54.936 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('-', np.nan).dropna()
2022-08-06 06:57:54.950 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:57:54.972 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 06:57:58.751 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?' in any column
2022-08-06 06:57:58.752 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin != '?']
2022-08-06 06:57:58.818 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:57:58.819 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?' in any column
2022-08-06 06:57:58.819 | DEBUG    | __main__:run_benchmark:432 - dfin[(~ (dfin == '?').any(axis=1))]
2022-08-06 06:57:58.832 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:58:02.113 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:58:02.114 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 06:58:02.132 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:58:02.132 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:58:02.133 | DEBUG    | __main__:run_benchmark:432 - dfin[(~ (dfin['B'] == '?'))]
2022-08-06 06:58:02.156 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:58:02.156 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:58:02.156 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 06:58:02.174 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:58:02.174 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with '?'
2022-08-06 06:58:02.174 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?') | (dfin['C'] == '?')].index)
2022-08-06 06:58:02.187 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:58:05.815 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 06:58:05.816 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 06:58:05.875 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:58:05.875 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 06:58:05.875 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?')].index)
2022-08-06 06:58:05.896 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:58:05.896 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 06:58:05.897 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 06:58:05.913 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:58:05.914 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 06:58:05.914 | DEBUG    | __main__:run_benchmark:432 - dfin = dfin[dfin != '?']
2022-08-06 06:58:05.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:58:05.931 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows with value '?'
2022-08-06 06:58:05.931 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin[(dfin != '?').all(axis=1)]
2022-08-06 06:58:05.943 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:58:06.131 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fd44bfb47a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['Algorithm1', '--results-save-path=experiments/datana_final', '--model-path=/public/databutler/scratch/pandas_mining_06_22/m...
                      │     └ None
                      └ <function _Fire at 0x7fd44c1348c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7fd3b9425b10>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method Algorithm1.run of <__main__.Algorithm1 object at 0x7fd3b9425b10>>

  File "experiments/jigsaw_experiments.py", line 531, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Remove rows with '?' in any column", 'user': 'u13'}, {'query': "Remove rows with '?'", 'user': 'u13'}...
    │               └ {'queries': [{'query': "Remove rows with '?' in any column", 'user': 'u13'}, {'query': "Remove rows with '?'", 'user': 'u13'}...
    └ {'query': "Replace values '?' with numpy NaN in dfin and then drop rows which has any column value missing", 'user': 'u15'}

  File "experiments/jigsaw_experiments.py", line 426, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"]
    │    │               │                    │    └ 0.0
    │    │               │                    └ <__main__.Algorithm1 object at 0x7fd3b9425b10>
    │    │               └ ['#  Use the following code example as a guide to write code for the comment below\n\n#  Return a series containing the "popu...
    │    └ 'code-davinci-002'
    └ <__main__.Algorithm1 object at 0x7fd3b9425b10>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-002', 'prompt': ['#  Use the following code example as a guide to write code for the comment below\n...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fd3b727cdd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7fd3a513a0d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 13:58:06 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fd43baa6f50>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 13:58:06 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '486', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on reques...
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fd3a45f8b50>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeie...

openai.error.RateLimitError: Rate limit reached for default-code-davinci-002 in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-06 06:58:06.157 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-06 06:58:39.266 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with numpy NaN in dfin and then drop rows which has any column value missing
2022-08-06 06:58:39.267 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 06:58:39.281 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:58:40.953 | DEBUG    | __main__:run_benchmark:431 - Query: Replace values '?' with numpy NaN in dfin and then drop rows which has any missing value
2022-08-06 06:58:40.953 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 06:58:40.981 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:58:45.287 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows where values are '?'
2022-08-06 06:58:45.287 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?') | (dfin['C'] == '?') | (dfin['D'] == '?')].index)
2022-08-06 06:58:45.337 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:58:49.259 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 06:58:49.260 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(subset=['B', 'C', 'D'])
2022-08-06 06:58:49.325 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:58:49.325 | DEBUG    | __main__:run_benchmark:431 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-06 06:58:49.325 | DEBUG    | __main__:run_benchmark:432 - dfout = dfin.drop(dfin[dfin.isin(['?'])].dropna(how='all').index)
2022-08-06 06:58:49.339 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:58:54.387 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 06:58:54.388 | DEBUG    | __main__:run_benchmark:432 - dfin.dropna(axis=0, how='any')
2022-08-06 06:58:54.454 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:58:54.455 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-06 06:58:54.455 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[dfin.isin(['?'])].dropna(how='all').index)
2022-08-06 06:58:54.469 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:58:57.802 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:58:57.803 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 06:58:57.823 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:58:57.823 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:58:57.823 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 06:58:57.841 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:58:57.842 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:58:57.842 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 06:58:57.860 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:58:57.860 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:58:57.860 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 06:58:57.879 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:58:57.879 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:58:57.879 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 06:58:57.898 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:58:57.898 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:58:57.898 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan, inplace=True)
2022-08-06 06:58:57.916 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:58:57.916 | DEBUG    | __main__:run_benchmark:431 - Query: drop na values where nan is '?'
2022-08-06 06:58:57.917 | DEBUG    | __main__:run_benchmark:432 - dfin.replace('?', np.nan).dropna()
2022-08-06 06:58:57.930 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:58:57.954 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:59:01.486 | DEBUG    | __main__:run_benchmark:431 - Query: Remove rows having '?'
2022-08-06 06:59:01.486 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?') | (dfin['C'] == '?')].index)
2022-08-06 06:59:01.500 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:59:05.087 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?'
2022-08-06 06:59:05.088 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?') | (dfin['C'] == '?') | (dfin['D'] == '?')].index)
2022-08-06 06:59:05.101 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:59:07.280 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows having '?' in any column
2022-08-06 06:59:07.281 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin == '?').any(axis=1)].index)
2022-08-06 06:59:07.328 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:59:11.155 | DEBUG    | __main__:run_benchmark:431 - Query: select rows if does not contain '?'
2022-08-06 06:59:11.156 | DEBUG    | __main__:run_benchmark:432 - dfin[~dfin.isin(['?']).any(axis=1)]
2022-08-06 06:59:11.169 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:59:14.119 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 06:59:14.120 | DEBUG    | __main__:run_benchmark:432 - dfin[dfin != '?']
2022-08-06 06:59:14.145 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:14.145 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows from 'dfin' that have ?
2022-08-06 06:59:14.145 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?') | (dfin['C'] == '?') | (dfin['D'] == '?')].index)
2022-08-06 06:59:14.158 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:59:18.527 | DEBUG    | __main__:run_benchmark:431 - Query: drop rows from 'dfin' that contain '?'
2022-08-06 06:59:18.528 | DEBUG    | __main__:run_benchmark:432 - dfin.drop(dfin[(dfin['B'] == '?') | (dfin['C'] == '?') | (dfin['D'] == '?')].index)
2022-08-06 06:59:18.578 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:59:18.605 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 06:59:18.605 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:59:18.605 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 06:59:18.605 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:59:18.606 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 06:59:20.360 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:59:20.360 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 06:59:20.426 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:20.426 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:59:20.426 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 06:59:20.456 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:20.457 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:59:20.457 | DEBUG    | __main__:run_benchmark:432 - diff = data.sub(test)
2022-08-06 06:59:20.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:20.487 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:59:20.487 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 06:59:20.517 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:20.517 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:59:20.517 | DEBUG    | __main__:run_benchmark:432 - data_sub = data.subtract(test)
2022-08-06 06:59:20.547 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:20.547 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:59:20.547 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 06:59:20.577 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:20.577 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:59:20.577 | DEBUG    | __main__:run_benchmark:432 - (data - test)
2022-08-06 06:59:20.607 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:20.607 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:59:20.607 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 06:59:20.637 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:20.637 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:59:20.637 | DEBUG    | __main__:run_benchmark:432 - data = data.sub(test)
2022-08-06 06:59:20.661 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:20.661 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:59:20.661 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 06:59:20.691 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:20.691 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:59:20.691 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 06:59:20.721 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:20.721 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:59:20.721 | DEBUG    | __main__:run_benchmark:432 - data_sub = data.sub(test)
2022-08-06 06:59:20.751 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:20.751 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:59:20.751 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 06:59:20.781 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:20.781 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:59:20.781 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 06:59:20.811 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:20.811 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:59:20.811 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 06:59:20.841 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:20.841 | DEBUG    | __main__:run_benchmark:431 - Query: subtract test dataframe from data
2022-08-06 06:59:20.841 | DEBUG    | __main__:run_benchmark:432 - data.loc[(~ data.index.isin(test.index))]
2022-08-06 06:59:20.855 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:59:23.762 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:59:23.763 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 06:59:23.794 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:23.794 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:59:23.794 | DEBUG    | __main__:run_benchmark:432 - data = data.sub(test)
2022-08-06 06:59:23.818 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:23.818 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:59:23.818 | DEBUG    | __main__:run_benchmark:432 - data = data.sub(test)
2022-08-06 06:59:23.842 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:23.842 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:59:23.842 | DEBUG    | __main__:run_benchmark:432 - data = data.sub(test)
2022-08-06 06:59:23.866 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:23.866 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:59:23.866 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 06:59:23.896 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:23.896 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:59:23.896 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 06:59:23.925 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:23.925 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:59:23.926 | DEBUG    | __main__:run_benchmark:432 - data = data.sub(test)
2022-08-06 06:59:23.949 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:23.949 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:59:23.949 | DEBUG    | __main__:run_benchmark:432 - data_sub = data.sub(test)
2022-08-06 06:59:23.979 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:23.979 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:59:23.979 | DEBUG    | __main__:run_benchmark:432 - data = data.sub(test)
2022-08-06 06:59:24.003 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:24.003 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:59:24.003 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 06:59:24.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:24.033 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:59:24.033 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 06:59:24.063 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:24.063 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:59:24.063 | DEBUG    | __main__:run_benchmark:432 - data.sub(test)
2022-08-06 06:59:24.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:24.093 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:59:24.093 | DEBUG    | __main__:run_benchmark:432 - sub = data.sub(test)
2022-08-06 06:59:24.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:24.123 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:59:24.123 | DEBUG    | __main__:run_benchmark:432 - data = data.sub(test)
2022-08-06 06:59:24.147 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:24.147 | DEBUG    | __main__:run_benchmark:431 - Query: sub() test dataframe from data dataframe
2022-08-06 06:59:24.147 | DEBUG    | __main__:run_benchmark:432 - data = data.drop(test.index)
2022-08-06 06:59:24.158 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:59:24.182 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 06:59:25.782 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:25.783 | DEBUG    | __main__:run_benchmark:432 - data.index[data.index.isin(test.index)]
2022-08-06 06:59:25.805 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:25.806 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:25.806 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.intersection(test.index)]
2022-08-06 06:59:25.833 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:25.833 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:25.833 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 06:59:25.859 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:25.860 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:25.860 | DEBUG    | __main__:run_benchmark:432 - data.index[data.index.isin(test.index)].tolist()
2022-08-06 06:59:25.881 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:25.881 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:25.881 | DEBUG    | __main__:run_benchmark:432 - data.index[data.index.isin(test.index)]
2022-08-06 06:59:25.902 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:25.902 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:25.902 | DEBUG    | __main__:run_benchmark:432 - data.index.isin(test.index)
2022-08-06 06:59:25.923 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:25.924 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:25.924 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:59:25.950 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:25.950 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:25.951 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 06:59:25.977 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:25.977 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:25.977 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 06:59:26.004 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:26.004 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:26.004 | DEBUG    | __main__:run_benchmark:432 - data.index.isin(test.index)
2022-08-06 06:59:26.025 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:26.025 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:26.025 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:59:26.052 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:26.052 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:26.052 | DEBUG    | __main__:run_benchmark:432 - data.index[data.index.isin(test.index)]
2022-08-06 06:59:26.073 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:26.074 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:26.074 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 06:59:26.100 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:26.101 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:26.101 | DEBUG    | __main__:run_benchmark:432 - data.index[data.index.isin(test.index)]
2022-08-06 06:59:26.122 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:26.122 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:26.122 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 06:59:26.149 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:26.149 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:26.149 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 06:59:26.175 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:26.176 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:26.176 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:59:26.202 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:26.203 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:26.203 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 06:59:26.229 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:26.229 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:26.230 | DEBUG    | __main__:run_benchmark:432 - data.loc[data.index.isin(test.index)]
2022-08-06 06:59:26.256 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:26.256 | DEBUG    | __main__:run_benchmark:431 - Query: Filter indexes in data that are in test
2022-08-06 06:59:26.257 | DEBUG    | __main__:run_benchmark:432 - data[data.index.isin(test.index)]
2022-08-06 06:59:26.283 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:29.269 | DEBUG    | __main__:run_benchmark:431 - Query: Drop rows in df data that are in df test
2022-08-06 06:59:29.270 | DEBUG    | __main__:run_benchmark:432 - df = data.drop(test.index)
2022-08-06 06:59:29.286 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:59:31.515 | DEBUG    | __main__:run_benchmark:431 - Query: Given data and test, return all rows in data which are not in test
2022-08-06 06:59:31.516 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:59:31.517 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:31.518 | DEBUG    | __main__:run_benchmark:431 - Query: Given data and test, return all rows in data which are not in test
2022-08-06 06:59:31.518 | DEBUG    | __main__:run_benchmark:432 - data[~data.isin(test).all(1)]
2022-08-06 06:59:31.572 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:59:34.073 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return all rows in data which are not in test
2022-08-06 06:59:34.074 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:59:34.075 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:34.075 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return all rows in data which are not in test
2022-08-06 06:59:34.076 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:59:34.076 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:34.076 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return all rows in data which are not in test
2022-08-06 06:59:34.076 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:59:34.076 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:34.076 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return all rows in data which are not in test
2022-08-06 06:59:34.077 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:59:34.077 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:34.077 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return all rows in data which are not in test
2022-08-06 06:59:34.077 | DEBUG    | __main__:run_benchmark:432 - data[~data.isin(test).all(1)]
2022-08-06 06:59:34.093 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:59:36.039 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, select all rows in data which are not in test
2022-08-06 06:59:36.040 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:59:36.041 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:36.041 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, select all rows in data which are not in test
2022-08-06 06:59:36.042 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:59:36.042 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:36.043 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, select all rows in data which are not in test
2022-08-06 06:59:36.043 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:59:36.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:36.043 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, select all rows in data which are not in test
2022-08-06 06:59:36.043 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:59:36.043 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:36.044 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, select all rows in data which are not in test
2022-08-06 06:59:36.044 | DEBUG    | __main__:run_benchmark:432 - #  Use the following code example as a guide to write code for the comment below
2022-08-06 06:59:36.044 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:36.044 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, select all rows in data which are not in test
2022-08-06 06:59:36.044 | DEBUG    | __main__:run_benchmark:432 - data[~data.isin(test).all(1)]
2022-08-06 06:59:36.060 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:59:41.016 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, select all rows in data which are not present in test
2022-08-06 06:59:41.017 | DEBUG    | __main__:run_benchmark:432 - data[~data.isin(test).all(1)]
2022-08-06 06:59:41.033 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:59:44.273 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:59:44.274 | DEBUG    | __main__:run_benchmark:432 - data - test
2022-08-06 06:59:44.305 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:44.306 | DEBUG    | __main__:run_benchmark:431 - Query: Given dataframes data and test, return the difference of data and test
2022-08-06 06:59:44.306 | DEBUG    | __main__:run_benchmark:432 - data.drop(test.index)
2022-08-06 06:59:44.320 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:59:44.344 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 06:59:49.477 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 06:59:49.478 | DEBUG    | __main__:run_benchmark:432 - train = data.drop(data.index[rows])
2022-08-06 06:59:49.482 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:49.482 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 06:59:49.482 | DEBUG    | __main__:run_benchmark:432 - data.drop(train.index)
2022-08-06 06:59:49.485 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:49.485 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 06:59:49.486 | DEBUG    | __main__:run_benchmark:432 - data.drop(train.index, axis=0)
2022-08-06 06:59:49.489 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:49.489 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 06:59:49.489 | DEBUG    | __main__:run_benchmark:432 - data = data.drop(train.index)
2022-08-06 06:59:49.492 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:49.492 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 06:59:49.493 | DEBUG    | __main__:run_benchmark:432 - data = data.drop(train.index)
2022-08-06 06:59:49.496 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:49.496 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 06:59:49.496 | DEBUG    | __main__:run_benchmark:432 - data.drop(train.index, inplace=True)
2022-08-06 06:59:49.499 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:49.499 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 06:59:49.500 | DEBUG    | __main__:run_benchmark:432 - data.drop(train.index)
2022-08-06 06:59:49.503 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:49.503 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 06:59:49.503 | DEBUG    | __main__:run_benchmark:432 - train = data.drop(val_index)
2022-08-06 06:59:49.506 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:49.507 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 06:59:49.507 | DEBUG    | __main__:run_benchmark:432 - data = data[~data.isin(train).all(axis=1)]
2022-08-06 06:59:49.510 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:49.510 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 06:59:49.510 | DEBUG    | __main__:run_benchmark:432 - data.drop(train.index, inplace=True)
2022-08-06 06:59:49.514 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:49.514 | DEBUG    | __main__:run_benchmark:431 - Query: remove rows in 'train' from 'data'
2022-08-06 06:59:49.514 | DEBUG    | __main__:run_benchmark:432 - train = data.drop(test.index)
2022-08-06 06:59:49.529 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:59:49.553 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 06:59:49.553 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 06:59:49.553 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 06:59:53.668 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 06:59:53.669 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.loc[:, '0':'2'].idxmax(axis=1)
2022-08-06 06:59:53.673 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:53.673 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 06:59:53.673 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.loc[:,['0','1','2']].idxmax(axis=1)
2022-08-06 06:59:53.675 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:53.675 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-06 06:59:53.676 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.apply(lambda x: np.argmax([x[0], x[1], x[2]]), axis=1)
2022-08-06 06:59:53.688 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 06:59:56.528 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 06:59:56.529 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-06 06:59:56.531 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:56.531 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 06:59:56.531 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.loc[:,['0','1','2']].idxmax(axis=1)
2022-08-06 06:59:56.533 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 06:59:56.533 | DEBUG    | __main__:run_benchmark:431 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-06 06:59:56.533 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.apply(lambda x: np.argmax([x[0], x[1], x[2]]), axis=1)
2022-08-06 06:59:56.544 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 07:00:01.638 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 07:00:01.639 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.apply(lambda x: x.idxmax(), axis=1)
2022-08-06 07:00:01.652 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:01.652 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 07:00:01.652 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.idxmax(axis=1)
2022-08-06 07:00:01.663 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:01.663 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 07:00:01.663 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.idxmax(axis=1)
2022-08-06 07:00:01.674 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:01.674 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 07:00:01.674 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.idxmax(axis=1)
2022-08-06 07:00:01.685 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:01.686 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 07:00:01.686 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.idxmax(axis=1)
2022-08-06 07:00:01.697 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:01.697 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-06 07:00:01.697 | DEBUG    | __main__:run_benchmark:432 - dfin['Pred'] = dfin.loc[:,0:2].idxmax(axis=1)
2022-08-06 07:00:01.708 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 07:00:01.732 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 07:00:01.733 | DEBUG    | __main__:run:515 - Number of queries: 17
2022-08-06 07:00:05.486 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 07:00:05.487 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 07:00:05.501 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:05.502 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 07:00:05.502 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 07:00:05.515 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:05.516 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 07:00:05.516 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(max, axis=1)
2022-08-06 07:00:05.530 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:05.530 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 07:00:05.530 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.max(dfin, axis=1)
2022-08-06 07:00:05.544 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:05.544 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 07:00:05.544 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1).values
2022-08-06 07:00:05.558 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:05.558 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 07:00:05.558 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 07:00:05.572 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:05.572 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 07:00:05.572 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 07:00:05.586 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:05.586 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 07:00:05.586 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 07:00:05.600 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:05.600 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 07:00:05.601 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.idxmax(1)
2022-08-06 07:00:05.614 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:05.615 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 07:00:05.615 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 07:00:05.629 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:05.629 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 07:00:05.629 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(1)
2022-08-06 07:00:05.643 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:05.643 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 07:00:05.643 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, :-1].max(axis=1)
2022-08-06 07:00:05.657 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:05.657 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 07:00:05.658 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(lambda row: row.max(), axis=1)
2022-08-06 07:00:05.672 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:05.672 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 07:00:05.672 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 07:00:05.686 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:05.686 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 07:00:05.686 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.amax(dfin, axis=1)
2022-08-06 07:00:05.700 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:05.700 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 07:00:05.700 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 07:00:05.714 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:05.715 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-06 07:00:05.715 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[dfin.columns[:-1]].idxmax(axis=1)
2022-08-06 07:00:05.728 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 07:00:08.505 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:08.506 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, 0:5].idxmax(axis=1)
2022-08-06 07:00:08.520 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 07:00:12.469 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:12.470 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.max(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 07:00:12.473 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:12.473 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:12.473 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, 0:5].idxmax(axis=1)
2022-08-06 07:00:12.487 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 07:00:15.475 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.476 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, 0:5].max(axis=1)
2022-08-06 07:00:15.491 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.491 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.491 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.argmax(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 07:00:15.493 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.493 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.493 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].values.max(1)
2022-08-06 07:00:15.494 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.495 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.495 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.max(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 07:00:15.496 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.497 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.497 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 07:00:15.498 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.498 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.499 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 07:00:15.500 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.500 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.500 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(max, axis=1)
2022-08-06 07:00:15.514 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.515 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.515 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 07:00:15.516 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.517 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.517 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.max(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 07:00:15.518 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.518 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.519 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 07:00:15.520 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.520 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.520 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(np.max, axis=1)
2022-08-06 07:00:15.535 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.535 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.535 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 07:00:15.536 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.537 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.537 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.max(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 07:00:15.538 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.539 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.539 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 07:00:15.540 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.540 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.541 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 07:00:15.554 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.555 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.555 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 07:00:15.556 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.556 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.557 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.max(axis=1)
2022-08-06 07:00:15.570 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.570 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.571 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 07:00:15.572 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.572 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.573 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].max(axis=1)
2022-08-06 07:00:15.574 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:15.574 | DEBUG    | __main__:run_benchmark:431 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:15.574 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, 0:5].max(axis=1)
2022-08-06 07:00:15.588 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:20.376 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:20.377 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 07:00:20.379 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:20.379 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:20.379 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 07:00:20.381 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:20.381 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:20.381 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(lambda row: np.argmax([row['0'], row['1'], row['2'], row['3'], row['4']]), axis=1)
2022-08-06 07:00:20.383 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:20.383 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:20.383 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 07:00:20.384 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:20.385 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:20.385 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 07:00:20.386 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:20.386 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:20.386 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.argmax(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 07:00:20.388 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:20.388 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-06 07:00:20.388 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.iloc[:, 0:5].idxmax(axis=1)
2022-08-06 07:00:20.402 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 07:00:24.941 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 07:00:24.942 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(lambda row: np.argmax(row[['0', '1', '2', '3', '4']]), axis=1)
2022-08-06 07:00:24.945 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:24.945 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 07:00:24.946 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.argmax(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 07:00:24.947 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:24.947 | DEBUG    | __main__:run_benchmark:431 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-06 07:00:24.947 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(lambda row: np.argmax([row[0], row[1], row[2], row[3], row[4]]), axis=1)
2022-08-06 07:00:24.962 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 07:00:29.118 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.118 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, ['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 07:00:29.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.123 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.124 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 07:00:29.128 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.129 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.129 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 07:00:29.134 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.135 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.135 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 07:00:29.140 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.141 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.141 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)]
2022-08-06 07:00:29.146 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.147 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.147 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 07:00:29.151 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.151 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.151 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 07:00:29.154 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.155 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.155 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.apply(lambda x: x.idxmax(), axis=1)
2022-08-06 07:00:29.177 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.177 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.178 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 07:00:29.179 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.179 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.179 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 07:00:29.181 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.181 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.181 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 07:00:29.183 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.183 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.183 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, ['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 07:00:29.184 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.185 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.185 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 07:00:29.186 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.186 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.186 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 07:00:29.188 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.188 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.188 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, ['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 07:00:29.190 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.190 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.190 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[dfin.columns[0:4]].idxmax(axis=1)
2022-08-06 07:00:29.204 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.204 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.204 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 07:00:29.206 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.206 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.206 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 07:00:29.207 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.207 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.208 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 07:00:29.209 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:29.209 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-06 07:00:29.209 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[dfin.columns[0:4]].idxmax(axis=1)
2022-08-06 07:00:29.223 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:34.108 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 07:00:34.109 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 07:00:34.111 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:34.111 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 07:00:34.111 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 07:00:34.114 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:34.114 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 07:00:34.114 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, ['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 07:00:34.116 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:34.116 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 07:00:34.117 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 07:00:34.118 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:34.118 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 07:00:34.118 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 07:00:34.120 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:34.120 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 07:00:34.120 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.argmax(dfin[['0', '1', '2', '3', '4']].values, axis=1)
2022-08-06 07:00:34.122 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:34.122 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 07:00:34.122 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 07:00:34.123 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:34.123 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 07:00:34.124 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 07:00:34.125 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:34.125 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 07:00:34.125 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 07:00:34.127 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:34.127 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 07:00:34.127 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 07:00:34.128 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:34.128 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 07:00:34.129 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 07:00:34.130 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:34.130 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 07:00:34.130 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 07:00:34.132 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:34.132 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 07:00:34.132 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, '0':'4'].idxmax(axis=1)
2022-08-06 07:00:34.133 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:34.134 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 07:00:34.134 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 07:00:34.135 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:34.135 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 07:00:34.135 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-06 07:00:34.137 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:34.137 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 07:00:34.137 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = np.argmax(dfin[['0', '1', '2', '3', '4']], axis=1)
2022-08-06 07:00:34.139 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:34.139 | DEBUG    | __main__:run_benchmark:431 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-06 07:00:34.139 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.drop('target', axis=1).idxmax(axis=1)
2022-08-06 07:00:34.153 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 07:00:37.507 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-06 07:00:37.508 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.drop('target', axis=1).idxmax(axis=1)
2022-08-06 07:00:37.560 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 07:00:39.916 | DEBUG    | __main__:run_benchmark:431 - Query: Create new column 'prediction' in dfin and set its value to the index with maximum value among columns 0, 1, 2, 3 and 4
2022-08-06 07:00:39.917 | DEBUG    | __main__:run_benchmark:432 - dfin['prediction'] = dfin.loc[:, 0:4].idxmax(axis=1)
2022-08-06 07:00:39.931 | DEBUG    | __main__:run_benchmark:434 - Eval Result: True
2022-08-06 07:00:39.956 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 07:00:39.956 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 07:00:44.283 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.283 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[dfin.index != 'GoldTarget'].idxmax(axis=1)
2022-08-06 07:00:44.313 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.313 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.313 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[:, dfin.columns != 'GoldTarget'].idxmax(axis=1)
2022-08-06 07:00:44.332 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.332 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.332 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 07:00:44.346 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.346 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.346 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[dfin.index != 'GoldTarget'].idxmax(axis=1)
2022-08-06 07:00:44.358 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.358 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.358 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[:, dfin.columns != 'GoldTarget'].idxmax(axis=1)
2022-08-06 07:00:44.370 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.370 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.370 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 07:00:44.382 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.382 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.382 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 07:00:44.394 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.394 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.394 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[dfin.index != 'GoldTarget'].idxmax(axis=1)
2022-08-06 07:00:44.406 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.407 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.407 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[dfin.index != 'GoldTarget'].idxmax(axis=1)
2022-08-06 07:00:44.419 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.419 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.419 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[dfin.index != 'GoldTarget'].idxmax(axis=1)
2022-08-06 07:00:44.431 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.431 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.431 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 07:00:44.443 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.443 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.443 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 07:00:44.455 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.455 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.455 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 07:00:44.467 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.468 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.468 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 07:00:44.480 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.480 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.480 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[dfin.index != 'GoldTarget'].idxmax(axis=1)
2022-08-06 07:00:44.492 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.492 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.492 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[dfin.index != 'GoldTarget'].idxmax(axis=1)
2022-08-06 07:00:44.504 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.504 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.504 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 07:00:44.516 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.516 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.516 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 07:00:44.528 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.528 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.528 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.loc[:, dfin.columns != 'GoldTarget'].idxmax(axis=1)
2022-08-06 07:00:44.540 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 07:00:44.540 | DEBUG    | __main__:run_benchmark:431 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-06 07:00:44.540 | DEBUG    | __main__:run_benchmark:432 - OurPred = dfin.drop('GoldTarget', axis=1).idxmax(axis=1)
2022-08-06 07:00:44.552 | DEBUG    | __main__:run_benchmark:434 - Eval Result: False
2022-08-06 08:20:56.739 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval1
2022-08-06 08:20:56.739 | DEBUG    | __main__:run:495 - Found 68 benchmarks in PandasEval1
2022-08-06 08:20:56.739 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 08:20:56.739 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.739 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.740 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 08:20:56.740 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.740 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.740 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 08:20:56.741 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.741 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.741 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 08:20:56.741 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.741 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.742 | DEBUG    | __main__:run:525 - Skipping benchmark 3:A0 as result already exists
2022-08-06 08:20:56.742 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 08:20:56.742 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.742 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.742 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 08:20:56.743 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.743 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.743 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 08:20:56.743 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.743 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.743 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 08:20:56.744 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.744 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.744 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 08:20:56.744 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.744 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.745 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 08:20:56.745 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.745 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.745 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 08:20:56.745 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.746 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.746 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 08:20:56.746 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.746 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.746 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A0 as result already exists
2022-08-06 08:20:56.747 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 08:20:56.747 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.747 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.748 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 08:20:56.748 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.748 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.748 | DEBUG    | __main__:run:525 - Skipping benchmark 13:A0 as result already exists
2022-08-06 08:20:56.748 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 08:20:56.749 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.749 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.749 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 08:20:56.749 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.749 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.750 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 08:20:56.750 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.750 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.750 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 08:20:56.751 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.751 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.751 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 08:20:56.751 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.752 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.752 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 08:20:56.752 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.752 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.752 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 08:20:56.753 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.753 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.753 | DEBUG    | __main__:run:508 - Running benchmark 21
2022-08-06 08:20:56.753 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.754 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.754 | DEBUG    | __main__:run:508 - Running benchmark 22
2022-08-06 08:20:56.754 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.754 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.754 | DEBUG    | __main__:run:525 - Skipping benchmark 22:A0 as result already exists
2022-08-06 08:20:56.755 | DEBUG    | __main__:run:508 - Running benchmark 23
2022-08-06 08:20:56.755 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.755 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.755 | DEBUG    | __main__:run:508 - Running benchmark 24
2022-08-06 08:20:56.756 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.756 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.756 | DEBUG    | __main__:run:508 - Running benchmark 25
2022-08-06 08:20:56.756 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.756 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.756 | DEBUG    | __main__:run:508 - Running benchmark 26
2022-08-06 08:20:56.757 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.757 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.757 | DEBUG    | __main__:run:525 - Skipping benchmark 26:A0 as result already exists
2022-08-06 08:20:56.757 | DEBUG    | __main__:run:508 - Running benchmark 27
2022-08-06 08:20:56.757 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.757 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.758 | DEBUG    | __main__:run:508 - Running benchmark 28
2022-08-06 08:20:56.758 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.758 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.758 | DEBUG    | __main__:run:525 - Skipping benchmark 28:A0 as result already exists
2022-08-06 08:20:56.758 | DEBUG    | __main__:run:508 - Running benchmark 29
2022-08-06 08:20:56.758 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.759 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.759 | DEBUG    | __main__:run:508 - Running benchmark 30
2022-08-06 08:20:56.759 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.759 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.759 | DEBUG    | __main__:run:525 - Skipping benchmark 30:A0 as result already exists
2022-08-06 08:20:56.759 | DEBUG    | __main__:run:508 - Running benchmark 31
2022-08-06 08:20:56.760 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.760 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.760 | DEBUG    | __main__:run:508 - Running benchmark 32
2022-08-06 08:20:56.760 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.760 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.760 | DEBUG    | __main__:run:508 - Running benchmark 33
2022-08-06 08:20:56.761 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.761 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.761 | DEBUG    | __main__:run:508 - Running benchmark 34
2022-08-06 08:20:56.761 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.761 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.762 | DEBUG    | __main__:run:525 - Skipping benchmark 34:A0 as result already exists
2022-08-06 08:20:56.762 | DEBUG    | __main__:run:508 - Running benchmark 35
2022-08-06 08:20:56.762 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.762 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.762 | DEBUG    | __main__:run:525 - Skipping benchmark 35:A0 as result already exists
2022-08-06 08:20:56.762 | DEBUG    | __main__:run:508 - Running benchmark 36
2022-08-06 08:20:56.762 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.763 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.763 | DEBUG    | __main__:run:508 - Running benchmark 37
2022-08-06 08:20:56.763 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.763 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.763 | DEBUG    | __main__:run:508 - Running benchmark 38
2022-08-06 08:20:56.763 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.764 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.764 | DEBUG    | __main__:run:508 - Running benchmark 39
2022-08-06 08:20:56.764 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.764 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.764 | DEBUG    | __main__:run:508 - Running benchmark 40
2022-08-06 08:20:56.764 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.765 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.765 | DEBUG    | __main__:run:508 - Running benchmark 41
2022-08-06 08:20:56.765 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.765 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.765 | DEBUG    | __main__:run:525 - Skipping benchmark 41:A0 as result already exists
2022-08-06 08:20:56.765 | DEBUG    | __main__:run:508 - Running benchmark 42
2022-08-06 08:20:56.766 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.766 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.766 | DEBUG    | __main__:run:525 - Skipping benchmark 42:A0 as result already exists
2022-08-06 08:20:56.766 | DEBUG    | __main__:run:508 - Running benchmark 43
2022-08-06 08:20:56.766 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.766 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.767 | DEBUG    | __main__:run:525 - Skipping benchmark 43:A0 as result already exists
2022-08-06 08:20:56.767 | DEBUG    | __main__:run:508 - Running benchmark 44
2022-08-06 08:20:56.767 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.767 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.767 | DEBUG    | __main__:run:525 - Skipping benchmark 44:A0 as result already exists
2022-08-06 08:20:56.767 | DEBUG    | __main__:run:508 - Running benchmark 45
2022-08-06 08:20:56.767 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.768 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.768 | DEBUG    | __main__:run:508 - Running benchmark 46
2022-08-06 08:20:56.768 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.768 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.768 | DEBUG    | __main__:run:508 - Running benchmark 47
2022-08-06 08:20:56.768 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.769 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.769 | DEBUG    | __main__:run:508 - Running benchmark 48
2022-08-06 08:20:56.769 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.769 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.769 | DEBUG    | __main__:run:508 - Running benchmark 49
2022-08-06 08:20:56.770 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.770 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.770 | DEBUG    | __main__:run:525 - Skipping benchmark 49:A0 as result already exists
2022-08-06 08:20:56.770 | DEBUG    | __main__:run:508 - Running benchmark 50
2022-08-06 08:20:56.770 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.770 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.770 | DEBUG    | __main__:run:525 - Skipping benchmark 50:A0 as result already exists
2022-08-06 08:20:56.771 | DEBUG    | __main__:run:508 - Running benchmark 51
2022-08-06 08:20:56.771 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.771 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.771 | DEBUG    | __main__:run:508 - Running benchmark 52
2022-08-06 08:20:56.771 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.771 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.772 | DEBUG    | __main__:run:508 - Running benchmark 53
2022-08-06 08:20:56.772 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.772 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.772 | DEBUG    | __main__:run:508 - Running benchmark 54
2022-08-06 08:20:56.772 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.772 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.773 | DEBUG    | __main__:run:508 - Running benchmark 55
2022-08-06 08:20:56.773 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.773 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.773 | DEBUG    | __main__:run:508 - Running benchmark 56
2022-08-06 08:20:56.773 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.773 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.774 | DEBUG    | __main__:run:508 - Running benchmark 57
2022-08-06 08:20:56.774 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.774 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.774 | DEBUG    | __main__:run:508 - Running benchmark 58
2022-08-06 08:20:56.774 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.774 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.775 | DEBUG    | __main__:run:508 - Running benchmark 59
2022-08-06 08:20:56.775 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.775 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.775 | DEBUG    | __main__:run:508 - Running benchmark 60
2022-08-06 08:20:56.775 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.776 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.776 | DEBUG    | __main__:run:525 - Skipping benchmark 60:A0 as result already exists
2022-08-06 08:20:56.776 | DEBUG    | __main__:run:508 - Running benchmark 62
2022-08-06 08:20:56.776 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.776 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.776 | DEBUG    | __main__:run:508 - Running benchmark 63
2022-08-06 08:20:56.776 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.777 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.777 | DEBUG    | __main__:run:525 - Skipping benchmark 63:A0 as result already exists
2022-08-06 08:20:56.777 | DEBUG    | __main__:run:508 - Running benchmark 64
2022-08-06 08:20:56.777 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.777 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.777 | DEBUG    | __main__:run:508 - Running benchmark 65
2022-08-06 08:20:56.778 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.778 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.778 | DEBUG    | __main__:run:525 - Skipping benchmark 65:A0 as result already exists
2022-08-06 08:20:56.778 | DEBUG    | __main__:run:508 - Running benchmark 66
2022-08-06 08:20:56.778 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.778 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.778 | DEBUG    | __main__:run:525 - Skipping benchmark 66:A0 as result already exists
2022-08-06 08:20:56.779 | DEBUG    | __main__:run:508 - Running benchmark 67
2022-08-06 08:20:56.779 | DEBUG    | __main__:run:509 - Number of Sets: 1
2022-08-06 08:20:56.779 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.779 | DEBUG    | __main__:run:494 - Running benchmark set PandasEval2
2022-08-06 08:20:56.779 | DEBUG    | __main__:run:495 - Found 21 benchmarks in PandasEval2
2022-08-06 08:20:56.779 | DEBUG    | __main__:run:508 - Running benchmark 0
2022-08-06 08:20:56.780 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:56.780 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 08:20:56.780 | DEBUG    | __main__:run:525 - Skipping benchmark 0:A1 as result already exists
2022-08-06 08:20:56.780 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 08:20:56.780 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.780 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 08:20:56.781 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 08:20:56.781 | DEBUG    | __main__:run:525 - Skipping benchmark 0:E2 as result already exists
2022-08-06 08:20:56.781 | DEBUG    | __main__:run:508 - Running benchmark 1
2022-08-06 08:20:56.781 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:56.781 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 08:20:56.782 | DEBUG    | __main__:run:525 - Skipping benchmark 1:A2 as result already exists
2022-08-06 08:20:56.782 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 08:20:56.782 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 08:20:56.782 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:56.782 | DEBUG    | __main__:run:525 - Skipping benchmark 1:C3 as result already exists
2022-08-06 08:20:56.782 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 08:20:56.782 | DEBUG    | __main__:run:525 - Skipping benchmark 1:E7 as result already exists
2022-08-06 08:20:56.783 | DEBUG    | __main__:run:508 - Running benchmark 2
2022-08-06 08:20:56.783 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:56.783 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:56.783 | DEBUG    | __main__:run:525 - Skipping benchmark 2:A1 as result already exists
2022-08-06 08:20:56.783 | DEBUG    | __main__:run:525 - Skipping benchmark 2:A2 as result already exists
2022-08-06 08:20:56.783 | DEBUG    | __main__:run:525 - Skipping benchmark 2:A3 as result already exists
2022-08-06 08:20:56.784 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 08:20:56.784 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D0 as result already exists
2022-08-06 08:20:56.784 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D1 as result already exists
2022-08-06 08:20:56.784 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D2 as result already exists
2022-08-06 08:20:56.784 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D3 as result already exists
2022-08-06 08:20:56.784 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D4 as result already exists
2022-08-06 08:20:56.785 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D5 as result already exists
2022-08-06 08:20:56.785 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D6 as result already exists
2022-08-06 08:20:56.785 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D7 as result already exists
2022-08-06 08:20:56.785 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D8 as result already exists
2022-08-06 08:20:56.785 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D9 as result already exists
2022-08-06 08:20:56.785 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D10 as result already exists
2022-08-06 08:20:56.786 | DEBUG    | __main__:run:525 - Skipping benchmark 2:D11 as result already exists
2022-08-06 08:20:56.786 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 08:20:56.786 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B0 as result already exists
2022-08-06 08:20:56.786 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B1 as result already exists
2022-08-06 08:20:56.786 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B2 as result already exists
2022-08-06 08:20:56.786 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B3 as result already exists
2022-08-06 08:20:56.787 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B6 as result already exists
2022-08-06 08:20:56.787 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B7 as result already exists
2022-08-06 08:20:56.787 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B8 as result already exists
2022-08-06 08:20:56.787 | DEBUG    | __main__:run:525 - Skipping benchmark 2:B9 as result already exists
2022-08-06 08:20:56.787 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 08:20:56.787 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C0 as result already exists
2022-08-06 08:20:56.788 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C1 as result already exists
2022-08-06 08:20:56.788 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C2 as result already exists
2022-08-06 08:20:56.788 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C3 as result already exists
2022-08-06 08:20:56.788 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C4 as result already exists
2022-08-06 08:20:56.788 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C5 as result already exists
2022-08-06 08:20:56.788 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C7 as result already exists
2022-08-06 08:20:56.789 | DEBUG    | __main__:run:525 - Skipping benchmark 2:C8 as result already exists
2022-08-06 08:20:56.789 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 08:20:56.789 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E0 as result already exists
2022-08-06 08:20:56.789 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E1 as result already exists
2022-08-06 08:20:56.789 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E2 as result already exists
2022-08-06 08:20:56.789 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E3 as result already exists
2022-08-06 08:20:56.790 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E4 as result already exists
2022-08-06 08:20:56.790 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E5 as result already exists
2022-08-06 08:20:56.790 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E6 as result already exists
2022-08-06 08:20:56.790 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E7 as result already exists
2022-08-06 08:20:56.790 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E8 as result already exists
2022-08-06 08:20:56.790 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E9 as result already exists
2022-08-06 08:20:56.790 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E10 as result already exists
2022-08-06 08:20:56.791 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E11 as result already exists
2022-08-06 08:20:56.791 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E13 as result already exists
2022-08-06 08:20:56.791 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E14 as result already exists
2022-08-06 08:20:56.791 | DEBUG    | __main__:run:525 - Skipping benchmark 2:E15 as result already exists
2022-08-06 08:20:56.791 | DEBUG    | __main__:run:508 - Running benchmark 3
2022-08-06 08:20:56.791 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:56.792 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 08:20:56.792 | DEBUG    | __main__:run:515 - Number of queries: 11
2022-08-06 08:20:56.792 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D1 as result already exists
2022-08-06 08:20:56.792 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D4 as result already exists
2022-08-06 08:20:56.792 | DEBUG    | __main__:run:525 - Skipping benchmark 3:D7 as result already exists
2022-08-06 08:20:56.792 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:56.793 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 08:20:56.793 | DEBUG    | __main__:run:525 - Skipping benchmark 3:C5 as result already exists
2022-08-06 08:20:56.793 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:56.793 | DEBUG    | __main__:run:508 - Running benchmark 4
2022-08-06 08:20:56.793 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:56.793 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:56.794 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A0 as result already exists
2022-08-06 08:20:56.794 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A3 as result already exists
2022-08-06 08:20:56.794 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A4 as result already exists
2022-08-06 08:20:56.794 | DEBUG    | __main__:run:525 - Skipping benchmark 4:A5 as result already exists
2022-08-06 08:20:56.794 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 08:20:56.794 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 08:20:56.794 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 08:20:56.795 | DEBUG    | __main__:run:525 - Skipping benchmark 4:C5 as result already exists
2022-08-06 08:20:56.795 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:56.795 | DEBUG    | __main__:run:525 - Skipping benchmark 4:E4 as result already exists
2022-08-06 08:20:56.795 | DEBUG    | __main__:run:525 - Skipping benchmark 4:E5 as result already exists
2022-08-06 08:20:56.795 | DEBUG    | __main__:run:508 - Running benchmark 5
2022-08-06 08:20:56.795 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:56.796 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 08:20:56.796 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A0 as result already exists
2022-08-06 08:20:56.796 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A1 as result already exists
2022-08-06 08:20:56.796 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A2 as result already exists
2022-08-06 08:20:56.796 | DEBUG    | __main__:run:525 - Skipping benchmark 5:A3 as result already exists
2022-08-06 08:20:56.796 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 08:20:56.797 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D0 as result already exists
2022-08-06 08:20:56.797 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D1 as result already exists
2022-08-06 08:20:56.797 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D2 as result already exists
2022-08-06 08:20:56.797 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D3 as result already exists
2022-08-06 08:20:56.797 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D4 as result already exists
2022-08-06 08:20:56.797 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D5 as result already exists
2022-08-06 08:20:56.798 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D6 as result already exists
2022-08-06 08:20:56.798 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D7 as result already exists
2022-08-06 08:20:56.798 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D8 as result already exists
2022-08-06 08:20:56.798 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D9 as result already exists
2022-08-06 08:20:56.798 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D10 as result already exists
2022-08-06 08:20:56.798 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D11 as result already exists
2022-08-06 08:20:56.798 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D12 as result already exists
2022-08-06 08:20:56.799 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D13 as result already exists
2022-08-06 08:20:56.799 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D14 as result already exists
2022-08-06 08:20:56.799 | DEBUG    | __main__:run:525 - Skipping benchmark 5:D15 as result already exists
2022-08-06 08:20:56.799 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 08:20:56.799 | DEBUG    | __main__:run:525 - Skipping benchmark 5:B4 as result already exists
2022-08-06 08:20:56.799 | DEBUG    | __main__:run:525 - Skipping benchmark 5:B5 as result already exists
2022-08-06 08:20:56.799 | DEBUG    | __main__:run:525 - Skipping benchmark 5:B6 as result already exists
2022-08-06 08:20:56.800 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:56.800 | DEBUG    | __main__:run:525 - Skipping benchmark 5:C1 as result already exists
2022-08-06 08:20:56.800 | DEBUG    | __main__:run:525 - Skipping benchmark 5:C2 as result already exists
2022-08-06 08:20:56.800 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 08:20:56.800 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E2 as result already exists
2022-08-06 08:20:56.800 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E3 as result already exists
2022-08-06 08:20:56.800 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E4 as result already exists
2022-08-06 08:20:56.801 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E5 as result already exists
2022-08-06 08:20:56.801 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E8 as result already exists
2022-08-06 08:20:56.801 | DEBUG    | __main__:run:525 - Skipping benchmark 5:E9 as result already exists
2022-08-06 08:20:56.801 | DEBUG    | __main__:run:508 - Running benchmark 6
2022-08-06 08:20:56.801 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 08:20:56.801 | DEBUG    | __main__:run:515 - Number of queries: 27
2022-08-06 08:20:56.801 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D11 as result already exists
2022-08-06 08:20:56.802 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D18 as result already exists
2022-08-06 08:20:56.802 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D21 as result already exists
2022-08-06 08:20:56.802 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D22 as result already exists
2022-08-06 08:20:56.802 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D23 as result already exists
2022-08-06 08:20:56.802 | DEBUG    | __main__:run:525 - Skipping benchmark 6:D24 as result already exists
2022-08-06 08:20:56.802 | DEBUG    | __main__:run:515 - Number of queries: 26
2022-08-06 08:20:56.802 | DEBUG    | __main__:run:525 - Skipping benchmark 6:B24 as result already exists
2022-08-06 08:20:56.802 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 08:20:56.803 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 08:20:56.803 | DEBUG    | __main__:run:525 - Skipping benchmark 6:C1 as result already exists
2022-08-06 08:20:56.803 | DEBUG    | __main__:run:508 - Running benchmark 7
2022-08-06 08:20:56.803 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 08:20:56.803 | DEBUG    | __main__:run:515 - Number of queries: 21
2022-08-06 08:20:56.803 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D0 as result already exists
2022-08-06 08:20:56.803 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D1 as result already exists
2022-08-06 08:20:56.804 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D2 as result already exists
2022-08-06 08:20:56.804 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D3 as result already exists
2022-08-06 08:20:56.804 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D4 as result already exists
2022-08-06 08:20:56.804 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D5 as result already exists
2022-08-06 08:20:56.804 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D6 as result already exists
2022-08-06 08:20:56.804 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D7 as result already exists
2022-08-06 08:20:56.804 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D9 as result already exists
2022-08-06 08:20:56.805 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D10 as result already exists
2022-08-06 08:20:56.805 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D11 as result already exists
2022-08-06 08:20:56.805 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D12 as result already exists
2022-08-06 08:20:56.805 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D13 as result already exists
2022-08-06 08:20:56.805 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D14 as result already exists
2022-08-06 08:20:56.805 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D15 as result already exists
2022-08-06 08:20:56.805 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D16 as result already exists
2022-08-06 08:20:56.806 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D17 as result already exists
2022-08-06 08:20:56.806 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D18 as result already exists
2022-08-06 08:20:56.806 | DEBUG    | __main__:run:525 - Skipping benchmark 7:D19 as result already exists
2022-08-06 08:20:56.806 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 08:20:56.806 | DEBUG    | __main__:run:525 - Skipping benchmark 7:A0 as result already exists
2022-08-06 08:20:56.806 | DEBUG    | __main__:run:525 - Skipping benchmark 7:A1 as result already exists
2022-08-06 08:20:56.806 | DEBUG    | __main__:run:525 - Skipping benchmark 7:A2 as result already exists
2022-08-06 08:20:56.806 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 08:20:56.807 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E0 as result already exists
2022-08-06 08:20:56.807 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E1 as result already exists
2022-08-06 08:20:56.807 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E2 as result already exists
2022-08-06 08:20:56.807 | DEBUG    | __main__:run:525 - Skipping benchmark 7:E3 as result already exists
2022-08-06 08:20:56.807 | DEBUG    | __main__:run:508 - Running benchmark 8
2022-08-06 08:20:56.807 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 08:20:56.807 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 08:20:56.808 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C0 as result already exists
2022-08-06 08:20:56.808 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C1 as result already exists
2022-08-06 08:20:56.808 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C2 as result already exists
2022-08-06 08:20:56.808 | DEBUG    | __main__:run:525 - Skipping benchmark 8:C3 as result already exists
2022-08-06 08:20:56.808 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:56.808 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A0 as result already exists
2022-08-06 08:20:56.808 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A2 as result already exists
2022-08-06 08:20:56.809 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A3 as result already exists
2022-08-06 08:20:56.809 | DEBUG    | __main__:run:525 - Skipping benchmark 8:A4 as result already exists
2022-08-06 08:20:56.809 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 08:20:56.809 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D0 as result already exists
2022-08-06 08:20:56.809 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D1 as result already exists
2022-08-06 08:20:56.809 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D2 as result already exists
2022-08-06 08:20:56.809 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D3 as result already exists
2022-08-06 08:20:56.810 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D5 as result already exists
2022-08-06 08:20:56.810 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D6 as result already exists
2022-08-06 08:20:56.810 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D7 as result already exists
2022-08-06 08:20:56.810 | DEBUG    | __main__:run:525 - Skipping benchmark 8:D8 as result already exists
2022-08-06 08:20:56.810 | DEBUG    | __main__:run:508 - Running benchmark 9
2022-08-06 08:20:56.810 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:56.810 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 08:20:56.811 | DEBUG    | __main__:run:525 - Skipping benchmark 9:D2 as result already exists
2022-08-06 08:20:56.811 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 08:20:56.811 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 08:20:56.811 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 08:20:56.811 | DEBUG    | __main__:run:525 - Skipping benchmark 9:A3 as result already exists
2022-08-06 08:20:56.811 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 08:20:56.811 | DEBUG    | __main__:run:525 - Skipping benchmark 9:E0 as result already exists
2022-08-06 08:20:56.811 | DEBUG    | __main__:run:525 - Skipping benchmark 9:E3 as result already exists
2022-08-06 08:20:56.812 | DEBUG    | __main__:run:508 - Running benchmark 10
2022-08-06 08:20:56.812 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:56.812 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.812 | DEBUG    | __main__:run:525 - Skipping benchmark 10:C0 as result already exists
2022-08-06 08:20:56.812 | DEBUG    | __main__:run:515 - Number of queries: 23
2022-08-06 08:20:56.812 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D5 as result already exists
2022-08-06 08:20:56.812 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D6 as result already exists
2022-08-06 08:20:56.813 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D7 as result already exists
2022-08-06 08:20:56.813 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D8 as result already exists
2022-08-06 08:20:56.813 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D9 as result already exists
2022-08-06 08:20:56.813 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D10 as result already exists
2022-08-06 08:20:56.813 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D11 as result already exists
2022-08-06 08:20:56.813 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D12 as result already exists
2022-08-06 08:20:56.813 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D14 as result already exists
2022-08-06 08:20:56.814 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D16 as result already exists
2022-08-06 08:20:56.814 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D17 as result already exists
2022-08-06 08:20:56.814 | DEBUG    | __main__:run:525 - Skipping benchmark 10:D19 as result already exists
2022-08-06 08:20:56.814 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.814 | DEBUG    | __main__:run:525 - Skipping benchmark 10:A0 as result already exists
2022-08-06 08:20:56.814 | DEBUG    | __main__:run:515 - Number of queries: 12
2022-08-06 08:20:56.814 | DEBUG    | __main__:run:525 - Skipping benchmark 10:E0 as result already exists
2022-08-06 08:20:56.815 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.815 | DEBUG    | __main__:run:525 - Skipping benchmark 10:B0 as result already exists
2022-08-06 08:20:56.815 | DEBUG    | __main__:run:508 - Running benchmark 11
2022-08-06 08:20:56.815 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:56.815 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 08:20:56.815 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D4 as result already exists
2022-08-06 08:20:56.815 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D6 as result already exists
2022-08-06 08:20:56.816 | DEBUG    | __main__:run:525 - Skipping benchmark 11:D7 as result already exists
2022-08-06 08:20:56.816 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.816 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 08:20:56.816 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A0 as result already exists
2022-08-06 08:20:56.816 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A1 as result already exists
2022-08-06 08:20:56.816 | DEBUG    | __main__:run:525 - Skipping benchmark 11:A2 as result already exists
2022-08-06 08:20:56.816 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 08:20:56.817 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 08:20:56.817 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B0 as result already exists
2022-08-06 08:20:56.817 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B1 as result already exists
2022-08-06 08:20:56.817 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B2 as result already exists
2022-08-06 08:20:56.817 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B3 as result already exists
2022-08-06 08:20:56.817 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B6 as result already exists
2022-08-06 08:20:56.817 | DEBUG    | __main__:run:525 - Skipping benchmark 11:B7 as result already exists
2022-08-06 08:20:56.817 | DEBUG    | __main__:run:508 - Running benchmark 12
2022-08-06 08:20:56.818 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:56.818 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 08:20:56.818 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.818 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 08:20:56.818 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 08:20:56.818 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 08:20:56.818 | DEBUG    | __main__:run:525 - Skipping benchmark 12:E3 as result already exists
2022-08-06 08:20:56.819 | DEBUG    | __main__:run:508 - Running benchmark 13
2022-08-06 08:20:56.819 | DEBUG    | __main__:run:509 - Number of Sets: 2
2022-08-06 08:20:56.819 | DEBUG    | __main__:run:515 - Number of queries: 3
2022-08-06 08:20:56.819 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.819 | DEBUG    | __main__:run:525 - Skipping benchmark 13:A0 as result already exists
2022-08-06 08:20:56.819 | DEBUG    | __main__:run:508 - Running benchmark 14
2022-08-06 08:20:56.819 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:56.820 | DEBUG    | __main__:run:515 - Number of queries: 10
2022-08-06 08:20:56.820 | DEBUG    | __main__:run:525 - Skipping benchmark 14:D7 as result already exists
2022-08-06 08:20:56.820 | DEBUG    | __main__:run:525 - Skipping benchmark 14:D8 as result already exists
2022-08-06 08:20:56.820 | DEBUG    | __main__:run:515 - Number of queries: 9
2022-08-06 08:20:56.820 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C0 as result already exists
2022-08-06 08:20:56.820 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C1 as result already exists
2022-08-06 08:20:56.820 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C2 as result already exists
2022-08-06 08:20:56.821 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C3 as result already exists
2022-08-06 08:20:56.821 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C4 as result already exists
2022-08-06 08:20:56.821 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C5 as result already exists
2022-08-06 08:20:56.821 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C6 as result already exists
2022-08-06 08:20:56.821 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C7 as result already exists
2022-08-06 08:20:56.821 | DEBUG    | __main__:run:525 - Skipping benchmark 14:C8 as result already exists
2022-08-06 08:20:56.821 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 08:20:56.822 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A0 as result already exists
2022-08-06 08:20:56.822 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A1 as result already exists
2022-08-06 08:20:56.822 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A2 as result already exists
2022-08-06 08:20:56.822 | DEBUG    | __main__:run:525 - Skipping benchmark 14:A4 as result already exists
2022-08-06 08:20:56.822 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 08:20:56.822 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E0 as result already exists
2022-08-06 08:20:56.822 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E1 as result already exists
2022-08-06 08:20:56.823 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E11 as result already exists
2022-08-06 08:20:56.823 | DEBUG    | __main__:run:525 - Skipping benchmark 14:E12 as result already exists
2022-08-06 08:20:56.823 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:56.823 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B3 as result already exists
2022-08-06 08:20:56.823 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B4 as result already exists
2022-08-06 08:20:56.823 | DEBUG    | __main__:run:525 - Skipping benchmark 14:B5 as result already exists
2022-08-06 08:20:56.823 | DEBUG    | __main__:run:508 - Running benchmark 15
2022-08-06 08:20:56.824 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:56.824 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 08:20:56.824 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D2 as result already exists
2022-08-06 08:20:56.824 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D5 as result already exists
2022-08-06 08:20:56.824 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D6 as result already exists
2022-08-06 08:20:56.824 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D7 as result already exists
2022-08-06 08:20:56.824 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D8 as result already exists
2022-08-06 08:20:56.824 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D10 as result already exists
2022-08-06 08:20:56.825 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D11 as result already exists
2022-08-06 08:20:56.825 | DEBUG    | __main__:run:525 - Skipping benchmark 15:D12 as result already exists
2022-08-06 08:20:56.825 | DEBUG    | __main__:run:515 - Number of queries: 22
2022-08-06 08:20:56.825 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B0 as result already exists
2022-08-06 08:20:56.825 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B1 as result already exists
2022-08-06 08:20:56.825 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B4 as result already exists
2022-08-06 08:20:56.825 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B10 as result already exists
2022-08-06 08:20:56.826 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B11 as result already exists
2022-08-06 08:20:56.826 | DEBUG    | __main__:run:525 - Skipping benchmark 15:B18 as result already exists
2022-08-06 08:20:56.826 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 08:20:56.826 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C0 as result already exists
2022-08-06 08:20:56.826 | DEBUG    | __main__:run:525 - Skipping benchmark 15:C4 as result already exists
2022-08-06 08:20:56.826 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 08:20:56.826 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A0 as result already exists
2022-08-06 08:20:56.827 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A2 as result already exists
2022-08-06 08:20:56.827 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A3 as result already exists
2022-08-06 08:20:56.827 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A4 as result already exists
2022-08-06 08:20:56.827 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A5 as result already exists
2022-08-06 08:20:56.827 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A6 as result already exists
2022-08-06 08:20:56.827 | DEBUG    | __main__:run:525 - Skipping benchmark 15:A7 as result already exists
2022-08-06 08:20:56.827 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 08:20:56.828 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E4 as result already exists
2022-08-06 08:20:56.828 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E6 as result already exists
2022-08-06 08:20:56.828 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E8 as result already exists
2022-08-06 08:20:56.828 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E11 as result already exists
2022-08-06 08:20:56.828 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E13 as result already exists
2022-08-06 08:20:56.828 | DEBUG    | __main__:run:525 - Skipping benchmark 15:E14 as result already exists
2022-08-06 08:20:56.828 | DEBUG    | __main__:run:508 - Running benchmark 16
2022-08-06 08:20:56.829 | DEBUG    | __main__:run:509 - Number of Sets: 4
2022-08-06 08:20:56.829 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 08:20:56.829 | DEBUG    | __main__:run:525 - Skipping benchmark 16:B0 as result already exists
2022-08-06 08:20:56.829 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.829 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:56.829 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E0 as result already exists
2022-08-06 08:20:56.829 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E1 as result already exists
2022-08-06 08:20:56.830 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E2 as result already exists
2022-08-06 08:20:56.830 | DEBUG    | __main__:run:525 - Skipping benchmark 16:E3 as result already exists
2022-08-06 08:20:56.830 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 08:20:56.830 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D0 as result already exists
2022-08-06 08:20:56.830 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D1 as result already exists
2022-08-06 08:20:56.830 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D2 as result already exists
2022-08-06 08:20:56.830 | DEBUG    | __main__:run:525 - Skipping benchmark 16:D3 as result already exists
2022-08-06 08:20:56.831 | DEBUG    | __main__:run:508 - Running benchmark 17
2022-08-06 08:20:56.831 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:56.831 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 08:20:56.831 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B0 as result already exists
2022-08-06 08:20:56.831 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B1 as result already exists
2022-08-06 08:20:56.831 | DEBUG    | __main__:run:525 - Skipping benchmark 17:B2 as result already exists
2022-08-06 08:20:56.831 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 08:20:56.831 | DEBUG    | __main__:run:525 - Skipping benchmark 17:C6 as result already exists
2022-08-06 08:20:56.832 | DEBUG    | __main__:run:515 - Number of queries: 7
2022-08-06 08:20:56.832 | DEBUG    | __main__:run:515 - Number of queries: 13
2022-08-06 08:20:56.832 | DEBUG    | __main__:run:525 - Skipping benchmark 17:D11 as result already exists
2022-08-06 08:20:56.832 | DEBUG    | __main__:run:515 - Number of queries: 25
2022-08-06 08:20:56.832 | DEBUG    | __main__:run:525 - Skipping benchmark 17:E14 as result already exists
2022-08-06 08:20:56.832 | DEBUG    | __main__:run:525 - Skipping benchmark 17:E20 as result already exists
2022-08-06 08:20:56.832 | DEBUG    | __main__:run:525 - Skipping benchmark 17:E24 as result already exists
2022-08-06 08:20:56.832 | DEBUG    | __main__:run:508 - Running benchmark 18
2022-08-06 08:20:56.832 | DEBUG    | __main__:run:509 - Number of Sets: 3
2022-08-06 08:20:56.833 | DEBUG    | __main__:run:515 - Number of queries: 6
2022-08-06 08:20:56.833 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A1 as result already exists
2022-08-06 08:20:56.833 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A2 as result already exists
2022-08-06 08:20:56.833 | DEBUG    | __main__:run:525 - Skipping benchmark 18:A5 as result already exists
2022-08-06 08:20:56.833 | DEBUG    | __main__:run:515 - Number of queries: 16
2022-08-06 08:20:56.833 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D0 as result already exists
2022-08-06 08:20:56.833 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D1 as result already exists
2022-08-06 08:20:56.833 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D2 as result already exists
2022-08-06 08:20:56.833 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D7 as result already exists
2022-08-06 08:20:56.834 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D8 as result already exists
2022-08-06 08:20:56.834 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D10 as result already exists
2022-08-06 08:20:56.834 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D12 as result already exists
2022-08-06 08:20:56.834 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D13 as result already exists
2022-08-06 08:20:56.834 | DEBUG    | __main__:run:525 - Skipping benchmark 18:D14 as result already exists
2022-08-06 08:20:56.834 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 08:20:56.834 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E0 as result already exists
2022-08-06 08:20:56.834 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E1 as result already exists
2022-08-06 08:20:56.834 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E2 as result already exists
2022-08-06 08:20:56.834 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E3 as result already exists
2022-08-06 08:20:56.835 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E4 as result already exists
2022-08-06 08:20:56.835 | DEBUG    | __main__:run:525 - Skipping benchmark 18:E6 as result already exists
2022-08-06 08:20:56.835 | DEBUG    | __main__:run:508 - Running benchmark 19
2022-08-06 08:20:56.835 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:56.835 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 08:20:56.835 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 08:20:56.835 | DEBUG    | __main__:run:515 - Number of queries: 8
2022-08-06 08:20:56.835 | DEBUG    | __main__:run:525 - Skipping benchmark 19:D1 as result already exists
2022-08-06 08:20:56.835 | DEBUG    | __main__:run:525 - Skipping benchmark 19:D2 as result already exists
2022-08-06 08:20:56.835 | DEBUG    | __main__:run:515 - Number of queries: 18
2022-08-06 08:20:56.836 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A1 as result already exists
2022-08-06 08:20:56.836 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A8 as result already exists
2022-08-06 08:20:56.836 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A10 as result already exists
2022-08-06 08:20:56.836 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A11 as result already exists
2022-08-06 08:20:56.836 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A12 as result already exists
2022-08-06 08:20:56.836 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A13 as result already exists
2022-08-06 08:20:56.836 | DEBUG    | __main__:run:525 - Skipping benchmark 19:A14 as result already exists
2022-08-06 08:20:56.836 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 08:20:56.836 | DEBUG    | __main__:run:525 - Skipping benchmark 19:E4 as result already exists
2022-08-06 08:20:56.837 | DEBUG    | __main__:run:508 - Running benchmark 20
2022-08-06 08:20:56.837 | DEBUG    | __main__:run:509 - Number of Sets: 5
2022-08-06 08:20:56.837 | DEBUG    | __main__:run:515 - Number of queries: 4
2022-08-06 08:20:56.837 | DEBUG    | __main__:run:525 - Skipping benchmark 20:B1 as result already exists
2022-08-06 08:20:56.837 | DEBUG    | __main__:run:525 - Skipping benchmark 20:B2 as result already exists
2022-08-06 08:20:56.837 | DEBUG    | __main__:run:525 - Skipping benchmark 20:B3 as result already exists
2022-08-06 08:20:56.837 | DEBUG    | __main__:run:515 - Number of queries: 1
2022-08-06 08:20:56.837 | DEBUG    | __main__:run:515 - Number of queries: 17
2022-08-06 08:20:56.837 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D0 as result already exists
2022-08-06 08:20:56.837 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D2 as result already exists
2022-08-06 08:20:56.838 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D3 as result already exists
2022-08-06 08:20:56.838 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D5 as result already exists
2022-08-06 08:20:56.838 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D6 as result already exists
2022-08-06 08:20:56.838 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D7 as result already exists
2022-08-06 08:20:56.838 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D10 as result already exists
2022-08-06 08:20:56.838 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D11 as result already exists
2022-08-06 08:20:56.838 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D12 as result already exists
2022-08-06 08:20:56.838 | DEBUG    | __main__:run:525 - Skipping benchmark 20:D15 as result already exists
2022-08-06 08:20:56.838 | DEBUG    | __main__:run:515 - Number of queries: 5
2022-08-06 08:20:56.839 | DEBUG    | __main__:run:515 - Number of queries: 2
2022-08-06 08:20:56.839 | DEBUG    | __main__:run:525 - Skipping benchmark 20:E0 as result already exists

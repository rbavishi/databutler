2022-08-05 19:57:08.643 | DEBUG    | __main__:run:345 - Running benchmark set PandasEval1
2022-08-05 19:57:08.643 | DEBUG    | __main__:run:346 - Found 68 benchmarks in PandasEval1
2022-08-05 19:57:08.644 | DEBUG    | __main__:run:356 - Running benchmark 0
2022-08-05 19:57:08.644 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:57:08.644 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:57:10.736 | DEBUG    | __main__:run_benchmark:297 - Query: Retain rows from dataframe df1 where value of EPS is not equal to 89
2022-08-05 19:57:10.736 | DEBUG    | __main__:run_benchmark:298 - df2 = df1[df1.EPS != 89]
2022-08-05 19:57:10.752 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:57:10.753 | DEBUG    | __main__:run:356 - Running benchmark 1
2022-08-05 19:57:10.753 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:57:10.753 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:57:11.178 | DEBUG    | __main__:run_benchmark:297 - Query: take first three rows in df1 and assign it to dfout
2022-08-05 19:57:11.179 | DEBUG    | __main__:run_benchmark:298 - dfout = df1.iloc[:3]
2022-08-05 19:57:11.188 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:57:11.188 | DEBUG    | __main__:run:356 - Running benchmark 2
2022-08-05 19:57:11.188 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:57:11.189 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:57:12.038 | DEBUG    | __main__:run_benchmark:297 - Query: Delete the rows of data frame 'df2' from 'df1' and assign the result back to 'df1'
2022-08-05 19:57:12.039 | DEBUG    | __main__:run_benchmark:298 - df1.drop(df2.index, inplace=True)
2022-08-05 19:57:12.050 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:57:12.050 | DEBUG    | __main__:run:356 - Running benchmark 3
2022-08-05 19:57:12.050 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:57:12.051 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:57:12.493 | DEBUG    | __main__:run_benchmark:297 - Query: Given the dataframe df1 and replace all instances of 5 in column 'id' with 1005, column 'idnew' with -1005 and assign it to dfout
2022-08-05 19:57:12.494 | DEBUG    | __main__:run_benchmark:298 - dfout = df1.copy()
2022-08-05 19:57:12.507 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 19:57:12.507 | DEBUG    | __main__:run:356 - Running benchmark 4
2022-08-05 19:57:12.508 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:57:12.508 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:57:13.046 | DEBUG    | __main__:run_benchmark:297 - Query: Delete the rows of data frame 'df2' from 'df1' and assign the result back to 'df2'
2022-08-05 19:57:13.047 | DEBUG    | __main__:run_benchmark:298 - df2 = df1.loc[~df1.isin(df2).all(1)]
2022-08-05 19:57:13.057 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:57:13.058 | DEBUG    | __main__:run:356 - Running benchmark 5
2022-08-05 19:57:13.058 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:57:13.058 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:57:13.653 | DEBUG    | __main__:run_benchmark:297 - Query: Drop rows from dataframe df1 where value of EPS is equal to 89
2022-08-05 19:57:13.654 | DEBUG    | __main__:run_benchmark:298 - df1 = df1.drop(df1[df1['EPS']==89].index)
2022-08-05 19:57:13.665 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:57:13.666 | DEBUG    | __main__:run:356 - Running benchmark 6
2022-08-05 19:57:13.666 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:57:13.666 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:57:14.390 | DEBUG    | __main__:run_benchmark:297 - Query: Apply min-max normalization on df1 and assign the result to dfout
2022-08-05 19:57:14.391 | DEBUG    | __main__:run_benchmark:298 - dfout = df1.apply(lambda x: (x - x.min()) / (x.max() - x.min()))
2022-08-05 19:57:14.402 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:57:14.403 | DEBUG    | __main__:run:356 - Running benchmark 7
2022-08-05 19:57:14.403 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:57:14.403 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:57:15.726 | DEBUG    | __main__:run_benchmark:297 - Query: Apply mean normalization on the columns of df1 and store the result in dfout
2022-08-05 19:57:15.727 | DEBUG    | __main__:run_benchmark:298 - #  Do not change the below lines
2022-08-05 19:57:15.727 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 19:57:15.729 | DEBUG    | __main__:run:356 - Running benchmark 8
2022-08-05 19:57:15.729 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:57:15.729 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:57:16.170 | DEBUG    | __main__:run_benchmark:297 - Query: Select the third value in the STID column of mydata and store it in val
2022-08-05 19:57:16.171 | DEBUG    | __main__:run_benchmark:298 - val = mydata['STID'][2]
2022-08-05 19:57:16.173 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:57:16.174 | DEBUG    | __main__:run:356 - Running benchmark 9
2022-08-05 19:57:16.174 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:57:16.174 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:57:16.292 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Create a new column 'C' in df1 as the sum of the columns 'A' and 'B'", 'user': 'u0'}], 'ios': [{'inpu...
    │               └ {'queries': [{'query': "Create a new column 'C' in df1 as the sum of the columns 'A' and 'B'", 'user': 'u0'}], 'ios': [{'inpu...
    └ {'query': "Create a new column 'C' in df1 as the sum of the columns 'A' and 'B'", 'user': 'u0'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["df1 = pd.DataFrame({'A': {0: 5.0, 1: 0.0, 2: 2.0, 3: 1.0, 4: 9.0, 5: -5.0, 6: 3.0}, 'B': {0: 2.0, 1: 4.0, 2: 6.0, 3: 1.0, 4...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["df1 = pd.DataFrame({'A': {0: 5.0, 1: 0.0, 2: 2.0, 3: 1.0, 4: 9.0, 5: -5.0, 6: 3.0}...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0a51f10>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 02:57:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 02:57:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0a26d90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 19:57:16.319 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 19:57:46.958 | DEBUG    | __main__:run_benchmark:297 - Query: Create a new column 'C' in df1 as the sum of the columns 'A' and 'B'
2022-08-05 19:57:46.959 | DEBUG    | __main__:run_benchmark:298 - df1['C'] = df1['A'] + df1['B']
2022-08-05 19:57:46.970 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:57:46.970 | DEBUG    | __main__:run:356 - Running benchmark 10
2022-08-05 19:57:46.970 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:57:46.970 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:57:47.443 | DEBUG    | __main__:run_benchmark:297 - Query: Select the first three rows of the second column of the mydata and store it in out
2022-08-05 19:57:47.444 | DEBUG    | __main__:run_benchmark:298 - out = mydata.iloc[0:3,1]
2022-08-05 19:57:47.447 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:57:47.447 | DEBUG    | __main__:run:356 - Running benchmark 11
2022-08-05 19:57:47.447 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:57:47.448 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:57:48.037 | DEBUG    | __main__:run_benchmark:297 - Query: Compute the fraction of non-zeros in the score column of the dataframe df1
2022-08-05 19:57:48.037 | DEBUG    | __main__:run_benchmark:298 - nz_frac = df1.score.nnz / len(df1.index)
2022-08-05 19:57:48.040 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 19:57:48.040 | DEBUG    | __main__:run:356 - Running benchmark 12
2022-08-05 19:57:48.040 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:57:48.040 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:57:48.475 | DEBUG    | __main__:run_benchmark:297 - Query: List the unique values of 'C2'
2022-08-05 19:57:48.476 | DEBUG    | __main__:run_benchmark:298 - print(df1['C2'].unique())
2022-08-05 19:57:48.477 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: df1['C2'].unique()

2022-08-05 19:57:48.479 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:57:48.479 | DEBUG    | __main__:run:356 - Running benchmark 13
2022-08-05 19:57:48.479 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:57:48.479 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:57:48.598 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'For each quarter find the subsidiary with top earnings value', 'user': 'u0'}], 'ios': [{'inputs': ["p...
    │               └ {'queries': [{'query': 'For each quarter find the subsidiary with top earnings value', 'user': 'u0'}], 'ios': [{'inputs': ["p...
    └ {'query': 'For each quarter find the subsidiary with top earnings value', 'user': 'u0'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["df1 = pd.DataFrame({'Quarter': {1: 'Q1', 2: 'Q1', 3: 'Q2', 4: 'Q2'}, 'Subsidiary': {1: 'US', 2: 'Kenya', 3: 'US', 4: 'India...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["df1 = pd.DataFrame({'Quarter': {1: 'Q1', 2: 'Q1', 3: 'Q2', 4: 'Q2'}, 'Subsidiary':...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0a26a50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 02:57:48 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 02:57:48 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f09e9dd0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 19:57:48.623 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 19:58:19.464 | DEBUG    | __main__:run_benchmark:297 - Query: For each quarter find the subsidiary with top earnings value
2022-08-05 19:58:19.464 | DEBUG    | __main__:run_benchmark:298 - df1['Earnings'].groupby(df1['Quarter']).max()
2022-08-05 19:58:19.471 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 19:58:19.472 | DEBUG    | __main__:run:356 - Running benchmark 14
2022-08-05 19:58:19.472 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:19.472 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:19.910 | DEBUG    | __main__:run_benchmark:297 - Query: Set the  column 'industry' of dataframe df1 to a value 5
2022-08-05 19:58:19.910 | DEBUG    | __main__:run_benchmark:298 - df1['industry'] = 5
2022-08-05 19:58:19.916 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:58:19.916 | DEBUG    | __main__:run:356 - Running benchmark 15
2022-08-05 19:58:19.916 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:19.916 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:20.413 | DEBUG    | __main__:run_benchmark:297 - Query: Sort the rows by column 'B' in descending order in df1 and assign it to dfout
2022-08-05 19:58:20.414 | DEBUG    | __main__:run_benchmark:298 - dfout = df1.sort_values(by='B', ascending=False)
2022-08-05 19:58:20.422 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:58:20.422 | DEBUG    | __main__:run:356 - Running benchmark 16
2022-08-05 19:58:20.422 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:20.422 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:20.945 | DEBUG    | __main__:run_benchmark:297 - Query: Rename the 'key' column of the dataframe df1 to 'KEY' and return it to dfout
2022-08-05 19:58:20.945 | DEBUG    | __main__:run_benchmark:298 - dfout = df1.rename(columns={'key': 'KEY'})
2022-08-05 19:58:20.954 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:58:20.955 | DEBUG    | __main__:run:356 - Running benchmark 17
2022-08-05 19:58:20.955 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:20.955 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:21.442 | DEBUG    | __main__:run_benchmark:297 - Query: put first two row of df1 in dfout
2022-08-05 19:58:21.442 | DEBUG    | __main__:run_benchmark:298 - dfout = df1.loc[0:1, :]
2022-08-05 19:58:21.443 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 19:58:21.444 | DEBUG    | __main__:run:356 - Running benchmark 18
2022-08-05 19:58:21.444 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:21.444 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:21.948 | DEBUG    | __main__:run_benchmark:297 - Query: put third row of df1 in dfout
2022-08-05 19:58:21.948 | DEBUG    | __main__:run_benchmark:298 - dfout = pd.DataFrame(df1.iloc[2,:])
2022-08-05 19:58:21.956 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 19:58:21.956 | DEBUG    | __main__:run:356 - Running benchmark 19
2022-08-05 19:58:21.956 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:21.957 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:22.783 | DEBUG    | __main__:run_benchmark:297 - Query: put first and third row of df1 in dfout
2022-08-05 19:58:22.783 | DEBUG    | __main__:run_benchmark:298 - dfout = df1.iloc[[0,2]]
2022-08-05 19:58:22.791 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:58:22.792 | DEBUG    | __main__:run:356 - Running benchmark 20
2022-08-05 19:58:22.792 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:22.792 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:23.164 | DEBUG    | __main__:run_benchmark:297 - Query: Remove last three rows from df1 and assign it to dfout
2022-08-05 19:58:23.164 | DEBUG    | __main__:run_benchmark:298 - dfout = df1.iloc[:-3]
2022-08-05 19:58:23.172 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:58:23.173 | DEBUG    | __main__:run:356 - Running benchmark 21
2022-08-05 19:58:23.173 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:23.173 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:23.544 | DEBUG    | __main__:run_benchmark:297 - Query: take last three rows in df1 and assign it to dfout
2022-08-05 19:58:23.544 | DEBUG    | __main__:run_benchmark:298 - dfout = df1.iloc[-3:]
2022-08-05 19:58:23.552 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:58:23.553 | DEBUG    | __main__:run:356 - Running benchmark 22
2022-08-05 19:58:23.553 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:23.553 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:23.927 | DEBUG    | __main__:run_benchmark:297 - Query: count the number of null values in df1 and return it to dfout
2022-08-05 19:58:23.927 | DEBUG    | __main__:run_benchmark:298 - dfout = df1.isnull().sum()
2022-08-05 19:58:23.928 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 19:58:23.929 | DEBUG    | __main__:run:356 - Running benchmark 23
2022-08-05 19:58:23.929 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:23.929 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:24.301 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows with null values in df1 and return it to dfout
2022-08-05 19:58:24.301 | DEBUG    | __main__:run_benchmark:298 - dfout = df1.dropna()
2022-08-05 19:58:24.311 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:58:24.311 | DEBUG    | __main__:run:356 - Running benchmark 24
2022-08-05 19:58:24.312 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:24.312 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:24.869 | DEBUG    | __main__:run_benchmark:297 - Query: replace null values in df1 with 4.0 and return it to dfout
2022-08-05 19:58:24.870 | DEBUG    | __main__:run_benchmark:298 - dfout = df1.fillna(4.0)
2022-08-05 19:58:24.879 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:58:24.880 | DEBUG    | __main__:run:356 - Running benchmark 25
2022-08-05 19:58:24.880 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:24.880 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:25.500 | DEBUG    | __main__:run_benchmark:297 - Query: replace null values in df1 with mean of the column and return it to dfout
2022-08-05 19:58:25.500 | DEBUG    | __main__:run_benchmark:298 - dfout = df1.fillna(df1.mean())
2022-08-05 19:58:25.511 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:58:25.511 | DEBUG    | __main__:run:356 - Running benchmark 26
2022-08-05 19:58:25.512 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:25.512 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:26.012 | DEBUG    | __main__:run_benchmark:297 - Query: find mean and median of columns in df1 and save it to dfout
2022-08-05 19:58:26.013 | DEBUG    | __main__:run_benchmark:298 - dfout = df1.mean()
2022-08-05 19:58:26.018 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 19:58:26.019 | DEBUG    | __main__:run:356 - Running benchmark 27
2022-08-05 19:58:26.019 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:26.019 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:26.547 | DEBUG    | __main__:run_benchmark:297 - Query: Filter rows where there is more than one NaN.
2022-08-05 19:58:26.548 | DEBUG    | __main__:run_benchmark:298 - df1[df1.isnull().sum(axis=1) > 1]
2022-08-05 19:58:26.561 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:58:26.561 | DEBUG    | __main__:run:356 - Running benchmark 28
2022-08-05 19:58:26.561 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:26.562 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:27.526 | DEBUG    | __main__:run_benchmark:297 - Query: Set 'A' as 5 in 6th row of df1
2022-08-05 19:58:27.526 | DEBUG    | __main__:run_benchmark:298 - 
2022-08-05 19:58:27.526 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 19:58:27.527 | DEBUG    | __main__:run:356 - Running benchmark 29
2022-08-05 19:58:27.527 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:27.527 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:27.937 | DEBUG    | __main__:run_benchmark:297 - Query: Remove rows with null values from df1 and return it to dfout
2022-08-05 19:58:27.937 | DEBUG    | __main__:run_benchmark:298 - dfout = df1.dropna()
2022-08-05 19:58:27.946 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:58:27.947 | DEBUG    | __main__:run:356 - Running benchmark 30
2022-08-05 19:58:27.947 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:27.947 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:28.499 | DEBUG    | __main__:run_benchmark:297 - Query: Concatenate two data frames and drop duplicates
2022-08-05 19:58:28.499 | DEBUG    | __main__:run_benchmark:298 - df3 = pd.concat([df1, df2]).drop_duplicates()
2022-08-05 19:58:28.509 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 19:58:28.510 | DEBUG    | __main__:run:356 - Running benchmark 31
2022-08-05 19:58:28.510 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:28.510 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:29.041 | DEBUG    | __main__:run_benchmark:297 - Query: Drop duplicates from dataframe and reindex.
2022-08-05 19:58:29.042 | DEBUG    | __main__:run_benchmark:298 - df2 = df1.drop_duplicates().reset_index(drop=True)
2022-08-05 19:58:29.050 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:58:29.050 | DEBUG    | __main__:run:356 - Running benchmark 32
2022-08-05 19:58:29.051 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:29.051 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:58:29.163 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Transpose the dataframe', 'user': 'u0'}], 'ios': [{'inputs': ["pd.DataFrame({'A': {'a': 1, 'b': 2, 'c...
    │               └ {'queries': [{'query': 'Transpose the dataframe', 'user': 'u0'}], 'ios': [{'inputs': ["pd.DataFrame({'A': {'a': 1, 'b': 2, 'c...
    └ {'query': 'Transpose the dataframe', 'user': 'u0'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["df1 = pd.DataFrame({'A': {'a': 1, 'b': 2, 'c': 3}, 'B': {'a': 4, 'b': 5, 'c': 6}, 'C': {'a': 7, 'b': 8, 'c': 9}})\n\n#  Tra...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["df1 = pd.DataFrame({'A': {'a': 1, 'b': 2, 'c': 3}, 'B': {'a': 4, 'b': 5, 'c': 6}, ...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0a835d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 02:58:29 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 02:58:29 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0a83610>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 19:58:29.167 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 19:58:59.625 | DEBUG    | __main__:run_benchmark:297 - Query: Transpose the dataframe
2022-08-05 19:58:59.626 | DEBUG    | __main__:run_benchmark:298 - df1.T
2022-08-05 19:58:59.669 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:58:59.670 | DEBUG    | __main__:run:356 - Running benchmark 33
2022-08-05 19:58:59.670 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:58:59.671 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:59:00.206 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows where location is 'a'
2022-08-05 19:59:00.206 | DEBUG    | __main__:run_benchmark:298 - df1[df1['location'] == 'a']
2022-08-05 19:59:00.217 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:59:00.217 | DEBUG    | __main__:run:356 - Running benchmark 34
2022-08-05 19:59:00.217 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:59:00.218 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:59:00.765 | DEBUG    | __main__:run_benchmark:297 - Query: Filter the columns from dataframe where type equal to 'float64'
2022-08-05 19:59:00.765 | DEBUG    | __main__:run_benchmark:298 - df1.select_dtypes(include='float64')
2022-08-05 19:59:00.786 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 19:59:00.787 | DEBUG    | __main__:run:356 - Running benchmark 35
2022-08-05 19:59:00.787 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:59:00.787 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:59:01.388 | DEBUG    | __main__:run_benchmark:297 - Query: Check if all the values of column 'C1' in the dataframe contains values 1, 2 or 3.
2022-08-05 19:59:01.388 | DEBUG    | __main__:run_benchmark:298 - df1['C1'].isin([1, 2, 3]).all()
2022-08-05 19:59:01.389 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 19:59:01.390 | DEBUG    | __main__:run:356 - Running benchmark 36
2022-08-05 19:59:01.390 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:59:01.390 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:59:02.091 | DEBUG    | __main__:run_benchmark:297 - Query: Convert the 'foo' column in the dataframe to numeric ignoring the errors.
2022-08-05 19:59:02.091 | DEBUG    | __main__:run_benchmark:298 - pd.to_numeric(df1['foo'], errors='ignore')
2022-08-05 19:59:02.098 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 19:59:02.098 | DEBUG    | __main__:run:356 - Running benchmark 37
2022-08-05 19:59:02.099 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:59:02.099 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:59:02.763 | DEBUG    | __main__:run_benchmark:297 - Query: Convert the 'foo' column in the dataframe to numeric
2022-08-05 19:59:02.764 | DEBUG    | __main__:run_benchmark:298 - df1['foo'] = pd.to_numeric(df1['foo'], errors='coerce')
2022-08-05 19:59:02.771 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:59:02.772 | DEBUG    | __main__:run:356 - Running benchmark 38
2022-08-05 19:59:02.772 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:59:02.772 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:59:02.890 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Move column 'deaths' to be the first column of df", 'user': 'u0'}], 'ios': [{'inputs': ["pd.DataFrame...
    │               └ {'queries': [{'query': "Move column 'deaths' to be the first column of df", 'user': 'u0'}], 'ios': [{'inputs': ["pd.DataFrame...
    └ {'query': "Move column 'deaths' to be the first column of df", 'user': 'u0'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["df = pd.DataFrame({'name': {0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e'}, 'val': {0: 12, 1: 11, 2: 17, 3: 14, 4: 5}, 'deaths': {...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["df = pd.DataFrame({'name': {0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e'}, 'val': {0: 12...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f09e9c50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 02:59:02 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 02:59:02 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0a51b90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 19:59:02.904 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 19:59:33.488 | DEBUG    | __main__:run_benchmark:297 - Query: Move column 'deaths' to be the first column of df
2022-08-05 19:59:33.489 | DEBUG    | __main__:run_benchmark:298 - cols = ['deaths', 'name', 'val', 'ix']
2022-08-05 19:59:33.498 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 19:59:33.499 | DEBUG    | __main__:run:356 - Running benchmark 39
2022-08-05 19:59:33.499 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:59:33.499 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:59:34.130 | DEBUG    | __main__:run_benchmark:297 - Query: Convert column 'time' of df to pandas datetime
2022-08-05 19:59:34.131 | DEBUG    | __main__:run_benchmark:298 - df['time'] = pd.to_datetime(df['time'], format='%H:%M:%S')
2022-08-05 19:59:34.140 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 19:59:34.141 | DEBUG    | __main__:run:356 - Running benchmark 40
2022-08-05 19:59:34.141 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:59:34.141 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:59:34.847 | DEBUG    | __main__:run_benchmark:297 - Query: remove rows with duplicates occuring consecutively in column 'time' of dataframe df
2022-08-05 19:59:34.848 | DEBUG    | __main__:run_benchmark:298 - df.drop_duplicates(subset='time', keep='first', inplace=True)
2022-08-05 19:59:34.855 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 19:59:34.856 | DEBUG    | __main__:run:356 - Running benchmark 41
2022-08-05 19:59:34.856 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:59:34.856 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:59:36.205 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows logged at less than 10 minute 'time' interval in column df
2022-08-05 19:59:36.206 | DEBUG    | __main__:run_benchmark:298 - #  drop rows with missing data
2022-08-05 19:59:36.206 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 19:59:36.210 | DEBUG    | __main__:run:356 - Running benchmark 42
2022-08-05 19:59:36.210 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:59:36.210 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:59:36.853 | DEBUG    | __main__:run_benchmark:297 - Query: Group df1 on column 'b' and keep half of the elements at random
2022-08-05 19:59:36.854 | DEBUG    | __main__:run_benchmark:298 - df1.groupby('b').apply(lambda x: x.sample(frac=0.5))
2022-08-05 19:59:36.866 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 19:59:36.866 | DEBUG    | __main__:run:356 - Running benchmark 43
2022-08-05 19:59:36.866 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 19:59:36.866 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 19:59:37.889 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015", 'user': 'u0'}], 'ios': ...
    │               └ {'queries': [{'query': "In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015", 'user': 'u0'}], 'ios': ...
    └ {'query': "In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015", 'user': 'u0'}

  File "experiments/jigsaw_experiments.py", line 291, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["df = pd.DataFrame({'X': {0: 5, 1: 10, 2: 15, 3: -15, 4: 15, 5: -10}, 'Y': {0: 12, 1: 15, 2: 2000, 3: 3000, 4: -2015, 5: 0}}...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["df = pd.DataFrame({'X': {0: 5, 1: 10, 2: 15, 3: -15, 4: 15, 5: -10}, 'Y': {0: 12, ...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97efd67950>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 02:59:37 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 02:59:37 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f09b8e50>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 19:59:37.912 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:00:08.166 | DEBUG    | __main__:run_benchmark:297 - Query: In column 'X' of dataframe df replace value 15 with 1015 and -15 with -1015
2022-08-05 20:00:08.166 | DEBUG    | __main__:run_benchmark:298 - # In[ ]:
2022-08-05 20:00:08.166 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:00:08.167 | DEBUG    | __main__:run:356 - Running benchmark 44
2022-08-05 20:00:08.167 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:00:08.167 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:00:08.675 | DEBUG    | __main__:run_benchmark:297 - Query: Make columns of df1 same as that of df2
2022-08-05 20:00:08.675 | DEBUG    | __main__:run_benchmark:298 - df1[df2.columns] = df2
2022-08-05 20:00:08.686 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:00:08.687 | DEBUG    | __main__:run:356 - Running benchmark 45
2022-08-05 20:00:08.687 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:00:08.687 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:00:09.695 | DEBUG    | __main__:run_benchmark:297 - Query: Split values in column 'Name' of df by space and add to columns 'First Name' and 'Last Name'
2022-08-05 20:00:09.695 | DEBUG    | __main__:run_benchmark:298 - 
2022-08-05 20:00:09.696 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:00:09.696 | DEBUG    | __main__:run:356 - Running benchmark 46
2022-08-05 20:00:09.696 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:00:09.697 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:00:10.489 | DEBUG    | __main__:run_benchmark:297 - Query: get all rows where 'Name' does not contain 'AB'
2022-08-05 20:00:10.490 | DEBUG    | __main__:run_benchmark:298 - df[~df['Name'].str.contains('AB')]
2022-08-05 20:00:10.500 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:00:10.500 | DEBUG    | __main__:run:356 - Running benchmark 47
2022-08-05 20:00:10.501 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:00:10.501 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:00:11.175 | DEBUG    | __main__:run_benchmark:297 - Query: find 'Marks' of students in 'Subject' Chemistry and Physics
2022-08-05 20:00:11.175 | DEBUG    | __main__:run_benchmark:298 - df[df['Subject'].isin(['Chemistry', 'Physics'])]['Marks']
2022-08-05 20:00:11.177 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:00:11.177 | DEBUG    | __main__:run:356 - Running benchmark 48
2022-08-05 20:00:11.178 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:00:11.178 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:00:12.169 | DEBUG    | __main__:run_benchmark:297 - Query: add all columns in beta to alpha
2022-08-05 20:00:12.170 | DEBUG    | __main__:run_benchmark:298 - #  add all rows in beta to alpha
2022-08-05 20:00:12.170 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:00:12.170 | DEBUG    | __main__:run:356 - Running benchmark 49
2022-08-05 20:00:12.171 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:00:12.171 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:00:13.028 | DEBUG    | __main__:run_benchmark:297 - Query: for each student, get a list of scores obtained
2022-08-05 20:00:13.028 | DEBUG    | __main__:run_benchmark:298 - df_student_score = df.groupby('student')['score'].apply(list).reset_index(name='score_list')
2022-08-05 20:00:13.031 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:00:13.032 | DEBUG    | __main__:run:356 - Running benchmark 50
2022-08-05 20:00:13.032 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:00:13.032 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:00:13.416 | DEBUG    | __main__:run_benchmark:297 - Query: for every 'student' find maximum 'score' in any 'subject'
2022-08-05 20:00:13.416 | DEBUG    | __main__:run_benchmark:298 - df.groupby('student').score.max()
2022-08-05 20:00:13.418 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:00:13.418 | DEBUG    | __main__:run:356 - Running benchmark 51
2022-08-05 20:00:13.419 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:00:13.419 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:00:14.557 | DEBUG    | __main__:run_benchmark:297 - Query: reorder the columns so that they are sorted
2022-08-05 20:00:14.557 | DEBUG    | __main__:run_benchmark:298 - #  reorder the rows so that they are sorted
2022-08-05 20:00:14.557 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:00:14.558 | DEBUG    | __main__:run:356 - Running benchmark 52
2022-08-05 20:00:14.558 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:00:14.558 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:00:15.169 | DEBUG    | __main__:run_benchmark:297 - Query: remove rows whose indices are duplicated (keeping first)
2022-08-05 20:00:15.169 | DEBUG    | __main__:run_benchmark:298 - df = df[~df.index.duplicated(keep='first')]
2022-08-05 20:00:15.175 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:00:15.176 | DEBUG    | __main__:run:356 - Running benchmark 53
2022-08-05 20:00:15.176 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:00:15.176 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:00:15.713 | DEBUG    | __main__:run_benchmark:297 - Query: convert index to a column
2022-08-05 20:00:15.713 | DEBUG    | __main__:run_benchmark:298 - df.reset_index(level=0, inplace=True)
2022-08-05 20:00:15.722 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:00:15.723 | DEBUG    | __main__:run:356 - Running benchmark 54
2022-08-05 20:00:15.723 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:00:15.723 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:00:17.062 | DEBUG    | __main__:run_benchmark:297 - Query: For every row in df1, update 'common' column to True if value in column 'A' of df1 also lies in column 'B' of df2
2022-08-05 20:00:17.062 | DEBUG    | __main__:run_benchmark:298 - #  Write a Pandas program to count the number of rows and columns of a DataFrame.
2022-08-05 20:00:17.062 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:00:17.063 | DEBUG    | __main__:run:356 - Running benchmark 55
2022-08-05 20:00:17.063 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:00:17.063 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:00:17.994 | DEBUG    | __main__:run_benchmark:297 - Query: make values in 'common' of df2 to False if value in column 'B' of df2 do not lie in column 'A' of df1
2022-08-05 20:00:17.994 | DEBUG    | __main__:run_benchmark:298 - df2.loc[~df2['B'].isin(df1['A']), 'common'] = False
2022-08-05 20:00:18.003 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:00:18.003 | DEBUG    | __main__:run:356 - Running benchmark 56
2022-08-05 20:00:18.003 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:00:18.004 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:00:18.115 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Remove substring 'Name:' from column 'country' of df", 'user': 'u0'}], 'ios': [{'inputs': ["pd.DataFr...
    │               └ {'queries': [{'query': "Remove substring 'Name:' from column 'country' of df", 'user': 'u0'}], 'ios': [{'inputs': ["pd.DataFr...
    └ {'query': "Remove substring 'Name:' from column 'country' of df", 'user': 'u0'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["df = pd.DataFrame({'country': {0: 'Name:US', 1: 'FR', 2: 'Name:DE', 3: 'CN'}, 'city': {0: 'Cal', 1: 'PAR', 2: 'BER', 3: 'SH...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["df = pd.DataFrame({'country': {0: 'Name:US', 1: 'FR', 2: 'Name:DE', 3: 'CN'}, 'cit...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f09b8290>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:00:18 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:00:18 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f09b8f10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:00:18.119 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:00:48.261 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Remove substring 'Name:' from column 'country' of df", 'user': 'u0'}], 'ios': [{'inputs': ["pd.DataFr...
    │               └ {'queries': [{'query': "Remove substring 'Name:' from column 'country' of df", 'user': 'u0'}], 'ios': [{'inputs': ["pd.DataFr...
    └ {'query': "Remove substring 'Name:' from column 'country' of df", 'user': 'u0'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["df = pd.DataFrame({'country': {0: 'Name:US', 1: 'FR', 2: 'Name:DE', 3: 'CN'}, 'city': {0: 'Cal', 1: 'PAR', 2: 'BER', 3: 'SH...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["df = pd.DataFrame({'country': {0: 'Name:US', 1: 'FR', 2: 'Name:DE', 3: 'CN'}, 'cit...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f09b9a90>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:00:48 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:00:48 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0a2a890>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:00:48.266 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:01:18.867 | DEBUG    | __main__:run_benchmark:297 - Query: Remove substring 'Name:' from column 'country' of df
2022-08-05 20:01:18.867 | DEBUG    | __main__:run_benchmark:298 - df['country'] = df['country'].str.replace(r'^Name:', '')
2022-08-05 20:01:18.874 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:01:18.874 | DEBUG    | __main__:run:356 - Running benchmark 57
2022-08-05 20:01:18.875 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:01:18.875 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:01:19.532 | DEBUG    | __main__:run_benchmark:297 - Query: Pick out the rows of df where 'a' not eq 4 and 'b' gt 3 and assign to dfout
2022-08-05 20:01:19.533 | DEBUG    | __main__:run_benchmark:298 - dfout = df[(df['a'] != 4) & (df['b'] > 3)]
2022-08-05 20:01:19.542 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:01:19.543 | DEBUG    | __main__:run:356 - Running benchmark 58
2022-08-05 20:01:19.543 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:01:19.543 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:01:20.065 | DEBUG    | __main__:run_benchmark:297 - Query: Update column 'present' to True in dataframe df where string 'dog' occurs inside column 'pet'
2022-08-05 20:01:20.066 | DEBUG    | __main__:run_benchmark:298 - df.loc[df['pet'].str.contains('dog'), 'present'] = True
2022-08-05 20:01:20.074 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:01:20.075 | DEBUG    | __main__:run:356 - Running benchmark 59
2022-08-05 20:01:20.075 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:01:20.075 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:01:21.433 | DEBUG    | __main__:run_benchmark:297 - Query: Increase 'count' column by 1 when column 'pet' contains substring 'dog' or 'cat'
2022-08-05 20:01:21.434 | DEBUG    | __main__:run_benchmark:298 - df.loc[df['pet'].str.contains('dog|cat'), 'count'] += 1
2022-08-05 20:01:21.442 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:01:21.443 | DEBUG    | __main__:run:356 - Running benchmark 60
2022-08-05 20:01:21.443 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:01:21.443 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:01:22.360 | DEBUG    | __main__:run_benchmark:297 - Query: For the series data with multiple indices, create dataframe df with columns as the outermost level of index
2022-08-05 20:01:22.361 | DEBUG    | __main__:run_benchmark:298 - df = pd.DataFrame(data, index=index)
2022-08-05 20:01:22.363 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:01:22.364 | DEBUG    | __main__:run:356 - Running benchmark 62
2022-08-05 20:01:22.364 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:01:22.364 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:01:23.261 | DEBUG    | __main__:run_benchmark:297 - Query: compute number of times 'mouse' is present in dataframe df
2022-08-05 20:01:23.262 | DEBUG    | __main__:run_benchmark:298 - #  compute number of times 'dog' is present in dataframe df
2022-08-05 20:01:23.263 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:01:23.265 | DEBUG    | __main__:run:356 - Running benchmark 63
2022-08-05 20:01:23.265 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:01:23.265 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:01:23.805 | DEBUG    | __main__:run_benchmark:297 - Query: compute number rows in which 'mouse' is present in dataframe df
2022-08-05 20:01:23.806 | DEBUG    | __main__:run_benchmark:298 - print(df.pet1.str.contains('mouse').sum())
2022-08-05 20:01:23.807 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: df.pet1.str.contains('mouse').sum()

2022-08-05 20:01:23.809 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:01:23.810 | DEBUG    | __main__:run:356 - Running benchmark 64
2022-08-05 20:01:23.810 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:01:23.810 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:01:24.466 | DEBUG    | __main__:run_benchmark:297 - Query: find number of elements in column 'phone' of df which are comprised totally of digits
2022-08-05 20:01:24.466 | DEBUG    | __main__:run_benchmark:298 - df['phone'].str.isdigit().sum()
2022-08-05 20:01:24.469 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:01:24.469 | DEBUG    | __main__:run:356 - Running benchmark 65
2022-08-05 20:01:24.470 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:01:24.470 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:01:25.597 | DEBUG    | __main__:run_benchmark:297 - Query: Select the rows of df where column 'X' lies in integers between inclusive 4-10
2022-08-05 20:01:25.598 | DEBUG    | __main__:run_benchmark:298 - s1 = df[(df['X']>=4) & (df['X']<=10)]
2022-08-05 20:01:25.615 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:01:25.616 | DEBUG    | __main__:run:356 - Running benchmark 66
2022-08-05 20:01:25.616 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:01:25.616 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:01:27.556 | DEBUG    | __main__:run_benchmark:297 - Query: Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-05 20:01:27.557 | DEBUG    | __main__:run_benchmark:298 - #  Select the rows of df where column 'Y' lies in integers between inclusive 4-10 or 14-20
2022-08-05 20:01:27.557 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:01:27.560 | DEBUG    | __main__:run:356 - Running benchmark 67
2022-08-05 20:01:27.560 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:01:27.560 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:01:28.731 | DEBUG    | __main__:run_benchmark:297 - Query: Change the type of column 'colA' of df to 'float32'
2022-08-05 20:01:28.731 | DEBUG    | __main__:run_benchmark:298 - #  Change the type of column 'colA' of df to 'float64'
2022-08-05 20:01:28.731 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:01:28.732 | DEBUG    | __main__:run:345 - Running benchmark set PandasEval2
2022-08-05 20:01:28.732 | DEBUG    | __main__:run:346 - Found 21 benchmarks in PandasEval2
2022-08-05 20:01:28.733 | DEBUG    | __main__:run:356 - Running benchmark 0
2022-08-05 20:01:28.733 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:01:28.733 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:01:29.429 | DEBUG    | __main__:run_benchmark:297 - Query: Rename column 'a' to 'Person Name' and column 'b' to 'Credit' in dfin and assign to dfout
2022-08-05 20:01:29.429 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin.rename(columns={'a': 'Person Name', 'b': 'Credit'})
2022-08-05 20:01:29.438 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:01:30.604 | DEBUG    | __main__:run_benchmark:297 - Query: Given a dataframe dfin, rename the column 'a' to 'Person Name' and 'b' to 'Credit'
2022-08-05 20:01:30.605 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.rename(columns={'a': 'Person Name', 'b': 'Credit'})
2022-08-05 20:01:30.613 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:01:31.292 | DEBUG    | __main__:run_benchmark:297 - Query: Change column name 'a' to 'Person Name' and column name 'b' to 'Credit'
2022-08-05 20:01:31.292 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.rename(columns={'a': 'Person Name', 'b': 'Credit'})
2022-08-05 20:01:31.298 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:01:31.299 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:01:31.966 | DEBUG    | __main__:run_benchmark:297 - Query: rename column 'a' to 'Person Name' and column 'b' to 'Credit' in input dataframe 'dfin'
2022-08-05 20:01:31.967 | DEBUG    | __main__:run_benchmark:298 - dfin.rename(columns={'a':'Person Name','b':'Credit'}, inplace=True)
2022-08-05 20:01:31.974 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:01:32.633 | DEBUG    | __main__:run_benchmark:297 - Query: rename column 'a' to 'Person Name' and column 'b' to 'Credit'
2022-08-05 20:01:32.634 | DEBUG    | __main__:run_benchmark:298 - dfin.rename(columns={'a': 'Person Name', 'b': 'Credit'})
2022-08-05 20:01:32.643 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:01:33.321 | DEBUG    | __main__:run_benchmark:297 - Query: Rename 'a' to 'Person Name' and 'b' to 'Credit'
2022-08-05 20:01:33.322 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.rename(columns={'a':'Person Name', 'b':'Credit'})
2022-08-05 20:01:33.329 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:01:34.449 | DEBUG    | __main__:run_benchmark:297 - Query: rename column 'a' to 'Person Name' and 'b' to 'Credit'
2022-08-05 20:01:34.450 | DEBUG    | __main__:run_benchmark:298 - #  print the dataframe
2022-08-05 20:01:34.450 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:01:35.125 | DEBUG    | __main__:run_benchmark:297 - Query: rename only column 'a' to 'Person Name' and 'b' to 'Credit'
2022-08-05 20:01:35.126 | DEBUG    | __main__:run_benchmark:298 - dfin.rename(columns={'a': 'Person Name', 'b': 'Credit'})
2022-08-05 20:01:35.135 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:01:35.824 | DEBUG    | __main__:run_benchmark:297 - Query: Change column names from 'a' to 'Person Name' and 'b' to 'Credit'
2022-08-05 20:01:35.825 | DEBUG    | __main__:run_benchmark:298 - df = df.rename(columns={'a': 'Person Name', 'b': 'Credit'})
2022-08-05 20:01:35.828 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:01:36.489 | DEBUG    | __main__:run_benchmark:297 - Query: change 'a' to 'Person Name' and 'b' to 'Credit'
2022-08-05 20:01:36.490 | DEBUG    | __main__:run_benchmark:298 - dfin.rename(columns={'a': 'Person Name', 'b': 'Credit'})
2022-08-05 20:01:36.500 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:01:36.500 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:01:37.218 | DEBUG    | __main__:run_benchmark:297 - Query: Rename column 'a' to 'Person Name' and column 'b' to 'Credit'
2022-08-05 20:01:37.219 | DEBUG    | __main__:run_benchmark:298 - dfin.rename(columns={'a':'Person Name', 'b':'Credit'}, inplace=True)
2022-08-05 20:01:37.227 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:01:37.228 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:01:37.346 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 48.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Rename column 'a' to 'Person Name' and 'b' to 'Credit'", 'user': 'u10'}, {'query': "Rename column a t...
    │               └ {'queries': [{'query': "Rename column 'a' to 'Person Name' and 'b' to 'Credit'", 'user': 'u10'}, {'query': "Rename column a t...
    └ {'query': "Rename column 'a' to 'Person Name' and 'b' to 'Credit'", 'user': 'u10'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'a': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter'}, 'b': {0: 100, 1: 200, 2: 300, 3: 400...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'a': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Pete...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f095d790>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:01:37 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:01:37 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0974690>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 48.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:01:37.370 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:02:08.074 | DEBUG    | __main__:run_benchmark:297 - Query: Rename column 'a' to 'Person Name' and 'b' to 'Credit'
2022-08-05 20:02:08.074 | DEBUG    | __main__:run_benchmark:298 - dfin.rename(columns={'a': 'Person Name', 'b': 'Credit'}, inplace=True)
2022-08-05 20:02:08.082 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:08.201 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 52.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Rename column 'a' to 'Person Name' and 'b' to 'Credit'", 'user': 'u10'}, {'query': "Rename column a t...
    │               └ {'queries': [{'query': "Rename column 'a' to 'Person Name' and 'b' to 'Credit'", 'user': 'u10'}, {'query': "Rename column a t...
    └ {'query': "Rename column a to 'Person Name' and b to 'Credit'", 'user': 'u17'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'a': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Peter'}, 'b': {0: 100, 1: 200, 2: 300, 3: 400...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'a': {0: 'John', 1: 'Michael', 2: 'Tom', 3: 'James', 4: 'Pete...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0974710>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:02:08 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:02:08 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f09b9990>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 52.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:02:08.225 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:02:38.933 | DEBUG    | __main__:run_benchmark:297 - Query: Rename column a to 'Person Name' and b to 'Credit'
2022-08-05 20:02:38.934 | DEBUG    | __main__:run_benchmark:298 - dfin.rename(columns={'a': 'Person Name', 'b': 'Credit'}, inplace=True)
2022-08-05 20:02:38.942 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:39.561 | DEBUG    | __main__:run_benchmark:297 - Query: Rename column 'a' to 'Person Name' and 'b' to 'Credit', and keep the rest same
2022-08-05 20:02:39.562 | DEBUG    | __main__:run_benchmark:298 - dfin.rename(columns={'a': 'Person Name', 'b': 'Credit'}, inplace=True)
2022-08-05 20:02:39.570 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:39.570 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:02:40.223 | DEBUG    | __main__:run_benchmark:297 - Query: rename 'a' to 'Person Name' and 'b' to 'Credit'
2022-08-05 20:02:40.223 | DEBUG    | __main__:run_benchmark:298 - dfin.rename(columns={'a': 'Person Name', 'b': 'Credit'})
2022-08-05 20:02:40.233 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:40.882 | DEBUG    | __main__:run_benchmark:297 - Query: Chang column 'a' to 'Person Name' and 'b' to 'Credit'
2022-08-05 20:02:40.883 | DEBUG    | __main__:run_benchmark:298 - dfin.rename(columns={'a': 'Person Name', 'b': 'Credit'}, inplace=True)
2022-08-05 20:02:40.890 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:41.395 | DEBUG    | __main__:run_benchmark:297 - Query: change column one name of dfin to 'Person Name'
2022-08-05 20:02:41.396 | DEBUG    | __main__:run_benchmark:298 - dfin.rename(columns={'a': 'Person Name'}, inplace=True)
2022-08-05 20:02:41.411 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:02:41.412 | DEBUG    | __main__:run:356 - Running benchmark 1
2022-08-05 20:02:41.412 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:02:41.412 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:02:42.343 | DEBUG    | __main__:run_benchmark:297 - Query: Filter rows where value1 is divisible by 3 in dfin and assign to dfout
2022-08-05 20:02:42.343 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[dfin['value1'].isin(range(0, 50, 3))]
2022-08-05 20:02:42.358 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:02:42.742 | DEBUG    | __main__:run_benchmark:297 - Query: Filter rows in which the column named 'value1' is a multiple of 3
2022-08-05 20:02:42.743 | DEBUG    | __main__:run_benchmark:298 - dfin[dfin['value1'] % 3 == 0]
2022-08-05 20:02:42.751 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:43.499 | DEBUG    | __main__:run_benchmark:297 - Query: Given a dataframe dfin, select all rows where 'value1' is divisible by 3
2022-08-05 20:02:43.499 | DEBUG    | __main__:run_benchmark:298 - dfin[dfin['value1'].apply(lambda x: x%3 == 0)]
2022-08-05 20:02:43.508 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:44.109 | DEBUG    | __main__:run_benchmark:297 - Query: Filter rows where 'value1' is divisible by 3
2022-08-05 20:02:44.110 | DEBUG    | __main__:run_benchmark:298 - dfin[dfin['value1'] % 3 == 0]
2022-08-05 20:02:44.118 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:44.119 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:02:44.617 | DEBUG    | __main__:run_benchmark:297 - Query: filter rows where column 'A' modulus 4 equals 1
2022-08-05 20:02:44.617 | DEBUG    | __main__:run_benchmark:298 - dfin[dfin['A']%4==1]
2022-08-05 20:02:44.626 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:45.127 | DEBUG    | __main__:run_benchmark:297 - Query: Filter rows of column A whose values % 4 give 1
2022-08-05 20:02:45.127 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[dfin['A'] % 4 == 1]
2022-08-05 20:02:45.136 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:45.777 | DEBUG    | __main__:run_benchmark:297 - Query: Keep row if value in column A divided by 4 gives a remainder 1
2022-08-05 20:02:45.778 | DEBUG    | __main__:run_benchmark:298 - dfout = df.loc[df['A'] % 4 == 1]
2022-08-05 20:02:45.780 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:02:46.299 | DEBUG    | __main__:run_benchmark:297 - Query: Choose rows such that x%4=1 in column A
2022-08-05 20:02:46.300 | DEBUG    | __main__:run_benchmark:298 - dfin['A'] % 4 == 1
2022-08-05 20:02:46.312 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:02:46.811 | DEBUG    | __main__:run_benchmark:297 - Query: Choose rows such that A%4=1 in column A
2022-08-05 20:02:46.811 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['A'] % 4 == 1]
2022-08-05 20:02:46.821 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:47.366 | DEBUG    | __main__:run_benchmark:297 - Query: 'Get rows with column 'A' leaving remainder 1 when divided by 4
2022-08-05 20:02:47.367 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['A'] % 4 == 1]
2022-08-05 20:02:47.376 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:47.928 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows where 'A' mod 4 is not 1
2022-08-05 20:02:47.928 | DEBUG    | __main__:run_benchmark:298 - dfin.drop(dfin[dfin['A']%4 != 1].index)
2022-08-05 20:02:47.937 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:48.608 | DEBUG    | __main__:run_benchmark:297 - Query: select rows where column 'A' modulus 4 is equal to 1
2022-08-05 20:02:48.609 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['A'] % 4 == 1]
2022-08-05 20:02:48.618 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:48.619 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-05 20:02:49.126 | DEBUG    | __main__:run_benchmark:297 - Query: Get rows from dfin where 'column1' is even
2022-08-05 20:02:49.127 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['column1'] % 2 == 0]
2022-08-05 20:02:49.136 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:49.693 | DEBUG    | __main__:run_benchmark:297 - Query: get rows whose column1 is divisible by 2
2022-08-05 20:02:49.693 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['column1'] % 2 == 0]
2022-08-05 20:02:49.702 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:49.703 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:02:50.295 | DEBUG    | __main__:run_benchmark:297 - Query: select rows of cells where column'colA' mod 5 is 0
2022-08-05 20:02:50.295 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['colA'] % 5 == 0]
2022-08-05 20:02:50.304 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:50.997 | DEBUG    | __main__:run_benchmark:297 - Query: select all rows where the entry in 'colA' is divisible by 5
2022-08-05 20:02:50.998 | DEBUG    | __main__:run_benchmark:298 - dfin[dfin['colA']%5==0]
2022-08-05 20:02:51.007 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:51.547 | DEBUG    | __main__:run_benchmark:297 - Query: Remove rows where colA is not a multiple of 5
2022-08-05 20:02:51.548 | DEBUG    | __main__:run_benchmark:298 - df = dfin[dfin['colA'] % 5 == 0]
2022-08-05 20:02:51.558 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:52.110 | DEBUG    | __main__:run_benchmark:297 - Query: filter rows where colA is not a multiple of 5
2022-08-05 20:02:52.111 | DEBUG    | __main__:run_benchmark:298 - dfout = df.loc[df.colA % 5 != 0]
2022-08-05 20:02:52.115 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:02:52.667 | DEBUG    | __main__:run_benchmark:297 - Query: filter rows where colA is a multiple of 5
2022-08-05 20:02:52.668 | DEBUG    | __main__:run_benchmark:298 - dfin.query('colA % 5 == 0')
2022-08-05 20:02:52.678 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:53.259 | DEBUG    | __main__:run_benchmark:297 - Query: Filter rows from dfin such that colA is divisible by 5
2022-08-05 20:02:53.260 | DEBUG    | __main__:run_benchmark:298 - dfin[dfin['colA'].apply(lambda x: x%5==0)]
2022-08-05 20:02:53.269 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:53.270 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:02:53.887 | DEBUG    | __main__:run_benchmark:297 - Query: Retain those rows where value in cell of column 'A' gives remainder 1 when divided by 4
2022-08-05 20:02:53.887 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['A'] % 4 == 1]
2022-08-05 20:02:53.897 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:54.446 | DEBUG    | __main__:run_benchmark:297 - Query: print rows where A%4 = 1
2022-08-05 20:02:54.446 | DEBUG    | __main__:run_benchmark:298 - dfin[dfin['A']%4 == 1]
2022-08-05 20:02:54.455 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:55.016 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows if 'A'%4 != 1
2022-08-05 20:02:55.017 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin[dfin['A']%4 == 1]
2022-08-05 20:02:55.024 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:55.568 | DEBUG    | __main__:run_benchmark:297 - Query: select rows where 'A'%4 == 1
2022-08-05 20:02:55.568 | DEBUG    | __main__:run_benchmark:298 - print(dfin[dfin['A']%4 == 1])
2022-08-05 20:02:55.569 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['A'] % 4) == 1)]

2022-08-05 20:02:55.577 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:56.134 | DEBUG    | __main__:run_benchmark:297 - Query: select rows where A%4 == 1
2022-08-05 20:02:56.135 | DEBUG    | __main__:run_benchmark:298 - print(dfin[dfin['A']%4 == 1])
2022-08-05 20:02:56.136 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['A'] % 4) == 1)]

2022-08-05 20:02:56.145 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:56.677 | DEBUG    | __main__:run_benchmark:297 - Query: rows where A%4 == 1
2022-08-05 20:02:56.678 | DEBUG    | __main__:run_benchmark:298 - dfin.query('A%4 == 1')
2022-08-05 20:02:56.687 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:57.260 | DEBUG    | __main__:run_benchmark:297 - Query: filter rows where A%4 == 1
2022-08-05 20:02:57.260 | DEBUG    | __main__:run_benchmark:298 - dfin[dfin.A%4 == 1]
2022-08-05 20:02:57.270 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:57.808 | DEBUG    | __main__:run_benchmark:297 - Query: select all rows from dfin such that column A mod 4 = 1
2022-08-05 20:02:57.809 | DEBUG    | __main__:run_benchmark:298 - dfin.query('A%4 == 1')
2022-08-05 20:02:57.819 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:57.820 | DEBUG    | __main__:run:356 - Running benchmark 2
2022-08-05 20:02:57.820 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:02:57.820 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:02:58.351 | DEBUG    | __main__:run_benchmark:297 - Query: Concatenate dfin 3 times and assign to dfout
2022-08-05 20:02:58.352 | DEBUG    | __main__:run_benchmark:298 - dfout = pd.concat([dfin]*3)
2022-08-05 20:02:58.361 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:02:58.480 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Concatenate dfin 3 times and assign to dfout', 'user': 'u20'}, {'query': 'Repeat the rows of dfin thr...
    │               └ {'queries': [{'query': 'Concatenate dfin 3 times and assign to dfout', 'user': 'u20'}, {'query': 'Repeat the rows of dfin thr...
    └ {'query': 'Repeat the rows of dfin thrice', 'user': 'u9'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}})\n\n#  Repeat the rows of dfin thrice\n"]
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}})\n\n#  Repeat the ro...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0a26d90>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:02:58 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:02:58 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0a2ab50>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:02:58.504 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:03:28.658 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Concatenate dfin 3 times and assign to dfout', 'user': 'u20'}, {'query': 'Repeat the rows of dfin thr...
    │               └ {'queries': [{'query': 'Concatenate dfin 3 times and assign to dfout', 'user': 'u20'}, {'query': 'Repeat the rows of dfin thr...
    └ {'query': 'Repeat the rows of dfin thrice', 'user': 'u9'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}})\n\n#  Repeat the rows of dfin thrice\n"]
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}})\n\n#  Repeat the ro...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0a83510>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:03:28 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:03:28 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f09b8b10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:03:28.682 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:03:59.350 | DEBUG    | __main__:run_benchmark:297 - Query: Repeat the rows of dfin thrice
2022-08-05 20:03:59.351 | DEBUG    | __main__:run_benchmark:298 - dfout = pd.concat([dfin]*3)
2022-08-05 20:03:59.361 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:04:00.150 | DEBUG    | __main__:run_benchmark:297 - Query: Copy the rows of dfin thrice
2022-08-05 20:04:00.151 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.append([dfin]*2, ignore_index=True)
2022-08-05 20:04:00.164 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:00.805 | DEBUG    | __main__:run_benchmark:297 - Query: Concatenate the rows of dfin thrice
2022-08-05 20:04:00.805 | DEBUG    | __main__:run_benchmark:298 - pd.concat([dfin] * 3)
2022-08-05 20:04:00.814 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:04:01.614 | DEBUG    | __main__:run_benchmark:297 - Query: Given a dataframe dfin, concantenate it three times to get a new dataframe dfout
2022-08-05 20:04:01.614 | DEBUG    | __main__:run_benchmark:298 - dfout = pd.concat([dfin]*3)
2022-08-05 20:04:01.623 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:04:02.247 | DEBUG    | __main__:run_benchmark:297 - Query: Append dataframe to itself twice
2022-08-05 20:04:02.248 | DEBUG    | __main__:run_benchmark:298 - dfout = dfout.append(dfin, ignore_index=True)
2022-08-05 20:04:02.251 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:02.252 | DEBUG    | __main__:run:363 - Number of queries: 12
2022-08-05 20:04:02.868 | DEBUG    | __main__:run_benchmark:297 - Query: duplicate all rows 4 times
2022-08-05 20:04:02.869 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.append([dfin] * 3, ignore_index=True)
2022-08-05 20:04:02.881 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:03.879 | DEBUG    | __main__:run_benchmark:297 - Query: repeat all rows of the dataframe 4 times
2022-08-05 20:04:03.880 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.append([dfin]*4,ignore_index=True)
2022-08-05 20:04:03.892 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:04.571 | DEBUG    | __main__:run_benchmark:297 - Query: concatenate the input dataframe 'dfin' 4 times
2022-08-05 20:04:04.572 | DEBUG    | __main__:run_benchmark:298 - pd.concat([dfin, dfin, dfin, dfin], axis=0)
2022-08-05 20:04:04.581 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:04:05.234 | DEBUG    | __main__:run_benchmark:297 - Query: Repeat table 4 times
2022-08-05 20:04:05.235 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.DataFrame(np.tile(dfin, (4, 1)))
2022-08-05 20:04:05.247 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:05.914 | DEBUG    | __main__:run_benchmark:297 - Query: duplicate and append input dataframe 4 times
2022-08-05 20:04:05.914 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.concat([dfin]*4, ignore_index=True)
2022-08-05 20:04:05.927 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:06.589 | DEBUG    | __main__:run_benchmark:297 - Query: duplicate and append 4 times
2022-08-05 20:04:06.590 | DEBUG    | __main__:run_benchmark:298 - df2 = df1.append([df1]*4, ignore_index=True)
2022-08-05 20:04:06.593 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:07.713 | DEBUG    | __main__:run_benchmark:297 - Query: Duplicate 4 times
2022-08-05 20:04:07.713 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-05 20:04:07.727 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:08.751 | DEBUG    | __main__:run_benchmark:297 - Query: Repeat 4 times
2022-08-05 20:04:08.752 | DEBUG    | __main__:run_benchmark:298 - def test_repeat_4_times():
2022-08-05 20:04:08.753 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:09.403 | DEBUG    | __main__:run_benchmark:297 - Query: Repeat dataframe 4 times
2022-08-05 20:04:09.404 | DEBUG    | __main__:run_benchmark:298 - dfout = pd.concat([dfin]*4)
2022-08-05 20:04:09.413 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:04:09.970 | DEBUG    | __main__:run_benchmark:297 - Query: Replicate dataframe 3 times
2022-08-05 20:04:09.970 | DEBUG    | __main__:run_benchmark:298 - dfout = dfout.append([dfout]*3, ignore_index=True)
2022-08-05 20:04:09.974 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:10.535 | DEBUG    | __main__:run_benchmark:297 - Query: duplicate all rows 3 times
2022-08-05 20:04:10.535 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.append([dfin]*3,ignore_index=True)
2022-08-05 20:04:10.547 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:11.926 | DEBUG    | __main__:run_benchmark:297 - Query: repeat all entries in dfin four times
2022-08-05 20:04:11.927 | DEBUG    | __main__:run_benchmark:298 - #  repeat all entries in dfin four times
2022-08-05 20:04:11.928 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:11.931 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-05 20:04:12.453 | DEBUG    | __main__:run_benchmark:297 - Query: Duplicate rows of dfin once
2022-08-05 20:04:12.454 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.append(dfin)
2022-08-05 20:04:12.459 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:04:13.088 | DEBUG    | __main__:run_benchmark:297 - Query: Repeat rows of dfin once
2022-08-05 20:04:13.089 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-05 20:04:13.099 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:14.063 | DEBUG    | __main__:run_benchmark:297 - Query: Repeat rows of dfin
2022-08-05 20:04:14.063 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin.append([dfin]*2, ignore_index=True)
2022-08-05 20:04:14.078 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:14.642 | DEBUG    | __main__:run_benchmark:297 - Query: Repeat dataframe dfin
2022-08-05 20:04:14.643 | DEBUG    | __main__:run_benchmark:298 - print(dfin)
2022-08-05 20:04:14.643 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin

2022-08-05 20:04:14.650 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin

2022-08-05 20:04:14.657 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:15.058 | DEBUG    | __main__:run_benchmark:297 - Query: Append dfin to itself
2022-08-05 20:04:15.058 | DEBUG    | __main__:run_benchmark:298 - dfout = dfout.append(dfin)
2022-08-05 20:04:15.060 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:15.457 | DEBUG    | __main__:run_benchmark:297 - Query: Append dfin to dfin
2022-08-05 20:04:15.457 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.append(dfin)
2022-08-05 20:04:15.463 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:04:16.638 | DEBUG    | __main__:run_benchmark:297 - Query: duplicate rows
2022-08-05 20:04:16.639 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.DataFrame({'A': {0: 22, 1: 22}, 'B': {0: -2, 1: -2}})
2022-08-05 20:04:16.649 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:17.062 | DEBUG    | __main__:run_benchmark:297 - Query: copy rows
2022-08-05 20:04:17.063 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[2] = 0
2022-08-05 20:04:17.074 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:17.929 | DEBUG    | __main__:run_benchmark:297 - Query: copy and append rows
2022-08-05 20:04:17.929 | DEBUG    | __main__:run_benchmark:298 - dfin2 = dfin.copy()
2022-08-05 20:04:17.943 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:18.734 | DEBUG    | __main__:run_benchmark:297 - Query: copy and append rows and reset index
2022-08-05 20:04:18.735 | DEBUG    | __main__:run_benchmark:298 - dfin_cp = dfin.copy()
2022-08-05 20:04:18.749 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:18.750 | DEBUG    | __main__:run:363 - Number of queries: 11
2022-08-05 20:04:19.578 | DEBUG    | __main__:run_benchmark:297 - Query: replicate the columns thrice
2022-08-05 20:04:19.579 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.concat([dfin]*3, axis=1)
2022-08-05 20:04:19.594 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:20.722 | DEBUG    | __main__:run_benchmark:297 - Query: Replicate the columns thrice
2022-08-05 20:04:20.723 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}, 'C': {0: -2, 1: 2}, 'D': {0: -2, 1: 2}})
2022-08-05 20:04:20.737 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:21.432 | DEBUG    | __main__:run_benchmark:297 - Query: replicate the rows teice
2022-08-05 20:04:21.432 | DEBUG    | __main__:run_benchmark:298 - df_rep = pd.concat([dfin]*2)
2022-08-05 20:04:21.448 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:21.560 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'replicate the columns thrice', 'user': 'u4'}, {'query': 'Replicate the columns thrice', 'user': 'u4'}...
    │               └ {'queries': [{'query': 'replicate the columns thrice', 'user': 'u4'}, {'query': 'Replicate the columns thrice', 'user': 'u4'}...
    └ {'query': 'replicate the rows twice', 'user': 'u4'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}})\n\n#  replicate the rows twice\n"]
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}})\n\n#  replicate the...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0a265d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:04:21 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:04:21 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0911850>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:04:21.565 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:04:52.197 | DEBUG    | __main__:run_benchmark:297 - Query: replicate the rows twice
2022-08-05 20:04:52.197 | DEBUG    | __main__:run_benchmark:298 - df = pd.concat([df, df], ignore_index=True)
2022-08-05 20:04:52.199 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:04:53.129 | DEBUG    | __main__:run_benchmark:297 - Query: repeat rows twice
2022-08-05 20:04:53.130 | DEBUG    | __main__:run_benchmark:298 - #  repeat rows twice
2022-08-05 20:04:53.131 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:05:10.019 | DEBUG    | __main__:run_benchmark:297 - Query: add rows with same values as existing rows
2022-08-05 20:05:10.019 | DEBUG    | __main__:run_benchmark:298 - dfout = df1.append([df2, df3, df4, dfin])
2022-08-05 20:05:10.021 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:05:10.678 | DEBUG    | __main__:run_benchmark:297 - Query: concatenate dfin to itself thrice
2022-08-05 20:05:10.678 | DEBUG    | __main__:run_benchmark:298 - pd.concat([dfin, dfin, dfin], axis=1)
2022-08-05 20:05:10.697 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:05:11.380 | DEBUG    | __main__:run_benchmark:297 - Query: concatenate dfin vertically to itself thrice
2022-08-05 20:05:11.380 | DEBUG    | __main__:run_benchmark:298 - pd.concat([dfin, dfin, dfin])
2022-08-05 20:05:11.388 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:05:11.501 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'replicate the columns thrice', 'user': 'u4'}, {'query': 'Replicate the columns thrice', 'user': 'u4'}...
    │               └ {'queries': [{'query': 'replicate the columns thrice', 'user': 'u4'}, {'query': 'Replicate the columns thrice', 'user': 'u4'}...
    └ {'query': 'Append dfin to dfin 3 times', 'user': 'u17'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}})\n\n#  Append dfin to dfin 3 times\n"]
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}})\n\n#  Append dfin t...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f09fe910>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:05:11 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:05:11 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f097cb50>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:05:11.506 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:05:42.097 | DEBUG    | __main__:run_benchmark:297 - Query: Append dfin to dfin 3 times
2022-08-05 20:05:42.098 | DEBUG    | __main__:run_benchmark:298 - dfin.append(dfin, ignore_index=True)
2022-08-05 20:05:42.114 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:05:42.499 | DEBUG    | __main__:run_benchmark:297 - Query: Append dfin to dfin, then append dfin to it
2022-08-05 20:05:42.499 | DEBUG    | __main__:run_benchmark:298 - dfout = dfout.append(dfin)
2022-08-05 20:05:42.501 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:05:43.022 | DEBUG    | __main__:run_benchmark:297 - Query: Concatenate dfin to dfin 3 times
2022-08-05 20:05:43.023 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.concat([dfin]*3)
2022-08-05 20:05:43.030 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:05:43.031 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-05 20:05:43.695 | DEBUG    | __main__:run_benchmark:297 - Query: repeat the rows 4 times
2022-08-05 20:05:43.696 | DEBUG    | __main__:run_benchmark:298 - dfout = dfout.append([dfout] * 4, ignore_index=True)
2022-08-05 20:05:43.699 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:05:44.346 | DEBUG    | __main__:run_benchmark:297 - Query: repeat all rows 4 times
2022-08-05 20:05:44.346 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.append([dfin]*2,ignore_index=True)
2022-08-05 20:05:44.359 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:05:45.117 | DEBUG    | __main__:run_benchmark:297 - Query: repeat the dataframe 4 times
2022-08-05 20:05:45.118 | DEBUG    | __main__:run_benchmark:298 - dfout = dfout.append([dfout]*4, ignore_index=True)
2022-08-05 20:05:45.121 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:05:45.779 | DEBUG    | __main__:run_benchmark:297 - Query: repeat rows 4 times
2022-08-05 20:05:45.780 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.loc[dfin.index.repeat(4)].reset_index(drop=True)
2022-08-05 20:05:45.793 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:05:46.550 | DEBUG    | __main__:run_benchmark:297 - Query: repeat all rows of input 4 times
2022-08-05 20:05:46.551 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}})
2022-08-05 20:05:46.563 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:05:47.060 | DEBUG    | __main__:run_benchmark:297 - Query: dublicate rows 4 times
2022-08-05 20:05:47.060 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.append([dfin]*4, ignore_index=True)
2022-08-05 20:05:47.073 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:05:47.763 | DEBUG    | __main__:run_benchmark:297 - Query: dublicate table 4 times
2022-08-05 20:05:47.764 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.concat([dfin]*4, ignore_index=True)
2022-08-05 20:05:47.777 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:05:48.341 | DEBUG    | __main__:run_benchmark:297 - Query: repeat inserting rows 4 times
2022-08-05 20:05:48.342 | DEBUG    | __main__:run_benchmark:298 - for i in range(0, 4):
2022-08-05 20:05:48.343 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:05:49.182 | DEBUG    | __main__:run_benchmark:297 - Query: concat rows 4 times
2022-08-05 20:05:49.183 | DEBUG    | __main__:run_benchmark:298 - pd.concat([dfin]*4)
2022-08-05 20:05:49.192 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:05:49.851 | DEBUG    | __main__:run_benchmark:297 - Query: concat dfin*4
2022-08-05 20:05:49.852 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.append([dfin]*3,ignore_index=True)
2022-08-05 20:05:49.865 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:05:50.838 | DEBUG    | __main__:run_benchmark:297 - Query: concat row 0, row 1 4 times
2022-08-05 20:05:50.839 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.concat([dfin]*4, ignore_index=True)
2022-08-05 20:05:50.853 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:05:51.681 | DEBUG    | __main__:run_benchmark:297 - Query: concat rows of dfin 4 times
2022-08-05 20:05:51.682 | DEBUG    | __main__:run_benchmark:298 - dfin_r = pd.concat([dfin]*4, ignore_index=True)
2022-08-05 20:05:51.699 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:05:52.956 | DEBUG    | __main__:run_benchmark:297 - Query: output is copy of input 4 times at axis=0
2022-08-05 20:05:52.957 | DEBUG    | __main__:run_benchmark:298 - dfout = pd.DataFrame({'A': {0: 22, 1: 22, 2: 22, 3: 22}, 'B': {0: -2, 1: -2, 2: -2, 3: -2}})
2022-08-05 20:05:52.972 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:05:54.396 | DEBUG    | __main__:run_benchmark:297 - Query: Duplicate the rows 4 times
2022-08-05 20:05:54.396 | DEBUG    | __main__:run_benchmark:298 - #  Drop the rows where at least one element is missing
2022-08-05 20:05:54.397 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:05:54.513 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'repeat the rows 4 times', 'user': 'u5'}, {'query': 'repeat all rows 4 times', 'user': 'u5'}, {'query'...
    │               └ {'queries': [{'query': 'repeat the rows 4 times', 'user': 'u5'}, {'query': 'repeat all rows 4 times', 'user': 'u5'}, {'query'...
    └ {'query': 'Multiply the rows 4 times', 'user': 'u16'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}})\n\n#  Multiply the rows 4 times\n"]
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}})\n\n#  Multiply the ...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0a2aa10>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:05:54 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:05:54 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f095d350>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:05:54.519 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:06:25.268 | DEBUG    | __main__:run_benchmark:297 - Query: Multiply the rows 4 times
2022-08-05 20:06:25.269 | DEBUG    | __main__:run_benchmark:298 - dfin.mul([4, 5, 6, 7], axis=1)
2022-08-05 20:06:25.272 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:06:25.392 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'repeat the rows 4 times', 'user': 'u5'}, {'query': 'repeat all rows 4 times', 'user': 'u5'}, {'query'...
    │               └ {'queries': [{'query': 'repeat the rows 4 times', 'user': 'u5'}, {'query': 'repeat all rows 4 times', 'user': 'u5'}, {'query'...
    └ {'query': 'Duplicate table 4 times', 'user': 'u16'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}})\n\n#  Duplicate table 4 times\n"]
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'A': {0: 22, 1: 33}, 'B': {0: -2, 1: 2}})\n\n#  Duplicate tab...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f09e9d50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:06:25 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:06:25 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f09b8a90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:06:25.416 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:06:55.991 | DEBUG    | __main__:run_benchmark:297 - Query: Duplicate table 4 times
2022-08-05 20:06:55.991 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.append([dfin]*3, ignore_index=True)
2022-08-05 20:06:56.002 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:06:56.004 | DEBUG    | __main__:run:356 - Running benchmark 3
2022-08-05 20:06:56.004 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:06:56.004 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:06:56.412 | DEBUG    | __main__:run_benchmark:297 - Query: Get fourth value from column 'C' in dfin and assign to dfout
2022-08-05 20:06:56.412 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin['C'][3]
2022-08-05 20:06:56.413 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:06:56.799 | DEBUG    | __main__:run_benchmark:297 - Query: Get fourth value from column 'C' in dfin
2022-08-05 20:06:56.800 | DEBUG    | __main__:run_benchmark:298 - dfin['C'][3]
2022-08-05 20:06:56.801 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:06:57.198 | DEBUG    | __main__:run_benchmark:297 - Query: Fetch the value at row index 3 and columns 'C'
2022-08-05 20:06:57.198 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[3,'C']
2022-08-05 20:06:57.199 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:06:57.587 | DEBUG    | __main__:run_benchmark:297 - Query: Given a dataframe dfin, get the cell value at row index 3 and column 'C'
2022-08-05 20:06:57.587 | DEBUG    | __main__:run_benchmark:298 - print(dfin.iloc[3]['C'])
2022-08-05 20:06:57.588 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.iloc[3]['C']

2022-08-05 20:06:57.589 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:06:57.590 | DEBUG    | __main__:run:363 - Number of queries: 11
2022-08-05 20:06:58.000 | DEBUG    | __main__:run_benchmark:297 - Query: get the value in column 'colC' at row 1
2022-08-05 20:06:58.000 | DEBUG    | __main__:run_benchmark:298 - print dfin.get_value(1, 'colC')
2022-08-05 20:06:58.000 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:06:58.380 | DEBUG    | __main__:run_benchmark:297 - Query: return value of 1st row and 3rd column
2022-08-05 20:06:58.381 | DEBUG    | __main__:run_benchmark:298 - print(dfin.iloc[0, 2])
2022-08-05 20:06:58.382 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.iloc[(0, 2)]

2022-08-05 20:06:58.384 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.iloc[(0, 2)]

2022-08-05 20:06:58.385 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:06:58.761 | DEBUG    | __main__:run_benchmark:297 - Query: return value of 1st index and ColC
2022-08-05 20:06:58.762 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[1, 'colC']
2022-08-05 20:06:58.766 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:06:59.572 | DEBUG    | __main__:run_benchmark:297 - Query: return value at (1,ColC)
2022-08-05 20:06:59.572 | DEBUG    | __main__:run_benchmark:298 - 
2022-08-05 20:06:59.573 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:07:00.202 | DEBUG    | __main__:run_benchmark:297 - Query: return value from ColC's 1st row
2022-08-05 20:07:00.202 | DEBUG    | __main__:run_benchmark:298 - print(dfin.iloc[0][2])
2022-08-05 20:07:00.202 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.iloc[0][2]

2022-08-05 20:07:00.203 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.iloc[0][2]

2022-08-05 20:07:00.204 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:07:00.698 | DEBUG    | __main__:run_benchmark:297 - Query: return value at ColC's 1st index
2022-08-05 20:07:00.698 | DEBUG    | __main__:run_benchmark:298 - dfin.at[1, 'colC']
2022-08-05 20:07:00.699 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:07:01.096 | DEBUG    | __main__:run_benchmark:297 - Query: Get cell at row 1 column 'colC'
2022-08-05 20:07:01.096 | DEBUG    | __main__:run_benchmark:298 - print(dfin.iloc[1, 2])
2022-08-05 20:07:01.096 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.iloc[(1, 2)]

2022-08-05 20:07:01.097 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:07:01.484 | DEBUG    | __main__:run_benchmark:297 - Query: Get value of column 'colC' in row 2
2022-08-05 20:07:01.484 | DEBUG    | __main__:run_benchmark:298 - print(dfin.at[2,'colC'])
2022-08-05 20:07:01.485 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.at[(2, 'colC')]

2022-08-05 20:07:01.486 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.at[(2, 'colC')]

2022-08-05 20:07:01.486 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:07:01.946 | DEBUG    | __main__:run_benchmark:297 - Query: Get value of column 'colC' in row 1
2022-08-05 20:07:01.946 | DEBUG    | __main__:run_benchmark:298 - dfin.iloc[1]['colC']
2022-08-05 20:07:01.948 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:07:02.454 | DEBUG    | __main__:run_benchmark:297 - Query: get value at row '1' and column 'colC'
2022-08-05 20:07:02.454 | DEBUG    | __main__:run_benchmark:298 - print(dfin.at[1, 'colC'])
2022-08-05 20:07:02.454 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.at[(1, 'colC')]

2022-08-05 20:07:02.455 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:07:02.875 | DEBUG    | __main__:run_benchmark:297 - Query: return second entry of column 'colC'
2022-08-05 20:07:02.876 | DEBUG    | __main__:run_benchmark:298 - def second_largest_colC(df):
2022-08-05 20:07:02.876 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:07:02.878 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:07:03.291 | DEBUG    | __main__:run_benchmark:297 - Query: Get the value at row '1' and column 'C' from dfin
2022-08-05 20:07:03.291 | DEBUG    | __main__:run_benchmark:298 - dfin['C'][1]
2022-08-05 20:07:03.292 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:07:04.409 | DEBUG    | __main__:run_benchmark:297 - Query: Get the value in the cell at row '1' and column 'C' from dfin
2022-08-05 20:07:04.410 | DEBUG    | __main__:run_benchmark:298 - #  Get the value in the cell at row '1' and column 'C' from dfin
2022-08-05 20:07:04.410 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:07:05.524 | DEBUG    | __main__:run_benchmark:297 - Query: Get the value in row '1' and column 'C' from dfin
2022-08-05 20:07:05.524 | DEBUG    | __main__:run_benchmark:298 - #  Get the value in row '3' and column 'B' from dfin
2022-08-05 20:07:05.524 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:07:06.082 | DEBUG    | __main__:run_benchmark:297 - Query: Get the value at row '1' and column 'C' from dataframe dfin
2022-08-05 20:07:06.082 | DEBUG    | __main__:run_benchmark:298 - print(dfin.loc[1]['C'])
2022-08-05 20:07:06.082 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.loc[1]['C']

2022-08-05 20:07:06.083 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:07:06.485 | DEBUG    | __main__:run_benchmark:297 - Query: get object at row index 1, column 'C'
2022-08-05 20:07:06.485 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[1, 'C']
2022-08-05 20:07:06.486 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:07:06.899 | DEBUG    | __main__:run_benchmark:297 - Query: object at row index 1, column 'C'
2022-08-05 20:07:06.900 | DEBUG    | __main__:run_benchmark:298 - dfin.iloc[1,2]
2022-08-05 20:07:06.901 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:07:06.902 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-05 20:07:07.340 | DEBUG    | __main__:run_benchmark:297 - Query: select the cell belong to the row named '3' and column named 'colC'
2022-08-05 20:07:07.340 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[3, 'colC']
2022-08-05 20:07:07.341 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:07:07.754 | DEBUG    | __main__:run_benchmark:297 - Query: select the cell belong to the fourth row and column named 'colC'
2022-08-05 20:07:07.755 | DEBUG    | __main__:run_benchmark:298 - dfin.iloc[3]['colC']
2022-08-05 20:07:07.756 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:07:07.869 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "select the cell belong to the row named '3' and column named 'colC'", 'user': 'u11'}, {'query': "sele...
    │               └ {'queries': [{'query': "select the cell belong to the row named '3' and column named 'colC'", 'user': 'u11'}, {'query': "sele...
    └ {'query': "select the object in the cell of the fourth row belonging the column named 'colC'", 'user': 'u11'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'colA': {0: 22, 1: 33, 2: 12, 3: 18}, 'colB': {0: -2, 1: 2, 2: -5, 3: -12}, 'colC': {0: 1, 1: 3, 2: 7,...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'colA': {0: 22, 1: 33, 2: 12, 3: 18}, 'colB': {0: -2, 1: 2, 2...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f09e9f50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:07:07 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:07:07 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f097c350>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:07:07.873 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:07:39.055 | DEBUG    | __main__:run_benchmark:297 - Query: select the object in the cell of the fourth row belonging the column named 'colC'
2022-08-05 20:07:39.056 | DEBUG    | __main__:run_benchmark:298 - #  select the object in the cell of the second row belonging the column named 'colA'
2022-08-05 20:07:39.057 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:07:39.468 | DEBUG    | __main__:run_benchmark:297 - Query: get cell value of row at index 3 and column colC
2022-08-05 20:07:39.468 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[3, "colC"]
2022-08-05 20:07:39.469 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:07:39.758 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "select the cell belong to the row named '3' and column named 'colC'", 'user': 'u11'}, {'query': "sele...
    │               └ {'queries': [{'query': "select the cell belong to the row named '3' and column named 'colC'", 'user': 'u11'}, {'query': "sele...
    └ {'query': 'Select index 3 from column colC', 'user': 'u17'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'colA': {0: 22, 1: 33, 2: 12, 3: 18}, 'colB': {0: -2, 1: 2, 2: -5, 3: -12}, 'colC': {0: 1, 1: 3, 2: 7,...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'colA': {0: 22, 1: 33, 2: 12, 3: 18}, 'colB': {0: -2, 1: 2, 2...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0a2ae10>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:07:39 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:07:39 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f09fe9d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:07:39.776 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:08:10.223 | DEBUG    | __main__:run_benchmark:297 - Query: Select index 3 from column colC
2022-08-05 20:08:10.224 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[3, 'colC']
2022-08-05 20:08:10.226 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:08:10.594 | DEBUG    | __main__:run_benchmark:297 - Query: from column colC, select index 3
2022-08-05 20:08:10.594 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[3, 'colC']
2022-08-05 20:08:10.598 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:08:10.994 | DEBUG    | __main__:run_benchmark:297 - Query: Select iloc 3 and column colC
2022-08-05 20:08:10.994 | DEBUG    | __main__:run_benchmark:298 - dfin.iloc[3].iloc[2]
2022-08-05 20:08:10.995 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:08:11.377 | DEBUG    | __main__:run_benchmark:297 - Query: Select column colC with index 3
2022-08-05 20:08:11.378 | DEBUG    | __main__:run_benchmark:298 - dfin.iloc[3,2]
2022-08-05 20:08:11.380 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:08:11.785 | DEBUG    | __main__:run_benchmark:297 - Query: From dfin, Select column colC with index 3
2022-08-05 20:08:11.786 | DEBUG    | __main__:run_benchmark:298 - print(dfin.loc[3]['colC'])
2022-08-05 20:08:11.787 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.loc[3]['colC']

2022-08-05 20:08:11.789 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:08:11.791 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:08:12.179 | DEBUG    | __main__:run_benchmark:297 - Query: Get element in row 2 and column named 'gamma'
2022-08-05 20:08:12.180 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[2, 'gamma']
2022-08-05 20:08:12.182 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:08:12.563 | DEBUG    | __main__:run_benchmark:297 - Query: return value at row 2 column 'gamma'
2022-08-05 20:08:12.564 | DEBUG    | __main__:run_benchmark:298 - print(dfin.loc[2, 'gamma'])
2022-08-05 20:08:12.565 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.loc[(2, 'gamma')]

2022-08-05 20:08:12.569 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:08:13.591 | DEBUG    | __main__:run_benchmark:297 - Query: return third value at column 'gamma'
2022-08-05 20:08:13.592 | DEBUG    | __main__:run_benchmark:298 - #  return second value at row 3
2022-08-05 20:08:13.592 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:08:14.005 | DEBUG    | __main__:run_benchmark:297 - Query: return value of row '2' and column 'gamma'
2022-08-05 20:08:14.005 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[2, 'gamma']
2022-08-05 20:08:14.007 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:08:14.395 | DEBUG    | __main__:run_benchmark:297 - Query: return value of column 'gamma' and row '2'
2022-08-05 20:08:14.396 | DEBUG    | __main__:run_benchmark:298 - print(dfin['gamma'][2])
2022-08-05 20:08:14.397 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin['gamma'][2]

2022-08-05 20:08:14.399 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:08:14.799 | DEBUG    | __main__:run_benchmark:297 - Query: return cell value at (2, gamma)
2022-08-05 20:08:14.800 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[2, 'gamma']
2022-08-05 20:08:14.803 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:08:14.805 | DEBUG    | __main__:run:356 - Running benchmark 4
2022-08-05 20:08:14.805 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:08:14.805 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:08:16.163 | DEBUG    | __main__:run_benchmark:297 - Query: Filter all rows with alpha less than 40 or greater than 59 from dfin
2022-08-05 20:08:16.163 | DEBUG    | __main__:run_benchmark:298 - #  Calculate the sum of alpha, beta, and gamma in dfin
2022-08-05 20:08:16.164 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:08:16.822 | DEBUG    | __main__:run_benchmark:297 - Query: Filter rows in which column 'alpha' is less than 40 or greater than 59
2022-08-05 20:08:16.822 | DEBUG    | __main__:run_benchmark:298 - dfin.query('alpha < 40 or alpha > 59')
2022-08-05 20:08:16.834 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:08:16.956 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Filter all rows with alpha less than 40 or greater than 59 from dfin', 'user': 'u20'}, {'query': "Fil...
    │               └ {'queries': [{'query': 'Filter all rows with alpha less than 40 or greater than 59 from dfin', 'user': 'u20'}, {'query': "Fil...
    └ {'query': "Given a dataframe dfin, select all rows where 'alpha' is lesser than 40 or greater than 59", 'user': 'u18'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'beta': {0: -1, 1: 3, 2: 2, 3: 3, ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f09e90d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:08:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:08:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f09111d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:08:16.973 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:08:48.553 | DEBUG    | __main__:run_benchmark:297 - Query: Given a dataframe dfin, select all rows where 'alpha' is lesser than 40 or greater than 59
2022-08-05 20:08:48.554 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[(dfin['alpha'] < 40) | (dfin['alpha'] > 59)]
2022-08-05 20:08:48.565 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:08:49.212 | DEBUG    | __main__:run_benchmark:297 - Query: Filter rows where value of 'alpha' is in range '40' to '59'
2022-08-05 20:08:49.213 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[(dfin['alpha'] >= 40) & (dfin['alpha'] <= 59)]
2022-08-05 20:08:49.231 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:08:49.910 | DEBUG    | __main__:run_benchmark:297 - Query: Filter rows where value of 'alpha' is not in range of '40' and '59'
2022-08-05 20:08:49.910 | DEBUG    | __main__:run_benchmark:298 - df = dfin.query('40 <= alpha <= 59')
2022-08-05 20:08:49.930 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:08:50.048 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Filter all rows with alpha less than 40 or greater than 59 from dfin', 'user': 'u20'}, {'query': "Fil...
    │               └ {'queries': [{'query': 'Filter all rows with alpha less than 40 or greater than 59 from dfin', 'user': 'u20'}, {'query': "Fil...
    └ {'query': "Filter rows where value of 'alpha' is less than '40' or greater than '59'", 'user': 'u2'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'beta': {0: -1, 1: 3, 2: 2, 3: 3, ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f09b6490>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:08:50 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:08:50 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f097ce90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:08:50.072 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:09:20.821 | DEBUG    | __main__:run_benchmark:297 - Query: Filter rows where value of 'alpha' is less than '40' or greater than '59'
2022-08-05 20:09:20.821 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin.query('(alpha >= 40 & alpha <= 59)')
2022-08-05 20:09:20.840 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:09:20.842 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:09:21.920 | DEBUG    | __main__:run_benchmark:297 - Query: filter all rows where value in column 'foo' is less than 34 or greater than 70
2022-08-05 20:09:21.920 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[(dfin['foo'] < 34) | (dfin['foo'] > 70)]
2022-08-05 20:09:21.930 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:09:22.698 | DEBUG    | __main__:run_benchmark:297 - Query: Filter rows of column 'foo' lie are less than 34 or are greater than 70 of table dfin
2022-08-05 20:09:22.698 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['foo'] < 34) | (dfin['foo'] > 70)]
2022-08-05 20:09:22.708 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:09:23.490 | DEBUG    | __main__:run_benchmark:297 - Query: return rows where value for 'foo' is less than 34 and greater than 70
2022-08-05 20:09:23.491 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['foo'] > 34) & (dfin['foo'] < 70)]
2022-08-05 20:09:23.509 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:09:24.273 | DEBUG    | __main__:run_benchmark:297 - Query: Choose rows such that in column 'foo' it is less than 34 or greater than 70
2022-08-05 20:09:24.274 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[(dfin['foo'] < 34) | (dfin['foo'] > 70)]
2022-08-05 20:09:24.283 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:09:25.058 | DEBUG    | __main__:run_benchmark:297 - Query: Get rows with value of column 'foo' less than 34 or greater than 70
2022-08-05 20:09:25.058 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['foo'] < 34) | (dfin['foo'] > 70)]
2022-08-05 20:09:25.067 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:09:25.860 | DEBUG    | __main__:run_benchmark:297 - Query: retain rows where 'foo' greater than 70 or 'foo' less than 34
2022-08-05 20:09:25.860 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['foo'] > 70) | (dfin['foo'] < 34)]
2022-08-05 20:09:25.870 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:09:26.501 | DEBUG    | __main__:run_benchmark:297 - Query: select entries in column 'foo' which are greater than 70 or less than 34
2022-08-05 20:09:26.501 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['foo'] > 70) | (dfin['foo'] < 34)]
2022-08-05 20:09:26.511 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:09:26.513 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-05 20:09:27.342 | DEBUG    | __main__:run_benchmark:297 - Query: Get rows in dfin where the column 'beta' has value less than 40 or greater than 53
2022-08-05 20:09:27.342 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['beta'] > 40) & (dfin['beta'] < 53)]
2022-08-05 20:09:27.360 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:09:28.162 | DEBUG    | __main__:run_benchmark:297 - Query: get rows with beta greater than 53 or less than 40
2022-08-05 20:09:28.162 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[(dfin['beta'] > 53) | (dfin['beta'] < 40)]
2022-08-05 20:09:28.171 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:09:28.173 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:09:29.011 | DEBUG    | __main__:run_benchmark:297 - Query: select rows where column "gamma" value is less than 40 or greater than 53
2022-08-05 20:09:29.012 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[(dfin['gamma'] < 40) | (dfin['gamma'] > 53)]
2022-08-05 20:09:29.021 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:09:29.849 | DEBUG    | __main__:run_benchmark:297 - Query: select all rows where the entry in 'gamma' is less than 40 and more than 53
2022-08-05 20:09:29.849 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['gamma'] < 40) & (dfin['gamma'] > 53)]
2022-08-05 20:09:29.863 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:09:30.610 | DEBUG    | __main__:run_benchmark:297 - Query: select all rows where the entry in 'gamma' is not between 40 and 53
2022-08-05 20:09:30.611 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['gamma'] < 40) | (dfin['gamma'] > 53)]
2022-08-05 20:09:30.620 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:09:31.336 | DEBUG    | __main__:run_benchmark:297 - Query: select all rows where the entry in column 'gamma' is less than 40 and select all rows where the entry in column 'gamma' is more than 53
2022-08-05 20:09:31.336 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[(dfin['gamma'] < 40) & (dfin['gamma'] > 53)]
2022-08-05 20:09:31.350 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:09:32.116 | DEBUG    | __main__:run_benchmark:297 - Query: select all rows where the any entry in column 'gamma' is not between 40 and 53
2022-08-05 20:09:32.116 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['gamma']<40) | (dfin['gamma']>53)]
2022-08-05 20:09:32.125 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:09:32.851 | DEBUG    | __main__:run_benchmark:297 - Query: filter rows where 'gamma' is less than 40 or greater than 53
2022-08-05 20:09:32.851 | DEBUG    | __main__:run_benchmark:298 - dfout = df[(df['gamma'] > 40) & (df['gamma'] < 53)]
2022-08-05 20:09:32.853 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:09:33.586 | DEBUG    | __main__:run_benchmark:297 - Query: From dfin, filter rows with column gamma less than 40 or more than 53
2022-08-05 20:09:33.586 | DEBUG    | __main__:run_benchmark:298 - df_filter = dfin[(dfin['gamma'] < 40) | (dfin['gamma'] > 53)]
2022-08-05 20:09:33.595 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:09:33.597 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:09:34.375 | DEBUG    | __main__:run_benchmark:297 - Query: retain those rows where value in cell of column 'bar' is either less than 38 or greater than 60
2022-08-05 20:09:34.375 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60)]
2022-08-05 20:09:34.385 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:09:35.042 | DEBUG    | __main__:run_benchmark:297 - Query: print rows where bar < 38 or bar > 60
2022-08-05 20:09:35.042 | DEBUG    | __main__:run_benchmark:298 - print(dfin.query('bar < 38 or bar > 60'))
2022-08-05 20:09:35.043 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.query('bar < 38 or bar > 60')

2022-08-05 20:09:35.052 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:09:35.766 | DEBUG    | __main__:run_benchmark:297 - Query: remove rows with value of column 'bar' between 38 and 60
2022-08-05 20:09:35.766 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[(dfin['bar'] > 38) & (dfin['bar'] < 60)]
2022-08-05 20:09:35.783 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:09:36.645 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows where bar>=38 and bar <=60
2022-08-05 20:09:36.645 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin[(dfin['bar'] >= 38) & (dfin['bar'] <= 60)]
2022-08-05 20:09:36.658 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:09:37.361 | DEBUG    | __main__:run_benchmark:297 - Query: filter rows where bar<38 and bar>60
2022-08-05 20:09:37.361 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['bar'] < 38) & (dfin['bar'] > 60)]
2022-08-05 20:09:37.375 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:09:38.055 | DEBUG    | __main__:run_benchmark:297 - Query: select rows from dfin such that column 'bar' is less than 38 or greater than 60
2022-08-05 20:09:38.055 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[(dfin['bar'] < 38) | (dfin['bar'] > 60)]
2022-08-05 20:09:38.064 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:09:38.066 | DEBUG    | __main__:run:356 - Running benchmark 5
2022-08-05 20:09:38.066 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:09:38.066 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:09:38.183 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Filter all rows with alpha less than 40 or greater than 59 and filter all rows with beta equal to 3 f...
    │               └ {'queries': [{'query': 'Filter all rows with alpha less than 40 or greater than 59 and filter all rows with beta equal to 3 f...
    └ {'query': 'Filter all rows with alpha less than 40 or greater than 59 and filter all rows with beta equal to 3 from dfin', 'u...

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'beta': {0: -1, 1: 3, 2: 2, 3: 3, ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f09b97d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:09:38 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:09:38 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0974190>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:09:38.188 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:10:09.084 | DEBUG    | __main__:run_benchmark:297 - Query: Filter all rows with alpha less than 40 or greater than 59 and filter all rows with beta equal to 3 from dfin
2022-08-05 20:10:09.085 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[(dfin['alpha']>40) & (dfin['alpha']<59) & (dfin['beta']!=3)]
2022-08-05 20:10:09.127 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:10:10.023 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Filter all rows with alpha less than 40 or greater than 59 and filter all rows with beta equal to 3 f...
    │               └ {'queries': [{'query': 'Filter all rows with alpha less than 40 or greater than 59 and filter all rows with beta equal to 3 f...
    └ {'query': 'Filter all rows with alpha less than 40 or greater than 59 and beta equal to 3 from dfin', 'user': 'u20'}

  File "experiments/jigsaw_experiments.py", line 291, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'beta': {0: -1, 1: 3, 2: 2, 3: 3, ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f092d190>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:10:10 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:10:10 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f092de10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:10:10.060 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:10:40.775 | DEBUG    | __main__:run_benchmark:297 - Query: Filter all rows with alpha less than 40 or greater than 59 and beta equal to 3 from dfin
2022-08-05 20:10:40.776 | DEBUG    | __main__:run_benchmark:298 - #  Filter all rows with alpha greater than 49 and beta equal to 3 from dfin
2022-08-05 20:10:40.776 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:10:41.568 | DEBUG    | __main__:run_benchmark:297 - Query: Filter all rows with alpha less than 40 or greater than 59 with beta equal to 3
2022-08-05 20:10:41.568 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin.alpha > 40) & (dfin.alpha < 59) & (dfin.beta == 3)]
2022-08-05 20:10:41.586 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:10:42.388 | DEBUG    | __main__:run_benchmark:297 - Query: Select all rows with alpha less than 40 or greater than 59 with beta equal to 3
2022-08-05 20:10:42.388 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['alpha'] < 40) | (dfin['alpha'] > 59) & (dfin['beta'] == 3)]
2022-08-05 20:10:42.406 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:10:42.408 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-05 20:10:43.206 | DEBUG    | __main__:run_benchmark:297 - Query: filter all rows where value in column 'foo' is less than 34 or greater than 70 and value in column 'bar' is 8
2022-08-05 20:10:43.206 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['foo'] < 34) | (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-05 20:10:43.225 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:10:44.006 | DEBUG    | __main__:run_benchmark:297 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 1 of table dfin
2022-08-05 20:10:44.006 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[(dfin['foo'] > 34) & (dfin['foo'] < 70) & (dfin['bar'] == 1)]
2022-08-05 20:10:44.024 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:10:44.777 | DEBUG    | __main__:run_benchmark:297 - Query: Filter rows of column 'foo' that are less than 34 or are greater than 70 and filter rows of column 'bar' whose value is 8 of table dfin
2022-08-05 20:10:44.777 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[(dfin['foo']>=34)&(dfin['foo']<=70)&(dfin['bar']==8)]
2022-08-05 20:10:44.796 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:10:45.562 | DEBUG    | __main__:run_benchmark:297 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and 'bar' is 8
2022-08-05 20:10:45.562 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-05 20:10:45.576 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:10:46.426 | DEBUG    | __main__:run_benchmark:297 - Query: return rows where value for 'foo' is less than 34 and greater than 70 and value for 'bar' is 8
2022-08-05 20:10:46.427 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-05 20:10:46.448 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:10:48.220 | DEBUG    | __main__:run_benchmark:297 - Query: return rows where value for 'foo' is less than 34 and greater than 70 as well as the value for 'bar' is 8
2022-08-05 20:10:48.221 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-05 20:10:48.234 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:10:49.092 | DEBUG    | __main__:run_benchmark:297 - Query: return rows where value for 'foo' is less than 34 and greater than 70 while value of 'bar' is 8
2022-08-05 20:10:49.092 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['foo'] < 34) & (dfin['foo'] > 70) & (dfin['bar'] == 8)]
2022-08-05 20:10:49.105 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:10:50.051 | DEBUG    | __main__:run_benchmark:297 - Query: return rows where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-05 20:10:50.051 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[(dfin['bar']==8) & (dfin['foo'] > 70) & (dfin['foo'] < 34)]
2022-08-05 20:10:50.066 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:10:51.839 | DEBUG    | __main__:run_benchmark:297 - Query: return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-05 20:10:51.840 | DEBUG    | __main__:run_benchmark:298 - #  return dfin where value for 'bar' is 8 and value of 'foo' is greater than 70 and less than 34
2022-08-05 20:10:51.840 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:10:52.672 | DEBUG    | __main__:run_benchmark:297 - Query: Choose rows such that in column 'foo' it is less than 34 or greater than 70, in column 'bar' equals 8
2022-08-05 20:10:52.673 | DEBUG    | __main__:run_benchmark:298 - dfout = dfout[(dfout.foo < 34) | (dfout.foo > 70) | (dfout.bar == 8)]
2022-08-05 20:10:52.675 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:10:53.536 | DEBUG    | __main__:run_benchmark:297 - Query: Choose rows such that in column 'foo' it is less than 34 or greater than 70 and in column 'bar' equals 8
2022-08-05 20:10:53.536 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['foo'] < 34) | (dfin['foo'] > 70) | (dfin['bar'] == 8)]
2022-08-05 20:10:53.554 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:10:55.265 | DEBUG    | __main__:run_benchmark:297 - Query: Get rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-05 20:10:55.265 | DEBUG    | __main__:run_benchmark:298 - #  Get rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-05 20:10:55.265 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:10:56.509 | DEBUG    | __main__:run_benchmark:297 - Query: retain rows where 'foo' greater than 70 or 'foo' less than 34 and 'bar' is 8
2022-08-05 20:10:56.509 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['foo'] > 70) | (dfin['foo'] < 34) & (dfin['bar'] == 8)]
2022-08-05 20:10:56.539 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:10:56.656 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "filter all rows where value in column 'foo' is less than 34 or greater than 70 and value in column 'b...
    │               └ {'queries': [{'query': "filter all rows where value in column 'foo' is less than 34 or greater than 70 and value in column 'b...
    └ {'query': "retain rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8", 'user': 'u0'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'foo': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'bar': {0: -1, 1: 8, 2: 2, 3: 8, 4: ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'foo': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: ...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0a26d90>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:10:56 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:10:56 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f097c390>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:10:56.660 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:11:27.690 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "filter all rows where value in column 'foo' is less than 34 or greater than 70 and value in column 'b...
    │               └ {'queries': [{'query': "filter all rows where value in column 'foo' is less than 34 or greater than 70 and value in column 'b...
    └ {'query': "retain rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8", 'user': 'u0'}

  File "experiments/jigsaw_experiments.py", line 291, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'foo': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'bar': {0: -1, 1: 8, 2: 2, 3: 8, 4: ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'foo': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: ...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0a83650>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:11:27 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:11:27 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0974b50>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:11:27.695 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:11:58.566 | DEBUG    | __main__:run_benchmark:297 - Query: retain rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-05 20:11:58.567 | DEBUG    | __main__:run_benchmark:298 - #  for each value in 'foo', multiply by 3 and add 'bar'
2022-08-05 20:11:58.567 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:12:00.021 | DEBUG    | __main__:run_benchmark:297 - Query: select entries in column 'foo' which are greater than 70 or less than 34 and select entries in column 'bar' which are equal to 8
2022-08-05 20:12:00.021 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[(dfin['foo'] > 70) | (dfin['foo'] < 34) | (dfin['bar'] == 8)]
2022-08-05 20:12:00.039 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:12:02.142 | DEBUG    | __main__:run_benchmark:297 - Query: select entries where column 'foo' is greater than 70 or less than 34 and column 'bar' is equal to 8
2022-08-05 20:12:02.142 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['foo'] > 70) | (dfin['foo'] < 34) & (dfin['bar'] == 8)]
2022-08-05 20:12:02.160 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:12:02.162 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:12:03.033 | DEBUG    | __main__:run_benchmark:297 - Query: Get rows in dfin where column 'gamma' equals 9 and column 'beta' has value less than 40 or greater than 53
2022-08-05 20:12:03.033 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[(dfin.gamma == 9) & (dfin.beta.isin([40, 53]))]
2022-08-05 20:12:03.047 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:12:04.016 | DEBUG    | __main__:run_benchmark:297 - Query: Get rows in dataframe dfin where column 'gamma' equals 9 and column 'beta' has value less than 40 or greater than 53
2022-08-05 20:12:04.016 | DEBUG    | __main__:run_benchmark:298 - dftest = dfin.loc[(dfin['gamma'] == 9) & ((dfin['beta'] < 40) | (dfin['beta'] > 53))]
2022-08-05 20:12:04.026 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:12:04.883 | DEBUG    | __main__:run_benchmark:297 - Query: Get rows in dataframe dfin where column 'gamma' equals 9 and column 'beta' is less than 40 or greater than 53
2022-08-05 20:12:04.883 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin.query('gamma==9 & (beta<40 | beta>53)')
2022-08-05 20:12:04.893 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:12:05.725 | DEBUG    | __main__:run_benchmark:297 - Query: Get rows in dataframe dfin where column 'gamma' equals 9 and (column 'beta' is less than 40 or greater than 53)
2022-08-05 20:12:05.725 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['gamma']==9) & ((dfin['beta'] < 40) | (dfin['beta'] > 53))]
2022-08-05 20:12:05.735 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:12:07.160 | DEBUG    | __main__:run_benchmark:297 - Query: get rows with beta greater than 53 or less than 40 and gamma equal to 9
2022-08-05 20:12:07.160 | DEBUG    | __main__:run_benchmark:298 - #  get rows with alpha less than or equal to -5 or greater than or equal to 15
2022-08-05 20:12:07.160 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:12:07.812 | DEBUG    | __main__:run_benchmark:297 - Query: get rows with beta greater than 53 or less than 40 AND gamma equal to 9
2022-08-05 20:12:07.812 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin.beta > 53) | (dfin.beta < 40) & (dfin.gamma == 9)]
2022-08-05 20:12:07.830 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:12:08.657 | DEBUG    | __main__:run_benchmark:297 - Query: get rows with beta greater than 53 or less than 40, filter rows with gamma equal to 9
2022-08-05 20:12:08.657 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[(dfin['beta'] > 53) | (dfin['beta'] < 40) | (dfin['gamma'] == 9)]
2022-08-05 20:12:08.675 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:12:08.677 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:12:09.665 | DEBUG    | __main__:run_benchmark:297 - Query: filter rows where 'alpha' is equal to 4 and 'gamma' is less than 40 or greater than 53
2022-08-05 20:12:09.665 | DEBUG    | __main__:run_benchmark:298 - dfout = df.loc[(df.alpha == 4) & ((df.gamma < 40) | (df.gamma > 53))]
2022-08-05 20:12:09.667 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:12:10.508 | DEBUG    | __main__:run_benchmark:297 - Query: filter rows where 'alpha' is equal to 4 and 'gamma' is not between 40 and 53
2022-08-05 20:12:10.508 | DEBUG    | __main__:run_benchmark:298 - dfin.query("alpha == 4 and gamma < 40 and gamma > 53")
2022-08-05 20:12:10.523 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:12:11.489 | DEBUG    | __main__:run_benchmark:297 - Query: From dfin, filter rows with column gamma less than 40 or more than 53, and column alpha equal to 4
2022-08-05 20:12:11.489 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[(dfin['gamma'] < 40) | (dfin['gamma'] > 53) | (dfin['alpha'] == 4)]
2022-08-05 20:12:11.508 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:12:12.505 | DEBUG    | __main__:run_benchmark:297 - Query: From dfin, filter rows with column alpha equal to 4 and column gamma less than 40 or more than 53
2022-08-05 20:12:12.505 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['alpha']==4) & ((dfin['gamma']<40) | (dfin['gamma']>53))]
2022-08-05 20:12:12.514 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:12:13.485 | DEBUG    | __main__:run_benchmark:297 - Query: From dfin, filter rows with column alpha equal to 4 and (column gamma less than 40 or more than 53)
2022-08-05 20:12:13.485 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[(dfin.alpha == 4) & ((dfin.gamma < 40) | (dfin.gamma > 53))]
2022-08-05 20:12:13.495 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:12:14.483 | DEBUG    | __main__:run_benchmark:297 - Query: From dfin, filter rows with column alpha equal to 4 and ((column gamma less than 40) or (column gamma more than 53))
2022-08-05 20:12:14.483 | DEBUG    | __main__:run_benchmark:298 - print(dfin[(dfin['alpha'] == 4) & ((dfin['gamma'] < 40) | (dfin['gamma'] > 53))])
2022-08-05 20:12:14.484 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['alpha'] == 4) & ((dfin['gamma'] < 40) | (dfin['gamma'] > 53)))]

2022-08-05 20:12:14.495 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:12:14.498 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-05 20:12:15.351 | DEBUG    | __main__:run_benchmark:297 - Query: retain those rows where value in cell of column 'foo' is equal to 11 and value in column 'bar' is either less than 38 or greater than 60
2022-08-05 20:12:15.352 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin.foo == 11) & (dfin.bar < 38 | dfin.bar > 60)]
2022-08-05 20:12:15.354 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:12:16.172 | DEBUG    | __main__:run_benchmark:297 - Query: retain those rows where value in cell of column 'foo' is equal to 11 and value in column 'bar' is not between 37 and 61
2022-08-05 20:12:16.172 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['foo'] == 11) & ~(dfin['bar'].between(37, 61))]
2022-08-05 20:12:16.181 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:12:17.026 | DEBUG    | __main__:run_benchmark:297 - Query: retain those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is equal to 11
2022-08-05 20:12:17.026 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['bar'] <= 61) & (dfin['bar'] >= 37) & (dfin['foo'] == 11)]
2022-08-05 20:12:17.045 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:12:17.845 | DEBUG    | __main__:run_benchmark:297 - Query: drop those rows where value in column 'bar' is between 37 and 61 and value in cell of column 'foo' is not 11
2022-08-05 20:12:17.845 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[(dfin['bar'] < 37) | (dfin['bar'] > 61) | (dfin['foo'] == 11)]
2022-08-05 20:12:17.863 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:12:19.436 | DEBUG    | __main__:run_benchmark:297 - Query: print rows where (bar < 38 or bar > 60) and foo = 11
2022-08-05 20:12:19.436 | DEBUG    | __main__:run_benchmark:298 - #  print rows where (bar < 38 or bar > 60) and foo = 11
2022-08-05 20:12:19.437 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:12:20.438 | DEBUG    | __main__:run_benchmark:297 - Query: print rows where bar < 38 or bar > 60 and foo = 11
2022-08-05 20:12:20.438 | DEBUG    | __main__:run_benchmark:298 - print(dfin[(dfin['bar'] < 38) | (dfin['bar'] > 60) & (dfin['foo'] == 11)])
2022-08-05 20:12:20.439 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]

2022-08-05 20:12:20.447 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin[((dfin['bar'] < 38) | ((dfin['bar'] > 60) & (dfin['foo'] == 11)))]

2022-08-05 20:12:20.457 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:12:21.342 | DEBUG    | __main__:run_benchmark:297 - Query: get all rows with column 'foo' having value 11 and column 'bar' value greater than 60 or less than 38
2022-08-05 20:12:21.342 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[(dfin['foo'] == 11) & (dfin['bar'] > 60) | (dfin['bar'] < 38)]
2022-08-05 20:12:21.361 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:12:22.226 | DEBUG    | __main__:run_benchmark:297 - Query: get all rows with column 'foo' having value 11 and (column 'bar' value greater than 60 or less than 38)
2022-08-05 20:12:22.226 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[(dfin['foo'] == 11) & ((dfin['bar'] > 60) | (dfin['bar'] < 38))]
2022-08-05 20:12:22.240 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:12:23.068 | DEBUG    | __main__:run_benchmark:297 - Query: filter rows where (bar<38 || bar>60) && foo==11
2022-08-05 20:12:23.069 | DEBUG    | __main__:run_benchmark:298 - dfin.query('(bar<38 || bar>60) & foo==11')
2022-08-05 20:12:23.072 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:12:24.786 | DEBUG    | __main__:run_benchmark:297 - Query: select rows from dfin such that column 'bar' is less than 38 or greater than 60 and column 'foo' equals 11
2022-08-05 20:12:24.787 | DEBUG    | __main__:run_benchmark:298 - #  select rows from dfin such that column 'bar' is less than 38 or greater than 60 and column 'foo' equals 11
2022-08-05 20:12:24.787 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:12:24.791 | DEBUG    | __main__:run:356 - Running benchmark 6
2022-08-05 20:12:24.791 | DEBUG    | __main__:run:357 - Number of Sets: 4
2022-08-05 20:12:24.791 | DEBUG    | __main__:run:363 - Number of queries: 27
2022-08-05 20:12:24.905 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'"...
    │               └ {'queries': [{'query': "filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'"...
    └ {'query': "filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'", 'user': 'u12'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin1 = pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'beta': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3,...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin1 = pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95},...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0a83e10>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:12:24 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:12:24 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f098f310>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:12:24.909 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:12:55.033 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'"...
    │               └ {'queries': [{'query': "filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'"...
    └ {'query': "filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'", 'user': 'u12'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin1 = pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'beta': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3,...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin1 = pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95},...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0a26150>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:12:55 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:12:55 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f095d190>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:12:55.041 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:13:25.798 | DEBUG    | __main__:run_benchmark:297 - Query: filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'
2022-08-05 20:13:25.798 | DEBUG    | __main__:run_benchmark:298 - df1 = dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-05 20:13:25.820 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:13:26.514 | DEBUG    | __main__:run_benchmark:297 - Query: filter all rows in input 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'
2022-08-05 20:13:26.514 | DEBUG    | __main__:run_benchmark:298 - dfint = dfin1[dfin1.alpha.isin(dfin2.alpha)]
2022-08-05 20:13:26.536 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:13:27.458 | DEBUG    | __main__:run_benchmark:297 - Query: get all rows in input 'dfin1' where value in column 'alpha' in 'dfin1' is not present in column 'alpha' of 'dfin2'
2022-08-05 20:13:27.459 | DEBUG    | __main__:run_benchmark:298 - dfout1 = dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-05 20:13:27.470 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:13:28.184 | DEBUG    | __main__:run_benchmark:297 - Query: get all rows in input 'dfin1' where column 'alpha' in 'dfin1' is not present in column 'alpha' of 'dfin2'
2022-08-05 20:13:28.184 | DEBUG    | __main__:run_benchmark:298 - dfout1 = dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-05 20:13:28.196 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:13:28.999 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows in 'dfin1' where value in column 'alpha' equals to that in column 'alpha' in 'dfin2'
2022-08-05 20:13:28.999 | DEBUG    | __main__:run_benchmark:298 - dfin1.drop(dfin1[dfin1['alpha'] == dfin2['alpha']].index)
2022-08-05 20:13:29.002 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:13:30.594 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows in 'dfin1' where value in column 'alpha' exists in column 'alpha' in 'dfin2'
2022-08-05 20:13:30.595 | DEBUG    | __main__:run_benchmark:298 - #  drop columns in 'dfin1' where value in column 'beta' exists in column 'beta' in 'dfin2'
2022-08-05 20:13:30.595 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:13:31.753 | DEBUG    | __main__:run_benchmark:297 - Query: Remove rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-05 20:13:31.753 | DEBUG    | __main__:run_benchmark:298 - dfin1 = dfin1[dfin1.alpha != dfin2.alpha]
2022-08-05 20:13:31.756 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:13:32.557 | DEBUG    | __main__:run_benchmark:297 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2
2022-08-05 20:13:32.557 | DEBUG    | __main__:run_benchmark:298 - df_out = dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-05 20:13:32.569 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:13:34.260 | DEBUG    | __main__:run_benchmark:297 - Query: Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2 and remove them from dfin1
2022-08-05 20:13:34.260 | DEBUG    | __main__:run_benchmark:298 - #  Filter out rows of dfin1 that have the same value in column 'alpha' of dfin2 and remove them from dfin1
2022-08-05 20:13:34.260 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:13:36.485 | DEBUG    | __main__:run_benchmark:297 - Query: Filter out rows of dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2 and remove them from dfin1
2022-08-05 20:13:36.485 | DEBUG    | __main__:run_benchmark:298 - #  Join dfin1 and dfin2 together by column 'alpha' and 'beta' and store the result in a dataframe dfin3.
2022-08-05 20:13:36.485 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:13:37.309 | DEBUG    | __main__:run_benchmark:297 - Query: Remove rows of dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-05 20:13:37.309 | DEBUG    | __main__:run_benchmark:298 - dfin1.drop(dfin1[dfin1['alpha'] == dfin2['alpha']].index, inplace=True)
2022-08-05 20:13:37.312 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:13:38.008 | DEBUG    | __main__:run_benchmark:297 - Query: Filter rows from dfin1 whose value in column 'alpha' have the same value in column 'alpha' of dfin2
2022-08-05 20:13:38.009 | DEBUG    | __main__:run_benchmark:298 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-05 20:13:38.030 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:13:38.898 | DEBUG    | __main__:run_benchmark:297 - Query: Remove all rows from dfin1 which has same column 'alpha' as dfin2
2022-08-05 20:13:38.898 | DEBUG    | __main__:run_benchmark:298 - dfin1[~dfin1.alpha.isin(dfin2.alpha)]
2022-08-05 20:13:38.909 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:13:39.999 | DEBUG    | __main__:run_benchmark:297 - Query: Remove all matched rows of dfin1 and difn2 on column 'alpha' from dfin1
2022-08-05 20:13:39.999 | DEBUG    | __main__:run_benchmark:298 - dfin1.drop(dfin1.index[dfin1['alpha'] == dfin2['alpha']])
2022-08-05 20:13:40.002 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:13:41.613 | DEBUG    | __main__:run_benchmark:297 - Query: retain rows in dfin1 if 'alpha' in dfin2 not in 'alpha' in dfin1
2022-08-05 20:13:41.613 | DEBUG    | __main__:run_benchmark:298 - #  retain rows in dfin1 if 'alpha' in dfin2 not in 'alpha' in dfin1
2022-08-05 20:13:41.613 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:13:43.172 | DEBUG    | __main__:run_benchmark:297 - Query: retain rows in dfin1 if 'alpha' in dfin2 is not in 'alpha' in dfin1
2022-08-05 20:13:43.172 | DEBUG    | __main__:run_benchmark:298 - #dfin1 = dfin1.merge(dfin2, on='alpha', how='right')
2022-08-05 20:13:43.172 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:13:44.034 | DEBUG    | __main__:run_benchmark:297 - Query: retain rows in 'dfin1' if 'alpha' in 'dfin2' is not in 'alpha' in 'dfin1'
2022-08-05 20:13:44.035 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin1[dfin2.alpha.isin(dfin1.alpha)]
2022-08-05 20:13:44.038 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:13:44.772 | DEBUG    | __main__:run_benchmark:297 - Query: select entries in dfin1 where column 'alpha' values are not in column 'alpha' of dfin2
2022-08-05 20:13:44.773 | DEBUG    | __main__:run_benchmark:298 - dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-05 20:13:44.784 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:13:45.369 | DEBUG    | __main__:run_benchmark:297 - Query: subtract dfin2 from dfin1 on column 'alpha'
2022-08-05 20:13:45.369 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin1.subtract(dfin2, axis=1)
2022-08-05 20:13:45.393 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:13:46.590 | DEBUG    | __main__:run_benchmark:297 - Query: remove dfin2 from dfin1 on column 'alpha'
2022-08-05 20:13:46.590 | DEBUG    | __main__:run_benchmark:298 - dfin1.drop(index=dfin2.index, columns=['alpha'])
2022-08-05 20:13:46.611 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:13:47.908 | DEBUG    | __main__:run_benchmark:297 - Query: set difference of dfin2 from dfin1 on column 'alpha'
2022-08-05 20:13:47.909 | DEBUG    | __main__:run_benchmark:298 - #  set difference of dfin2 from dfin1 on column 'alpha'
2022-08-05 20:13:47.909 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:13:48.581 | DEBUG    | __main__:run_benchmark:297 - Query: difference between dfin1 and dfin2 on column 'alpha'
2022-08-05 20:13:48.581 | DEBUG    | __main__:run_benchmark:298 - print(dfin1.alpha - dfin2.alpha)
2022-08-05 20:13:48.581 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: (dfin1.alpha - dfin2.alpha)

2022-08-05 20:13:48.590 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: (dfin1.alpha - dfin2.alpha)

2022-08-05 20:13:48.599 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:13:49.444 | DEBUG    | __main__:run_benchmark:297 - Query: select values in df1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-05 20:13:49.445 | DEBUG    | __main__:run_benchmark:298 - df1[(df1.alpha.isin(dfin2.alpha)) & (df1.alpha.isin(dfin1.alpha))]
2022-08-05 20:13:49.447 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:13:49.561 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'"...
    │               └ {'queries': [{'query': "filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'"...
    └ {'query': "select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal", 'user': 'u8'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin1 = pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'beta': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3,...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin1 = pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95},...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0974d90>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:13:49 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:13:49 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0911a50>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:13:49.565 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:14:20.720 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'"...
    │               └ {'queries': [{'query': "filter all rows in 'dfin1' where value in column 'alpha' is not present in column 'alpha' of 'dfin2'"...
    └ {'query': "select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal", 'user': 'u8'}

  File "experiments/jigsaw_experiments.py", line 291, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin1 = pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'beta': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3,...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin1 = pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95},...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0a2ae10>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:14:20 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:14:20 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0963b90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:14:20.724 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:14:51.437 | DEBUG    | __main__:run_benchmark:297 - Query: select values in dfin1 where column 'alpha' values in dfin2 and dfin1 are not equal
2022-08-05 20:14:51.438 | DEBUG    | __main__:run_benchmark:298 - dfin1[dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-05 20:14:51.459 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:14:52.685 | DEBUG    | __main__:run_benchmark:297 - Query: select values in df1 where column 'alpha' values in df2 and df1 are not equal
2022-08-05 20:14:52.685 | DEBUG    | __main__:run_benchmark:298 - df1 = pd.DataFrame({'alpha': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'beta': {0: -1, 1: -2, 2: 2, 3: 3,
2022-08-05 20:14:52.686 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:14:53.357 | DEBUG    | __main__:run_benchmark:297 - Query: select values in dfin1 where column 'alpha' values in dfin2 are not in dfin1
2022-08-05 20:14:53.357 | DEBUG    | __main__:run_benchmark:298 - dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-05 20:14:53.369 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:14:54.608 | DEBUG    | __main__:run_benchmark:297 - Query: select values in dfin1 where dfin1 values are not in df2 for column 'alpha'
2022-08-05 20:14:54.608 | DEBUG    | __main__:run_benchmark:298 - dfout1 = dfin1[~dfin1['alpha'].isin(dfin2['alpha'])]
2022-08-05 20:14:54.620 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:14:54.622 | DEBUG    | __main__:run:363 - Number of queries: 26
2022-08-05 20:14:55.773 | DEBUG    | __main__:run_benchmark:297 - Query: Get rows in dataframe dfin1 which don't have matching rows in dataframe dfin2 along column 'bar'
2022-08-05 20:14:55.773 | DEBUG    | __main__:run_benchmark:298 - df_diff1 = dfin1[~dfin1.bar.isin(dfin2.bar)]
2022-08-05 20:14:55.784 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:14:57.003 | DEBUG    | __main__:run_benchmark:297 - Query: Get rows in dataframe dfin1 where the value in column 'bar' is not present in column 'bar' of dfin2
2022-08-05 20:14:57.004 | DEBUG    | __main__:run_benchmark:298 - dfout1 = dfout1.loc[dfout1.bar.isin(dfin2.bar) == False]
2022-08-05 20:14:57.006 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:14:58.171 | DEBUG    | __main__:run_benchmark:297 - Query: Get rows in dataframe dfin1 where the value in column 'bar' is not in column 'bar' of dfin2
2022-08-05 20:14:58.171 | DEBUG    | __main__:run_benchmark:298 - dfout1 = dfin1[~dfin1['bar'].isin(dfin2['bar'])]
2022-08-05 20:14:58.182 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:14:58.850 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows in dataframe dfin1 where the value in column 'bar' is not in column 'bar' of dfin2
2022-08-05 20:14:58.850 | DEBUG    | __main__:run_benchmark:298 - dfin1[~dfin1['bar'].isin(dfin2['bar'])]
2022-08-05 20:14:58.862 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:14:59.984 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows in dataframe dfin1 where the value in column 'bar' is not in column 'bar' of dataframe dfin2
2022-08-05 20:14:59.984 | DEBUG    | __main__:run_benchmark:298 - dfout1 = pd.DataFrame({'bar': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'yah': {0: -1, 1: -2, 2: 2, 3: 3
2022-08-05 20:14:59.984 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:15:01.943 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows in dataframe dfin1 where the value in column 'bar' is not in dataframe dfin2 column 'bar'
2022-08-05 20:15:01.944 | DEBUG    | __main__:run_benchmark:298 - #  Select rows in dataframe dfin1 where the value in column 'bar' is not in dataframe dfin2 column 'bar'
2022-08-05 20:15:01.944 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:15:02.935 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dataframe dfin1 where the value in column 'bar' is not in dataframe dfin2 column 'bar'
2022-08-05 20:15:02.935 | DEBUG    | __main__:run_benchmark:298 - dfin1[~dfin1['bar'].isin(dfin2['bar'])]
2022-08-05 20:15:02.947 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:15:05.564 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dataframe dfin1 where the values in column 'bar' do not match values in column 'bar' of dataframe dfin2
2022-08-05 20:15:05.564 | DEBUG    | __main__:run_benchmark:298 - #  Select rows from dataframe dfin1 where the values in column 'bar' match values in column 'bar' of dataframe dfin2
2022-08-05 20:15:05.564 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:15:07.013 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dataframe dfin1 where the values in column 'bar' do not exist in column 'bar' of dataframe dfin2
2022-08-05 20:15:07.013 | DEBUG    | __main__:run_benchmark:298 - dfout = df_intersect_rows(dfin1, dfin2, 'bar', 'bar')
2022-08-05 20:15:07.016 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:15:08.347 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dataframe dfin1 where the values in column 'bar' is not in column 'bar' of dataframe dfin2
2022-08-05 20:15:08.347 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin1[~dfin1.bar.isin(dfin2.bar)]
2022-08-05 20:15:08.361 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:15:09.294 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Get rows in dataframe dfin1 which don't have matching rows in dataframe dfin2 along column 'bar'", 'u...
    │               └ {'queries': [{'query': "Get rows in dataframe dfin1 which don't have matching rows in dataframe dfin2 along column 'bar'", 'u...
    └ {'query': "Select rows from dataframe dfin1 where the values in column 'bar' is not one of the values of column 'bar' of data...

  File "experiments/jigsaw_experiments.py", line 291, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin1 = pd.DataFrame({'bar': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'yah': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5:...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin1 = pd.DataFrame({'bar': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, '...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0911a50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:15:09 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:15:09 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f098f4d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:15:09.299 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:15:39.674 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Get rows in dataframe dfin1 which don't have matching rows in dataframe dfin2 along column 'bar'", 'u...
    │               └ {'queries': [{'query': "Get rows in dataframe dfin1 which don't have matching rows in dataframe dfin2 along column 'bar'", 'u...
    └ {'query': "Select rows from dataframe dfin1 where the values in column 'bar' is not one of the values of column 'bar' of data...

  File "experiments/jigsaw_experiments.py", line 291, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin1 = pd.DataFrame({'bar': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'yah': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5:...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin1 = pd.DataFrame({'bar': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, '...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f092d750>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:15:39 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:15:39 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0915f50>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:15:39.678 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:16:10.414 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dataframe dfin1 where the values in column 'bar' is not one of the values of column 'bar' of dataframe dfin2
2022-08-05 20:16:10.414 | DEBUG    | __main__:run_benchmark:298 - #  Select rows from dataframe dfin1 where the values in column 'bar' is one of the values of column 'bar' of dataframe dfin2
2022-08-05 20:16:10.414 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:16:11.248 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dataframe dfin1 whose value in column 'bar' is not in column 'bar' of dataframe dfin2
2022-08-05 20:16:11.249 | DEBUG    | __main__:run_benchmark:298 - print('\nSelect rows from dataframe dfin1 whose value in column \'bar\' is not in column \'bar\' of dataframe dfin2')
2022-08-05 20:16:11.249 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: "\nSelect rows from dataframe dfin1 whose value in column 'bar' is not in column 'bar' of dataframe dfin2"

2022-08-05 20:16:11.258 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: "\nSelect rows from dataframe dfin1 whose value in column 'bar' is not in column 'bar' of dataframe dfin2"

2022-08-05 20:16:11.267 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:16:11.960 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dataframe dfin1 whose value in column 'bar' is not in dataframe dfin2 column 'bar'
2022-08-05 20:16:11.960 | DEBUG    | __main__:run_benchmark:298 - dfout1 = df_subset_rows(dfin1, dfin2, 'bar')
2022-08-05 20:16:11.963 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:16:13.136 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dataframe dfin1 whose value in column 'bar' does not exist in dataframe dfin2 column 'bar'
2022-08-05 20:16:13.136 | DEBUG    | __main__:run_benchmark:298 - dfin1[~dfin1['bar'].isin(dfin2['bar'])]
2022-08-05 20:16:13.148 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:16:14.574 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dataframe dfin1 where column 'bar' does not exist in dataframe dfin2 column 'bar'
2022-08-05 20:16:14.574 | DEBUG    | __main__:run_benchmark:298 - #  Select rows from dataframe dfin1 where column 'bar' exists in dataframe dfin2 column 'bar'
2022-08-05 20:16:14.575 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:16:15.359 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dataframe dfin1 where column 'bar' values are not in dataframe dfin2 column 'bar'
2022-08-05 20:16:15.359 | DEBUG    | __main__:run_benchmark:298 - dfin1[~dfin1['bar'].isin(dfin2['bar'])]
2022-08-05 20:16:15.372 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:16:16.054 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dataframe dfin1 where values in column 'bar' of dataframe dfin1 are not in values in column 'bar' of dataframe dfin2
2022-08-05 20:16:16.054 | DEBUG    | __main__:run_benchmark:298 - dfout1 = dfin1[~dfin1['bar'].isin(dfin2['bar'])]
2022-08-05 20:16:16.066 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:16:18.461 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dataframe dfin1 where values in column 'bar' of dataframe dfin1 are not part of values in column 'bar' of dataframe dfin2
2022-08-05 20:16:18.461 | DEBUG    | __main__:run_benchmark:298 - #  Select rows from dataframe dfin1 where values in column 'bar' of dataframe dfin1 are not part of values in column 'bar' of dataframe dfin2, and values in column 'yah' of dataframe dfin1 are not part of values in column 'yah'
2022-08-05 20:16:18.461 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:16:20.544 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dataframe dfin1 where values in column 'bar' of dataframe dfin1 do not exist in values in column 'bar' of dataframe dfin2
2022-08-05 20:16:20.545 | DEBUG    | __main__:run_benchmark:298 - #  Select rows from dataframe dfin1 where values in column 'bar' of dataframe dfin1 all exist in values in column 'bar' of dataframe dfin2
2022-08-05 20:16:20.545 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:16:21.785 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dataframe dfin1 where values in column 'bar' do not exist in values in column 'bar' of dataframe dfin2
2022-08-05 20:16:21.785 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin1[~dfin1['bar'].isin(dfin2['bar'])]
2022-08-05 20:16:21.797 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:16:22.498 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dataframe dfin1 where values in column 'bar' do not exist in column 'bar' of dataframe dfin2
2022-08-05 20:16:22.498 | DEBUG    | __main__:run_benchmark:298 - dfin1[~dfin1.bar.isin(dfin2.bar)]
2022-08-05 20:16:22.510 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:16:23.686 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dataframe where intersection between dataframe dfin1 and dataframe dfin2 along column 'bar' is empty
2022-08-05 20:16:23.686 | DEBUG    | __main__:run_benchmark:298 - dfout1 = dfin1[~dfin1['bar'].isin(dfin2['bar'])]
2022-08-05 20:16:23.698 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:16:24.478 | DEBUG    | __main__:run_benchmark:297 - Query: Remove rows from dataframe dfin1 whose values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-05 20:16:24.479 | DEBUG    | __main__:run_benchmark:298 - print(dfin1)
2022-08-05 20:16:24.479 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin1

2022-08-05 20:16:24.490 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin1

2022-08-05 20:16:24.500 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:16:25.689 | DEBUG    | __main__:run_benchmark:297 - Query: Remove rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-05 20:16:25.689 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin1[~dfin1['bar'].isin(dfin2['bar'])]
2022-08-05 20:16:25.701 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:16:27.572 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2
2022-08-05 20:16:27.572 | DEBUG    | __main__:run_benchmark:298 - #  Select rows from dataframe dfin1 where values in column 'bar' exist in column 'bar' of dataframe dfin2, and rows where values in column 'foo' exist in column 'foo' of dataframe dfin2
2022-08-05 20:16:27.572 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:16:28.744 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dataframe dfin1 where values in column 'bar' don't exist in column 'bar' of dataframe dfin2
2022-08-05 20:16:28.744 | DEBUG    | __main__:run_benchmark:298 - dfout = df_diff(dfin1, dfin2, 'bar')
2022-08-05 20:16:28.747 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:16:28.750 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:16:29.452 | DEBUG    | __main__:run_benchmark:297 - Query: only retain those rows in 'dfin1' where element in column 'beta' is not present in dataframe 'dfin2' in column 'beta'
2022-08-05 20:16:29.452 | DEBUG    | __main__:run_benchmark:298 - dfout1 = dfin1[~dfin1['beta'].isin(dfin2['beta'])]
2022-08-05 20:16:29.464 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:16:30.331 | DEBUG    | __main__:run_benchmark:297 - Query: only retain those rows in 'dfin1' where element in column 'beta' are not present in column 'beta' of 'dfin2'
2022-08-05 20:16:30.331 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin1.loc[~dfin1['beta'].isin(dfin2['beta'])]
2022-08-05 20:16:30.344 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:16:31.071 | DEBUG    | __main__:run_benchmark:297 - Query: retain those rows in 'dfin1' where element in column 'beta' are not present in column 'beta' of 'dfin2'
2022-08-05 20:16:31.071 | DEBUG    | __main__:run_benchmark:298 - dfout1 = dfin1[~dfin1['beta'].isin(dfin2['beta'])]
2022-08-05 20:16:31.085 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:16:31.953 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows in 'dfin1' whose values of column 'beta' are present in 'beta' column of dfin2
2022-08-05 20:16:31.953 | DEBUG    | __main__:run_benchmark:298 - dfin1.drop(dfin1[dfin1.beta.isin(dfin2.beta)].index)
2022-08-05 20:16:31.966 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:16:32.804 | DEBUG    | __main__:run_benchmark:297 - Query: retain those rows in 'dfin1' where element in column 'beta' is not present i column 'beta' of 'dfin2'
2022-08-05 20:16:32.804 | DEBUG    | __main__:run_benchmark:298 - dfin1[~dfin1['beta'].isin(dfin2['beta'])]
2022-08-05 20:16:32.816 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:16:33.559 | DEBUG    | __main__:run_benchmark:297 - Query: select all rows in dfin1 where column 'beta' in dfin1 is not equal to column 'beta' in dfin2
2022-08-05 20:16:33.559 | DEBUG    | __main__:run_benchmark:298 - print(dfin1.loc[~dfin1['beta'].isin(dfin2['beta'])])
2022-08-05 20:16:33.560 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin1.loc[(~ dfin1['beta'].isin(dfin2['beta']))]

2022-08-05 20:16:33.572 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:16:34.789 | DEBUG    | __main__:run_benchmark:297 - Query: select rows in dfin1 where column 'beta' in dfin1 is not equal to column 'beta' in dfin2
2022-08-05 20:16:34.790 | DEBUG    | __main__:run_benchmark:298 - dfin1[dfin1['beta'] != dfin2['beta']]
2022-08-05 20:16:34.793 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:16:34.796 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-05 20:16:35.541 | DEBUG    | __main__:run_benchmark:297 - Query: From dfin, filter rows with column dfin1.yah not in dfin2.yah
2022-08-05 20:16:35.541 | DEBUG    | __main__:run_benchmark:298 - dfin2[~dfin2.yah.isin(dfin1.yah)]
2022-08-05 20:16:35.563 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:16:35.681 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'From dfin, filter rows with column dfin1.yah not in dfin2.yah', 'user': 'u17'}, {'query': 'From dfin,...
    │               └ {'queries': [{'query': 'From dfin, filter rows with column dfin1.yah not in dfin2.yah', 'user': 'u17'}, {'query': 'From dfin,...
    └ {'query': 'From dfin, filter rows with dfin1.yah values not in column dfin2.yah', 'user': 'u17'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin1 = pd.DataFrame({'yah': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'foo': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5:...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin1 = pd.DataFrame({'yah': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, '...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f09fe9d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:16:35 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:16:35 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f097ca50>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:16:35.686 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:17:05.829 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'From dfin, filter rows with column dfin1.yah not in dfin2.yah', 'user': 'u17'}, {'query': 'From dfin,...
    │               └ {'queries': [{'query': 'From dfin, filter rows with column dfin1.yah not in dfin2.yah', 'user': 'u17'}, {'query': 'From dfin,...
    └ {'query': 'From dfin, filter rows with dfin1.yah values not in column dfin2.yah', 'user': 'u17'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin1 = pd.DataFrame({'yah': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'foo': {0: -1, 1: -2, 2: 2, 3: 3, 4: 3, 5:...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin1 = pd.DataFrame({'yah': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, '...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0a2a6d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:17:05 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:17:05 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0915d10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:17:05.834 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:17:37.087 | DEBUG    | __main__:run_benchmark:297 - Query: From dfin, filter rows with dfin1.yah values not in column dfin2.yah
2022-08-05 20:17:37.088 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin.loc[dfin1.yah.isin(dfin2.yah)]
2022-08-05 20:17:37.091 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:37.093 | DEBUG    | __main__:run:356 - Running benchmark 7
2022-08-05 20:17:37.094 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-05 20:17:37.094 | DEBUG    | __main__:run:363 - Number of queries: 21
2022-08-05 20:17:37.926 | DEBUG    | __main__:run_benchmark:297 - Query: filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-05 20:17:37.927 | DEBUG    | __main__:run_benchmark:298 - dfout = dfout[(dfout.foo < 40) | (dfout.foo > 50) | (dfout.bar != 8)]
2022-08-05 20:17:37.929 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:39.166 | DEBUG    | __main__:run_benchmark:297 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40 and less than 30 and value in column 'bar' is equal to 8)
2022-08-05 20:17:39.166 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[((dfin['foo'] < 40) | (dfin['foo'] > 50)) | ((dfin['foo'] > 40) & (dfin['foo'] < 30) & (dfin['bar'] == 8))]
2022-08-05 20:17:39.185 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:40.568 | DEBUG    | __main__:run_benchmark:297 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8) OR (value in column 'foo' is greater than 40
2022-08-05 20:17:40.569 | DEBUG    | __main__:run_benchmark:298 - #  filter all rows where value in column 'foo' is less than 40 and value in column 'bar' is equal to -1
2022-08-05 20:17:40.569 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:42.218 | DEBUG    | __main__:run_benchmark:297 - Query: filter all rows where (value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8)
2022-08-05 20:17:42.218 | DEBUG    | __main__:run_benchmark:298 - #  filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'bar' is not equal to 8
2022-08-05 20:17:42.219 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:43.861 | DEBUG    | __main__:run_benchmark:297 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-05 20:17:43.862 | DEBUG    | __main__:run_benchmark:298 - #  filter all rows where (value in column 'bar' is not equal to 8 and the following is 'true': value in column 'foo' is less than 40 or greater than 50)
2022-08-05 20:17:43.862 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:44.718 | DEBUG    | __main__:run_benchmark:297 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50)
2022-08-05 20:17:44.718 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin.bar != 8) & (dfin.foo < 40) | (dfin.foo > 50)]
2022-08-05 20:17:44.738 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:45.582 | DEBUG    | __main__:run_benchmark:297 - Query: filter all rows where (value in column 'bar' is not equal to 8 and the value in column 'foo' is less than 40 or greater than 50).
2022-08-05 20:17:45.582 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['bar'] != 8) & (dfin['foo'] < 40) | (dfin['foo'] > 50)]
2022-08-05 20:17:45.601 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:46.413 | DEBUG    | __main__:run_benchmark:297 - Query: filter all rows where (value in column 'bar' is equal to 8 and the value in column 'foo' is greater than 40 and less than 50).
2022-08-05 20:17:46.413 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['bar'] == 8) & (dfin['foo'] > 40) & (dfin['foo'] < 50)]
2022-08-05 20:17:46.432 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:47.455 | DEBUG    | __main__:run_benchmark:297 - Query: Choose rows such that in column 'foo' it is greater than equal 34 and less than equal 70 or in column 'bar' not equals 8
2022-08-05 20:17:47.455 | DEBUG    | __main__:run_benchmark:298 - dfin[((dfin['foo'] >= 34) & (dfin['foo'] <= 70)) | (dfin['bar'] != 8)][['foo', 'bar']]
2022-08-05 20:17:47.474 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:48.267 | DEBUG    | __main__:run_benchmark:297 - Query: Remove rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-05 20:17:48.267 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[(dfin['foo'] > 34) & (dfin['foo'] < 70) & (dfin['bar'] == 8)]
2022-08-05 20:17:48.286 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:49.154 | DEBUG    | __main__:run_benchmark:297 - Query: Exclude rows with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-05 20:17:49.154 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['foo']>34) & (dfin['foo']<70) & (dfin['bar']==8)]
2022-08-05 20:17:49.173 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:50.577 | DEBUG    | __main__:run_benchmark:297 - Query: Remove rows from dfin with value of column 'foo' less than 34 or greater than 70 and value of column 'bar' is 8
2022-08-05 20:17:50.577 | DEBUG    | __main__:run_benchmark:298 - 
2022-08-05 20:17:50.578 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:51.440 | DEBUG    | __main__:run_benchmark:297 - Query: remove rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-05 20:17:51.441 | DEBUG    | __main__:run_benchmark:298 - dfin.query('foo > 70 or foo < 34 and bar == 8')
2022-08-05 20:17:51.461 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:52.306 | DEBUG    | __main__:run_benchmark:297 - Query: remove rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-05 20:17:52.306 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[(dfin['foo']<=70) & (dfin['foo']>=34) & (dfin['bar']!=8)]
2022-08-05 20:17:52.325 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:53.167 | DEBUG    | __main__:run_benchmark:297 - Query: retains rows where 'foo' less than 70 and 'foo' greater than 34, and 'bar' is not 8
2022-08-05 20:17:53.168 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] != 8)]
2022-08-05 20:17:53.186 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:54.863 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-05 20:17:54.863 | DEBUG    | __main__:run_benchmark:298 - #  create a new column 'baz' that is the sum of 'foo' and 'bar'
2022-08-05 20:17:54.863 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:55.801 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows in 'dfin' where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-05 20:17:55.802 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin[(dfin['foo'] < 70) & (dfin['foo'] > 34) & (dfin['bar'] == 8)]
2022-08-05 20:17:55.816 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:57.474 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows in dfin where 'foo' greater than 70 or 'foo' less than 34, and 'bar' is 8
2022-08-05 20:17:57.474 | DEBUG    | __main__:run_benchmark:298 - #  create a new column in dfin where you take the square root of 'foo' and multiply it by 'bar'
2022-08-05 20:17:57.474 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:58.408 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-05 20:17:58.408 | DEBUG    | __main__:run_benchmark:298 - dfin.drop(dfin.index[(dfin['bar'] == 8) & (dfin['foo'] > 70) | (dfin['foo'] < 34)])
2022-08-05 20:17:58.427 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:17:58.551 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'b...
    │               └ {'queries': [{'query': "filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'b...
    └ {'query': "drop rows in dfin where 'bar' is 8, and and 'foo' greater than 70 or 'foo' less than 34", 'user': 'u0'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'foo': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'bar': {0: -1, 1: 8, 2: 2, 3: 8, 4: ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'foo': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: ...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0911f50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:17:58 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:17:58 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0974990>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:17:58.556 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:18:29.480 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows in dfin where 'bar' is 8, and and 'foo' greater than 70 or 'foo' less than 34
2022-08-05 20:18:29.480 | DEBUG    | __main__:run_benchmark:298 - dfin.drop(dfin[(dfin.bar == 8) & ((dfin.foo > 70) | (dfin.foo < 34))].index)
2022-08-05 20:18:29.491 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:18:30.418 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'b...
    │               └ {'queries': [{'query': "filter all rows where value in column 'foo' is less than 40 or greater than 50 and value in column 'b...
    └ {'query': "remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34", 'user': 'u0'}

  File "experiments/jigsaw_experiments.py", line 291, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'foo': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: 48}, 'bar': {0: -1, 1: 8, 2: 2, 3: 8, 4: ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'foo': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95, 7: ...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f095d3d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:18:30 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:18:30 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f093da10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:18:30.422 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:19:01.238 | DEBUG    | __main__:run_benchmark:297 - Query: remove rows in dfin where 'bar' is 8, and 'foo' greater than 70 or 'foo' less than 34
2022-08-05 20:19:01.239 | DEBUG    | __main__:run_benchmark:298 - # create a new column 'new_col' where its values are the values of 'foo' divided by 2
2022-08-05 20:19:01.239 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:19:01.242 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:19:02.049 | DEBUG    | __main__:run_benchmark:297 - Query: Filter rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-05 20:19:02.050 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[(dfin['alpha'] < 40) | (dfin['alpha'] > 59) | (dfin['beta'] == 3)]
2022-08-05 20:19:02.069 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:19:03.605 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-05 20:19:03.605 | DEBUG    | __main__:run_benchmark:298 - #  Select rows from dfin in which column 'gamma' is less than -5 or greater than 10
2022-08-05 20:19:03.605 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:19:04.462 | DEBUG    | __main__:run_benchmark:297 - Query: Select rows from df names dfin in which column 'alpha' is less than 40 or greater than 59, or column 'beta' is equal to 3
2022-08-05 20:19:04.462 | DEBUG    | __main__:run_benchmark:298 - dfin[(dfin['alpha'] < 40) | (dfin['alpha'] > 59) | (dfin['beta'] == 3)]
2022-08-05 20:19:04.481 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:19:04.484 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-05 20:19:06.041 | DEBUG    | __main__:run_benchmark:297 - Query: drop those rows where value in column 'bar' is not between 37 and 61 and value in cell of column 'foo' is 11
2022-08-05 20:19:06.041 | DEBUG    | __main__:run_benchmark:298 - #  you can use the following methods to get the data from a DataFrame:
2022-08-05 20:19:06.041 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:19:06.827 | DEBUG    | __main__:run_benchmark:297 - Query: drop those rows where value in column 'bar' is greater than or equal to 38 and less than or equal to 60, OR value in cell of column 'foo' is not 11
2022-08-05 20:19:06.828 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin.loc[(dfin['bar'] < 38) | (dfin['bar'] > 60) | (dfin['foo'] != 11)]
2022-08-05 20:19:06.847 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:19:08.556 | DEBUG    | __main__:run_benchmark:297 - Query: print rows where not bar < 38 or bar > 60 and foo = 11
2022-08-05 20:19:08.556 | DEBUG    | __main__:run_benchmark:298 - #  print rows where not bar < 38 or bar > 60 and foo = 11 and yah = 15
2022-08-05 20:19:08.556 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:19:09.376 | DEBUG    | __main__:run_benchmark:297 - Query: print rows where not (bar < 38 or bar > 60 and foo = 11)
2022-08-05 20:19:09.376 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin[~((dfin.bar < 38) | (dfin.bar > 60 & dfin.foo == 11))]
2022-08-05 20:19:09.380 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:19:10.221 | DEBUG    | __main__:run_benchmark:297 - Query: filter rows where (bar>=38 && bar<=60) || foo!=11
2022-08-05 20:19:10.221 | DEBUG    | __main__:run_benchmark:298 - dfin.query("(bar>=38 & bar<=60) | foo!=11")
2022-08-05 20:19:10.232 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:19:10.235 | DEBUG    | __main__:run:356 - Running benchmark 8
2022-08-05 20:19:10.235 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-05 20:19:10.235 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:19:10.956 | DEBUG    | __main__:run_benchmark:297 - Query: take average of the previous 3 rows for each row of column 'a' except 1 and 2 row and assign back to 'a'
2022-08-05 20:19:10.956 | DEBUG    | __main__:run_benchmark:298 - dfin['a'] = dfin['a'].rolling(center=True, window=3).mean().shift(-2)
2022-08-05 20:19:10.963 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:19:11.612 | DEBUG    | __main__:run_benchmark:297 - Query: take average of the previous 3 rows for each row of column 'a' except for 0 and 1 row where put NaN and assign back
2022-08-05 20:19:11.612 | DEBUG    | __main__:run_benchmark:298 - dfin['a'] = dfin['a'].rolling(3).mean()
2022-08-05 20:19:11.619 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:19:12.208 | DEBUG    | __main__:run_benchmark:297 - Query: take average of the previous 3 rows for each row of column 'a' except for 1 and 2 row where put NaN and assign back
2022-08-05 20:19:12.209 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[1:2, 'a'] = np.nan
2022-08-05 20:19:12.215 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:19:12.823 | DEBUG    | __main__:run_benchmark:297 - Query: take average of the previous 3 rows for each row of column 'a'
2022-08-05 20:19:12.823 | DEBUG    | __main__:run_benchmark:298 - dfin.rolling(3).mean()
2022-08-05 20:19:12.840 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:19:12.845 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:19:13.562 | DEBUG    | __main__:run_benchmark:297 - Query: Compute rolling mean of window size 3 from 'colA'
2022-08-05 20:19:13.563 | DEBUG    | __main__:run_benchmark:298 - dfout_mean = dfin.rolling(3).mean()
2022-08-05 20:19:13.573 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:19:14.237 | DEBUG    | __main__:run_benchmark:297 - Query: Create column 'colA' by computing rolling mean of window size 3 from 'colA'
2022-08-05 20:19:14.237 | DEBUG    | __main__:run_benchmark:298 - dfin['colA'] = dfin['colA'].rolling(window=3).mean()
2022-08-05 20:19:14.244 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:19:14.823 | DEBUG    | __main__:run_benchmark:297 - Query: Use column 'colA' for computing rolling mean of window size 3
2022-08-05 20:19:14.823 | DEBUG    | __main__:run_benchmark:298 - dfin['mean_colA'] = dfin.colA.rolling(3).mean()
2022-08-05 20:19:14.830 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:19:16.197 | DEBUG    | __main__:run_benchmark:297 - Query: Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-05 20:19:16.197 | DEBUG    | __main__:run_benchmark:298 - #  Use column 'colA' from dfin to computing rolling mean of window size 3
2022-08-05 20:19:16.197 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:19:17.798 | DEBUG    | __main__:run_benchmark:297 - Query: Use the columns 'colA' from dfin and compute rolling mean of window size 3 from it
2022-08-05 20:19:17.799 | DEBUG    | __main__:run_benchmark:298 - #  Use the columns 'colA' and 'colB' from dfin and compute rolling mean of window size 3 on 'colA' and window size 5 on 'colB'
2022-08-05 20:19:17.799 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:19:18.782 | DEBUG    | __main__:run_benchmark:297 - Query: Set value of colA to average of previous three values
2022-08-05 20:19:18.783 | DEBUG    | __main__:run_benchmark:298 - dfin['colA'] = dfin['colA'].rolling(window=3).mean()
2022-08-05 20:19:18.789 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:19:18.793 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-05 20:19:20.006 | DEBUG    | __main__:run_benchmark:297 - Query: in column two choose median of previous 3 rows and assign back
2022-08-05 20:19:20.006 | DEBUG    | __main__:run_benchmark:298 - dfin['column2'] = dfin['column2'].fillna(dfin['column2'].rolling(3).median())
2022-08-05 20:19:20.014 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:19:20.129 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'in column two choose median of previous 3 rows and assign back', 'user': 'u13'}, {'query': "in 'colum...
    │               └ {'queries': [{'query': 'in column two choose median of previous 3 rows and assign back', 'user': 'u13'}, {'query': "in 'colum...
    └ {'query': "in 'column2' choose median of previous 3 rows and assign back", 'user': 'u13'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'column1': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'column2': {0: -1, 1: -2, 2: 2, 3: 3, 4...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'column1': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0911150>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:19:20 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:19:20 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0911ad0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:19:20.134 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:19:51.420 | DEBUG    | __main__:run_benchmark:297 - Query: in 'column2' choose median of previous 3 rows and assign back
2022-08-05 20:19:51.420 | DEBUG    | __main__:run_benchmark:298 - dfin.column2 = dfin.column2.rolling(3, min_periods=1).median()
2022-08-05 20:19:51.427 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:19:51.542 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'in column two choose median of previous 3 rows and assign back', 'user': 'u13'}, {'query': "in 'colum...
    │               └ {'queries': [{'query': 'in column two choose median of previous 3 rows and assign back', 'user': 'u13'}, {'query': "in 'colum...
    └ {'query': "in 'column2' choose median of previous 3 rows and assign back to 'column2'", 'user': 'u13'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'column1': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'column2': {0: -1, 1: -2, 2: 2, 3: 3, 4...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'column1': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f09b8090>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:19:51 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:19:51 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0939a90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:19:51.547 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:20:22.401 | DEBUG    | __main__:run_benchmark:297 - Query: in 'column2' choose median of previous 3 rows and assign back to 'column2'
2022-08-05 20:20:22.401 | DEBUG    | __main__:run_benchmark:298 - dfin['column2'] = dfin['column2'].rolling(3).median()
2022-08-05 20:20:22.408 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:20:22.939 | DEBUG    | __main__:run_benchmark:297 - Query: Rolling median of last 3 values in place
2022-08-05 20:20:22.939 | DEBUG    | __main__:run_benchmark:298 - dfin.column1.rolling(3, center=True).median()
2022-08-05 20:20:22.947 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:20:23.837 | DEBUG    | __main__:run_benchmark:297 - Query: replace column2 by median of previous three rows
2022-08-05 20:20:23.837 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[:, 'column2'] = dfin.loc[:, 'column2'].replace(-4, np.median(dfin.loc[:2, 'column2']))
2022-08-05 20:20:23.845 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:20:25.075 | DEBUG    | __main__:run_benchmark:297 - Query: replace values in column2 by median of column2 of previous three rows
2022-08-05 20:20:25.075 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[:, 'column2'] = dfin.loc[:, 'column2'].rolling(3).median()
2022-08-05 20:20:25.082 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:20:26.265 | DEBUG    | __main__:run_benchmark:297 - Query: replace values of dfin in column2 by median of column2 of previous three rows
2022-08-05 20:20:26.265 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.DataFrame({'column1': {0: 156, 1: 22, 2: 33, 3: 41, 4: 49, 5: 78, 6: 95}, 'column2': {0: -1, 1: -2, 2: 2, 3:
2022-08-05 20:20:26.265 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:20:26.646 | DEBUG    | __main__:run_benchmark:297 - Query: copy dfin to dfout; replace values of dfin in column2 by median of column2 of previous three rows
2022-08-05 20:20:26.646 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin.copy()
2022-08-05 20:20:26.656 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:20:27.681 | DEBUG    | __main__:run_benchmark:297 - Query: replace column 'column2' with median of current entry and two entries above
2022-08-05 20:20:27.682 | DEBUG    | __main__:run_benchmark:298 - dfin['column2'] = dfin['column2'].replace(-2, 0)
2022-08-05 20:20:27.689 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:20:27.692 | DEBUG    | __main__:run:356 - Running benchmark 9
2022-08-05 20:20:27.692 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:20:27.692 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-05 20:20:28.775 | DEBUG    | __main__:run_benchmark:297 - Query: join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-05 20:20:28.776 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.merge(dfin1, dfin2, how='inner', left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-05 20:20:28.794 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:20:30.412 | DEBUG    | __main__:run_benchmark:297 - Query: join 'dfin1' and 'dfin2' where column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'
2022-08-05 20:20:30.412 | DEBUG    | __main__:run_benchmark:298 - #  create new column 'newvar' which is the product of column 'var1' and 'var2'
2022-08-05 20:20:30.412 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:20:31.237 | DEBUG    | __main__:run_benchmark:297 - Query: Filter when values in column 'Date1' in dfin1 and values in column 'Date2' in dfin2 are equal'
2022-08-05 20:20:31.237 | DEBUG    | __main__:run_benchmark:298 - dfin1.where(dfin1['Date1'] == dfin2['Date2'])
2022-08-05 20:20:31.253 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:20:33.340 | DEBUG    | __main__:run_benchmark:297 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-05 20:20:33.340 | DEBUG    | __main__:run_benchmark:298 - #  Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Type2' have same value and columns 'Date1' and 'Date2' have same value
2022-08-05 20:20:33.340 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:20:34.481 | DEBUG    | __main__:run_benchmark:297 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Date1' of dfin1 having same values as columns 'Type2' and 'Date2' of dfin2
2022-08-05 20:20:34.481 | DEBUG    | __main__:run_benchmark:298 - dfin1.merge(dfin2, how='left', left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-05 20:20:34.498 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:20:35.554 | DEBUG    | __main__:run_benchmark:297 - Query: Get all columns from dfin1 and dfin2 with columns 'Type1' and 'Date1' of dfin1 having same values as columns 'Type2' and 'Date2' of dfin2 respectively
2022-08-05 20:20:35.554 | DEBUG    | __main__:run_benchmark:298 - pd.merge(dfin1,dfin2,how='inner', left_on=['Type1','Date1'], right_on=['Type2','Date2'])
2022-08-05 20:20:35.572 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:20:37.758 | DEBUG    | __main__:run_benchmark:297 - Query: select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-05 20:20:37.758 | DEBUG    | __main__:run_benchmark:298 - #  select values from dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are not equal
2022-08-05 20:20:37.758 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:20:38.902 | DEBUG    | __main__:run_benchmark:297 - Query: Merge dfin1 and dfin2 where columns 'Type1' and 'Type2' are equal and columns 'Date1' and 'Date2' are equal
2022-08-05 20:20:38.902 | DEBUG    | __main__:run_benchmark:298 - dfin1.merge(dfin2, left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-05 20:20:38.919 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:20:41.087 | DEBUG    | __main__:run_benchmark:297 - Query: Merge dfin1 and dfin2 on columns 'Type1' and 'Date1' and columns 'Type2' and 'Date2'
2022-08-05 20:20:41.087 | DEBUG    | __main__:run_benchmark:298 - #  Merge dfin1 and dfin2 on columns 'Type1' and 'Date1' and columns 'Type2' and 'Date2' using outer join
2022-08-05 20:20:41.087 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:20:41.208 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'", 'user': 'u12'}, {...
    │               └ {'queries': [{'query': "join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'", 'user': 'u12'}, {...
    └ {'query': "inner merge dfin1 and dfin2 on left columns 'Type1' and 'Date1' and right columns 'Type2' and 'Date2'", 'user': 'u8'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin1 = pd.DataFrame({'Type1': {0: 'A', 1: 'A', 2: 'B', 3: 'B', 4: 'C', 5: 'C'}, 'Date1': {0: '3/12', 1: '3/12', 2: '4/15',...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin1 = pd.DataFrame({'Type1': {0: 'A', 1: 'A', 2: 'B', 3: 'B', 4: 'C', 5: 'C'}, '...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0a2a790>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:20:41 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:20:41 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f08ddb10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:20:41.213 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:21:11.353 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'", 'user': 'u12'}, {...
    │               └ {'queries': [{'query': "join 'dfin1' and 'dfin2' column 'Type1' equals 'Type2' and 'Date1' equals 'Date2'", 'user': 'u12'}, {...
    └ {'query': "inner merge dfin1 and dfin2 on left columns 'Type1' and 'Date1' and right columns 'Type2' and 'Date2'", 'user': 'u8'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin1 = pd.DataFrame({'Type1': {0: 'A', 1: 'A', 2: 'B', 3: 'B', 4: 'C', 5: 'C'}, 'Date1': {0: '3/12', 1: '3/12', 2: '4/15',...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin1 = pd.DataFrame({'Type1': {0: 'A', 1: 'A', 2: 'B', 3: 'B', 4: 'C', 5: 'C'}, '...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f09dde10>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:21:11 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:21:11 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f097cc50>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:21:11.358 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:21:42.579 | DEBUG    | __main__:run_benchmark:297 - Query: inner merge dfin1 and dfin2 on left columns 'Type1' and 'Date1' and right columns 'Type2' and 'Date2'
2022-08-05 20:21:42.579 | DEBUG    | __main__:run_benchmark:298 - dfin3 = pd.merge(dfin1, dfin2, how='inner', left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-05 20:21:42.597 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:21:42.600 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:21:43.422 | DEBUG    | __main__:run_benchmark:297 - Query: join dataframe dfin1 and dataframe dfin2 on key1 and key2
2022-08-05 20:21:43.423 | DEBUG    | __main__:run_benchmark:298 - dfout = pd.merge(dfin1, dfin2, left_on='key1', right_on='key2', how='outer')
2022-08-05 20:21:43.437 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:21:44.438 | DEBUG    | __main__:run_benchmark:297 - Query: inner join dataframe dfin1 and dataframe dfin2 on key1 and key2
2022-08-05 20:21:44.439 | DEBUG    | __main__:run_benchmark:298 - dfin_inner = pd.merge(dfin1, dfin2, left_on='key1', right_on='key2', how='inner')
2022-08-05 20:21:44.452 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:21:45.427 | DEBUG    | __main__:run_benchmark:297 - Query: Inner Join on 'key1' and 'key2'
2022-08-05 20:21:45.428 | DEBUG    | __main__:run_benchmark:298 - print("Inner Join on 'key1' and 'key2'")
2022-08-05 20:21:45.428 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: "Inner Join on 'key1' and 'key2'"

2022-08-05 20:21:45.437 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:21:45.440 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:21:46.255 | DEBUG    | __main__:run_benchmark:297 - Query: join rows with same "lkey" and "rkey" values
2022-08-05 20:21:46.255 | DEBUG    | __main__:run_benchmark:298 - dfout = pd.merge(dfin1, dfin2, left_on='lkey', right_on='rkey')
2022-08-05 20:21:46.269 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:21:47.091 | DEBUG    | __main__:run_benchmark:297 - Query: merge columns on "lkey" and "rkey"
2022-08-05 20:21:47.091 | DEBUG    | __main__:run_benchmark:298 - pd.merge(dfin1, dfin2, left_on='lkey', right_on='rkey')
2022-08-05 20:21:47.113 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:21:48.570 | DEBUG    | __main__:run_benchmark:297 - Query: merge columns on "lkey" dfin1 and "rkey" dfin2
2022-08-05 20:21:48.570 | DEBUG    | __main__:run_benchmark:298 - #  merge dfin1 and dfin2 on keys from both sides
2022-08-05 20:21:48.570 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:21:49.271 | DEBUG    | __main__:run_benchmark:297 - Query: create natural join of dfin1 and dfin2 where 'lkey' = 'rkey'
2022-08-05 20:21:49.271 | DEBUG    | __main__:run_benchmark:298 - dfin1.merge(dfin2, left_on='lkey', right_on='rkey', how='outer')
2022-08-05 20:21:49.285 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:21:50.225 | DEBUG    | __main__:run_benchmark:297 - Query: calculate intersection of dfin1 and dfin2 where 'lkey' = 'rkey'
2022-08-05 20:21:50.225 | DEBUG    | __main__:run_benchmark:298 - dfin3 = pd.merge(dfin1, dfin2, left_on='lkey', right_on='rkey')
2022-08-05 20:21:50.239 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:21:51.062 | DEBUG    | __main__:run_benchmark:297 - Query: calculate intersection of dfin1 and dfin2 where left on 'lkey' and right on 'rkey'
2022-08-05 20:21:51.063 | DEBUG    | __main__:run_benchmark:298 - print(pd.merge(dfin1, dfin2, how='inner', left_on='lkey', right_on='rkey'))
2022-08-05 20:21:51.063 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: pd.merge(dfin1, dfin2, how='inner', left_on='lkey', right_on='rkey')

2022-08-05 20:21:51.077 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:21:52.770 | DEBUG    | __main__:run_benchmark:297 - Query: merge dfin1 and dfin2 where left on 'lkey' and right on 'rkey'
2022-08-05 20:21:52.771 | DEBUG    | __main__:run_benchmark:298 - #  merge dfin1 and dfin2 where left on 'lkey' and right on 'rkey' with a suffix '_y' on overlapping columns
2022-08-05 20:21:52.771 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:21:52.774 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-05 20:21:53.651 | DEBUG    | __main__:run_benchmark:297 - Query: Join dfin1 and dfin2 on 'left_key' and 'right_key'
2022-08-05 20:21:53.651 | DEBUG    | __main__:run_benchmark:298 - df_merge = pd.merge(dfin1, dfin2, left_on='left_key', right_on='right_key')
2022-08-05 20:21:53.665 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:21:54.645 | DEBUG    | __main__:run_benchmark:297 - Query: Given dataframes df1 and df2, join the dataframes such that 'left_key' in df1 is equal to 'right_key' in df2
2022-08-05 20:21:54.646 | DEBUG    | __main__:run_benchmark:298 - df1.merge(df2, left_on='left_key', right_on='right_key')
2022-08-05 20:21:54.647 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:21:56.120 | DEBUG    | __main__:run_benchmark:297 - Query: Given dataframes dfin1 and dfin2, join the two dataframes on the basis of left_key and right_key
2022-08-05 20:21:56.120 | DEBUG    | __main__:run_benchmark:298 - #  Given dataframes dfin1 and dfin2, merge the two dataframes on the basis of left_key and right_key
2022-08-05 20:21:56.121 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:21:57.633 | DEBUG    | __main__:run_benchmark:297 - Query: Given dataframes dfin1 and dfin2, inner join the two dataframes on the basis of left_key and right_key
2022-08-05 20:21:57.634 | DEBUG    | __main__:run_benchmark:298 - #  Given dataframes dfin1 and dfin2, left join the two dataframes on the basis of left_key and right_key
2022-08-05 20:21:57.634 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:21:58.574 | DEBUG    | __main__:run_benchmark:297 - Query: Merge 'dfin1' and 'dfin2' using inner join
2022-08-05 20:21:58.574 | DEBUG    | __main__:run_benchmark:298 - dfin1.merge(dfin2, left_on='left_key', right_on='right_key')
2022-08-05 20:21:58.588 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:21:58.591 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:21:59.569 | DEBUG    | __main__:run_benchmark:297 - Query: join dfin1 and dfin2 on column 'Type1'=='Type2' && 'Date1'=='Date2'
2022-08-05 20:21:59.569 | DEBUG    | __main__:run_benchmark:298 - dfjoin = pd.merge(dfin1, dfin2, left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-05 20:21:59.588 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:22:00.624 | DEBUG    | __main__:run_benchmark:297 - Query: combine rows from dfin1 and dfin2 such that column 'Type1' and column 'Type2' in dfin1 are equal to column 'Type1' and column 'Date1' in dfin2
2022-08-05 20:22:00.624 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.merge(dfin1, dfin2, left_on=['Type1','Date1'], right_on=['Type2','Date2'], how='inner')
2022-08-05 20:22:00.642 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:22:01.554 | DEBUG    | __main__:run_benchmark:297 - Query: select and combine common rows in dfin1 and dfin2 where Type1 and Date1 match
2022-08-05 20:22:01.554 | DEBUG    | __main__:run_benchmark:298 - dfin3 = pd.merge(dfin1, dfin2, on=['Type1', 'Date1'])
2022-08-05 20:22:01.556 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:22:02.548 | DEBUG    | __main__:run_benchmark:297 - Query: combine rows from dfin1 and dfin2 such that column 'Type1' and column 'Date1' in dfin1 are equal to column 'Type2' and column 'Date2' in dfin2
2022-08-05 20:22:02.548 | DEBUG    | __main__:run_benchmark:298 - dfout = pd.merge(dfin1, dfin2, left_on=['Type1', 'Date1'], right_on=['Type2', 'Date2'])
2022-08-05 20:22:02.566 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:22:02.569 | DEBUG    | __main__:run:356 - Running benchmark 10
2022-08-05 20:22:02.569 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:22:02.569 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:22:03.121 | DEBUG    | __main__:run_benchmark:297 - Query: remove NaN values from "delta" and "phi" columns
2022-08-05 20:22:03.122 | DEBUG    | __main__:run_benchmark:298 - dfin.dropna(subset=['delta','phi'],inplace=True)
2022-08-05 20:22:03.130 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:22:03.134 | DEBUG    | __main__:run:363 - Number of queries: 23
2022-08-05 20:22:04.307 | DEBUG    | __main__:run_benchmark:297 - Query: Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0
2022-08-05 20:22:04.307 | DEBUG    | __main__:run_benchmark:298 - dfin.fillna(value={'phi': 11.0, 'omega': 33.0}, inplace=True)
2022-08-05 20:22:04.317 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:22:04.433 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0", 'user': '...
    │               └ {'queries': [{'query': "Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0", 'user': '...
    └ {'query': "Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin", 'user': ...

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'mu': {0: 1, 1: 0, 2: 141, 3: 0}, 'phi': {0: None, 1: 111.0, 2: 322.0, 3: 1.0}, 'delta': {0: 14.7, 1: ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'mu': {0: 1, 1: 0, 2: 141, 3: 0}, 'phi': {0: None, 1: 111.0, ...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f092db90>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:22:04 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:22:04 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f08d2a90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:22:04.441 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:22:35.211 | DEBUG    | __main__:run_benchmark:297 - Query: Replace 'nan' values in column 'phi' with value 11.0 and 'nan' values in column omega with 33.0 in dfin
2022-08-05 20:22:35.212 | DEBUG    | __main__:run_benchmark:298 - dfin.phi.fillna(11.0, inplace=True)
2022-08-05 20:22:35.228 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:22:36.434 | DEBUG    | __main__:run_benchmark:297 - Query: Replace NaN value in column 'phi' with value 11.0 and NaN value in column 'omega' with value 33.0
2022-08-05 20:22:36.434 | DEBUG    | __main__:run_benchmark:298 - dfin.fillna({'phi': 11.0, 'omega': 33.0}, inplace=True)
2022-08-05 20:22:36.443 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:22:37.163 | DEBUG    | __main__:run_benchmark:297 - Query: Replace NaN value in column 'phi' with value 11.0 and replace NaN value in column 'omega' with value 33.0
2022-08-05 20:22:37.163 | DEBUG    | __main__:run_benchmark:298 - dfin.fillna(value={'phi': 11.0, 'omega': 33.0})
2022-08-05 20:22:37.176 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:22:37.303 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0", 'user': '...
    │               └ {'queries': [{'query': "Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0", 'user': '...
    └ {'query': "Replace NaN value in column 'phi' with value 11.0 and replace NaN value in column 'omega' with value 33.0 of table...

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'mu': {0: 1, 1: 0, 2: 141, 3: 0}, 'phi': {0: None, 1: 111.0, 2: 322.0, 3: 1.0}, 'delta': {0: 14.7, 1: ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'mu': {0: 1, 1: 0, 2: 141, 3: 0}, 'phi': {0: None, 1: 111.0, ...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f098f950>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:22:37 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:22:37 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f08dd0d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:22:37.310 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:23:08.031 | DEBUG    | __main__:run_benchmark:297 - Query: Replace NaN value in column 'phi' with value 11.0 and replace NaN value in column 'omega' with value 33.0 of table dfin
2022-08-05 20:23:08.031 | DEBUG    | __main__:run_benchmark:298 - dfin.fillna(11.0, inplace=True)
2022-08-05 20:23:08.040 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:23:09.219 | DEBUG    | __main__:run_benchmark:297 - Query: if 'phi' is nan replace with 11.0 and if 'omega' is nan replace with 13.0
2022-08-05 20:23:09.219 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.DataFrame({'mu': {0: 1, 1: 0, 2: 141, 3: 0}, 'phi': {0: None, 1: 111.0, 2: 322.0, 3: 1.0}, 'delta': {0: 14
2022-08-05 20:23:09.220 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:23:09.858 | DEBUG    | __main__:run_benchmark:297 - Query: if value of 'phi' is nan replace with 11.0 and if value of 'omega' is nan replace with 13.0
2022-08-05 20:23:09.859 | DEBUG    | __main__:run_benchmark:298 - dfin.fillna(value={"phi":11.0, "omega":13.0}, inplace=True)
2022-08-05 20:23:09.868 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:23:10.991 | DEBUG    | __main__:run_benchmark:297 - Query: if value of 'phi' column is 'NaN' replace 'NaN' with 11.0 and if value of 'omega' is 'NaN' replace it with 13.0
2022-08-05 20:23:10.992 | DEBUG    | __main__:run_benchmark:298 - dfin.fillna(value={'phi': 11.0, 'omega': 13.0})
2022-08-05 20:23:11.006 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:23:12.242 | DEBUG    | __main__:run_benchmark:297 - Query: if value of 'phi' column is 'nan' replace 'nan' with 11.0 and if value of 'omega' is 'nan' replace it with 13.0
2022-08-05 20:23:12.242 | DEBUG    | __main__:run_benchmark:298 - dfin['phi'].fillna(11.0, inplace=True)
2022-08-05 20:23:12.258 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:23:13.373 | DEBUG    | __main__:run_benchmark:297 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' is 'NaN'
2022-08-05 20:23:13.374 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.DataFrame({'mu': {0: 1, 1: 0, 2: 141, 3: 0}, 'phi': {0: None, 1: 111.0, 2: 322.0, 3: 1.0}, 'delta': {0: 14
2022-08-05 20:23:13.374 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:23:13.872 | DEBUG    | __main__:run_benchmark:297 - Query: replace 'NaN' with 11.0 if column is 'phi' or replace with 13 if 'omega' 'is NaN'
2022-08-05 20:23:13.872 | DEBUG    | __main__:run_benchmark:298 - dfin.fillna(value=11, axis=1)
2022-08-05 20:23:13.886 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:23:15.649 | DEBUG    | __main__:run_benchmark:297 - Query: replace 'NaN' with (11.0, 13.0) if column is ('phi', 'omega')
2022-08-05 20:23:15.649 | DEBUG    | __main__:run_benchmark:298 - #  replace 'NaN' with (11.0, 13.0) if column not in ('mu', 'delta')
2022-08-05 20:23:15.650 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:23:16.761 | DEBUG    | __main__:run_benchmark:297 - Query: Replace missing values in column 'phi' with '11.0' and column 'omega' with value '33.0'
2022-08-05 20:23:16.761 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.fillna({'phi': 11.0, 'omega': 33.0})
2022-08-05 20:23:16.771 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:23:16.887 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0", 'user': '...
    │               └ {'queries': [{'query': "Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0", 'user': '...
    └ {'query': "Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of difn with value '33.0'", 'user': ...

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'mu': {0: 1, 1: 0, 2: 141, 3: 0}, 'phi': {0: None, 1: 111.0, 2: 322.0, 3: 1.0}, 'delta': {0: 14.7, 1: ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'mu': {0: 1, 1: 0, 2: 141, 3: 0}, 'phi': {0: None, 1: 111.0, ...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f097c590>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:23:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:23:16 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0911110>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:23:16.891 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:23:47.650 | DEBUG    | __main__:run_benchmark:297 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of difn with value '33.0'
2022-08-05 20:23:47.650 | DEBUG    | __main__:run_benchmark:298 - dfin['phi'] = dfin['phi'].fillna(11)
2022-08-05 20:23:47.660 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:23:48.337 | DEBUG    | __main__:run_benchmark:297 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of dfin with value '33.0'
2022-08-05 20:23:48.337 | DEBUG    | __main__:run_benchmark:298 - dfin.phi.fillna('11.0', inplace=True)
2022-08-05 20:23:48.347 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:23:49.142 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0", 'user': '...
    │               └ {'queries': [{'query': "Replace 'nan' values in column 'phi' with 11.0 and 'nan' values in column omega with 33.0", 'user': '...
    └ {'query': "Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of dfinn with value '33.0'", 'user':...

  File "experiments/jigsaw_experiments.py", line 291, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'mu': {0: 1, 1: 0, 2: 141, 3: 0}, 'phi': {0: None, 1: 111.0, 2: 322.0, 3: 1.0}, 'delta': {0: 14.7, 1: ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'mu': {0: 1, 1: 0, 2: 141, 3: 0}, 'phi': {0: None, 1: 111.0, ...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f093dcd0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:23:49 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:23:49 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f098fa90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:23:49.150 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:24:19.663 | DEBUG    | __main__:run_benchmark:297 - Query: Replace missing values in column 'phi' of dfin with '11.0' and column 'omega' of dfinn with value '33.0'
2022-08-05 20:24:19.663 | DEBUG    | __main__:run_benchmark:298 - #  Use the apply function to calculate the square root of all the values in dfn
2022-08-05 20:24:19.663 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:21.162 | DEBUG    | __main__:run_benchmark:297 - Query: Fill missing values of column 'phi' with '11.0' and column 'omega' with value '33.0' in dataframe dfin
2022-08-05 20:24:21.162 | DEBUG    | __main__:run_benchmark:298 - #  Fill missing values of column 'delta' with value '333.0' and column 'omega' with value '33.0' in dataframe dfin
2022-08-05 20:24:21.162 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:22.337 | DEBUG    | __main__:run_benchmark:297 - Query: replace nan in phi by 11 and nan in omega by 33
2022-08-05 20:24:22.338 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.DataFrame({'mu': {0: 1, 1: 0, 2: 141, 3: 0}, 'phi': {0: None, 1: 111.0, 2: 322.0, 3: 1.0}, 'delta': {0: 14
2022-08-05 20:24:22.338 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:23.491 | DEBUG    | __main__:run_benchmark:297 - Query: replace nan in column 'phi' by 11 and nan in column 'omega' by 33
2022-08-05 20:24:23.491 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.apply(lambda x: x.fillna(x.mean()) if x.dtype.kind in 'biufc' else x.fillna('.'))
2022-08-05 20:24:23.501 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:24.605 | DEBUG    | __main__:run_benchmark:297 - Query: change 'phi' to 11 if 'phi' is nan and change 'omega' to 33 if 'omega' is nan
2022-08-05 20:24:24.605 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['phi'].isnull(),'phi'] = 11
2022-08-05 20:24:24.614 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:25.291 | DEBUG    | __main__:run_benchmark:297 - Query: fill na values of column 'phi' with 11 and column 'omega' with 33
2022-08-05 20:24:25.291 | DEBUG    | __main__:run_benchmark:298 - dfin.phi.fillna(11, inplace=True)
2022-08-05 20:24:25.301 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:26.440 | DEBUG    | __main__:run_benchmark:297 - Query: fill na values of column 'phi' with 11 and fill na values of column 'omega' with 33
2022-08-05 20:24:26.440 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.DataFrame({'mu': {0: 1, 1: 0, 2: 141, 3: 0}, 'phi': {0: None, 1: 111.0, 2: 322.0, 3: 1.0}, 'delta': {0: 14
2022-08-05 20:24:26.440 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:27.107 | DEBUG    | __main__:run_benchmark:297 - Query: fill na values of column 'phi' with 11 inplace and fill na values of column 'omega' with 33 inplace
2022-08-05 20:24:27.108 | DEBUG    | __main__:run_benchmark:298 - dfin.fillna(11, inplace=True)
2022-08-05 20:24:27.117 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:27.120 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:24:27.664 | DEBUG    | __main__:run_benchmark:297 - Query: Replace NaNs in column 'mu' with 24 and NaNs in column 'delta' with 45
2022-08-05 20:24:27.664 | DEBUG    | __main__:run_benchmark:298 - dfin.mu.fillna(24, inplace=True)
2022-08-05 20:24:27.674 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:27.677 | DEBUG    | __main__:run:363 - Number of queries: 12
2022-08-05 20:24:28.831 | DEBUG    | __main__:run_benchmark:297 - Query: replace all 'Nan' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17.0
2022-08-05 20:24:28.831 | DEBUG    | __main__:run_benchmark:298 - dfin.fillna(value = {'omega': 23.0, 'pi': 17.0})
2022-08-05 20:24:28.844 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:24:29.529 | DEBUG    | __main__:run_benchmark:297 - Query: replace all 'NaN' values in 'omega' column by 23.0, and replace all 'NaN' values in column 'pi' by 17.0
2022-08-05 20:24:29.530 | DEBUG    | __main__:run_benchmark:298 - dfin.omega.fillna(value=23.0, inplace=True)
2022-08-05 20:24:29.539 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:30.249 | DEBUG    | __main__:run_benchmark:297 - Query: fill NaN values in 'omega' column by 23.0, and fill NaN values in column 'pi' by 17.0
2022-08-05 20:24:30.249 | DEBUG    | __main__:run_benchmark:298 - dfin.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-05 20:24:30.262 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:24:30.925 | DEBUG    | __main__:run_benchmark:297 - Query: replace 'NaN' in 'omega' with 23.0 and replace 'NaN' in 'pi' with 17.0
2022-08-05 20:24:30.926 | DEBUG    | __main__:run_benchmark:298 - dfin.omega = dfin.omega.fillna(23.0)
2022-08-05 20:24:30.935 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:32.072 | DEBUG    | __main__:run_benchmark:297 - Query: replace 'NaN' in column 'omega' with 23.0 and replace 'NaN' in column 'pi' with 17.0
2022-08-05 20:24:32.072 | DEBUG    | __main__:run_benchmark:298 - dfin.omega.fillna(23.0, inplace=True)
2022-08-05 20:24:32.081 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:33.268 | DEBUG    | __main__:run_benchmark:297 - Query: replace all value of 'NaN' in column 'omega' with 23.0 and all values of 'NaN' in column 'pi' with 17.0
2022-08-05 20:24:33.268 | DEBUG    | __main__:run_benchmark:298 - dfin['omega'] = dfin['omega'].fillna(23.0)
2022-08-05 20:24:33.278 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:33.827 | DEBUG    | __main__:run_benchmark:297 - Query: Replace nan in column 'omega' with 23.0 and column 'pi' with 17
2022-08-05 20:24:33.827 | DEBUG    | __main__:run_benchmark:298 - dfin.omega = dfin.omega.fillna(23)
2022-08-05 20:24:33.836 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:34.544 | DEBUG    | __main__:run_benchmark:297 - Query: Replace 'nan' with 23 in column 'omega' and replace 'nan' with 17 in column 'pi'
2022-08-05 20:24:34.544 | DEBUG    | __main__:run_benchmark:298 - dfin.omega.fillna(value=23, inplace=True)
2022-08-05 20:24:34.554 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:35.145 | DEBUG    | __main__:run_benchmark:297 - Query: Replace nan with 23 in column 'omega' and with 17 in column 'pi'
2022-08-05 20:24:35.146 | DEBUG    | __main__:run_benchmark:298 - dfout = df.copy()
2022-08-05 20:24:35.147 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:35.864 | DEBUG    | __main__:run_benchmark:297 - Query: Replace NaN with 23.0 in column 'omega' and NaN with 17.0 in column 'pi'
2022-08-05 20:24:35.864 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.fillna(value={'omega': 23.0, 'pi': 17.0})
2022-08-05 20:24:35.873 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:24:36.599 | DEBUG    | __main__:run_benchmark:297 - Query: Replace 'NaN' with '23.0' in column 'omega' and 'NaN' with '17.0' in column 'pi'
2022-08-05 20:24:36.599 | DEBUG    | __main__:run_benchmark:298 - dfout = df.fillna({'omega': 23.0, 'pi': 17.0})
2022-08-05 20:24:36.600 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:37.782 | DEBUG    | __main__:run_benchmark:297 - Query: replace 'NaN' in 'omega' column with 23 'Nan' in 'pi' column with 17
2022-08-05 20:24:37.782 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.DataFrame({'gamma': {0: 1, 1: 0, 2: 141, 3: 0}, 'omega': {0: None, 1: 111.0, 2: 322.0, 3: 1.0}, 'delta': {0
2022-08-05 20:24:37.782 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:37.786 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:24:38.548 | DEBUG    | __main__:run_benchmark:297 - Query: replace nan in column 'phi' with 10 and nan in column 'mu' with 20
2022-08-05 20:24:38.548 | DEBUG    | __main__:run_benchmark:298 - dfin.phi.fillna(10, inplace=True)
2022-08-05 20:24:38.557 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:24:38.561 | DEBUG    | __main__:run:356 - Running benchmark 11
2022-08-05 20:24:38.561 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:24:38.561 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:24:38.674 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' i...
    │               └ {'queries': [{'query': "in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' i...
    └ {'query': "in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' colum...

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'location': {0: 'United States', 1: 'FR', 2: 'UK', 3: 'United States', 4: 'India'}, 'zip': {0: 4123, 1...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'location': {0: 'United States', 1: 'FR', 2: 'UK', 3: 'United...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0915a50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:24:38 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:24:38 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0915950>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:24:38.678 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:25:10.749 | DEBUG    | __main__:run_benchmark:297 - Query: in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' in 'zip' column with '4343'
2022-08-05 20:25:10.750 | DEBUG    | __main__:run_benchmark:298 - #  in dataframe 'dfin' replace all the values which are not 'US' and 'IN' in 'location' column with 'Other'
2022-08-05 20:25:10.750 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:25:11.689 | DEBUG    | __main__:run_benchmark:297 - Query: Replace 'United States' in column 'location' with 'US' and '3434' in column 'zip' with column 'zip' with '4343'
2022-08-05 20:25:11.689 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.replace(to_replace = {'location': {'United States': 'US'}, 'zip': {3434: 4343}})
2022-08-05 20:25:11.697 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:25:12.959 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' i...
    │               └ {'queries': [{'query': "in dataframe 'dfin' replace 'United States' in 'location' column with value 'US' and replace '3434' i...
    └ {'query': "Replace value 'United States' in column 'location' with 'US' and value '3434' in column 'zip' with column 'zip' wi...

  File "experiments/jigsaw_experiments.py", line 291, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'location': {0: 'United States', 1: 'FR', 2: 'UK', 3: 'United States', 4: 'India'}, 'zip': {0: 4123, 1...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'location': {0: 'United States', 1: 'FR', 2: 'UK', 3: 'United...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0911e10>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:25:12 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:25:12 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f08d2710>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:25:12.963 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:25:43.577 | DEBUG    | __main__:run_benchmark:297 - Query: Replace value 'United States' in column 'location' with 'US' and value '3434' in column 'zip' with column 'zip' with '4343'
2022-08-05 20:25:43.577 | DEBUG    | __main__:run_benchmark:298 - #  Merge the df1 and df2 dataframes on the basis of 'location' and 'zip' columns
2022-08-05 20:25:43.577 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:25:44.366 | DEBUG    | __main__:run_benchmark:297 - Query: Replace value 'United States' in column 'location' with 'US' and value 3434 in column 'zip' with 4343
2022-08-05 20:25:44.366 | DEBUG    | __main__:run_benchmark:298 - dfin.replace(to_replace = {'location': {'United States': 'US', 'zip': {3434: 4343}}})
2022-08-05 20:25:44.377 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:25:44.876 | DEBUG    | __main__:run_benchmark:297 - Query: Replace value 'United States' with 'US' for column 'location' and replace value '3434' with '4343' in column 'zip' where 'location' is 'UK'
2022-08-05 20:25:44.876 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['location'] == 'UK', 'zip'] = 4343
2022-08-05 20:25:44.883 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:25:45.671 | DEBUG    | __main__:run_benchmark:297 - Query: replace 'United States' in 'location' by 'US' and '3434' in 'zip' by '4343'
2022-08-05 20:25:45.671 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['location']=='United States','location']='US'
2022-08-05 20:25:45.679 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:25:46.329 | DEBUG    | __main__:run_benchmark:297 - Query: replace 'United States' in 'location' by 'US'
2022-08-05 20:25:46.329 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['location']=='United States','location']='US'
2022-08-05 20:25:46.337 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:25:47.507 | DEBUG    | __main__:run_benchmark:297 - Query: change 'United States' to 'US' in 'location', and change '3434' to '4343' in 'zip'
2022-08-05 20:25:47.507 | DEBUG    | __main__:run_benchmark:298 - dfin['location'] = dfin['location'].apply(lambda x: 'US' if x == 'United States' else x)
2022-08-05 20:25:47.514 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:25:47.518 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:25:48.311 | DEBUG    | __main__:run_benchmark:297 - Query: change "india" to "IN" in "country" column and change "London" to "LON" in "city" column
2022-08-05 20:25:48.311 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['country'].str.contains('India'),'country'] = 'IN'
2022-08-05 20:25:48.319 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:25:48.322 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:25:49.705 | DEBUG    | __main__:run_benchmark:297 - Query: Replace 'London' in column 'city' with 'LON' and 'India' in column 'country' with 'IN'
2022-08-05 20:25:49.705 | DEBUG    | __main__:run_benchmark:298 - #  Print the dataframe 
2022-08-05 20:25:49.705 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:25:51.084 | DEBUG    | __main__:run_benchmark:297 - Query: Replace 'London' in column 'city' with 'LON', and 'India' in column 'country' with 'IN'
2022-08-05 20:25:51.085 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['country'] == 'India', 'country'] = 'IN'
2022-08-05 20:25:51.092 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:25:52.180 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Replace 'London' in column 'city' with 'LON' and 'India' in column 'country' with 'IN'", 'user': 'u9'...
    │               └ {'queries': [{'query': "Replace 'London' in column 'city' with 'LON' and 'India' in column 'country' with 'IN'", 'user': 'u9'...
    └ {'query': "Replace values 'London' in column 'city' with 'LON', and values 'India' in column 'country' with 'IN'", 'user': 'u9'}

  File "experiments/jigsaw_experiments.py", line 291, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'country': {0: 'USA', 1: 'FR', 2: 'UK', 3: 'India', 4: 'India'}, 'city': {0: 'LA', 1: 'PAR', 2: 'Londo...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'country': {0: 'USA', 1: 'FR', 2: 'UK', 3: 'India', 4: 'India...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0963f50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:25:52 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:25:52 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f093d090>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:25:52.184 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:26:22.585 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Replace 'London' in column 'city' with 'LON' and 'India' in column 'country' with 'IN'", 'user': 'u9'...
    │               └ {'queries': [{'query': "Replace 'London' in column 'city' with 'LON' and 'India' in column 'country' with 'IN'", 'user': 'u9'...
    └ {'query': "Replace values 'London' in column 'city' with 'LON', and values 'India' in column 'country' with 'IN'", 'user': 'u9'}

  File "experiments/jigsaw_experiments.py", line 291, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'country': {0: 'USA', 1: 'FR', 2: 'UK', 3: 'India', 4: 'India'}, 'city': {0: 'LA', 1: 'PAR', 2: 'Londo...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'country': {0: 'USA', 1: 'FR', 2: 'UK', 3: 'India', 4: 'India...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0915a90>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:26:22 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:26:22 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f08d25d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:26:22.589 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:26:52.852 | DEBUG    | __main__:run_benchmark:297 - Query: Replace values 'London' in column 'city' with 'LON', and values 'India' in column 'country' with 'IN'
2022-08-05 20:26:52.852 | DEBUG    | __main__:run_benchmark:298 - 
2022-08-05 20:26:52.852 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:26:53.664 | DEBUG    | __main__:run_benchmark:297 - Query: Replace values 'London' in column 'city' with 'LON', and values 'India' in column 'country' with 'IN'. df name dfin
2022-08-05 20:26:53.665 | DEBUG    | __main__:run_benchmark:298 - dfin.replace({'city':'London', 'country':'India'}, {'city':'LON', 'country':'IN'})
2022-08-05 20:26:53.675 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:26:53.679 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:26:54.493 | DEBUG    | __main__:run_benchmark:297 - Query: replace value 'United States' by 'US' in column 'location' and replace '3434' in column 'zip' by '4343'
2022-08-05 20:26:54.494 | DEBUG    | __main__:run_benchmark:298 - dfin.replace(to_replace = 'United States', value = 'US')
2022-08-05 20:26:54.504 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:26:55.458 | DEBUG    | __main__:run_benchmark:297 - Query: replace 'United States' in column 'location' with 'US' and 3434 in column 'zip' with 4343
2022-08-05 20:26:55.459 | DEBUG    | __main__:run_benchmark:298 - dfin.replace(to_replace = {'location': 'United States', 'zip': 3434}, value = {'location': 'US', 'zip': 4343}, inplace = True)
2022-08-05 20:26:55.471 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:26:56.290 | DEBUG    | __main__:run_benchmark:297 - Query: Replace 'United States' with 'US' in column 'location' and 3434 with 4343 in column 'zip'
2022-08-05 20:26:56.290 | DEBUG    | __main__:run_benchmark:298 - dfin.location.replace('United States', 'US', inplace=True)
2022-08-05 20:26:56.298 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:26:56.301 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:26:56.841 | DEBUG    | __main__:run_benchmark:297 - Query: replace 'France' with 'FR' in country
2022-08-05 20:26:56.841 | DEBUG    | __main__:run_benchmark:298 - dfin.replace({'country': 'France'}, 'FR')
2022-08-05 20:26:56.853 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:26:57.375 | DEBUG    | __main__:run_benchmark:297 - Query: for column country, replace 'France' with 'FR'
2022-08-05 20:26:57.375 | DEBUG    | __main__:run_benchmark:298 - dfin.country.replace('France', 'FR', inplace=True)
2022-08-05 20:26:57.383 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:26:57.889 | DEBUG    | __main__:run_benchmark:297 - Query: replace 'France' with 'FR'
2022-08-05 20:26:57.889 | DEBUG    | __main__:run_benchmark:298 - dfin.replace('France', 'FR')
2022-08-05 20:26:57.900 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:26:58.551 | DEBUG    | __main__:run_benchmark:297 - Query: replace 'France' with 'FR' in country column
2022-08-05 20:26:58.551 | DEBUG    | __main__:run_benchmark:298 - dfin['country'] = dfin['country'].replace('France', 'FR')
2022-08-05 20:26:58.559 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:26:59.366 | DEBUG    | __main__:run_benchmark:297 - Query: replace 'France' with 'FR' in country column and 'Paris' with 'PAR' in city
2022-08-05 20:26:59.367 | DEBUG    | __main__:run_benchmark:298 - dfin.replace({'country': {'France': 'FR', 'Paris': 'PAR'}})
2022-08-05 20:26:59.378 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:27:00.795 | DEBUG    | __main__:run_benchmark:297 - Query: replace 'France' with 'FR' in 'country' column and 'Paris' with 'PAR' in 'city' column
2022-08-05 20:27:00.795 | DEBUG    | __main__:run_benchmark:298 - #  drop 'random' column
2022-08-05 20:27:00.795 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:27:01.798 | DEBUG    | __main__:run_benchmark:297 - Query: replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country' column
2022-08-05 20:27:01.798 | DEBUG    | __main__:run_benchmark:298 - dfin.replace(to_replace = {'country':'France', 'city':'Paris'}, value = {'country':'FR', 'city':'PAR'}, inplace = True)
2022-08-05 20:27:01.806 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:27:03.550 | DEBUG    | __main__:run_benchmark:297 - Query: Replace 'France' with 'FR' and 'Paris' with 'PAR' in 'city' and 'country'
2022-08-05 20:27:03.550 | DEBUG    | __main__:run_benchmark:298 - #  Replace 'France' with 'FR', 'Paris' with 'PAR' and 'UK' with 'LON' in 'country'
2022-08-05 20:27:03.550 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:27:03.554 | DEBUG    | __main__:run:356 - Running benchmark 12
2022-08-05 20:27:03.554 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:27:03.554 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:27:04.538 | DEBUG    | __main__:run_benchmark:297 - Query: sort 'dfin' by index in ascending order
2022-08-05 20:27:04.538 | DEBUG    | __main__:run_benchmark:298 - #  sort 'dfin' by index in descending order
2022-08-05 20:27:04.539 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:27:05.508 | DEBUG    | __main__:run_benchmark:297 - Query: Sort dataframe by index
2022-08-05 20:27:05.509 | DEBUG    | __main__:run_benchmark:298 - #  Sort dataframe by index
2022-08-05 20:27:05.509 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:27:06.083 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "sort 'dfin' by index in ascending order", 'user': 'u12'}, {'query': 'Sort dataframe by index', 'user'...
    │               └ {'queries': [{'query': "sort 'dfin' by index in ascending order", 'user': 'u12'}, {'query': 'Sort dataframe by index', 'user'...
    └ {'query': 'sort table by index', 'user': 'u0'}

  File "experiments/jigsaw_experiments.py", line 291, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'A': {100: 1, 29: 2, 234: 3, 1: 4, 150: 5}, 'B': {100: 3, 29: 4, 234: 7, 1: 11, 150: 19}})\n\n#  sort ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'A': {100: 1, 29: 2, 234: 3, 1: 4, 150: 5}, 'B': {100: 3, 29:...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f09153d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:27:06 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:27:06 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f08dd810>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:27:06.088 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:27:36.589 | DEBUG    | __main__:run_benchmark:297 - Query: sort table by index
2022-08-05 20:27:36.589 | DEBUG    | __main__:run_benchmark:298 - #  sort table by column
2022-08-05 20:27:36.589 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:27:37.144 | DEBUG    | __main__:run_benchmark:297 - Query: sort dfin by index in ascending order
2022-08-05 20:27:37.144 | DEBUG    | __main__:run_benchmark:298 - dfin.sort_index(axis=0, ascending=True)
2022-08-05 20:27:37.157 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:27:37.164 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:27:37.276 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Sort dataframe dfin by increasing column 'col2' and decreasing column 'col1'", 'user': 'u1'}], 'ios':...
    │               └ {'queries': [{'query': "Sort dataframe dfin by increasing column 'col2' and decreasing column 'col1'", 'user': 'u1'}], 'ios':...
    └ {'query': "Sort dataframe dfin by increasing column 'col2' and decreasing column 'col1'", 'user': 'u1'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'col1': {0: 10, 1: 0, 2: 5, 3: -10, 4: 15, 5: -5, 6: 5}, 'col2': {0: 2, 1: 4, 2: 5, 3: 1, 4: 1, 5: 5, ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'col1': {0: 10, 1: 0, 2: 5, 3: -10, 4: 15, 5: -5, 6: 5}, 'col...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f092d850>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:27:37 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:27:37 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f08d5a10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:27:37.280 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:28:08.008 | DEBUG    | __main__:run_benchmark:297 - Query: Sort dataframe dfin by increasing column 'col2' and decreasing column 'col1'
2022-08-05 20:28:08.008 | DEBUG    | __main__:run_benchmark:298 - dfin.sort_values(['col2','col1'])
2022-08-05 20:28:08.016 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:28:08.020 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-05 20:28:08.541 | DEBUG    | __main__:run_benchmark:297 - Query: sort dfin using values in column 2
2022-08-05 20:28:08.541 | DEBUG    | __main__:run_benchmark:298 - dfin.sort_values(by='column2', inplace=True)
2022-08-05 20:28:08.547 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:28:09.548 | DEBUG    | __main__:run_benchmark:297 - Query: sort dfin using values in column 'column2'
2022-08-05 20:28:09.548 | DEBUG    | __main__:run_benchmark:298 - #  sort dfin using values in column 'column1'
2022-08-05 20:28:09.548 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:28:10.052 | DEBUG    | __main__:run_benchmark:297 - Query: sort dfin using values in column 'column2' in descending order
2022-08-05 20:28:10.053 | DEBUG    | __main__:run_benchmark:298 - dfin.sort_values(by='column2', ascending=False)
2022-08-05 20:28:10.060 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:28:11.480 | DEBUG    | __main__:run_benchmark:297 - Query: sort dfin using values in column 'column2' in descending order and then from column 'column1' in descending order
2022-08-05 20:28:11.480 | DEBUG    | __main__:run_benchmark:298 - #  sort dfin using values in column 'column1' in descending order and then from column 'column2' in ascending order
2022-08-05 20:28:11.481 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:28:12.123 | DEBUG    | __main__:run_benchmark:297 - Query: sort table in descending order of 'column2' and then ascending order of 'column1'
2022-08-05 20:28:12.123 | DEBUG    | __main__:run_benchmark:298 - dfin.sort_values(by=['column2', 'column1'], ascending=[False, True])
2022-08-05 20:28:12.131 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:28:12.134 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:28:12.656 | DEBUG    | __main__:run_benchmark:297 - Query: Sort dfin using column A, and then using column B
2022-08-05 20:28:12.656 | DEBUG    | __main__:run_benchmark:298 - print(dfin.sort_values(['A','B']))
2022-08-05 20:28:12.656 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.sort_values(['A', 'B'])

2022-08-05 20:28:12.664 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:28:13.930 | DEBUG    | __main__:run_benchmark:297 - Query: Sort dfin using column B, and then using column A
2022-08-05 20:28:13.930 | DEBUG    | __main__:run_benchmark:298 - #  Create a new column in dfin called 'C' and assign it the value 1
2022-08-05 20:28:13.930 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:28:15.330 | DEBUG    | __main__:run_benchmark:297 - Query: Sort dfin using column B descending, and then using column A ascending
2022-08-05 20:28:15.330 | DEBUG    | __main__:run_benchmark:298 - #  Sort dfin using column B descending, and then using column A ascending
2022-08-05 20:28:15.330 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:28:17.041 | DEBUG    | __main__:run_benchmark:297 - Query: Given a dataframe dfin, sort the dataframe on the basis of column 'B'
2022-08-05 20:28:17.041 | DEBUG    | __main__:run_benchmark:298 - dfin.sort_values(by='B')
2022-08-05 20:28:17.049 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:28:18.396 | DEBUG    | __main__:run_benchmark:297 - Query: Given a dataframe dfin, sort the dataframe on the basis of column 'B' in ascending order
2022-08-05 20:28:18.396 | DEBUG    | __main__:run_benchmark:298 - #  Given a dataframe dfin, sort the dataframe on the basis of column 'B' in descending order
2022-08-05 20:28:18.396 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:28:18.962 | DEBUG    | __main__:run_benchmark:297 - Query: Given a dataframe dfin, sort the dataframe on the basis of column 'B' in descending order
2022-08-05 20:28:18.962 | DEBUG    | __main__:run_benchmark:298 - dfin.sort_values(by=['B'], ascending=False)
2022-08-05 20:28:18.970 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:28:19.670 | DEBUG    | __main__:run_benchmark:297 - Query: Given a dataframe dfin, sort the dataframe on the basis of column 'B' in descending order and then on column 'A' in ascending order
2022-08-05 20:28:19.670 | DEBUG    | __main__:run_benchmark:298 - dfin.sort_values(['B','A'], ascending=[False,True])
2022-08-05 20:28:19.678 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:28:20.225 | DEBUG    | __main__:run_benchmark:297 - Query: Sort column 'B' in descending order
2022-08-05 20:28:20.225 | DEBUG    | __main__:run_benchmark:298 - dfin.sort_values(by='B', ascending=False)
2022-08-05 20:28:20.233 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:28:20.236 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:28:20.784 | DEBUG    | __main__:run_benchmark:297 - Query: sort column 'A' by serial number
2022-08-05 20:28:20.784 | DEBUG    | __main__:run_benchmark:298 - dfin.sort_values('A')
2022-08-05 20:28:20.792 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:28:21.350 | DEBUG    | __main__:run_benchmark:297 - Query: sort dfin
2022-08-05 20:28:21.350 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.sort_index(axis=0)
2022-08-05 20:28:21.356 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:28:21.894 | DEBUG    | __main__:run_benchmark:297 - Query: sort based on row index
2022-08-05 20:28:21.894 | DEBUG    | __main__:run_benchmark:298 - dfin.sort_index(inplace=True)
2022-08-05 20:28:21.900 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:28:22.018 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "sort column 'A' by serial number", 'user': 'u5'}, {'query': 'sort dfin', 'user': 'u14'}, {'query': 's...
    │               └ {'queries': [{'query': "sort column 'A' by serial number", 'user': 'u5'}, {'query': 'sort dfin', 'user': 'u14'}, {'query': 's...
    └ {'query': 'sort rows of dfin1', 'user': 'u19'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'A': {100: 1, 29: 2, 234: 3, 1: 4, 150: 5}, 'B': {100: 3, 29: 4, 234: 7, 1: 11, 150: 19}})\n\n#  sort ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'A': {100: 1, 29: 2, 234: 3, 1: 4, 150: 5}, 'B': {100: 3, 29:...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f09b9a10>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:28:22 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:28:22 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f08d5a10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:28:22.023 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:28:52.643 | DEBUG    | __main__:run_benchmark:297 - Query: sort rows of dfin1
2022-08-05 20:28:52.643 | DEBUG    | __main__:run_benchmark:298 - dfin1.sort_index(axis=0, inplace=True)
2022-08-05 20:28:52.645 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:28:53.055 | DEBUG    | __main__:run_benchmark:297 - Query: sort based on index
2022-08-05 20:28:53.055 | DEBUG    | __main__:run_benchmark:298 - dfin.sort_index(inplace=True)
2022-08-05 20:28:53.061 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:28:53.178 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "sort column 'A' by serial number", 'user': 'u5'}, {'query': 'sort dfin', 'user': 'u14'}, {'query': 's...
    │               └ {'queries': [{'query': "sort column 'A' by serial number", 'user': 'u5'}, {'query': 'sort dfin', 'user': 'u14'}, {'query': 's...
    └ {'query': 'sort dfin based on value', 'user': 'u3'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'A': {100: 1, 29: 2, 234: 3, 1: 4, 150: 5}, 'B': {100: 3, 29: 4, 234: 7, 1: 11, 150: 19}})\n\n#  sort ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'A': {100: 1, 29: 2, 234: 3, 1: 4, 150: 5}, 'B': {100: 3, 29:...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0a833d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:28:53 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:28:53 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0974c90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:28:53.182 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:29:23.771 | DEBUG    | __main__:run_benchmark:297 - Query: sort dfin based on value
2022-08-05 20:29:23.771 | DEBUG    | __main__:run_benchmark:298 - dfin.sort_values(by=['B'], ascending=False)
2022-08-05 20:29:23.778 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:29:24.970 | DEBUG    | __main__:run_benchmark:297 - Query: sort dfin based on keys
2022-08-05 20:29:24.971 | DEBUG    | __main__:run_benchmark:298 - #  sort dfin based on values in column B
2022-08-05 20:29:24.971 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:29:24.975 | DEBUG    | __main__:run:356 - Running benchmark 13
2022-08-05 20:29:24.975 | DEBUG    | __main__:run:357 - Number of Sets: 2
2022-08-05 20:29:24.975 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:29:25.765 | DEBUG    | __main__:run_benchmark:297 - Query: create dataframe with values from column 'val' in dataframe dfin with values from column 'who' as the index and values from column 'timestamp' as the column
2022-08-05 20:29:25.765 | DEBUG    | __main__:run_benchmark:298 - df = pd.pivot_table(dfin, values='val', index=['who'], columns=['timestamp'])
2022-08-05 20:29:25.778 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:29:27.696 | DEBUG    | __main__:run_benchmark:297 - Query: create dataframe with values from column 'val' in dataframe dfin with unique values from column 'who' as the index and unique values from column 'timestamp' as the column
2022-08-05 20:29:27.696 | DEBUG    | __main__:run_benchmark:298 - #  create a list of columns from dataframe dfin with only the values from column 'kind' and 'val' that are equal to 12
2022-08-05 20:29:27.697 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:29:28.368 | DEBUG    | __main__:run_benchmark:297 - Query: create new dataframe from dataframe dfin with 'timestamp' as the columns, 'who' as the rows and values from 'val'
2022-08-05 20:29:28.368 | DEBUG    | __main__:run_benchmark:298 - df = dfin.pivot(index='who', columns='timestamp', values='val')
2022-08-05 20:29:28.378 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:29:28.381 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:29:29.041 | DEBUG    | __main__:run_benchmark:297 - Query: Pivot dfin on column 'date'
2022-08-05 20:29:29.041 | DEBUG    | __main__:run_benchmark:298 - dfout = pd.pivot(dfin, index='name', columns='date', values='value')
2022-08-05 20:29:29.051 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:29:29.055 | DEBUG    | __main__:run:356 - Running benchmark 14
2022-08-05 20:29:29.055 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:29:29.055 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-05 20:29:29.908 | DEBUG    | __main__:run_benchmark:297 - Query: convert unique values in column 'target' to numeric encoding
2022-08-05 20:29:29.908 | DEBUG    | __main__:run_benchmark:298 - dfin['target'] = dfin['target'].astype('category')
2022-08-05 20:29:29.917 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:29:30.740 | DEBUG    | __main__:run_benchmark:297 - Query: convert unique values in column 'target' of dataframe 'dfin' to numeric encoding
2022-08-05 20:29:30.740 | DEBUG    | __main__:run_benchmark:298 - dfin['target'] = pd.Categorical(dfin['target'])
2022-08-05 20:29:30.749 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:29:31.415 | DEBUG    | __main__:run_benchmark:297 - Query: convert unique values in column 'target' of dataframe 'dfin' to numeric encoding inplace
2022-08-05 20:29:31.415 | DEBUG    | __main__:run_benchmark:298 - dfin.target = dfin.target.apply(lambda x: dfin.target.unique().tolist().index(x))
2022-08-05 20:29:31.423 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:29:32.246 | DEBUG    | __main__:run_benchmark:297 - Query: encode unique values in column 'target' of dataframe 'dfin' as numbers inplace
2022-08-05 20:29:32.246 | DEBUG    | __main__:run_benchmark:298 - encode_target(dfin)
2022-08-05 20:29:32.248 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:29:33.031 | DEBUG    | __main__:run_benchmark:297 - Query: encode values in column 'target' of dataframe 'dfin' as numbers inplace
2022-08-05 20:29:33.031 | DEBUG    | __main__:run_benchmark:298 - dfin.replace(to_replace=['classA', 'classB', 'classC'], value=[1, 2, 3], inplace=True)
2022-08-05 20:29:33.040 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:29:33.847 | DEBUG    | __main__:run_benchmark:297 - Query: convert values in 'target' column to numeric values
2022-08-05 20:29:33.847 | DEBUG    | __main__:run_benchmark:298 - dfin['target'] = dfin['target'].map({'classA': 0, 'classB': 1, 'classC': 2})
2022-08-05 20:29:33.855 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:29:34.660 | DEBUG    | __main__:run_benchmark:297 - Query: replace values in 'target' column by enums
2022-08-05 20:29:34.660 | DEBUG    | __main__:run_benchmark:298 - dfin['target'] = dfin['target'].replace(['classA', 'classB', 'classC'], [1, 2, 3])
2022-08-05 20:29:34.669 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:29:35.394 | DEBUG    | __main__:run_benchmark:297 - Query: remove 'class' from values in 'target' column; replace values in 'target' column by enums
2022-08-05 20:29:35.394 | DEBUG    | __main__:run_benchmark:298 - dfin.target = dfin.target.map({'classA': 0, 'classB': 1, 'classC': 2})
2022-08-05 20:29:35.402 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:29:36.223 | DEBUG    | __main__:run_benchmark:297 - Query: remove 'class' from values in 'target' column in 'dfin'; replace values in 'target' column by enums
2022-08-05 20:29:36.223 | DEBUG    | __main__:run_benchmark:298 - dfin['target'] = dfin['target'].map(lambda x: x.replace('class',''))
2022-08-05 20:29:36.231 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:29:37.190 | DEBUG    | __main__:run_benchmark:297 - Query: label encode 'target' in place
2022-08-05 20:29:37.190 | DEBUG    | __main__:run_benchmark:298 - dfin.target = label_encoder.fit_transform(dfin.target)
2022-08-05 20:29:37.191 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:29:37.196 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-05 20:29:37.724 | DEBUG    | __main__:run_benchmark:297 - Query: convert goldLabel column into categories
2022-08-05 20:29:37.724 | DEBUG    | __main__:run_benchmark:298 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-05 20:29:37.733 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:29:38.272 | DEBUG    | __main__:run_benchmark:297 - Query: convert goldLabel column into categorical variables
2022-08-05 20:29:38.272 | DEBUG    | __main__:run_benchmark:298 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-05 20:29:38.281 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:29:39.712 | DEBUG    | __main__:run_benchmark:297 - Query: encode labels of "goldLabel" column
2022-08-05 20:29:39.712 | DEBUG    | __main__:run_benchmark:298 - def encode_labels(dfin):
2022-08-05 20:29:39.712 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:29:40.513 | DEBUG    | __main__:run_benchmark:297 - Query: label encode goldlabel column
2022-08-05 20:29:40.513 | DEBUG    | __main__:run_benchmark:298 - dfin['goldLabel'] = dfin['goldLabel'].map({'class1': 0, 'class2': 1, 'class3': 2})
2022-08-05 20:29:40.521 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:29:40.653 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'convert goldLabel column into categories', 'user': 'u4'}, {'query': 'convert goldLabel column into ca...
    │               └ {'queries': [{'query': 'convert goldLabel column into categories', 'user': 'u4'}, {'query': 'convert goldLabel column into ca...
    └ {'query': 'convert each row of "goldLabel" column into integer labels', 'user': 'u4'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ['dfin = pd.DataFrame({\'ftr1\': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, \'ftr2\': {0: 12, 1: -5, 2: 7, 3: 14, 4: 1}, \'ftr3\': {0:...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['dfin = pd.DataFrame({\'ftr1\': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, \'ftr2\': {0: 12,...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0939f90>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:29:40 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:29:40 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f08d2f10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:29:40.657 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:30:11.566 | DEBUG    | __main__:run_benchmark:297 - Query: convert each row of "goldLabel" column into integer labels
2022-08-05 20:30:11.566 | DEBUG    | __main__:run_benchmark:298 - dfin['goldLabel'] = dfin['goldLabel'].map({'class1': 0, 'class2': 1, 'class3': 2})
2022-08-05 20:30:11.574 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:30:12.148 | DEBUG    | __main__:run_benchmark:297 - Query: replace column 'goldLabel' with categorical classes
2022-08-05 20:30:12.148 | DEBUG    | __main__:run_benchmark:298 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-05 20:30:12.157 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:30:12.730 | DEBUG    | __main__:run_benchmark:297 - Query: column 'goldLabel' equals to column 'goldLabel' with categorical classes
2022-08-05 20:30:12.731 | DEBUG    | __main__:run_benchmark:298 - dfin.goldLabel = dfin.goldLabel.astype('category')
2022-08-05 20:30:12.739 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:30:12.856 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'convert goldLabel column into categories', 'user': 'u4'}, {'query': 'convert goldLabel column into ca...
    │               └ {'queries': [{'query': 'convert goldLabel column into categories', 'user': 'u4'}, {'query': 'convert goldLabel column into ca...
    └ {'query': "convert column 'goldLabel' to categorical data", 'user': 'u11'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'ftr1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, 'ftr2': {0: 12, 1: -5, 2: 7, 3: 14, 4: 1}, 'ftr3': {0: 17, 1...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'ftr1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, 'ftr2': {0: 12, 1: ...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f09e9850>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:30:12 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:30:12 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0974090>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:30:12.860 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:30:43.415 | DEBUG    | __main__:run_benchmark:297 - Query: convert column 'goldLabel' to categorical data
2022-08-05 20:30:43.415 | DEBUG    | __main__:run_benchmark:298 - dfin['goldLabel'] = dfin['goldLabel'].astype('category')
2022-08-05 20:30:43.424 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:30:43.925 | DEBUG    | __main__:run_benchmark:297 - Query: apply categorical function to column 'goldLabel' data
2022-08-05 20:30:43.925 | DEBUG    | __main__:run_benchmark:298 - dfin['goldLabel'] = dfin['goldLabel'].apply(categorical)
2022-08-05 20:30:43.927 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:30:43.931 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-05 20:30:45.017 | DEBUG    | __main__:run_benchmark:297 - Query: Given dataframe dfin, encode the column 'labels' as a categorical variable
2022-08-05 20:30:45.017 | DEBUG    | __main__:run_benchmark:298 - def encode_labels(dfin):
2022-08-05 20:30:45.018 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:30:46.243 | DEBUG    | __main__:run_benchmark:297 - Query: Given dataframe dfin, encode the column 'labels' to numerical values
2022-08-05 20:30:46.243 | DEBUG    | __main__:run_benchmark:298 - #  Given dataframe dfin, decode the column 'labels' to original values
2022-08-05 20:30:46.243 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:30:46.725 | DEBUG    | __main__:run_benchmark:297 - Query: Given dataframe dfin, use label encoder to encode the column 'labels' to numerical values
2022-08-05 20:30:46.725 | DEBUG    | __main__:run_benchmark:298 - le = LabelEncoder()
2022-08-05 20:30:46.727 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:30:47.788 | DEBUG    | __main__:run_benchmark:297 - Query: Transform 'labels' to numeric values
2022-08-05 20:30:47.788 | DEBUG    | __main__:run_benchmark:298 - dfin['labels_num'] = dfin['labels'].apply(lambda x: {'class_a': 0, 'class_b': 1, 'class_c': 2}[x])
2022-08-05 20:30:47.795 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:30:48.397 | DEBUG    | __main__:run_benchmark:297 - Query: Enumerate the 'labels' column
2022-08-05 20:30:48.397 | DEBUG    | __main__:run_benchmark:298 - dfin['labels'] = dfin['labels'].astype('category')
2022-08-05 20:30:48.406 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:30:48.410 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-05 20:30:49.139 | DEBUG    | __main__:run_benchmark:297 - Query: do one hot encoding of column 'GoldTarget'
2022-08-05 20:30:49.140 | DEBUG    | __main__:run_benchmark:298 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-05 20:30:49.148 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:30:49.697 | DEBUG    | __main__:run_benchmark:297 - Query: convert 'GoldTarget' values in 'dfin' to categorical values
2022-08-05 20:30:49.698 | DEBUG    | __main__:run_benchmark:298 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-05 20:30:49.706 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:30:50.216 | DEBUG    | __main__:run_benchmark:297 - Query: convert 'GoldTarget' values in 'dfin' to numeric values
2022-08-05 20:30:50.216 | DEBUG    | __main__:run_benchmark:298 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-05 20:30:50.225 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:30:50.887 | DEBUG    | __main__:run_benchmark:297 - Query: convert 'GoldTarget' values in 'dfin' to numeric codes
2022-08-05 20:30:50.888 | DEBUG    | __main__:run_benchmark:298 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'])
2022-08-05 20:30:50.902 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:30:51.802 | DEBUG    | __main__:run_benchmark:297 - Query: convert 'GoldTarget' in 'dfin' to numeric codes
2022-08-05 20:30:51.802 | DEBUG    | __main__:run_benchmark:298 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'], categories=['classA', 'classB', 'classC'], ordered=False).codes
2022-08-05 20:30:51.810 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:30:52.483 | DEBUG    | __main__:run_benchmark:297 - Query: factorize 'GoldTarget' in 'dfin'
2022-08-05 20:30:52.483 | DEBUG    | __main__:run_benchmark:298 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-05 20:30:52.491 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:30:53.028 | DEBUG    | __main__:run_benchmark:297 - Query: convert values in 'GoldTarget' column to categorical codes
2022-08-05 20:30:53.029 | DEBUG    | __main__:run_benchmark:298 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-05 20:30:53.037 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:30:53.155 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "do one hot encoding of column 'GoldTarget'", 'user': 'u5'}, {'query': "convert 'GoldTarget' values in...
    │               └ {'queries': [{'query': "do one hot encoding of column 'GoldTarget'", 'user': 'u5'}, {'query': "convert 'GoldTarget' values in...
    └ {'query': "convert values in 'GoldTarget' column to numeric codes", 'user': 'u3'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'inputA': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, 'inputB': {0: 12, 1: -5, 2: 7, 3: 14, 4: 1}, 'inputC': {0:...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'inputA': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, 'inputB': {0: 12,...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f09e9b50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:30:53 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:30:53 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f09b8d90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:30:53.160 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:31:23.972 | DEBUG    | __main__:run_benchmark:297 - Query: convert values in 'GoldTarget' column to numeric codes
2022-08-05 20:31:23.972 | DEBUG    | __main__:run_benchmark:298 - dfin['GoldTarget'] = pd.Categorical(dfin['GoldTarget'], categories=['classA', 'classB', 'classC'])
2022-08-05 20:31:23.981 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:31:24.849 | DEBUG    | __main__:run_benchmark:297 - Query: convert values in 'GoldTarget' column to integers
2022-08-05 20:31:24.849 | DEBUG    | __main__:run_benchmark:298 - dfin['GoldTarget'] = dfin['GoldTarget'].map({'classA': 0, 'classB': 1, 'classC': 2})
2022-08-05 20:31:24.857 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:31:25.637 | DEBUG    | __main__:run_benchmark:297 - Query: encode values in 'GoldTarget' to numeric
2022-08-05 20:31:25.637 | DEBUG    | __main__:run_benchmark:298 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-05 20:31:25.645 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:31:26.406 | DEBUG    | __main__:run_benchmark:297 - Query: encode values in 'GoldTarget' column to numeric
2022-08-05 20:31:26.406 | DEBUG    | __main__:run_benchmark:298 - dfin['GoldTarget'] = dfin['GoldTarget'].map({'classA': 0, 'classB': 1, 'classC': 2})
2022-08-05 20:31:26.414 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:31:26.973 | DEBUG    | __main__:run_benchmark:297 - Query: change 'GoldTarget' column's data type to numeric
2022-08-05 20:31:26.973 | DEBUG    | __main__:run_benchmark:298 - dfin['GoldTarget'] = pd.to_numeric(dfin['GoldTarget'])
2022-08-05 20:31:26.975 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:31:27.535 | DEBUG    | __main__:run_benchmark:297 - Query: change 'GoldTarget' column's data type to category and encode to numeric
2022-08-05 20:31:27.535 | DEBUG    | __main__:run_benchmark:298 - dfin['GoldTarget'] = dfin['GoldTarget'].astype('category')
2022-08-05 20:31:27.544 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:31:27.548 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:31:28.428 | DEBUG    | __main__:run_benchmark:297 - Query: replace 'Label' with integers
2022-08-05 20:31:28.429 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['Label'] == 'class1', 'Label'] = 0
2022-08-05 20:31:28.437 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:31:29.313 | DEBUG    | __main__:run_benchmark:297 - Query: replace string in 'Label' with encoded integers
2022-08-05 20:31:29.313 | DEBUG    | __main__:run_benchmark:298 - dfin['Label'] = dfin['Label'].apply(lambda x: 0 if x == 'class1' else 1 if x == 'class2' else 2)
2022-08-05 20:31:29.321 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:31:30.114 | DEBUG    | __main__:run_benchmark:297 - Query: map strings to numbers in 'Label'
2022-08-05 20:31:30.114 | DEBUG    | __main__:run_benchmark:298 - dfin['Label'] = dfin['Label'].map({'class1':1, 'class2':2, 'class3':3})
2022-08-05 20:31:30.122 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:31:30.240 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 48.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "replace 'Label' with integers", 'user': 'u7'}, {'query': "replace string in 'Label' with encoded inte...
    │               └ {'queries': [{'query': "replace 'Label' with integers", 'user': 'u7'}, {'query': "replace string in 'Label' with encoded inte...
    └ {'query': "Replace 'Label' with categorical numbers", 'user': 'u7'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'f1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, 'f2': {0: 12, 1: -5, 2: 7, 3: 14, 4: 1}, 'f3': {0: 17, 1: 4, 2...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'f1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 1}, 'f2': {0: 12, 1: -5, ...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f08dd050>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:31:30 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:31:30 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f093d4d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 48.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:31:30.244 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:32:01.091 | DEBUG    | __main__:run_benchmark:297 - Query: Replace 'Label' with categorical numbers
2022-08-05 20:32:01.091 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.replace(to_replace = 'class1', value = 0)
2022-08-05 20:32:01.099 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:32:01.697 | DEBUG    | __main__:run_benchmark:297 - Query: Replace strings in 'Label' with categorical numbers
2022-08-05 20:32:01.698 | DEBUG    | __main__:run_benchmark:298 - dfin['Label'] = dfin['Label'].astype('category')
2022-08-05 20:32:01.706 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:32:02.244 | DEBUG    | __main__:run_benchmark:297 - Query: make strings in 'Label' with categorical numbers
2022-08-05 20:32:02.244 | DEBUG    | __main__:run_benchmark:298 - dfin['Label'] = pd.Categorical(dfin['Label'])
2022-08-05 20:32:02.253 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:32:02.257 | DEBUG    | __main__:run:356 - Running benchmark 15
2022-08-05 20:32:02.257 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:32:02.257 | DEBUG    | __main__:run:363 - Number of queries: 18
2022-08-05 20:32:02.621 | DEBUG    | __main__:run_benchmark:297 - Query: count of duplicate rows
2022-08-05 20:32:02.621 | DEBUG    | __main__:run_benchmark:298 - dfin.duplicated().sum()
2022-08-05 20:32:02.622 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:32:03.143 | DEBUG    | __main__:run_benchmark:297 - Query: count of duplicate rows in dataframe 'dfin'
2022-08-05 20:32:03.143 | DEBUG    | __main__:run_benchmark:298 - print("Duplicate rows in the dataframe are:", dfin.duplicated().sum())
2022-08-05 20:32:03.143 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: 'Duplicate rows in the dataframe are:'

2022-08-05 20:32:03.144 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: 'Duplicate rows in the dataframe are:'

2022-08-05 20:32:03.145 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:32:04.420 | DEBUG    | __main__:run_benchmark:297 - Query: count of unique rows in dataframe 'dfin'
2022-08-05 20:32:04.420 | DEBUG    | __main__:run_benchmark:298 - #  print unique rows in dataframe 'dfin'
2022-08-05 20:32:04.420 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:32:05.682 | DEBUG    | __main__:run_benchmark:297 - Query: substract count of total rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-05 20:32:05.682 | DEBUG    | __main__:run_benchmark:298 - #  ANSWER
2022-08-05 20:32:05.682 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:32:06.257 | DEBUG    | __main__:run_benchmark:297 - Query: substract total number of rows in 'dfin' by count of unique rows in dataframe 'dfin'
2022-08-05 20:32:06.257 | DEBUG    | __main__:run_benchmark:298 - dfin.duplicated(keep=False).sum()
2022-08-05 20:32:06.259 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:32:06.381 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'count of duplicate rows', 'user': 'u12'}, {'query': "count of duplicate rows in dataframe 'dfin'", 'u...
    │               └ {'queries': [{'query': 'count of duplicate rows', 'user': 'u12'}, {'query': "count of duplicate rows in dataframe 'dfin'", 'u...
    └ {'query': "substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows...

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'inp1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'inp2': {0: 12, 1: 12, 2: -5, 3: 7, 4: 7, 5: 14,...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'inp1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'inp2':...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0974ad0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:32:06 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:32:06 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f08d5350>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:32:06.386 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:32:38.266 | DEBUG    | __main__:run_benchmark:297 - Query: substract total number of rows in 'dfin' by count number of rows in dataframe 'dfin' after dropping duplicate rows
2022-08-05 20:32:38.267 | DEBUG    | __main__:run_benchmark:298 - #  create a new dataframe named 'dfin_dup' containing all rows of dataframe 'dfin'
2022-08-05 20:32:38.267 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:32:39.239 | DEBUG    | __main__:run_benchmark:297 - Query: Count duplicate rows in dfin
2022-08-05 20:32:39.239 | DEBUG    | __main__:run_benchmark:298 - #  Delete duplicate rows in dfin
2022-08-05 20:32:39.239 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:32:40.079 | DEBUG    | __main__:run_benchmark:297 - Query: Count number of repitions of each row in dataframe
2022-08-05 20:32:40.080 | DEBUG    | __main__:run_benchmark:298 - dfin['count'] = dfin.groupby('target')['target'].transform('count')
2022-08-05 20:32:40.082 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:32:41.387 | DEBUG    | __main__:run_benchmark:297 - Query: Count number of repitions of each row in dataframe dfin
2022-08-05 20:32:41.387 | DEBUG    | __main__:run_benchmark:298 - def count_reps(dfin):
2022-08-05 20:32:41.388 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:32:42.182 | DEBUG    | __main__:run_benchmark:297 - Query: Count number of duplicates in dataframe dfin
2022-08-05 20:32:42.182 | DEBUG    | __main__:run_benchmark:298 - count_dup = dfin.duplicated(['inp1', 'inp2', 'inp3'], keep = False).sum()
2022-08-05 20:32:42.184 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:32:43.023 | DEBUG    | __main__:run_benchmark:297 - Query: Add number of duplicates in dataframe dfin
2022-08-05 20:32:43.023 | DEBUG    | __main__:run_benchmark:298 - dfin['dup'] = [0, 0, 2, 0, 0, 3, 0]
2022-08-05 20:32:43.026 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:32:43.844 | DEBUG    | __main__:run_benchmark:297 - Query: Count number of duplicates in dataframe dfin and add them
2022-08-05 20:32:43.844 | DEBUG    | __main__:run_benchmark:298 - dfin['n_dups'] = dfin.groupby(['inp1','inp2','inp3'])['target'].transform('count')
2022-08-05 20:32:43.846 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:32:44.282 | DEBUG    | __main__:run_benchmark:297 - Query: count number of duplicate rows in 'dfin'
2022-08-05 20:32:44.282 | DEBUG    | __main__:run_benchmark:298 - len(dfin[dfin.duplicated()])
2022-08-05 20:32:44.283 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:32:45.452 | DEBUG    | __main__:run_benchmark:297 - Query: count number of duplicate rows in 'dfin' table
2022-08-05 20:32:45.452 | DEBUG    | __main__:run_benchmark:298 - dfin.duplicated().sum()
2022-08-05 20:32:45.454 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:32:46.115 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'count of duplicate rows', 'user': 'u12'}, {'query': "count of duplicate rows in dataframe 'dfin'", 'u...
    │               └ {'queries': [{'query': 'count of duplicate rows', 'user': 'u12'}, {'query': "count of duplicate rows in dataframe 'dfin'", 'u...
    └ {'query': "number of duplicate rows in 'dfin' table", 'user': 'u0'}

  File "experiments/jigsaw_experiments.py", line 291, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'inp1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'inp2': {0: 12, 1: 12, 2: -5, 3: 7, 4: 7, 5: 14,...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'inp1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'inp2':...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0974250>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:32:46 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:32:46 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f098f1d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:32:46.119 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:33:16.758 | DEBUG    | __main__:run_benchmark:297 - Query: number of duplicate rows in 'dfin' table
2022-08-05 20:33:16.758 | DEBUG    | __main__:run_benchmark:298 - #  number of duplicate rows in 'dfin' table
2022-08-05 20:33:16.758 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:33:17.297 | DEBUG    | __main__:run_benchmark:297 - Query: number of duplicate rows in 'dfin' table; number of True values
2022-08-05 20:33:17.297 | DEBUG    | __main__:run_benchmark:298 - print(dfin.duplicated().sum())
2022-08-05 20:33:17.297 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.duplicated().sum()

2022-08-05 20:33:17.299 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:33:17.679 | DEBUG    | __main__:run_benchmark:297 - Query: count duplicates rows
2022-08-05 20:33:17.679 | DEBUG    | __main__:run_benchmark:298 - dfin.duplicated()
2022-08-05 20:33:17.682 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:33:18.881 | DEBUG    | __main__:run_benchmark:297 - Query: count duplicates rows shape
2022-08-05 20:33:18.881 | DEBUG    | __main__:run_benchmark:298 - #  count duplicates columns shape
2022-08-05 20:33:18.881 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:33:18.885 | DEBUG    | __main__:run:363 - Number of queries: 22
2022-08-05 20:33:19.797 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Find the number of duplicate rows in dataframe 'dfin'", 'user': 'u1'}, {'query': "Number of duplicate...
    │               └ {'queries': [{'query': "Find the number of duplicate rows in dataframe 'dfin'", 'user': 'u1'}, {'query': "Number of duplicate...
    └ {'query': "Find the number of duplicate rows in dataframe 'dfin'", 'user': 'u1'}

  File "experiments/jigsaw_experiments.py", line 291, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'f1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'f2': {0: 12, 1: 12, 2: -5, 3: 7, 4: 7, 5: 14, 6: ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'f1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'f2': {0:...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f08eb610>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:33:19 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:33:19 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f0907ed0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:33:19.801 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:33:50.474 | DEBUG    | __main__:run_benchmark:297 - Query: Find the number of duplicate rows in dataframe 'dfin'
2022-08-05 20:33:50.474 | DEBUG    | __main__:run_benchmark:298 - #  Find the number of duplicate rows in dataframe 'dfin' after sorting it by 'f1'
2022-08-05 20:33:50.474 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:33:51.340 | DEBUG    | __main__:run_benchmark:297 - Query: Number of duplicate rows in dataframe 'dfin'
2022-08-05 20:33:51.341 | DEBUG    | __main__:run_benchmark:298 - print(dfin.duplicated().sum())
2022-08-05 20:33:51.341 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.duplicated().sum()

2022-08-05 20:33:51.342 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:33:51.912 | DEBUG    | __main__:run_benchmark:297 - Query: Number of unique rows in dataframe 'dfin'
2022-08-05 20:33:51.912 | DEBUG    | __main__:run_benchmark:298 - dfin.duplicated().sum()
2022-08-05 20:33:51.914 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:33:52.631 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Find the number of duplicate rows in dataframe 'dfin'", 'user': 'u1'}, {'query': "Number of duplicate...
    │               └ {'queries': [{'query': "Find the number of duplicate rows in dataframe 'dfin'", 'user': 'u1'}, {'query': "Number of duplicate...
    └ {'query': "Number of repeated rows in dataframe 'dfin'", 'user': 'u1'}

  File "experiments/jigsaw_experiments.py", line 291, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'f1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'f2': {0: 12, 1: 12, 2: -5, 3: 7, 4: 7, 5: 14, 6: ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'f1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'f2': {0:...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f08ddc50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:33:52 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:33:52 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f08f7ad0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:33:52.639 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:34:23.041 | DEBUG    | __main__:run_benchmark:297 - Query: Number of repeated rows in dataframe 'dfin'
2022-08-05 20:34:23.041 | DEBUG    | __main__:run_benchmark:298 - def test_repeated_rows():
2022-08-05 20:34:23.041 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:34:23.933 | DEBUG    | __main__:run_benchmark:297 - Query: Count of repeated rows in dataframe 'dfin'
2022-08-05 20:34:23.933 | DEBUG    | __main__:run_benchmark:298 - count = 0
2022-08-05 20:34:23.934 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:34:24.463 | DEBUG    | __main__:run_benchmark:297 - Query: Count of duplicated rows in dataframe 'dfin'
2022-08-05 20:34:24.463 | DEBUG    | __main__:run_benchmark:298 - print(dfin.duplicated().sum())
2022-08-05 20:34:24.463 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.duplicated().sum()

2022-08-05 20:34:24.465 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:34:24.861 | DEBUG    | __main__:run_benchmark:297 - Query: How many duplicated rows in dataframe 'dfin'
2022-08-05 20:34:24.861 | DEBUG    | __main__:run_benchmark:298 - print(dfin.duplicated().sum())
2022-08-05 20:34:24.861 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.duplicated().sum()

2022-08-05 20:34:24.863 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:34:25.361 | DEBUG    | __main__:run_benchmark:297 - Query: How many rows in dataframe 'dfin' are dupliate
2022-08-05 20:34:25.361 | DEBUG    | __main__:run_benchmark:298 - print(dfin.duplicated().sum())
2022-08-05 20:34:25.361 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.duplicated().sum()

2022-08-05 20:34:25.363 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:34:25.873 | DEBUG    | __main__:run_benchmark:297 - Query: How many rows in dataframe 'dfin' are duplicate
2022-08-05 20:34:25.873 | DEBUG    | __main__:run_benchmark:298 - dfin.duplicated().sum()
2022-08-05 20:34:25.875 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:34:26.345 | DEBUG    | __main__:run_benchmark:297 - Query: count number of duplicate rows
2022-08-05 20:34:26.346 | DEBUG    | __main__:run_benchmark:298 - nrows_dfin = dfin.shape[0]
2022-08-05 20:34:26.347 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:34:27.096 | DEBUG    | __main__:run_benchmark:297 - Query: count number of repeated rows
2022-08-05 20:34:27.097 | DEBUG    | __main__:run_benchmark:298 - dfin.groupby(['f1', 'f2','f3']).size().reset_index().rename(columns={0:'count'})
2022-08-05 20:34:27.103 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:34:27.623 | DEBUG    | __main__:run_benchmark:297 - Query: count number of unique rows
2022-08-05 20:34:27.623 | DEBUG    | __main__:run_benchmark:298 - def count_unique_rows(df):
2022-08-05 20:34:27.623 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:34:28.206 | DEBUG    | __main__:run_benchmark:297 - Query: difference between number of rows and number of unique rows
2022-08-05 20:34:28.206 | DEBUG    | __main__:run_benchmark:298 - def duplicates(df):
2022-08-05 20:34:28.206 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:34:29.020 | DEBUG    | __main__:run_benchmark:297 - Query: difference between number of rows and number of unique Rows
2022-08-05 20:34:29.020 | DEBUG    | __main__:run_benchmark:298 - print(len(df), len(df.drop_duplicates()))
2022-08-05 20:34:29.020 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: len(df)

2022-08-05 20:34:29.021 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: len(df)

2022-08-05 20:34:29.022 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:34:30.173 | DEBUG    | __main__:run_benchmark:297 - Query: difference between number of rows and unique number of rows
2022-08-05 20:34:30.173 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.DataFrame({'f1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3, 7: 3}, 'f2': {0: 12, 1: 12, 2: -5
2022-08-05 20:34:30.173 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:34:30.884 | DEBUG    | __main__:run_benchmark:297 - Query: difference between number of rows and number of 'unique rows'
2022-08-05 20:34:30.884 | DEBUG    | __main__:run_benchmark:298 - dfin.shape[0] - len(dfin.drop_duplicates())
2022-08-05 20:34:30.886 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:34:31.534 | DEBUG    | __main__:run_benchmark:297 - Query: difference between number of rows and number of distinct rows
2022-08-05 20:34:31.534 | DEBUG    | __main__:run_benchmark:298 - print("Number of duplicate rows: ", len(df) - len(df.drop_duplicates()))
2022-08-05 20:34:31.534 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: 'Number of duplicate rows: '

2022-08-05 20:34:31.535 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: 'Number of duplicate rows: '

2022-08-05 20:34:31.536 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:34:32.771 | DEBUG    | __main__:run_benchmark:297 - Query: difference between number of rows and number of rows in drop duplicates
2022-08-05 20:34:32.771 | DEBUG    | __main__:run_benchmark:298 - # 
2022-08-05 20:34:32.771 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:34:33.972 | DEBUG    | __main__:run_benchmark:297 - Query: difference between number of rows in drop duplicates and number of rows
2022-08-05 20:34:33.972 | DEBUG    | __main__:run_benchmark:298 - df_duplicates = pd.DataFrame({'f1': [1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3], 'f2': [1,1
2022-08-05 20:34:33.973 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:34:34.099 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Find the number of duplicate rows in dataframe 'dfin'", 'user': 'u1'}, {'query': "Number of duplicate...
    │               └ {'queries': [{'query': "Find the number of duplicate rows in dataframe 'dfin'", 'user': 'u1'}, {'query': "Number of duplicate...
    └ {'query': 'number of rows minus number of rows in drop duplicates', 'user': 'u7'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'f1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'f2': {0: 12, 1: 12, 2: -5, 3: 7, 4: 7, 5: 14, 6: ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'f1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'f2': {0:...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f098f950>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:34:34 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:34:34 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f08f7590>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:34:34.103 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:35:05.897 | DEBUG    | __main__:run_benchmark:297 - Query: number of rows minus number of rows in drop duplicates
2022-08-05 20:35:05.897 | DEBUG    | __main__:run_benchmark:298 - dfin.drop_duplicates()
2022-08-05 20:35:05.905 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:35:06.583 | DEBUG    | __main__:run_benchmark:297 - Query: number of rows in df minus number of rows in drop duplicates
2022-08-05 20:35:06.583 | DEBUG    | __main__:run_benchmark:298 - print(len(df) - len(df.drop_duplicates()))
2022-08-05 20:35:06.583 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: (len(df) - len(df.drop_duplicates()))

2022-08-05 20:35:06.585 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: (len(df) - len(df.drop_duplicates()))

2022-08-05 20:35:06.586 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:35:06.709 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Find the number of duplicate rows in dataframe 'dfin'", 'user': 'u1'}, {'query': "Number of duplicate...
    │               └ {'queries': [{'query': "Find the number of duplicate rows in dataframe 'dfin'", 'user': 'u1'}, {'query': "Number of duplicate...
    └ {'query': 'number of rows in df minus number of rows in drop duplicated df', 'user': 'u7'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'f1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'f2': {0: 12, 1: 12, 2: -5, 3: 7, 4: 7, 5: 14, 6: ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'f1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'f2': {0:...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f08d5710>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:35:06 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:35:06 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f08d55d0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:35:06.713 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:35:37.438 | DEBUG    | __main__:run_benchmark:297 - Query: number of rows in df minus number of rows in drop duplicated df
2022-08-05 20:35:37.438 | DEBUG    | __main__:run_benchmark:298 - print(dfin.shape[0] - dfin.drop_duplicates().shape[0])
2022-08-05 20:35:37.438 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: (dfin.shape[0] - dfin.drop_duplicates().shape[0])

2022-08-05 20:35:37.440 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:35:37.444 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-05 20:35:37.859 | DEBUG    | __main__:run_benchmark:297 - Query: find number of duplicate rows in dfin
2022-08-05 20:35:37.859 | DEBUG    | __main__:run_benchmark:298 - def duplicates_in(dfin):
2022-08-05 20:35:37.859 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:35:38.943 | DEBUG    | __main__:run_benchmark:297 - Query: find count of duplicate rows in dfin
2022-08-05 20:35:38.943 | DEBUG    | __main__:run_benchmark:298 - def find_count_duplicates_rows(dfin):
2022-08-05 20:35:38.943 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:35:40.034 | DEBUG    | __main__:run_benchmark:297 - Query: find number of non unique rows in the table
2022-08-05 20:35:40.034 | DEBUG    | __main__:run_benchmark:298 - def num_non_unq_rows(dfin):
2022-08-05 20:35:40.034 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:35:41.152 | DEBUG    | __main__:run_benchmark:297 - Query: find number of rows which occur more than once in the table
2022-08-05 20:35:41.152 | DEBUG    | __main__:run_benchmark:298 - #  find the number of rows which have the same value for all the columns
2022-08-05 20:35:41.152 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:35:42.106 | DEBUG    | __main__:run_benchmark:297 - Query: find number of duplicate rows
2022-08-05 20:35:42.106 | DEBUG    | __main__:run_benchmark:298 - dfin.duplicated().sum()
2022-08-05 20:35:42.107 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:35:42.112 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:35:43.179 | DEBUG    | __main__:run_benchmark:297 - Query: Count the number of repeated rows
2022-08-05 20:35:43.180 | DEBUG    | __main__:run_benchmark:298 - #  Count the number of repeated rows
2022-08-05 20:35:43.180 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:35:43.557 | DEBUG    | __main__:run_benchmark:297 - Query: Count the number of duplicate rows
2022-08-05 20:35:43.557 | DEBUG    | __main__:run_benchmark:298 - dfin.duplicated().sum()
2022-08-05 20:35:43.559 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:35:43.928 | DEBUG    | __main__:run_benchmark:297 - Query: Drop the duplicate rows in dfin
2022-08-05 20:35:43.928 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.drop_duplicates()
2022-08-05 20:35:43.931 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:35:44.313 | DEBUG    | __main__:run_benchmark:297 - Query: Drop the duplicate rows in dfin and show the length of the df
2022-08-05 20:35:44.313 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.drop_duplicates()
2022-08-05 20:35:44.317 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:35:44.683 | DEBUG    | __main__:run_benchmark:297 - Query: Given a dataframe df, count the number of duplicate rows
2022-08-05 20:35:44.684 | DEBUG    | __main__:run_benchmark:298 - def duplicates(df):
2022-08-05 20:35:44.684 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:35:44.991 | DEBUG    | __main__:run_benchmark:297 - Query: Given a dataframe df, count the number of duplicate rows and return the sum
2022-08-05 20:35:44.991 | DEBUG    | __main__:run_benchmark:298 - def duplicates(df):
2022-08-05 20:35:44.991 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:35:45.564 | DEBUG    | __main__:run_benchmark:297 - Query: Given a dataframe dfin, count the number of duplicate rows and return the sum
2022-08-05 20:35:45.564 | DEBUG    | __main__:run_benchmark:298 - def count_dups(dfin):
2022-08-05 20:35:45.564 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:35:46.140 | DEBUG    | __main__:run_benchmark:297 - Query: Get total number of duplicate rows
2022-08-05 20:35:46.141 | DEBUG    | __main__:run_benchmark:298 - dfin['duplicate_rows'] = dfin.duplicated()
2022-08-05 20:35:46.143 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:35:46.148 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-05 20:35:47.414 | DEBUG    | __main__:run_benchmark:297 - Query: Count number of duplicate rows
2022-08-05 20:35:47.414 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.DataFrame({'inputA': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'inputB': {0: 12, 1: 12, 2: -5, 3: 7
2022-08-05 20:35:47.415 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:35:47.974 | DEBUG    | __main__:run_benchmark:297 - Query: output number of duplicate rows in dfin
2022-08-05 20:35:47.974 | DEBUG    | __main__:run_benchmark:298 - print(duplicate_rows(dfin))
2022-08-05 20:35:47.975 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: duplicate_rows(dfin)

2022-08-05 20:35:47.975 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: duplicate_rows(dfin)

2022-08-05 20:35:47.976 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:35:48.661 | DEBUG    | __main__:run_benchmark:297 - Query: number of duplicate rows in dfin
2022-08-05 20:35:48.661 | DEBUG    | __main__:run_benchmark:298 - assert(num_duplicates(dfin) == 2)
2022-08-05 20:35:48.662 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:35:49.778 | DEBUG    | __main__:run_benchmark:297 - Query: number of duplicate rows
2022-08-05 20:35:49.778 | DEBUG    | __main__:run_benchmark:298 - num_dups = 2
2022-08-05 20:35:49.779 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:35:50.322 | DEBUG    | __main__:run_benchmark:297 - Query: remove all duplicate rows
2022-08-05 20:35:50.322 | DEBUG    | __main__:run_benchmark:298 - df = df.drop_duplicates()
2022-08-05 20:35:50.324 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:35:50.881 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Count number of duplicate rows', 'user': 'u5'}, {'query': 'output number of duplicate rows in dfin', ...
    │               └ {'queries': [{'query': 'Count number of duplicate rows', 'user': 'u5'}, {'query': 'output number of duplicate rows in dfin', ...
    └ {'query': 'count the number of duplicate rows', 'user': 'u19'}

  File "experiments/jigsaw_experiments.py", line 291, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'inputA': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'inputB': {0: 12, 1: 12, 2: -5, 3: 7, 4: 7, 5:...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'inputA': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'inpu...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f09b8ad0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:35:50 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:35:50 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f09b8990>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:35:50.887 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:36:21.669 | DEBUG    | __main__:run_benchmark:297 - Query: count the number of duplicate rows
2022-08-05 20:36:21.669 | DEBUG    | __main__:run_benchmark:298 - #  Create a new column called "target" and assign the values based on the GoldTarget values
2022-08-05 20:36:21.669 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:36:22.452 | DEBUG    | __main__:run_benchmark:297 - Query: return the number of duplicate rows
2022-08-05 20:36:22.452 | DEBUG    | __main__:run_benchmark:298 - num_dups = len(dfin[dfin.duplicated(['inputA', 'inputB', 'inputC'])])
2022-08-05 20:36:22.455 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:36:22.580 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Count number of duplicate rows', 'user': 'u5'}, {'query': 'output number of duplicate rows in dfin', ...
    │               └ {'queries': [{'query': 'Count number of duplicate rows', 'user': 'u5'}, {'query': 'output number of duplicate rows in dfin', ...
    └ {'query': 'return total rows - unique rows', 'user': 'u16'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'inputA': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'inputB': {0: 12, 1: 12, 2: -5, 3: 7, 4: 7, 5:...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'inputA': {0: 5, 1: 5, 2: 15, 3: 3, 4: 3, 5: 33, 6: 3}, 'inpu...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f08d9990>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:36:22 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:36:22 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f08eb990>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:36:22.584 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:36:53.701 | DEBUG    | __main__:run_benchmark:297 - Query: return total rows - unique rows
2022-08-05 20:36:53.702 | DEBUG    | __main__:run_benchmark:298 - # ______________________________________________________________________________________________________________________
2022-08-05 20:36:53.702 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:36:54.585 | DEBUG    | __main__:run_benchmark:297 - Query: return total rows - duplicate rows
2022-08-05 20:36:54.585 | DEBUG    | __main__:run_benchmark:298 - print(dfin.duplicated().sum())
2022-08-05 20:36:54.585 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: dfin.duplicated().sum()

2022-08-05 20:36:54.587 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:36:55.682 | DEBUG    | __main__:run_benchmark:297 - Query: return total rows of dfin - unique rows of dfin
2022-08-05 20:36:55.682 | DEBUG    | __main__:run_benchmark:298 - #  print(dfin)
2022-08-05 20:36:55.682 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:36:56.214 | DEBUG    | __main__:run_benchmark:297 - Query: return total rows of 'dfin' - unique rows of 'dfin'
2022-08-05 20:36:56.214 | DEBUG    | __main__:run_benchmark:298 - dfin.duplicated().sum()
2022-08-05 20:36:56.216 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:36:57.148 | DEBUG    | __main__:run_benchmark:297 - Query: return number of nonunique rows
2022-08-05 20:36:57.148 | DEBUG    | __main__:run_benchmark:298 - def nonunique_row_count(dfin):
2022-08-05 20:36:57.149 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:36:58.331 | DEBUG    | __main__:run_benchmark:297 - Query: return length - length of drop duplicates
2022-08-05 20:36:58.331 | DEBUG    | __main__:run_benchmark:298 - #  df.drop_duplicates(subset=['col1', 'col2'])
2022-08-05 20:36:58.331 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:36:59.251 | DEBUG    | __main__:run_benchmark:297 - Query: return length of din - length of drop duplicates of dfin
2022-08-05 20:36:59.251 | DEBUG    | __main__:run_benchmark:298 - print(len(din) - len(dfin.drop_duplicates()))
2022-08-05 20:36:59.251 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: (len(din) - len(dfin.drop_duplicates()))

2022-08-05 20:36:59.252 | DEBUG    | __main__:evaluate_result_on_io_ex:225 - Unparsed: (len(din) - len(dfin.drop_duplicates()))

2022-08-05 20:36:59.253 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:37:00.635 | DEBUG    | __main__:run_benchmark:297 - Query: find the number of repeated columns in 'dfin'
2022-08-05 20:37:00.635 | DEBUG    | __main__:run_benchmark:298 - #  create a list of the column names in 'dfin' that are duplicated
2022-08-05 20:37:00.636 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:37:01.751 | DEBUG    | __main__:run_benchmark:297 - Query: count number of duplicated rows in 'dfin'
2022-08-05 20:37:01.751 | DEBUG    | __main__:run_benchmark:298 - #  remove duplicated rows in 'dfin'
2022-08-05 20:37:01.751 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:37:01.756 | DEBUG    | __main__:run:356 - Running benchmark 16
2022-08-05 20:37:01.756 | DEBUG    | __main__:run:357 - Number of Sets: 4
2022-08-05 20:37:01.756 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-05 20:37:02.504 | DEBUG    | __main__:run_benchmark:297 - Query: Keep only one row per unique value of column 'f2' in dataframe 'dfin'
2022-08-05 20:37:02.505 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.drop_duplicates(subset='f2')
2022-08-05 20:37:02.519 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:37:03.682 | DEBUG    | __main__:run_benchmark:297 - Query: Keep only the last row per unique value of column 'f2' in dataframe 'dfin'
2022-08-05 20:37:03.682 | DEBUG    | __main__:run_benchmark:298 - dfout = pd.DataFrame({'f1': {0: 5, 1: 5, 2: 15, 3: 3, 4: 33, 5: 3}, 'f2': {0: 12, 1: 12, 2: 12, 3: 7, 4: 7,
2022-08-05 20:37:03.682 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:37:03.687 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:37:05.271 | DEBUG    | __main__:run_benchmark:297 - Query: Given a dataframe dfin, drop all rows that are duplicated for column 'feat2' and keep the last occurence unmarked
2022-08-05 20:37:05.271 | DEBUG    | __main__:run_benchmark:298 - #  Given a dataframe dfin, drop all rows that are duplicated for column 'feat2' and keep the first occurence unmarked
2022-08-05 20:37:05.271 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:37:05.276 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:37:06.135 | DEBUG    | __main__:run_benchmark:297 - Query: remove rows where element of column 'inputB' is not unique
2022-08-05 20:37:06.135 | DEBUG    | __main__:run_benchmark:298 - df = df.drop([2, 3, 5, 6, 7])
2022-08-05 20:37:06.138 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:37:06.709 | DEBUG    | __main__:run_benchmark:297 - Query: remove rows where values in 'inputB' are duplicates
2022-08-05 20:37:06.709 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin[dfin.inputB.duplicated() == False]
2022-08-05 20:37:06.723 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:37:06.840 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f98867687a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f98868e78c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f97f192c350>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "remove rows where element of column 'inputB' is not unique", 'user': 'u5'}, {'query': "remove rows wh...
    │               └ {'queries': [{'query': "remove rows where element of column 'inputB' is not unique", 'user': 'u5'}, {'query': "remove rows wh...
    └ {'query': "remove all duplicate entries of column 'inputB'", 'user': 'u19'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f97f192c350>
    │    │               └ ["dfin = pd.DataFrame({'inputA': {0: 7, 1: 5, 2: 15, 3: 3, 4: 33, 5: 3, 6: 1, 7: 0}, 'inputB': {0: 12, 1: 12, 2: -5, 3: 7, 4:...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f97f192c350>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'inputA': {0: 7, 1: 5, 2: 15, 3: 3, 4: 33, 5: 3, 6: 1, 7: 0},...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f97f1a28dd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f97f0963c50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:37:06 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f987825aef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:37:06 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f97f090d290>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:37:06.845 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:40:57.592 | DEBUG    | __main__:run:345 - Running benchmark set PandasEval1
2022-08-05 20:40:57.592 | DEBUG    | __main__:run:346 - Found 68 benchmarks in PandasEval1
2022-08-05 20:40:57.592 | DEBUG    | __main__:run:356 - Running benchmark 0
2022-08-05 20:40:57.592 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.592 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.593 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A0 as result already exists
2022-08-05 20:40:57.593 | DEBUG    | __main__:run:356 - Running benchmark 1
2022-08-05 20:40:57.593 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.593 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.593 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A0 as result already exists
2022-08-05 20:40:57.593 | DEBUG    | __main__:run:356 - Running benchmark 2
2022-08-05 20:40:57.593 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.594 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.594 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A0 as result already exists
2022-08-05 20:40:57.594 | DEBUG    | __main__:run:356 - Running benchmark 3
2022-08-05 20:40:57.594 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.594 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.594 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A0 as result already exists
2022-08-05 20:40:57.594 | DEBUG    | __main__:run:356 - Running benchmark 4
2022-08-05 20:40:57.594 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.594 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.595 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A0 as result already exists
2022-08-05 20:40:57.595 | DEBUG    | __main__:run:356 - Running benchmark 5
2022-08-05 20:40:57.595 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.595 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.595 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A0 as result already exists
2022-08-05 20:40:57.595 | DEBUG    | __main__:run:356 - Running benchmark 6
2022-08-05 20:40:57.595 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.596 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.596 | DEBUG    | __main__:run:370 - Skipping benchmark 6:A0 as result already exists
2022-08-05 20:40:57.596 | DEBUG    | __main__:run:356 - Running benchmark 7
2022-08-05 20:40:57.596 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.596 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.596 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A0 as result already exists
2022-08-05 20:40:57.596 | DEBUG    | __main__:run:356 - Running benchmark 8
2022-08-05 20:40:57.596 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.597 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.597 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A0 as result already exists
2022-08-05 20:40:57.597 | DEBUG    | __main__:run:356 - Running benchmark 9
2022-08-05 20:40:57.597 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.597 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.597 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A0 as result already exists
2022-08-05 20:40:57.597 | DEBUG    | __main__:run:356 - Running benchmark 10
2022-08-05 20:40:57.598 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.598 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.598 | DEBUG    | __main__:run:370 - Skipping benchmark 10:A0 as result already exists
2022-08-05 20:40:57.598 | DEBUG    | __main__:run:356 - Running benchmark 11
2022-08-05 20:40:57.598 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.598 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.598 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A0 as result already exists
2022-08-05 20:40:57.598 | DEBUG    | __main__:run:356 - Running benchmark 12
2022-08-05 20:40:57.599 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.599 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.599 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A0 as result already exists
2022-08-05 20:40:57.599 | DEBUG    | __main__:run:356 - Running benchmark 13
2022-08-05 20:40:57.599 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.599 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.599 | DEBUG    | __main__:run:370 - Skipping benchmark 13:A0 as result already exists
2022-08-05 20:40:57.599 | DEBUG    | __main__:run:356 - Running benchmark 14
2022-08-05 20:40:57.599 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.600 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.600 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A0 as result already exists
2022-08-05 20:40:57.600 | DEBUG    | __main__:run:356 - Running benchmark 15
2022-08-05 20:40:57.600 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.600 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.600 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A0 as result already exists
2022-08-05 20:40:57.600 | DEBUG    | __main__:run:356 - Running benchmark 16
2022-08-05 20:40:57.600 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.600 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.600 | DEBUG    | __main__:run:370 - Skipping benchmark 16:A0 as result already exists
2022-08-05 20:40:57.601 | DEBUG    | __main__:run:356 - Running benchmark 17
2022-08-05 20:40:57.601 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.601 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.601 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A0 as result already exists
2022-08-05 20:40:57.601 | DEBUG    | __main__:run:356 - Running benchmark 18
2022-08-05 20:40:57.601 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.601 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.601 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A0 as result already exists
2022-08-05 20:40:57.601 | DEBUG    | __main__:run:356 - Running benchmark 19
2022-08-05 20:40:57.601 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.602 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.602 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A0 as result already exists
2022-08-05 20:40:57.602 | DEBUG    | __main__:run:356 - Running benchmark 20
2022-08-05 20:40:57.602 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.602 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.602 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A0 as result already exists
2022-08-05 20:40:57.602 | DEBUG    | __main__:run:356 - Running benchmark 21
2022-08-05 20:40:57.602 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.602 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.602 | DEBUG    | __main__:run:370 - Skipping benchmark 21:A0 as result already exists
2022-08-05 20:40:57.603 | DEBUG    | __main__:run:356 - Running benchmark 22
2022-08-05 20:40:57.603 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.603 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.603 | DEBUG    | __main__:run:370 - Skipping benchmark 22:A0 as result already exists
2022-08-05 20:40:57.603 | DEBUG    | __main__:run:356 - Running benchmark 23
2022-08-05 20:40:57.603 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.603 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.603 | DEBUG    | __main__:run:370 - Skipping benchmark 23:A0 as result already exists
2022-08-05 20:40:57.603 | DEBUG    | __main__:run:356 - Running benchmark 24
2022-08-05 20:40:57.603 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.604 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.604 | DEBUG    | __main__:run:370 - Skipping benchmark 24:A0 as result already exists
2022-08-05 20:40:57.604 | DEBUG    | __main__:run:356 - Running benchmark 25
2022-08-05 20:40:57.604 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.604 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.604 | DEBUG    | __main__:run:370 - Skipping benchmark 25:A0 as result already exists
2022-08-05 20:40:57.604 | DEBUG    | __main__:run:356 - Running benchmark 26
2022-08-05 20:40:57.604 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.604 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.605 | DEBUG    | __main__:run:370 - Skipping benchmark 26:A0 as result already exists
2022-08-05 20:40:57.605 | DEBUG    | __main__:run:356 - Running benchmark 27
2022-08-05 20:40:57.605 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.605 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.605 | DEBUG    | __main__:run:370 - Skipping benchmark 27:A0 as result already exists
2022-08-05 20:40:57.605 | DEBUG    | __main__:run:356 - Running benchmark 28
2022-08-05 20:40:57.605 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.605 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.606 | DEBUG    | __main__:run:370 - Skipping benchmark 28:A0 as result already exists
2022-08-05 20:40:57.606 | DEBUG    | __main__:run:356 - Running benchmark 29
2022-08-05 20:40:57.606 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.606 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.606 | DEBUG    | __main__:run:370 - Skipping benchmark 29:A0 as result already exists
2022-08-05 20:40:57.606 | DEBUG    | __main__:run:356 - Running benchmark 30
2022-08-05 20:40:57.606 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.606 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.606 | DEBUG    | __main__:run:370 - Skipping benchmark 30:A0 as result already exists
2022-08-05 20:40:57.606 | DEBUG    | __main__:run:356 - Running benchmark 31
2022-08-05 20:40:57.607 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.607 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.607 | DEBUG    | __main__:run:370 - Skipping benchmark 31:A0 as result already exists
2022-08-05 20:40:57.607 | DEBUG    | __main__:run:356 - Running benchmark 32
2022-08-05 20:40:57.607 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.607 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.607 | DEBUG    | __main__:run:370 - Skipping benchmark 32:A0 as result already exists
2022-08-05 20:40:57.607 | DEBUG    | __main__:run:356 - Running benchmark 33
2022-08-05 20:40:57.608 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.608 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.608 | DEBUG    | __main__:run:370 - Skipping benchmark 33:A0 as result already exists
2022-08-05 20:40:57.608 | DEBUG    | __main__:run:356 - Running benchmark 34
2022-08-05 20:40:57.608 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.608 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.608 | DEBUG    | __main__:run:370 - Skipping benchmark 34:A0 as result already exists
2022-08-05 20:40:57.608 | DEBUG    | __main__:run:356 - Running benchmark 35
2022-08-05 20:40:57.608 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.609 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.609 | DEBUG    | __main__:run:370 - Skipping benchmark 35:A0 as result already exists
2022-08-05 20:40:57.609 | DEBUG    | __main__:run:356 - Running benchmark 36
2022-08-05 20:40:57.609 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.609 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.609 | DEBUG    | __main__:run:370 - Skipping benchmark 36:A0 as result already exists
2022-08-05 20:40:57.609 | DEBUG    | __main__:run:356 - Running benchmark 37
2022-08-05 20:40:57.609 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.609 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.610 | DEBUG    | __main__:run:370 - Skipping benchmark 37:A0 as result already exists
2022-08-05 20:40:57.610 | DEBUG    | __main__:run:356 - Running benchmark 38
2022-08-05 20:40:57.610 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.610 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.610 | DEBUG    | __main__:run:370 - Skipping benchmark 38:A0 as result already exists
2022-08-05 20:40:57.610 | DEBUG    | __main__:run:356 - Running benchmark 39
2022-08-05 20:40:57.610 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.610 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.610 | DEBUG    | __main__:run:370 - Skipping benchmark 39:A0 as result already exists
2022-08-05 20:40:57.611 | DEBUG    | __main__:run:356 - Running benchmark 40
2022-08-05 20:40:57.611 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.611 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.611 | DEBUG    | __main__:run:370 - Skipping benchmark 40:A0 as result already exists
2022-08-05 20:40:57.611 | DEBUG    | __main__:run:356 - Running benchmark 41
2022-08-05 20:40:57.611 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.611 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.611 | DEBUG    | __main__:run:370 - Skipping benchmark 41:A0 as result already exists
2022-08-05 20:40:57.611 | DEBUG    | __main__:run:356 - Running benchmark 42
2022-08-05 20:40:57.611 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.612 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.612 | DEBUG    | __main__:run:370 - Skipping benchmark 42:A0 as result already exists
2022-08-05 20:40:57.612 | DEBUG    | __main__:run:356 - Running benchmark 43
2022-08-05 20:40:57.612 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.612 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.612 | DEBUG    | __main__:run:370 - Skipping benchmark 43:A0 as result already exists
2022-08-05 20:40:57.612 | DEBUG    | __main__:run:356 - Running benchmark 44
2022-08-05 20:40:57.612 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.613 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.613 | DEBUG    | __main__:run:370 - Skipping benchmark 44:A0 as result already exists
2022-08-05 20:40:57.613 | DEBUG    | __main__:run:356 - Running benchmark 45
2022-08-05 20:40:57.613 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.613 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.613 | DEBUG    | __main__:run:370 - Skipping benchmark 45:A0 as result already exists
2022-08-05 20:40:57.613 | DEBUG    | __main__:run:356 - Running benchmark 46
2022-08-05 20:40:57.614 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.614 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.614 | DEBUG    | __main__:run:370 - Skipping benchmark 46:A0 as result already exists
2022-08-05 20:40:57.614 | DEBUG    | __main__:run:356 - Running benchmark 47
2022-08-05 20:40:57.614 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.614 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.614 | DEBUG    | __main__:run:370 - Skipping benchmark 47:A0 as result already exists
2022-08-05 20:40:57.614 | DEBUG    | __main__:run:356 - Running benchmark 48
2022-08-05 20:40:57.614 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.615 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.615 | DEBUG    | __main__:run:370 - Skipping benchmark 48:A0 as result already exists
2022-08-05 20:40:57.615 | DEBUG    | __main__:run:356 - Running benchmark 49
2022-08-05 20:40:57.615 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.615 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.615 | DEBUG    | __main__:run:370 - Skipping benchmark 49:A0 as result already exists
2022-08-05 20:40:57.615 | DEBUG    | __main__:run:356 - Running benchmark 50
2022-08-05 20:40:57.615 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.615 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.616 | DEBUG    | __main__:run:370 - Skipping benchmark 50:A0 as result already exists
2022-08-05 20:40:57.616 | DEBUG    | __main__:run:356 - Running benchmark 51
2022-08-05 20:40:57.616 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.616 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.616 | DEBUG    | __main__:run:370 - Skipping benchmark 51:A0 as result already exists
2022-08-05 20:40:57.616 | DEBUG    | __main__:run:356 - Running benchmark 52
2022-08-05 20:40:57.616 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.616 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.616 | DEBUG    | __main__:run:370 - Skipping benchmark 52:A0 as result already exists
2022-08-05 20:40:57.616 | DEBUG    | __main__:run:356 - Running benchmark 53
2022-08-05 20:40:57.617 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.617 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.617 | DEBUG    | __main__:run:370 - Skipping benchmark 53:A0 as result already exists
2022-08-05 20:40:57.617 | DEBUG    | __main__:run:356 - Running benchmark 54
2022-08-05 20:40:57.617 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.617 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.617 | DEBUG    | __main__:run:370 - Skipping benchmark 54:A0 as result already exists
2022-08-05 20:40:57.617 | DEBUG    | __main__:run:356 - Running benchmark 55
2022-08-05 20:40:57.617 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.617 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.618 | DEBUG    | __main__:run:370 - Skipping benchmark 55:A0 as result already exists
2022-08-05 20:40:57.618 | DEBUG    | __main__:run:356 - Running benchmark 56
2022-08-05 20:40:57.618 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.618 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.618 | DEBUG    | __main__:run:370 - Skipping benchmark 56:A0 as result already exists
2022-08-05 20:40:57.618 | DEBUG    | __main__:run:356 - Running benchmark 57
2022-08-05 20:40:57.618 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.618 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.618 | DEBUG    | __main__:run:370 - Skipping benchmark 57:A0 as result already exists
2022-08-05 20:40:57.618 | DEBUG    | __main__:run:356 - Running benchmark 58
2022-08-05 20:40:57.619 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.619 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.619 | DEBUG    | __main__:run:370 - Skipping benchmark 58:A0 as result already exists
2022-08-05 20:40:57.619 | DEBUG    | __main__:run:356 - Running benchmark 59
2022-08-05 20:40:57.619 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.619 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.619 | DEBUG    | __main__:run:370 - Skipping benchmark 59:A0 as result already exists
2022-08-05 20:40:57.619 | DEBUG    | __main__:run:356 - Running benchmark 60
2022-08-05 20:40:57.619 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.619 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.620 | DEBUG    | __main__:run:370 - Skipping benchmark 60:A0 as result already exists
2022-08-05 20:40:57.620 | DEBUG    | __main__:run:356 - Running benchmark 62
2022-08-05 20:40:57.620 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.620 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.620 | DEBUG    | __main__:run:370 - Skipping benchmark 62:A0 as result already exists
2022-08-05 20:40:57.620 | DEBUG    | __main__:run:356 - Running benchmark 63
2022-08-05 20:40:57.620 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.620 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.620 | DEBUG    | __main__:run:370 - Skipping benchmark 63:A0 as result already exists
2022-08-05 20:40:57.620 | DEBUG    | __main__:run:356 - Running benchmark 64
2022-08-05 20:40:57.621 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.621 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.621 | DEBUG    | __main__:run:370 - Skipping benchmark 64:A0 as result already exists
2022-08-05 20:40:57.621 | DEBUG    | __main__:run:356 - Running benchmark 65
2022-08-05 20:40:57.621 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.621 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.621 | DEBUG    | __main__:run:370 - Skipping benchmark 65:A0 as result already exists
2022-08-05 20:40:57.621 | DEBUG    | __main__:run:356 - Running benchmark 66
2022-08-05 20:40:57.621 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.621 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.622 | DEBUG    | __main__:run:370 - Skipping benchmark 66:A0 as result already exists
2022-08-05 20:40:57.622 | DEBUG    | __main__:run:356 - Running benchmark 67
2022-08-05 20:40:57.622 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:40:57.622 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.622 | DEBUG    | __main__:run:370 - Skipping benchmark 67:A0 as result already exists
2022-08-05 20:40:57.622 | DEBUG    | __main__:run:345 - Running benchmark set PandasEval2
2022-08-05 20:40:57.622 | DEBUG    | __main__:run:346 - Found 21 benchmarks in PandasEval2
2022-08-05 20:40:57.622 | DEBUG    | __main__:run:356 - Running benchmark 0
2022-08-05 20:40:57.622 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:40:57.622 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:40:57.623 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A0 as result already exists
2022-08-05 20:40:57.623 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A1 as result already exists
2022-08-05 20:40:57.623 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A2 as result already exists
2022-08-05 20:40:57.623 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:40:57.623 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D0 as result already exists
2022-08-05 20:40:57.623 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D1 as result already exists
2022-08-05 20:40:57.623 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D2 as result already exists
2022-08-05 20:40:57.623 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D3 as result already exists
2022-08-05 20:40:57.623 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D4 as result already exists
2022-08-05 20:40:57.624 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D5 as result already exists
2022-08-05 20:40:57.624 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D6 as result already exists
2022-08-05 20:40:57.624 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.624 | DEBUG    | __main__:run:370 - Skipping benchmark 0:B0 as result already exists
2022-08-05 20:40:57.624 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:40:57.624 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C0 as result already exists
2022-08-05 20:40:57.624 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C1 as result already exists
2022-08-05 20:40:57.624 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C2 as result already exists
2022-08-05 20:40:57.624 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:40:57.625 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E0 as result already exists
2022-08-05 20:40:57.625 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E1 as result already exists
2022-08-05 20:40:57.625 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E2 as result already exists
2022-08-05 20:40:57.625 | DEBUG    | __main__:run:356 - Running benchmark 1
2022-08-05 20:40:57.625 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:40:57.625 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:40:57.625 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A0 as result already exists
2022-08-05 20:40:57.625 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A1 as result already exists
2022-08-05 20:40:57.625 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A2 as result already exists
2022-08-05 20:40:57.626 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A3 as result already exists
2022-08-05 20:40:57.626 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:40:57.626 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D0 as result already exists
2022-08-05 20:40:57.626 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D1 as result already exists
2022-08-05 20:40:57.626 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D2 as result already exists
2022-08-05 20:40:57.626 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D3 as result already exists
2022-08-05 20:40:57.626 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D4 as result already exists
2022-08-05 20:40:57.626 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D5 as result already exists
2022-08-05 20:40:57.626 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D6 as result already exists
2022-08-05 20:40:57.626 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D7 as result already exists
2022-08-05 20:40:57.627 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-05 20:40:57.627 | DEBUG    | __main__:run:370 - Skipping benchmark 1:B0 as result already exists
2022-08-05 20:40:57.627 | DEBUG    | __main__:run:370 - Skipping benchmark 1:B1 as result already exists
2022-08-05 20:40:57.627 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:40:57.627 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C0 as result already exists
2022-08-05 20:40:57.627 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C1 as result already exists
2022-08-05 20:40:57.627 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C2 as result already exists
2022-08-05 20:40:57.627 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C3 as result already exists
2022-08-05 20:40:57.627 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C4 as result already exists
2022-08-05 20:40:57.627 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C5 as result already exists
2022-08-05 20:40:57.628 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:40:57.628 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E0 as result already exists
2022-08-05 20:40:57.628 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E1 as result already exists
2022-08-05 20:40:57.628 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E2 as result already exists
2022-08-05 20:40:57.628 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E3 as result already exists
2022-08-05 20:40:57.628 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E4 as result already exists
2022-08-05 20:40:57.628 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E5 as result already exists
2022-08-05 20:40:57.628 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E6 as result already exists
2022-08-05 20:40:57.628 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E7 as result already exists
2022-08-05 20:40:57.628 | DEBUG    | __main__:run:356 - Running benchmark 2
2022-08-05 20:40:57.629 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:40:57.629 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:40:57.629 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A0 as result already exists
2022-08-05 20:40:57.629 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A1 as result already exists
2022-08-05 20:40:57.629 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A2 as result already exists
2022-08-05 20:40:57.629 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A3 as result already exists
2022-08-05 20:40:57.629 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A4 as result already exists
2022-08-05 20:40:57.629 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A5 as result already exists
2022-08-05 20:40:57.629 | DEBUG    | __main__:run:363 - Number of queries: 12
2022-08-05 20:40:57.630 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D0 as result already exists
2022-08-05 20:40:57.630 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D1 as result already exists
2022-08-05 20:40:57.630 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D2 as result already exists
2022-08-05 20:40:57.630 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D3 as result already exists
2022-08-05 20:40:57.630 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D4 as result already exists
2022-08-05 20:40:57.630 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D5 as result already exists
2022-08-05 20:40:57.630 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D6 as result already exists
2022-08-05 20:40:57.630 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D7 as result already exists
2022-08-05 20:40:57.630 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D8 as result already exists
2022-08-05 20:40:57.630 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D9 as result already exists
2022-08-05 20:40:57.631 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D10 as result already exists
2022-08-05 20:40:57.631 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D11 as result already exists
2022-08-05 20:40:57.631 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-05 20:40:57.631 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B0 as result already exists
2022-08-05 20:40:57.631 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B1 as result already exists
2022-08-05 20:40:57.631 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B2 as result already exists
2022-08-05 20:40:57.631 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B3 as result already exists
2022-08-05 20:40:57.631 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B4 as result already exists
2022-08-05 20:40:57.631 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B5 as result already exists
2022-08-05 20:40:57.631 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B6 as result already exists
2022-08-05 20:40:57.632 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B7 as result already exists
2022-08-05 20:40:57.632 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B8 as result already exists
2022-08-05 20:40:57.632 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B9 as result already exists
2022-08-05 20:40:57.632 | DEBUG    | __main__:run:363 - Number of queries: 11
2022-08-05 20:40:57.632 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C0 as result already exists
2022-08-05 20:40:57.632 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C1 as result already exists
2022-08-05 20:40:57.632 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C2 as result already exists
2022-08-05 20:40:57.632 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C3 as result already exists
2022-08-05 20:40:57.632 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C4 as result already exists
2022-08-05 20:40:57.632 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C5 as result already exists
2022-08-05 20:40:57.633 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C6 as result already exists
2022-08-05 20:40:57.633 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C7 as result already exists
2022-08-05 20:40:57.633 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C8 as result already exists
2022-08-05 20:40:57.633 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C9 as result already exists
2022-08-05 20:40:57.633 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C10 as result already exists
2022-08-05 20:40:57.633 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-05 20:40:57.633 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E0 as result already exists
2022-08-05 20:40:57.633 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E1 as result already exists
2022-08-05 20:40:57.633 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E2 as result already exists
2022-08-05 20:40:57.633 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E3 as result already exists
2022-08-05 20:40:57.634 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E4 as result already exists
2022-08-05 20:40:57.634 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E5 as result already exists
2022-08-05 20:40:57.634 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E6 as result already exists
2022-08-05 20:40:57.634 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E7 as result already exists
2022-08-05 20:40:57.634 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E8 as result already exists
2022-08-05 20:40:57.634 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E9 as result already exists
2022-08-05 20:40:57.634 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E10 as result already exists
2022-08-05 20:40:57.634 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E11 as result already exists
2022-08-05 20:40:57.634 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E12 as result already exists
2022-08-05 20:40:57.634 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E13 as result already exists
2022-08-05 20:40:57.635 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E14 as result already exists
2022-08-05 20:40:57.635 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E15 as result already exists
2022-08-05 20:40:57.635 | DEBUG    | __main__:run:356 - Running benchmark 3
2022-08-05 20:40:57.635 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:40:57.635 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:40:57.635 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A0 as result already exists
2022-08-05 20:40:57.635 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A1 as result already exists
2022-08-05 20:40:57.635 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A2 as result already exists
2022-08-05 20:40:57.635 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A3 as result already exists
2022-08-05 20:40:57.635 | DEBUG    | __main__:run:363 - Number of queries: 11
2022-08-05 20:40:57.636 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D0 as result already exists
2022-08-05 20:40:57.636 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D1 as result already exists
2022-08-05 20:40:57.636 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D2 as result already exists
2022-08-05 20:40:57.636 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D3 as result already exists
2022-08-05 20:40:57.636 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D4 as result already exists
2022-08-05 20:40:57.636 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D5 as result already exists
2022-08-05 20:40:57.636 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D6 as result already exists
2022-08-05 20:40:57.636 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D7 as result already exists
2022-08-05 20:40:57.636 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D8 as result already exists
2022-08-05 20:40:57.636 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D9 as result already exists
2022-08-05 20:40:57.637 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D10 as result already exists
2022-08-05 20:40:57.637 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:40:57.637 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B0 as result already exists
2022-08-05 20:40:57.637 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B1 as result already exists
2022-08-05 20:40:57.637 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B2 as result already exists
2022-08-05 20:40:57.637 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B3 as result already exists
2022-08-05 20:40:57.637 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B4 as result already exists
2022-08-05 20:40:57.637 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B5 as result already exists
2022-08-05 20:40:57.637 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-05 20:40:57.638 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C0 as result already exists
2022-08-05 20:40:57.638 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C1 as result already exists
2022-08-05 20:40:57.638 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C2 as result already exists
2022-08-05 20:40:57.638 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C3 as result already exists
2022-08-05 20:40:57.638 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C4 as result already exists
2022-08-05 20:40:57.638 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C5 as result already exists
2022-08-05 20:40:57.638 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C6 as result already exists
2022-08-05 20:40:57.638 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C7 as result already exists
2022-08-05 20:40:57.638 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C8 as result already exists
2022-08-05 20:40:57.638 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:40:57.639 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E0 as result already exists
2022-08-05 20:40:57.639 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E1 as result already exists
2022-08-05 20:40:57.639 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E2 as result already exists
2022-08-05 20:40:57.639 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E3 as result already exists
2022-08-05 20:40:57.639 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E4 as result already exists
2022-08-05 20:40:57.639 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E5 as result already exists
2022-08-05 20:40:57.639 | DEBUG    | __main__:run:356 - Running benchmark 4
2022-08-05 20:40:57.639 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:40:57.639 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:40:57.639 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A0 as result already exists
2022-08-05 20:40:57.640 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A1 as result already exists
2022-08-05 20:40:57.640 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A2 as result already exists
2022-08-05 20:40:57.640 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A3 as result already exists
2022-08-05 20:40:57.640 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A4 as result already exists
2022-08-05 20:40:57.640 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A5 as result already exists
2022-08-05 20:40:57.640 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:40:57.640 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D0 as result already exists
2022-08-05 20:40:57.640 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D1 as result already exists
2022-08-05 20:40:57.640 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D2 as result already exists
2022-08-05 20:40:57.640 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D3 as result already exists
2022-08-05 20:40:57.641 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D4 as result already exists
2022-08-05 20:40:57.641 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D5 as result already exists
2022-08-05 20:40:57.641 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D6 as result already exists
2022-08-05 20:40:57.641 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-05 20:40:57.641 | DEBUG    | __main__:run:370 - Skipping benchmark 4:B0 as result already exists
2022-08-05 20:40:57.641 | DEBUG    | __main__:run:370 - Skipping benchmark 4:B1 as result already exists
2022-08-05 20:40:57.641 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:40:57.641 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C0 as result already exists
2022-08-05 20:40:57.641 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C1 as result already exists
2022-08-05 20:40:57.641 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C2 as result already exists
2022-08-05 20:40:57.642 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C3 as result already exists
2022-08-05 20:40:57.642 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C4 as result already exists
2022-08-05 20:40:57.642 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C5 as result already exists
2022-08-05 20:40:57.642 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C6 as result already exists
2022-08-05 20:40:57.642 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:40:57.642 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E0 as result already exists
2022-08-05 20:40:57.642 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E1 as result already exists
2022-08-05 20:40:57.642 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E2 as result already exists
2022-08-05 20:40:57.642 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E3 as result already exists
2022-08-05 20:40:57.642 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E4 as result already exists
2022-08-05 20:40:57.643 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E5 as result already exists
2022-08-05 20:40:57.643 | DEBUG    | __main__:run:356 - Running benchmark 5
2022-08-05 20:40:57.643 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:40:57.643 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:40:57.643 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A0 as result already exists
2022-08-05 20:40:57.643 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A1 as result already exists
2022-08-05 20:40:57.643 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A2 as result already exists
2022-08-05 20:40:57.643 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A3 as result already exists
2022-08-05 20:40:57.643 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-05 20:40:57.643 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D0 as result already exists
2022-08-05 20:40:57.644 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D1 as result already exists
2022-08-05 20:40:57.644 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D2 as result already exists
2022-08-05 20:40:57.644 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D3 as result already exists
2022-08-05 20:40:57.644 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D4 as result already exists
2022-08-05 20:40:57.644 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D5 as result already exists
2022-08-05 20:40:57.644 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D6 as result already exists
2022-08-05 20:40:57.644 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D7 as result already exists
2022-08-05 20:40:57.644 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D8 as result already exists
2022-08-05 20:40:57.644 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D9 as result already exists
2022-08-05 20:40:57.644 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D10 as result already exists
2022-08-05 20:40:57.645 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D11 as result already exists
2022-08-05 20:40:57.645 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D12 as result already exists
2022-08-05 20:40:57.645 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D13 as result already exists
2022-08-05 20:40:57.645 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D14 as result already exists
2022-08-05 20:40:57.645 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D15 as result already exists
2022-08-05 20:40:57.645 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:40:57.645 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B0 as result already exists
2022-08-05 20:40:57.645 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B1 as result already exists
2022-08-05 20:40:57.645 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B2 as result already exists
2022-08-05 20:40:57.646 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B3 as result already exists
2022-08-05 20:40:57.646 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B4 as result already exists
2022-08-05 20:40:57.646 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B5 as result already exists
2022-08-05 20:40:57.646 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B6 as result already exists
2022-08-05 20:40:57.646 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:40:57.646 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C0 as result already exists
2022-08-05 20:40:57.646 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C1 as result already exists
2022-08-05 20:40:57.646 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C2 as result already exists
2022-08-05 20:40:57.646 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C3 as result already exists
2022-08-05 20:40:57.646 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C4 as result already exists
2022-08-05 20:40:57.647 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C5 as result already exists
2022-08-05 20:40:57.647 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-05 20:40:57.647 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E0 as result already exists
2022-08-05 20:40:57.647 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E1 as result already exists
2022-08-05 20:40:57.647 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E2 as result already exists
2022-08-05 20:40:57.647 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E3 as result already exists
2022-08-05 20:40:57.647 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E4 as result already exists
2022-08-05 20:40:57.647 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E5 as result already exists
2022-08-05 20:40:57.647 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E6 as result already exists
2022-08-05 20:40:57.647 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E7 as result already exists
2022-08-05 20:40:57.648 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E8 as result already exists
2022-08-05 20:40:57.648 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E9 as result already exists
2022-08-05 20:40:57.648 | DEBUG    | __main__:run:356 - Running benchmark 6
2022-08-05 20:40:57.648 | DEBUG    | __main__:run:357 - Number of Sets: 4
2022-08-05 20:40:57.648 | DEBUG    | __main__:run:363 - Number of queries: 27
2022-08-05 20:40:57.648 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D0 as result already exists
2022-08-05 20:40:57.648 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D1 as result already exists
2022-08-05 20:40:57.648 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D2 as result already exists
2022-08-05 20:40:57.648 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D3 as result already exists
2022-08-05 20:40:57.648 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D4 as result already exists
2022-08-05 20:40:57.649 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D5 as result already exists
2022-08-05 20:40:57.649 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D6 as result already exists
2022-08-05 20:40:57.649 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D7 as result already exists
2022-08-05 20:40:57.649 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D8 as result already exists
2022-08-05 20:40:57.649 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D9 as result already exists
2022-08-05 20:40:57.649 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D10 as result already exists
2022-08-05 20:40:57.649 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D11 as result already exists
2022-08-05 20:40:57.649 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D12 as result already exists
2022-08-05 20:40:57.649 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D13 as result already exists
2022-08-05 20:40:57.650 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D14 as result already exists
2022-08-05 20:40:57.650 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D15 as result already exists
2022-08-05 20:40:57.650 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D16 as result already exists
2022-08-05 20:40:57.650 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D17 as result already exists
2022-08-05 20:40:57.650 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D18 as result already exists
2022-08-05 20:40:57.650 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D19 as result already exists
2022-08-05 20:40:57.650 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D20 as result already exists
2022-08-05 20:40:57.650 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D21 as result already exists
2022-08-05 20:40:57.650 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D22 as result already exists
2022-08-05 20:40:57.650 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D23 as result already exists
2022-08-05 20:40:57.651 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D24 as result already exists
2022-08-05 20:40:57.651 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D25 as result already exists
2022-08-05 20:40:57.651 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D26 as result already exists
2022-08-05 20:40:57.651 | DEBUG    | __main__:run:363 - Number of queries: 26
2022-08-05 20:40:57.651 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B0 as result already exists
2022-08-05 20:40:57.651 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B1 as result already exists
2022-08-05 20:40:57.651 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B2 as result already exists
2022-08-05 20:40:57.651 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B3 as result already exists
2022-08-05 20:40:57.651 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B4 as result already exists
2022-08-05 20:40:57.651 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B5 as result already exists
2022-08-05 20:40:57.652 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B6 as result already exists
2022-08-05 20:40:57.652 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B7 as result already exists
2022-08-05 20:40:57.652 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B8 as result already exists
2022-08-05 20:40:57.652 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B9 as result already exists
2022-08-05 20:40:57.652 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B10 as result already exists
2022-08-05 20:40:57.652 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B11 as result already exists
2022-08-05 20:40:57.652 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B12 as result already exists
2022-08-05 20:40:57.652 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B13 as result already exists
2022-08-05 20:40:57.652 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B14 as result already exists
2022-08-05 20:40:57.652 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B15 as result already exists
2022-08-05 20:40:57.653 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B16 as result already exists
2022-08-05 20:40:57.653 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B17 as result already exists
2022-08-05 20:40:57.653 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B18 as result already exists
2022-08-05 20:40:57.653 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B19 as result already exists
2022-08-05 20:40:57.653 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B20 as result already exists
2022-08-05 20:40:57.653 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B21 as result already exists
2022-08-05 20:40:57.653 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B22 as result already exists
2022-08-05 20:40:57.653 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B23 as result already exists
2022-08-05 20:40:57.653 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B24 as result already exists
2022-08-05 20:40:57.653 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B25 as result already exists
2022-08-05 20:40:57.654 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:40:57.654 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E0 as result already exists
2022-08-05 20:40:57.654 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E1 as result already exists
2022-08-05 20:40:57.654 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E2 as result already exists
2022-08-05 20:40:57.654 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E3 as result already exists
2022-08-05 20:40:57.654 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E4 as result already exists
2022-08-05 20:40:57.654 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E5 as result already exists
2022-08-05 20:40:57.654 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E6 as result already exists
2022-08-05 20:40:57.654 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-05 20:40:57.654 | DEBUG    | __main__:run:370 - Skipping benchmark 6:C0 as result already exists
2022-08-05 20:40:57.655 | DEBUG    | __main__:run:370 - Skipping benchmark 6:C1 as result already exists
2022-08-05 20:40:57.655 | DEBUG    | __main__:run:356 - Running benchmark 7
2022-08-05 20:40:57.655 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-05 20:40:57.655 | DEBUG    | __main__:run:363 - Number of queries: 21
2022-08-05 20:40:57.655 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D0 as result already exists
2022-08-05 20:40:57.655 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D1 as result already exists
2022-08-05 20:40:57.655 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D2 as result already exists
2022-08-05 20:40:57.655 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D3 as result already exists
2022-08-05 20:40:57.655 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D4 as result already exists
2022-08-05 20:40:57.655 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D5 as result already exists
2022-08-05 20:40:57.656 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D6 as result already exists
2022-08-05 20:40:57.656 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D7 as result already exists
2022-08-05 20:40:57.656 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D8 as result already exists
2022-08-05 20:40:57.656 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D9 as result already exists
2022-08-05 20:40:57.656 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D10 as result already exists
2022-08-05 20:40:57.656 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D11 as result already exists
2022-08-05 20:40:57.656 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D12 as result already exists
2022-08-05 20:40:57.656 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D13 as result already exists
2022-08-05 20:40:57.656 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D14 as result already exists
2022-08-05 20:40:57.656 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D15 as result already exists
2022-08-05 20:40:57.657 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D16 as result already exists
2022-08-05 20:40:57.657 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D17 as result already exists
2022-08-05 20:40:57.657 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D18 as result already exists
2022-08-05 20:40:57.657 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D19 as result already exists
2022-08-05 20:40:57.657 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D20 as result already exists
2022-08-05 20:40:57.657 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:40:57.657 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A0 as result already exists
2022-08-05 20:40:57.657 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A1 as result already exists
2022-08-05 20:40:57.657 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A2 as result already exists
2022-08-05 20:40:57.657 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-05 20:40:57.658 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E0 as result already exists
2022-08-05 20:40:57.658 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E1 as result already exists
2022-08-05 20:40:57.658 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E2 as result already exists
2022-08-05 20:40:57.658 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E3 as result already exists
2022-08-05 20:40:57.658 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E4 as result already exists
2022-08-05 20:40:57.658 | DEBUG    | __main__:run:356 - Running benchmark 8
2022-08-05 20:40:57.658 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-05 20:40:57.658 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:40:57.658 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C0 as result already exists
2022-08-05 20:40:57.658 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C1 as result already exists
2022-08-05 20:40:57.659 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C2 as result already exists
2022-08-05 20:40:57.659 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C3 as result already exists
2022-08-05 20:40:57.659 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:40:57.659 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A0 as result already exists
2022-08-05 20:40:57.659 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A1 as result already exists
2022-08-05 20:40:57.659 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A2 as result already exists
2022-08-05 20:40:57.659 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A3 as result already exists
2022-08-05 20:40:57.659 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A4 as result already exists
2022-08-05 20:40:57.659 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A5 as result already exists
2022-08-05 20:40:57.659 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-05 20:40:57.660 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D0 as result already exists
2022-08-05 20:40:57.660 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D1 as result already exists
2022-08-05 20:40:57.660 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D2 as result already exists
2022-08-05 20:40:57.660 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D3 as result already exists
2022-08-05 20:40:57.660 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D4 as result already exists
2022-08-05 20:40:57.660 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D5 as result already exists
2022-08-05 20:40:57.660 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D6 as result already exists
2022-08-05 20:40:57.660 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D7 as result already exists
2022-08-05 20:40:57.660 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D8 as result already exists
2022-08-05 20:40:57.660 | DEBUG    | __main__:run:356 - Running benchmark 9
2022-08-05 20:40:57.661 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:40:57.661 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-05 20:40:57.661 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D0 as result already exists
2022-08-05 20:40:57.661 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D1 as result already exists
2022-08-05 20:40:57.661 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D2 as result already exists
2022-08-05 20:40:57.661 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D3 as result already exists
2022-08-05 20:40:57.661 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D4 as result already exists
2022-08-05 20:40:57.661 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D5 as result already exists
2022-08-05 20:40:57.661 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D6 as result already exists
2022-08-05 20:40:57.661 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D7 as result already exists
2022-08-05 20:40:57.662 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D8 as result already exists
2022-08-05 20:40:57.662 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D9 as result already exists
2022-08-05 20:40:57.662 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:40:57.662 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B0 as result already exists
2022-08-05 20:40:57.662 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B1 as result already exists
2022-08-05 20:40:57.662 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B2 as result already exists
2022-08-05 20:40:57.662 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:40:57.662 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C0 as result already exists
2022-08-05 20:40:57.662 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C1 as result already exists
2022-08-05 20:40:57.662 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C2 as result already exists
2022-08-05 20:40:57.663 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C3 as result already exists
2022-08-05 20:40:57.663 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C4 as result already exists
2022-08-05 20:40:57.663 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C5 as result already exists
2022-08-05 20:40:57.663 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C6 as result already exists
2022-08-05 20:40:57.663 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-05 20:40:57.663 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A0 as result already exists
2022-08-05 20:40:57.663 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A1 as result already exists
2022-08-05 20:40:57.663 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A2 as result already exists
2022-08-05 20:40:57.663 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A3 as result already exists
2022-08-05 20:40:57.663 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A4 as result already exists
2022-08-05 20:40:57.664 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:40:57.664 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E0 as result already exists
2022-08-05 20:40:57.664 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E1 as result already exists
2022-08-05 20:40:57.664 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E2 as result already exists
2022-08-05 20:40:57.664 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E3 as result already exists
2022-08-05 20:40:57.664 | DEBUG    | __main__:run:356 - Running benchmark 10
2022-08-05 20:40:57.664 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:40:57.664 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.664 | DEBUG    | __main__:run:370 - Skipping benchmark 10:C0 as result already exists
2022-08-05 20:40:57.664 | DEBUG    | __main__:run:363 - Number of queries: 23
2022-08-05 20:40:57.665 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D0 as result already exists
2022-08-05 20:40:57.665 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D1 as result already exists
2022-08-05 20:40:57.665 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D2 as result already exists
2022-08-05 20:40:57.665 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D3 as result already exists
2022-08-05 20:40:57.665 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D4 as result already exists
2022-08-05 20:40:57.665 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D5 as result already exists
2022-08-05 20:40:57.665 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D6 as result already exists
2022-08-05 20:40:57.665 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D7 as result already exists
2022-08-05 20:40:57.665 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D8 as result already exists
2022-08-05 20:40:57.665 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D9 as result already exists
2022-08-05 20:40:57.666 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D10 as result already exists
2022-08-05 20:40:57.666 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D11 as result already exists
2022-08-05 20:40:57.666 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D12 as result already exists
2022-08-05 20:40:57.666 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D13 as result already exists
2022-08-05 20:40:57.666 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D14 as result already exists
2022-08-05 20:40:57.666 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D15 as result already exists
2022-08-05 20:40:57.666 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D16 as result already exists
2022-08-05 20:40:57.666 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D17 as result already exists
2022-08-05 20:40:57.666 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D18 as result already exists
2022-08-05 20:40:57.667 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D19 as result already exists
2022-08-05 20:40:57.667 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D20 as result already exists
2022-08-05 20:40:57.667 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D21 as result already exists
2022-08-05 20:40:57.667 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D22 as result already exists
2022-08-05 20:40:57.667 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.667 | DEBUG    | __main__:run:370 - Skipping benchmark 10:A0 as result already exists
2022-08-05 20:40:57.667 | DEBUG    | __main__:run:363 - Number of queries: 12
2022-08-05 20:40:57.667 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E0 as result already exists
2022-08-05 20:40:57.667 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E1 as result already exists
2022-08-05 20:40:57.667 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E2 as result already exists
2022-08-05 20:40:57.668 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E3 as result already exists
2022-08-05 20:40:57.668 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E4 as result already exists
2022-08-05 20:40:57.668 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E5 as result already exists
2022-08-05 20:40:57.668 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E6 as result already exists
2022-08-05 20:40:57.668 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E7 as result already exists
2022-08-05 20:40:57.668 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E8 as result already exists
2022-08-05 20:40:57.668 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E9 as result already exists
2022-08-05 20:40:57.668 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E10 as result already exists
2022-08-05 20:40:57.668 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E11 as result already exists
2022-08-05 20:40:57.668 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.669 | DEBUG    | __main__:run:370 - Skipping benchmark 10:B0 as result already exists
2022-08-05 20:40:57.669 | DEBUG    | __main__:run:356 - Running benchmark 11
2022-08-05 20:40:57.669 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:40:57.669 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:40:57.669 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D0 as result already exists
2022-08-05 20:40:57.669 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D1 as result already exists
2022-08-05 20:40:57.669 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D2 as result already exists
2022-08-05 20:40:57.669 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D3 as result already exists
2022-08-05 20:40:57.669 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D4 as result already exists
2022-08-05 20:40:57.669 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D5 as result already exists
2022-08-05 20:40:57.670 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D6 as result already exists
2022-08-05 20:40:57.670 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D7 as result already exists
2022-08-05 20:40:57.670 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.670 | DEBUG    | __main__:run:370 - Skipping benchmark 11:C0 as result already exists
2022-08-05 20:40:57.670 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:40:57.670 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A0 as result already exists
2022-08-05 20:40:57.670 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A1 as result already exists
2022-08-05 20:40:57.670 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A2 as result already exists
2022-08-05 20:40:57.670 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A3 as result already exists
2022-08-05 20:40:57.670 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:40:57.671 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E0 as result already exists
2022-08-05 20:40:57.671 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E1 as result already exists
2022-08-05 20:40:57.671 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E2 as result already exists
2022-08-05 20:40:57.671 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:40:57.671 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B0 as result already exists
2022-08-05 20:40:57.671 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B1 as result already exists
2022-08-05 20:40:57.671 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B2 as result already exists
2022-08-05 20:40:57.671 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B3 as result already exists
2022-08-05 20:40:57.671 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B4 as result already exists
2022-08-05 20:40:57.671 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B5 as result already exists
2022-08-05 20:40:57.672 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B6 as result already exists
2022-08-05 20:40:57.672 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B7 as result already exists
2022-08-05 20:40:57.672 | DEBUG    | __main__:run:356 - Running benchmark 12
2022-08-05 20:40:57.672 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:40:57.672 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:40:57.672 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D0 as result already exists
2022-08-05 20:40:57.672 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D1 as result already exists
2022-08-05 20:40:57.672 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D2 as result already exists
2022-08-05 20:40:57.672 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D3 as result already exists
2022-08-05 20:40:57.672 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.673 | DEBUG    | __main__:run:370 - Skipping benchmark 12:B0 as result already exists
2022-08-05 20:40:57.673 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-05 20:40:57.673 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C0 as result already exists
2022-08-05 20:40:57.673 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C1 as result already exists
2022-08-05 20:40:57.673 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C2 as result already exists
2022-08-05 20:40:57.673 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C3 as result already exists
2022-08-05 20:40:57.673 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C4 as result already exists
2022-08-05 20:40:57.673 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:40:57.673 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A0 as result already exists
2022-08-05 20:40:57.673 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A1 as result already exists
2022-08-05 20:40:57.674 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A2 as result already exists
2022-08-05 20:40:57.674 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A3 as result already exists
2022-08-05 20:40:57.674 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A4 as result already exists
2022-08-05 20:40:57.674 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A5 as result already exists
2022-08-05 20:40:57.674 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A6 as result already exists
2022-08-05 20:40:57.674 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A7 as result already exists
2022-08-05 20:40:57.674 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:40:57.674 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E0 as result already exists
2022-08-05 20:40:57.674 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E1 as result already exists
2022-08-05 20:40:57.674 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E2 as result already exists
2022-08-05 20:40:57.675 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E3 as result already exists
2022-08-05 20:40:57.675 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E4 as result already exists
2022-08-05 20:40:57.675 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E5 as result already exists
2022-08-05 20:40:57.675 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E6 as result already exists
2022-08-05 20:40:57.675 | DEBUG    | __main__:run:356 - Running benchmark 13
2022-08-05 20:40:57.675 | DEBUG    | __main__:run:357 - Number of Sets: 2
2022-08-05 20:40:57.675 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:40:57.675 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B0 as result already exists
2022-08-05 20:40:57.675 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B1 as result already exists
2022-08-05 20:40:57.675 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B2 as result already exists
2022-08-05 20:40:57.676 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.676 | DEBUG    | __main__:run:370 - Skipping benchmark 13:A0 as result already exists
2022-08-05 20:40:57.676 | DEBUG    | __main__:run:356 - Running benchmark 14
2022-08-05 20:40:57.676 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:40:57.676 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-05 20:40:57.676 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D0 as result already exists
2022-08-05 20:40:57.676 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D1 as result already exists
2022-08-05 20:40:57.676 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D2 as result already exists
2022-08-05 20:40:57.676 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D3 as result already exists
2022-08-05 20:40:57.676 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D4 as result already exists
2022-08-05 20:40:57.677 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D5 as result already exists
2022-08-05 20:40:57.677 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D6 as result already exists
2022-08-05 20:40:57.677 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D7 as result already exists
2022-08-05 20:40:57.677 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D8 as result already exists
2022-08-05 20:40:57.677 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D9 as result already exists
2022-08-05 20:40:57.677 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-05 20:40:57.677 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C0 as result already exists
2022-08-05 20:40:57.677 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C1 as result already exists
2022-08-05 20:40:57.677 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C2 as result already exists
2022-08-05 20:40:57.677 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C3 as result already exists
2022-08-05 20:40:57.678 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C4 as result already exists
2022-08-05 20:40:57.678 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C5 as result already exists
2022-08-05 20:40:57.678 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C6 as result already exists
2022-08-05 20:40:57.678 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C7 as result already exists
2022-08-05 20:40:57.678 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C8 as result already exists
2022-08-05 20:40:57.678 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-05 20:40:57.678 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A0 as result already exists
2022-08-05 20:40:57.678 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A1 as result already exists
2022-08-05 20:40:57.678 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A2 as result already exists
2022-08-05 20:40:57.678 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A3 as result already exists
2022-08-05 20:40:57.679 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A4 as result already exists
2022-08-05 20:40:57.679 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-05 20:40:57.679 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E0 as result already exists
2022-08-05 20:40:57.679 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E1 as result already exists
2022-08-05 20:40:57.679 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E2 as result already exists
2022-08-05 20:40:57.679 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E3 as result already exists
2022-08-05 20:40:57.679 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E4 as result already exists
2022-08-05 20:40:57.679 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E5 as result already exists
2022-08-05 20:40:57.679 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E6 as result already exists
2022-08-05 20:40:57.679 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E7 as result already exists
2022-08-05 20:40:57.680 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E8 as result already exists
2022-08-05 20:40:57.680 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E9 as result already exists
2022-08-05 20:40:57.680 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E10 as result already exists
2022-08-05 20:40:57.680 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E11 as result already exists
2022-08-05 20:40:57.680 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E12 as result already exists
2022-08-05 20:40:57.680 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:40:57.680 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B0 as result already exists
2022-08-05 20:40:57.680 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B1 as result already exists
2022-08-05 20:40:57.680 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B2 as result already exists
2022-08-05 20:40:57.680 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B3 as result already exists
2022-08-05 20:40:57.681 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B4 as result already exists
2022-08-05 20:40:57.681 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B5 as result already exists
2022-08-05 20:40:57.681 | DEBUG    | __main__:run:356 - Running benchmark 15
2022-08-05 20:40:57.681 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:40:57.681 | DEBUG    | __main__:run:363 - Number of queries: 18
2022-08-05 20:40:57.681 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D0 as result already exists
2022-08-05 20:40:57.681 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D1 as result already exists
2022-08-05 20:40:57.681 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D2 as result already exists
2022-08-05 20:40:57.681 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D3 as result already exists
2022-08-05 20:40:57.681 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D4 as result already exists
2022-08-05 20:40:57.682 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D5 as result already exists
2022-08-05 20:40:57.682 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D6 as result already exists
2022-08-05 20:40:57.682 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D7 as result already exists
2022-08-05 20:40:57.682 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D8 as result already exists
2022-08-05 20:40:57.682 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D9 as result already exists
2022-08-05 20:40:57.682 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D10 as result already exists
2022-08-05 20:40:57.682 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D11 as result already exists
2022-08-05 20:40:57.682 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D12 as result already exists
2022-08-05 20:40:57.682 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D13 as result already exists
2022-08-05 20:40:57.682 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D14 as result already exists
2022-08-05 20:40:57.683 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D15 as result already exists
2022-08-05 20:40:57.818 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D16 as result already exists
2022-08-05 20:40:57.818 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D17 as result already exists
2022-08-05 20:40:57.818 | DEBUG    | __main__:run:363 - Number of queries: 22
2022-08-05 20:40:57.818 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B0 as result already exists
2022-08-05 20:40:57.818 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B1 as result already exists
2022-08-05 20:40:57.818 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B2 as result already exists
2022-08-05 20:40:57.819 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B3 as result already exists
2022-08-05 20:40:57.819 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B4 as result already exists
2022-08-05 20:40:57.819 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B5 as result already exists
2022-08-05 20:40:57.819 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B6 as result already exists
2022-08-05 20:40:57.819 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B7 as result already exists
2022-08-05 20:40:57.819 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B8 as result already exists
2022-08-05 20:40:57.819 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B9 as result already exists
2022-08-05 20:40:57.820 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B10 as result already exists
2022-08-05 20:40:57.820 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B11 as result already exists
2022-08-05 20:40:57.820 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B12 as result already exists
2022-08-05 20:40:57.820 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B13 as result already exists
2022-08-05 20:40:57.820 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B14 as result already exists
2022-08-05 20:40:57.820 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B15 as result already exists
2022-08-05 20:40:57.820 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B16 as result already exists
2022-08-05 20:40:57.820 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B17 as result already exists
2022-08-05 20:40:57.820 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B18 as result already exists
2022-08-05 20:40:57.821 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B19 as result already exists
2022-08-05 20:40:57.821 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B20 as result already exists
2022-08-05 20:40:57.821 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B21 as result already exists
2022-08-05 20:40:57.821 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-05 20:40:57.821 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C0 as result already exists
2022-08-05 20:40:57.821 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C1 as result already exists
2022-08-05 20:40:57.821 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C2 as result already exists
2022-08-05 20:40:57.821 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C3 as result already exists
2022-08-05 20:40:57.821 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C4 as result already exists
2022-08-05 20:40:57.822 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:40:57.822 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A0 as result already exists
2022-08-05 20:40:57.822 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A1 as result already exists
2022-08-05 20:40:57.822 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A2 as result already exists
2022-08-05 20:40:57.822 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A3 as result already exists
2022-08-05 20:40:57.822 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A4 as result already exists
2022-08-05 20:40:57.822 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A5 as result already exists
2022-08-05 20:40:57.822 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A6 as result already exists
2022-08-05 20:40:57.822 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A7 as result already exists
2022-08-05 20:40:57.823 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-05 20:40:57.823 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E0 as result already exists
2022-08-05 20:40:57.823 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E1 as result already exists
2022-08-05 20:40:57.823 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E2 as result already exists
2022-08-05 20:40:57.823 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E3 as result already exists
2022-08-05 20:40:57.823 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E4 as result already exists
2022-08-05 20:40:57.823 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E5 as result already exists
2022-08-05 20:40:57.823 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E6 as result already exists
2022-08-05 20:40:57.823 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E7 as result already exists
2022-08-05 20:40:57.823 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E8 as result already exists
2022-08-05 20:40:57.823 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E9 as result already exists
2022-08-05 20:40:57.824 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E10 as result already exists
2022-08-05 20:40:57.824 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E11 as result already exists
2022-08-05 20:40:57.824 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E12 as result already exists
2022-08-05 20:40:57.824 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E13 as result already exists
2022-08-05 20:40:57.824 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E14 as result already exists
2022-08-05 20:40:57.824 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E15 as result already exists
2022-08-05 20:40:57.824 | DEBUG    | __main__:run:356 - Running benchmark 16
2022-08-05 20:40:57.824 | DEBUG    | __main__:run:357 - Number of Sets: 4
2022-08-05 20:40:57.825 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-05 20:40:57.825 | DEBUG    | __main__:run:370 - Skipping benchmark 16:B0 as result already exists
2022-08-05 20:40:57.825 | DEBUG    | __main__:run:370 - Skipping benchmark 16:B1 as result already exists
2022-08-05 20:40:57.825 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:40:57.825 | DEBUG    | __main__:run:370 - Skipping benchmark 16:A0 as result already exists
2022-08-05 20:40:57.825 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:40:57.825 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E0 as result already exists
2022-08-05 20:40:57.826 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E1 as result already exists
2022-08-05 20:41:00.537 | DEBUG    | __main__:run_benchmark:297 - Query: remove all duplicate entries of column 'inputB'
2022-08-05 20:41:00.537 | DEBUG    | __main__:run_benchmark:298 - #  create a new column 'inputD' by adding columns 'inputA' and 'inputB'
2022-08-05 20:41:00.538 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:41:01.652 | DEBUG    | __main__:run_benchmark:297 - Query: remove all duplicate entries of column 'inputB' without keeping first
2022-08-05 20:41:01.653 | DEBUG    | __main__:run_benchmark:298 - dfin = pd.DataFrame({'inputA': {0: 7, 1: 5, 2: 15, 3: 3, 4: 33, 5: 3, 6: 1, 7: 0}, 'inputB': {0: 12, 1: 12, 2: -5
2022-08-05 20:41:01.653 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:41:02.830 | DEBUG    | __main__:run_benchmark:297 - Query: remove all duplicate entries of column 'inputB' dont keep first or last
2022-08-05 20:41:02.830 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.drop_duplicates(subset='inputB', keep='last')
2022-08-05 20:41:02.846 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:41:03.381 | DEBUG    | __main__:run_benchmark:297 - Query: drop duplicates from column'inputB' with keep as False
2022-08-05 20:41:03.381 | DEBUG    | __main__:run_benchmark:298 - dfin.drop_duplicates(subset = 'inputB', keep = False)
2022-08-05 20:41:03.392 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:41:03.397 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:41:04.095 | DEBUG    | __main__:run_benchmark:297 - Query: Remove rows from dfin with duplicates on column 'inp2'
2022-08-05 20:41:04.096 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.drop_duplicates('inp2')
2022-08-05 20:41:04.120 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:41:04.785 | DEBUG    | __main__:run_benchmark:297 - Query: delete rows of 'dfin' with same 'inp2' value
2022-08-05 20:41:04.786 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.drop_duplicates(subset=['inp2'], keep='first')
2022-08-05 20:41:04.800 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:41:06.010 | DEBUG    | __main__:run_benchmark:297 - Query: delete rows with same 'inp2' value
2022-08-05 20:41:06.010 | DEBUG    | __main__:run_benchmark:298 - def del_same_rows(dfin, colname):
2022-08-05 20:41:06.010 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:41:06.658 | DEBUG    | __main__:run_benchmark:297 - Query: drop duplicates on subset 'inp2'
2022-08-05 20:41:06.659 | DEBUG    | __main__:run_benchmark:298 - dfin.drop_duplicates(subset = ['inp2'], inplace=True)
2022-08-05 20:41:06.673 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:41:06.678 | DEBUG    | __main__:run:356 - Running benchmark 17
2022-08-05 20:41:06.678 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:41:06.679 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:41:07.203 | DEBUG    | __main__:run_benchmark:297 - Query: In dataframe 'dfin' change values smaller than 10 to 10
2022-08-05 20:41:07.204 | DEBUG    | __main__:run_benchmark:298 - def change_to_10(df):
2022-08-05 20:41:07.204 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:41:07.729 | DEBUG    | __main__:run_benchmark:297 - Query: In dataframe 'dfin' replace values smaller than 10 to 10
2022-08-05 20:41:07.730 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['f1'] < 10, 'f1'] = 10
2022-08-05 20:41:07.738 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:41:09.026 | DEBUG    | __main__:run_benchmark:297 - Query: In dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-05 20:41:09.026 | DEBUG    | __main__:run_benchmark:298 - #  Create a dataframe 'dfout' that has the same columns as 'dfin' but all values are equal to 10
2022-08-05 20:41:09.026 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:41:10.250 | DEBUG    | __main__:run_benchmark:297 - Query: In column 'f2' in dataframe 'dfin' set values that are smaller than 10 to 10
2022-08-05 20:41:10.250 | DEBUG    | __main__:run_benchmark:298 - #  In dataframe 'dfin' set values that are larger than 20 to 20
2022-08-05 20:41:10.250 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:41:11.652 | DEBUG    | __main__:run_benchmark:297 - Query: In column 'f2' in dataframe 'dfin' set values that are smaller than 10 to 10 inplace
2022-08-05 20:41:11.652 | DEBUG    | __main__:run_benchmark:298 - #  Create a dataframe 'df1' from dictionary 'd1' that has the following columns:
2022-08-05 20:41:11.652 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:41:13.143 | DEBUG    | __main__:run_benchmark:297 - Query: Modify values in column 'f2' in dataframe 'dfin' that are smaller than 10 to the value 10
2022-08-05 20:41:13.143 | DEBUG    | __main__:run_benchmark:298 - #  Modify values in column 'f3' in dataframe 'dfin' that are larger than 15 to the value 15
2022-08-05 20:41:13.143 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:41:14.665 | DEBUG    | __main__:run_benchmark:297 - Query: find values in column 'f2' in dataframe 'dfin' that are smaller than 10 and change those values to 10
2022-08-05 20:41:14.665 | DEBUG    | __main__:run_benchmark:298 - #  find values in column 'f3' in dataframe 'dfin' that are bigger than 10 and change those values to 10
2022-08-05 20:41:14.665 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:41:14.788 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f809f1b17a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f809f3318c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f800a341890>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f800a341890>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "In dataframe 'dfin' change values smaller than 10 to 10", 'user': 'u1'}, {'query': "In dataframe 'dfi...
    │               └ {'queries': [{'query': "In dataframe 'dfin' change values smaller than 10 to 10", 'user': 'u1'}, {'query': "In dataframe 'dfi...
    └ {'query': "find values in column 'f2' in dataframe 'dfin' that are smaller than 10 and replace them with 10", 'user': 'u1'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f800a341890>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f800a341890>
    │    │               └ ["dfin = pd.DataFrame({'f1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, 'f2': {0: 12, 1: -5, 2: 7, 3: -3, 4: 20}, 'f3': {0: 17, 1: 9,...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f800a341890>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'f1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, 'f2': {0: 12, 1: -5,...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f800a45bdd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f8009198210>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:41:14 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f8090cd2e90>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:41:14 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f800940df10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:41:14.793 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:41:45.504 | DEBUG    | __main__:run_benchmark:297 - Query: find values in column 'f2' in dataframe 'dfin' that are smaller than 10 and replace them with 10
2022-08-05 20:41:45.504 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['f2'] < 10, 'f2'] = 10
2022-08-05 20:41:45.512 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:41:45.517 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-05 20:41:46.064 | DEBUG    | __main__:run_benchmark:297 - Query: change ftr2 column values to 5 if they are less than 5
2022-08-05 20:41:46.065 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['ftr2'] < 5, 'ftr2'] = 5
2022-08-05 20:41:46.073 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:42:00.348 | DEBUG    | __main__:run_benchmark:297 - Query: select all rows and change ftr2 column values to 5 if they are less than 5
2022-08-05 20:42:00.348 | DEBUG    | __main__:run_benchmark:298 - #  select all rows and change ftr2 column values to 5 if they are less than 5
2022-08-05 20:42:00.348 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:42:00.857 | DEBUG    | __main__:run_benchmark:297 - Query: select all rows and change "ftr2" column value to 5 if value is less than 5
2022-08-05 20:42:00.857 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['ftr2'] < 5, 'ftr2'] = 5
2022-08-05 20:42:00.865 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:42:01.552 | DEBUG    | __main__:run_benchmark:297 - Query: change "ftr2" column value to 5 if value is less than 5
2022-08-05 20:42:01.552 | DEBUG    | __main__:run_benchmark:298 - dfin['ftr2'] = dfin['ftr2'].apply(lambda x: 5 if x < 5 else x)
2022-08-05 20:42:01.560 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:42:01.680 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f809f1b17a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f809f3318c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f800a341890>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f800a341890>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'change ftr2 column values to 5 if they are less than 5', 'user': 'u4'}, {'query': 'select all rows an...
    │               └ {'queries': [{'query': 'change ftr2 column values to 5 if they are less than 5', 'user': 'u4'}, {'query': 'select all rows an...
    └ {'query': 'if "ftr2" value is less than 5 then change it to 5', 'user': 'u4'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f800a341890>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f800a341890>
    │    │               └ ['dfin = pd.DataFrame({\'ftr1\': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, \'ftr2\': {0: 12, 1: -5, 2: 7, 3: -3, 4: 20}, \'ftr3\': {...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f800a341890>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['dfin = pd.DataFrame({\'ftr1\': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, \'ftr2\': {0: 12...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f800a45bdd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f80093fb4d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:42:01 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f8090cd2e90>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:42:01 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f8009421a90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:42:01.685 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:42:32.913 | DEBUG    | __main__:run_benchmark:297 - Query: if "ftr2" value is less than 5 then change it to 5
2022-08-05 20:42:32.913 | DEBUG    | __main__:run_benchmark:298 - #  if "ftr2" value is less than 5 then change it to 5
2022-08-05 20:42:32.913 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:42:33.569 | DEBUG    | __main__:run_benchmark:297 - Query: if "ftr2" value is less than 5 then change it to 5 and return all rows
2022-08-05 20:42:33.569 | DEBUG    | __main__:run_benchmark:298 - def change_value(df):
2022-08-05 20:42:33.569 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:42:34.992 | DEBUG    | __main__:run_benchmark:297 - Query: for val in "ft2" val=5 if val<5
2022-08-05 20:42:34.992 | DEBUG    | __main__:run_benchmark:298 - # dfin['ftr3'] = dfin['ftr3'].apply(lambda val: 1 if val < 5 else 2)
2022-08-05 20:42:34.993 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:42:35.661 | DEBUG    | __main__:run_benchmark:297 - Query: if val of "ftr2" <5 then val=5
2022-08-05 20:42:35.661 | DEBUG    | __main__:run_benchmark:298 - dfin['ftr2'] = dfin['ftr2'].apply(lambda x: 5 if x < 5 else x)
2022-08-05 20:42:35.669 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:42:37.402 | DEBUG    | __main__:run_benchmark:297 - Query: select rows and change value of "ftr2" column if less than 5 to 5
2022-08-05 20:42:37.402 | DEBUG    | __main__:run_benchmark:298 - #  change the datatype of ftr2 to 'category'
2022-08-05 20:42:37.402 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:42:38.089 | DEBUG    | __main__:run_benchmark:297 - Query: inplace transform of ftr2 columns if value less than 5 to 5
2022-08-05 20:42:38.089 | DEBUG    | __main__:run_benchmark:298 - dfin.ftr2[dfin.ftr2 < 5] = 5
2022-08-05 20:42:38.097 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:42:38.756 | DEBUG    | __main__:run_benchmark:297 - Query: replace values less than 5 with 5 in "ftr2" column in dfin
2022-08-05 20:42:38.756 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['ftr2'] < 5, 'ftr2'] = 5
2022-08-05 20:42:38.764 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:42:40.271 | DEBUG    | __main__:run_benchmark:297 - Query: replace values less than 5 with 5 in "ftr2" column in dfin inplace return dfin
2022-08-05 20:42:40.271 | DEBUG    | __main__:run_benchmark:298 - #  replace values less than 5 with 5 in "ftr2" column in dfin return dfin
2022-08-05 20:42:40.271 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:42:40.960 | DEBUG    | __main__:run_benchmark:297 - Query: for each row replace ftr2 value if less than 5 with 5
2022-08-05 20:42:40.960 | DEBUG    | __main__:run_benchmark:298 - dfin['ftr2'] = dfin['ftr2'].apply(lambda x: 5 if x < 5 else x)
2022-08-05 20:42:40.968 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:42:40.972 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:42:42.391 | DEBUG    | __main__:run_benchmark:297 - Query: If value of 'feat2' in greater than 10, replace it with 10
2022-08-05 20:42:42.391 | DEBUG    | __main__:run_benchmark:298 - #  If value of 'feat2' in greater than 10, replace it with 10
2022-08-05 20:42:42.391 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:42:42.947 | DEBUG    | __main__:run_benchmark:297 - Query: If value of 'feat2' is greater than 10, replace it with 10
2022-08-05 20:42:42.947 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['feat2'] > 10, 'feat2'] = 10
2022-08-05 20:42:42.955 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:42:43.667 | DEBUG    | __main__:run_benchmark:297 - Query: Limit the value in column 'feat2' to 10
2022-08-05 20:42:43.667 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['feat2']>10, 'feat2'] = 10
2022-08-05 20:42:43.675 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:42:44.457 | DEBUG    | __main__:run_benchmark:297 - Query: Given a dataframe dfin, if 'feat2' is greater than 10, replace the cell value to 10
2022-08-05 20:42:44.457 | DEBUG    | __main__:run_benchmark:298 - def replace_feat2(dfin):
2022-08-05 20:42:44.457 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:42:45.147 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f809f1b17a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f809f3318c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f800a341890>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f800a341890>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "If value of 'feat2' in greater than 10, replace it with 10", 'user': 'u9'}, {'query': "If value of 'f...
    │               └ {'queries': [{'query': "If value of 'feat2' in greater than 10, replace it with 10", 'user': 'u9'}, {'query': "If value of 'f...
    └ {'query': "Given a dataframe dfin, if 'feat2' is greater than 10 replace the cell value to 10", 'user': 'u18'}

  File "experiments/jigsaw_experiments.py", line 291, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f800a341890>
    │    │               └ ["dfin = pd.DataFrame({'feat1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, 'feat2': {0: 12, 1: -5, 2: 7, 3: -3, 4: 20}, 'feat3': {0: ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f800a341890>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'feat1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, 'feat2': {0: 12, ...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f800a45bdd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f8009421910>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:42:45 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f8090cd2e90>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:42:45 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f800940d490>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:42:45.151 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:43:16.259 | DEBUG    | __main__:run_benchmark:297 - Query: Given a dataframe dfin, if 'feat2' is greater than 10 replace the cell value to 10
2022-08-05 20:43:16.260 | DEBUG    | __main__:run_benchmark:298 - #  Given a dataframe dfin, apply a mask to the columns 'feat1', 'feat2', 'feat3' and replace the value of the cell if the cell value is greater than 10 with 10
2022-08-05 20:43:16.260 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:43:16.966 | DEBUG    | __main__:run_benchmark:297 - Query: Replace all values in 'feat2' greater than '10' with '10'
2022-08-05 20:43:16.966 | DEBUG    | __main__:run_benchmark:298 - dfin['feat2'] = dfin['feat2'].apply(lambda x: 10 if x > 10 else x)
2022-08-05 20:43:16.974 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:43:17.510 | DEBUG    | __main__:run_benchmark:297 - Query: Replace all values in 'feat2' greater than 10 with 10
2022-08-05 20:43:17.510 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['feat2'] > 10, 'feat2'] = 10
2022-08-05 20:43:17.518 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:43:17.523 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-05 20:43:18.404 | DEBUG    | __main__:run_benchmark:297 - Query: Convert negative numberts to 0 in 'inp2'
2022-08-05 20:43:18.404 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['inp2'] < 0, 'inp2'] = 0
2022-08-05 20:43:18.412 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:43:18.531 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 976, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7f809f1b17a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7f809f3318c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f800a341890>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7f800a341890>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Convert negative numberts to 0 in 'inp2'", 'user': 'u13'}, {'query': "Convert negative numberts of 'd...
    │               └ {'queries': [{'query': "Convert negative numberts to 0 in 'inp2'", 'user': 'u13'}, {'query': "Convert negative numberts of 'd...
    └ {'query': "Convert negative numberts of 'dfin' to 0 in column 'inp2'", 'user': 'u13'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7f800a341890>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7f800a341890>
    │    │               └ ["dfin = pd.DataFrame({'inp1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, 'inp2': {0: 12, 1: -5, 2: 7, 3: -3, 4: 20}, 'inp3': {0: 17,...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7f800a341890>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'inp1': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, 'inp2': {0: 12, 1:...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7f800a45bdd0>
                       └ <openai.api_requestor.APIRequestor object at 0x7f80093fb110>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:43:18 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7f8090cd2e90>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:43:18 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7f80093a7f90>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:43:18.535 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:45:03.825 | DEBUG    | __main__:run:345 - Running benchmark set PandasEval1
2022-08-05 20:45:03.825 | DEBUG    | __main__:run:346 - Found 68 benchmarks in PandasEval1
2022-08-05 20:45:03.825 | DEBUG    | __main__:run:356 - Running benchmark 0
2022-08-05 20:45:03.825 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.825 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.825 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A0 as result already exists
2022-08-05 20:45:03.825 | DEBUG    | __main__:run:356 - Running benchmark 1
2022-08-05 20:45:03.826 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.826 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.826 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A0 as result already exists
2022-08-05 20:45:03.826 | DEBUG    | __main__:run:356 - Running benchmark 2
2022-08-05 20:45:03.826 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.826 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.826 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A0 as result already exists
2022-08-05 20:45:03.826 | DEBUG    | __main__:run:356 - Running benchmark 3
2022-08-05 20:45:03.826 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.827 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.827 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A0 as result already exists
2022-08-05 20:45:03.827 | DEBUG    | __main__:run:356 - Running benchmark 4
2022-08-05 20:45:03.827 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.827 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.827 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A0 as result already exists
2022-08-05 20:45:03.827 | DEBUG    | __main__:run:356 - Running benchmark 5
2022-08-05 20:45:03.827 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.827 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.827 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A0 as result already exists
2022-08-05 20:45:03.828 | DEBUG    | __main__:run:356 - Running benchmark 6
2022-08-05 20:45:03.828 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.828 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.828 | DEBUG    | __main__:run:370 - Skipping benchmark 6:A0 as result already exists
2022-08-05 20:45:03.828 | DEBUG    | __main__:run:356 - Running benchmark 7
2022-08-05 20:45:03.828 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.828 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.828 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A0 as result already exists
2022-08-05 20:45:03.828 | DEBUG    | __main__:run:356 - Running benchmark 8
2022-08-05 20:45:03.828 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.829 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.829 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A0 as result already exists
2022-08-05 20:45:03.829 | DEBUG    | __main__:run:356 - Running benchmark 9
2022-08-05 20:45:03.829 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.829 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.829 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A0 as result already exists
2022-08-05 20:45:03.829 | DEBUG    | __main__:run:356 - Running benchmark 10
2022-08-05 20:45:03.829 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.829 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.829 | DEBUG    | __main__:run:370 - Skipping benchmark 10:A0 as result already exists
2022-08-05 20:45:03.830 | DEBUG    | __main__:run:356 - Running benchmark 11
2022-08-05 20:45:03.830 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.830 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.830 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A0 as result already exists
2022-08-05 20:45:03.830 | DEBUG    | __main__:run:356 - Running benchmark 12
2022-08-05 20:45:03.830 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.830 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.830 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A0 as result already exists
2022-08-05 20:45:03.830 | DEBUG    | __main__:run:356 - Running benchmark 13
2022-08-05 20:45:03.830 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.831 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.831 | DEBUG    | __main__:run:370 - Skipping benchmark 13:A0 as result already exists
2022-08-05 20:45:03.831 | DEBUG    | __main__:run:356 - Running benchmark 14
2022-08-05 20:45:03.831 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.831 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.831 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A0 as result already exists
2022-08-05 20:45:03.831 | DEBUG    | __main__:run:356 - Running benchmark 15
2022-08-05 20:45:03.831 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.831 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.831 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A0 as result already exists
2022-08-05 20:45:03.832 | DEBUG    | __main__:run:356 - Running benchmark 16
2022-08-05 20:45:03.832 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.832 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.832 | DEBUG    | __main__:run:370 - Skipping benchmark 16:A0 as result already exists
2022-08-05 20:45:03.832 | DEBUG    | __main__:run:356 - Running benchmark 17
2022-08-05 20:45:03.832 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.832 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.832 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A0 as result already exists
2022-08-05 20:45:03.833 | DEBUG    | __main__:run:356 - Running benchmark 18
2022-08-05 20:45:03.833 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.833 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.833 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A0 as result already exists
2022-08-05 20:45:03.833 | DEBUG    | __main__:run:356 - Running benchmark 19
2022-08-05 20:45:03.833 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.833 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.834 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A0 as result already exists
2022-08-05 20:45:03.834 | DEBUG    | __main__:run:356 - Running benchmark 20
2022-08-05 20:45:03.834 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.834 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.834 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A0 as result already exists
2022-08-05 20:45:03.834 | DEBUG    | __main__:run:356 - Running benchmark 21
2022-08-05 20:45:03.834 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.834 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.834 | DEBUG    | __main__:run:370 - Skipping benchmark 21:A0 as result already exists
2022-08-05 20:45:03.834 | DEBUG    | __main__:run:356 - Running benchmark 22
2022-08-05 20:45:03.835 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.835 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.835 | DEBUG    | __main__:run:370 - Skipping benchmark 22:A0 as result already exists
2022-08-05 20:45:03.835 | DEBUG    | __main__:run:356 - Running benchmark 23
2022-08-05 20:45:03.835 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.835 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.835 | DEBUG    | __main__:run:370 - Skipping benchmark 23:A0 as result already exists
2022-08-05 20:45:03.835 | DEBUG    | __main__:run:356 - Running benchmark 24
2022-08-05 20:45:03.836 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.836 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.836 | DEBUG    | __main__:run:370 - Skipping benchmark 24:A0 as result already exists
2022-08-05 20:45:03.836 | DEBUG    | __main__:run:356 - Running benchmark 25
2022-08-05 20:45:03.836 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.836 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.836 | DEBUG    | __main__:run:370 - Skipping benchmark 25:A0 as result already exists
2022-08-05 20:45:03.836 | DEBUG    | __main__:run:356 - Running benchmark 26
2022-08-05 20:45:03.836 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.837 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.837 | DEBUG    | __main__:run:370 - Skipping benchmark 26:A0 as result already exists
2022-08-05 20:45:03.837 | DEBUG    | __main__:run:356 - Running benchmark 27
2022-08-05 20:45:03.837 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.837 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.837 | DEBUG    | __main__:run:370 - Skipping benchmark 27:A0 as result already exists
2022-08-05 20:45:03.837 | DEBUG    | __main__:run:356 - Running benchmark 28
2022-08-05 20:45:03.837 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.838 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.838 | DEBUG    | __main__:run:370 - Skipping benchmark 28:A0 as result already exists
2022-08-05 20:45:03.838 | DEBUG    | __main__:run:356 - Running benchmark 29
2022-08-05 20:45:03.838 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.838 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.838 | DEBUG    | __main__:run:370 - Skipping benchmark 29:A0 as result already exists
2022-08-05 20:45:03.838 | DEBUG    | __main__:run:356 - Running benchmark 30
2022-08-05 20:45:03.838 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.839 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.839 | DEBUG    | __main__:run:370 - Skipping benchmark 30:A0 as result already exists
2022-08-05 20:45:03.839 | DEBUG    | __main__:run:356 - Running benchmark 31
2022-08-05 20:45:03.839 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.839 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.839 | DEBUG    | __main__:run:370 - Skipping benchmark 31:A0 as result already exists
2022-08-05 20:45:03.839 | DEBUG    | __main__:run:356 - Running benchmark 32
2022-08-05 20:45:03.839 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.840 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.840 | DEBUG    | __main__:run:370 - Skipping benchmark 32:A0 as result already exists
2022-08-05 20:45:03.840 | DEBUG    | __main__:run:356 - Running benchmark 33
2022-08-05 20:45:03.840 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.840 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.840 | DEBUG    | __main__:run:370 - Skipping benchmark 33:A0 as result already exists
2022-08-05 20:45:03.840 | DEBUG    | __main__:run:356 - Running benchmark 34
2022-08-05 20:45:03.840 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.840 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.841 | DEBUG    | __main__:run:370 - Skipping benchmark 34:A0 as result already exists
2022-08-05 20:45:03.841 | DEBUG    | __main__:run:356 - Running benchmark 35
2022-08-05 20:45:03.841 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.841 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.841 | DEBUG    | __main__:run:370 - Skipping benchmark 35:A0 as result already exists
2022-08-05 20:45:03.841 | DEBUG    | __main__:run:356 - Running benchmark 36
2022-08-05 20:45:03.841 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.842 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.842 | DEBUG    | __main__:run:370 - Skipping benchmark 36:A0 as result already exists
2022-08-05 20:45:03.842 | DEBUG    | __main__:run:356 - Running benchmark 37
2022-08-05 20:45:03.842 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.842 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.842 | DEBUG    | __main__:run:370 - Skipping benchmark 37:A0 as result already exists
2022-08-05 20:45:03.842 | DEBUG    | __main__:run:356 - Running benchmark 38
2022-08-05 20:45:03.842 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.843 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.843 | DEBUG    | __main__:run:370 - Skipping benchmark 38:A0 as result already exists
2022-08-05 20:45:03.843 | DEBUG    | __main__:run:356 - Running benchmark 39
2022-08-05 20:45:03.843 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.843 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.843 | DEBUG    | __main__:run:370 - Skipping benchmark 39:A0 as result already exists
2022-08-05 20:45:03.843 | DEBUG    | __main__:run:356 - Running benchmark 40
2022-08-05 20:45:03.843 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.843 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.844 | DEBUG    | __main__:run:370 - Skipping benchmark 40:A0 as result already exists
2022-08-05 20:45:03.844 | DEBUG    | __main__:run:356 - Running benchmark 41
2022-08-05 20:45:03.844 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.844 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.844 | DEBUG    | __main__:run:370 - Skipping benchmark 41:A0 as result already exists
2022-08-05 20:45:03.844 | DEBUG    | __main__:run:356 - Running benchmark 42
2022-08-05 20:45:03.844 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.844 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.845 | DEBUG    | __main__:run:370 - Skipping benchmark 42:A0 as result already exists
2022-08-05 20:45:03.845 | DEBUG    | __main__:run:356 - Running benchmark 43
2022-08-05 20:45:03.845 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.845 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.845 | DEBUG    | __main__:run:370 - Skipping benchmark 43:A0 as result already exists
2022-08-05 20:45:03.845 | DEBUG    | __main__:run:356 - Running benchmark 44
2022-08-05 20:45:03.845 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.845 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.845 | DEBUG    | __main__:run:370 - Skipping benchmark 44:A0 as result already exists
2022-08-05 20:45:03.846 | DEBUG    | __main__:run:356 - Running benchmark 45
2022-08-05 20:45:03.846 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.846 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.846 | DEBUG    | __main__:run:370 - Skipping benchmark 45:A0 as result already exists
2022-08-05 20:45:03.846 | DEBUG    | __main__:run:356 - Running benchmark 46
2022-08-05 20:45:03.846 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.846 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.846 | DEBUG    | __main__:run:370 - Skipping benchmark 46:A0 as result already exists
2022-08-05 20:45:03.847 | DEBUG    | __main__:run:356 - Running benchmark 47
2022-08-05 20:45:03.847 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.847 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.847 | DEBUG    | __main__:run:370 - Skipping benchmark 47:A0 as result already exists
2022-08-05 20:45:03.847 | DEBUG    | __main__:run:356 - Running benchmark 48
2022-08-05 20:45:03.847 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.847 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.847 | DEBUG    | __main__:run:370 - Skipping benchmark 48:A0 as result already exists
2022-08-05 20:45:03.847 | DEBUG    | __main__:run:356 - Running benchmark 49
2022-08-05 20:45:03.848 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.848 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.848 | DEBUG    | __main__:run:370 - Skipping benchmark 49:A0 as result already exists
2022-08-05 20:45:03.848 | DEBUG    | __main__:run:356 - Running benchmark 50
2022-08-05 20:45:03.848 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.848 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.848 | DEBUG    | __main__:run:370 - Skipping benchmark 50:A0 as result already exists
2022-08-05 20:45:03.848 | DEBUG    | __main__:run:356 - Running benchmark 51
2022-08-05 20:45:03.849 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.849 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.849 | DEBUG    | __main__:run:370 - Skipping benchmark 51:A0 as result already exists
2022-08-05 20:45:03.849 | DEBUG    | __main__:run:356 - Running benchmark 52
2022-08-05 20:45:03.849 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.849 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.849 | DEBUG    | __main__:run:370 - Skipping benchmark 52:A0 as result already exists
2022-08-05 20:45:03.849 | DEBUG    | __main__:run:356 - Running benchmark 53
2022-08-05 20:45:03.850 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.850 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.850 | DEBUG    | __main__:run:370 - Skipping benchmark 53:A0 as result already exists
2022-08-05 20:45:03.850 | DEBUG    | __main__:run:356 - Running benchmark 54
2022-08-05 20:45:03.850 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.850 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.850 | DEBUG    | __main__:run:370 - Skipping benchmark 54:A0 as result already exists
2022-08-05 20:45:03.850 | DEBUG    | __main__:run:356 - Running benchmark 55
2022-08-05 20:45:03.850 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.851 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.851 | DEBUG    | __main__:run:370 - Skipping benchmark 55:A0 as result already exists
2022-08-05 20:45:03.851 | DEBUG    | __main__:run:356 - Running benchmark 56
2022-08-05 20:45:03.851 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.851 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.851 | DEBUG    | __main__:run:370 - Skipping benchmark 56:A0 as result already exists
2022-08-05 20:45:03.851 | DEBUG    | __main__:run:356 - Running benchmark 57
2022-08-05 20:45:03.851 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.851 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.852 | DEBUG    | __main__:run:370 - Skipping benchmark 57:A0 as result already exists
2022-08-05 20:45:03.852 | DEBUG    | __main__:run:356 - Running benchmark 58
2022-08-05 20:45:03.852 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.852 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.852 | DEBUG    | __main__:run:370 - Skipping benchmark 58:A0 as result already exists
2022-08-05 20:45:03.852 | DEBUG    | __main__:run:356 - Running benchmark 59
2022-08-05 20:45:03.852 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.852 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.852 | DEBUG    | __main__:run:370 - Skipping benchmark 59:A0 as result already exists
2022-08-05 20:45:03.853 | DEBUG    | __main__:run:356 - Running benchmark 60
2022-08-05 20:45:03.853 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.853 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.853 | DEBUG    | __main__:run:370 - Skipping benchmark 60:A0 as result already exists
2022-08-05 20:45:03.853 | DEBUG    | __main__:run:356 - Running benchmark 62
2022-08-05 20:45:03.853 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.853 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.853 | DEBUG    | __main__:run:370 - Skipping benchmark 62:A0 as result already exists
2022-08-05 20:45:03.853 | DEBUG    | __main__:run:356 - Running benchmark 63
2022-08-05 20:45:03.853 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.854 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.854 | DEBUG    | __main__:run:370 - Skipping benchmark 63:A0 as result already exists
2022-08-05 20:45:03.854 | DEBUG    | __main__:run:356 - Running benchmark 64
2022-08-05 20:45:03.854 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.854 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.854 | DEBUG    | __main__:run:370 - Skipping benchmark 64:A0 as result already exists
2022-08-05 20:45:03.854 | DEBUG    | __main__:run:356 - Running benchmark 65
2022-08-05 20:45:03.854 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.854 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.854 | DEBUG    | __main__:run:370 - Skipping benchmark 65:A0 as result already exists
2022-08-05 20:45:03.855 | DEBUG    | __main__:run:356 - Running benchmark 66
2022-08-05 20:45:03.855 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.855 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.855 | DEBUG    | __main__:run:370 - Skipping benchmark 66:A0 as result already exists
2022-08-05 20:45:03.855 | DEBUG    | __main__:run:356 - Running benchmark 67
2022-08-05 20:45:03.855 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-05 20:45:03.855 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.855 | DEBUG    | __main__:run:370 - Skipping benchmark 67:A0 as result already exists
2022-08-05 20:45:03.855 | DEBUG    | __main__:run:345 - Running benchmark set PandasEval2
2022-08-05 20:45:03.856 | DEBUG    | __main__:run:346 - Found 21 benchmarks in PandasEval2
2022-08-05 20:45:03.856 | DEBUG    | __main__:run:356 - Running benchmark 0
2022-08-05 20:45:03.856 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:45:03.856 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:45:03.856 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A0 as result already exists
2022-08-05 20:45:03.856 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A1 as result already exists
2022-08-05 20:45:03.856 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A2 as result already exists
2022-08-05 20:45:03.856 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:45:03.856 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D0 as result already exists
2022-08-05 20:45:03.857 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D1 as result already exists
2022-08-05 20:45:03.857 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D2 as result already exists
2022-08-05 20:45:03.857 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D3 as result already exists
2022-08-05 20:45:03.857 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D4 as result already exists
2022-08-05 20:45:03.857 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D5 as result already exists
2022-08-05 20:45:03.857 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D6 as result already exists
2022-08-05 20:45:03.857 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.857 | DEBUG    | __main__:run:370 - Skipping benchmark 0:B0 as result already exists
2022-08-05 20:45:03.857 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:45:03.857 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C0 as result already exists
2022-08-05 20:45:03.858 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C1 as result already exists
2022-08-05 20:45:03.858 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C2 as result already exists
2022-08-05 20:45:03.858 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:45:03.858 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E0 as result already exists
2022-08-05 20:45:03.858 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E1 as result already exists
2022-08-05 20:45:03.858 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E2 as result already exists
2022-08-05 20:45:03.858 | DEBUG    | __main__:run:356 - Running benchmark 1
2022-08-05 20:45:03.858 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:45:03.858 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:45:03.858 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A0 as result already exists
2022-08-05 20:45:03.859 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A1 as result already exists
2022-08-05 20:45:03.859 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A2 as result already exists
2022-08-05 20:45:03.859 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A3 as result already exists
2022-08-05 20:45:03.859 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:45:03.859 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D0 as result already exists
2022-08-05 20:45:03.859 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D1 as result already exists
2022-08-05 20:45:03.859 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D2 as result already exists
2022-08-05 20:45:03.859 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D3 as result already exists
2022-08-05 20:45:03.859 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D4 as result already exists
2022-08-05 20:45:03.859 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D5 as result already exists
2022-08-05 20:45:03.860 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D6 as result already exists
2022-08-05 20:45:03.860 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D7 as result already exists
2022-08-05 20:45:03.860 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-05 20:45:03.860 | DEBUG    | __main__:run:370 - Skipping benchmark 1:B0 as result already exists
2022-08-05 20:45:03.860 | DEBUG    | __main__:run:370 - Skipping benchmark 1:B1 as result already exists
2022-08-05 20:45:03.860 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:45:03.860 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C0 as result already exists
2022-08-05 20:45:03.860 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C1 as result already exists
2022-08-05 20:45:03.860 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C2 as result already exists
2022-08-05 20:45:03.861 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C3 as result already exists
2022-08-05 20:45:03.861 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C4 as result already exists
2022-08-05 20:45:03.861 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C5 as result already exists
2022-08-05 20:45:03.861 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:45:03.861 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E0 as result already exists
2022-08-05 20:45:03.861 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E1 as result already exists
2022-08-05 20:45:03.861 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E2 as result already exists
2022-08-05 20:45:03.861 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E3 as result already exists
2022-08-05 20:45:03.861 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E4 as result already exists
2022-08-05 20:45:03.862 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E5 as result already exists
2022-08-05 20:45:03.862 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E6 as result already exists
2022-08-05 20:45:03.862 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E7 as result already exists
2022-08-05 20:45:03.862 | DEBUG    | __main__:run:356 - Running benchmark 2
2022-08-05 20:45:03.862 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:45:03.862 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:45:03.862 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A0 as result already exists
2022-08-05 20:45:03.862 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A1 as result already exists
2022-08-05 20:45:03.862 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A2 as result already exists
2022-08-05 20:45:03.863 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A3 as result already exists
2022-08-05 20:45:03.863 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A4 as result already exists
2022-08-05 20:45:03.863 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A5 as result already exists
2022-08-05 20:45:03.863 | DEBUG    | __main__:run:363 - Number of queries: 12
2022-08-05 20:45:03.863 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D0 as result already exists
2022-08-05 20:45:03.863 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D1 as result already exists
2022-08-05 20:45:03.863 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D2 as result already exists
2022-08-05 20:45:03.863 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D3 as result already exists
2022-08-05 20:45:03.863 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D4 as result already exists
2022-08-05 20:45:03.863 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D5 as result already exists
2022-08-05 20:45:03.864 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D6 as result already exists
2022-08-05 20:45:03.864 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D7 as result already exists
2022-08-05 20:45:03.864 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D8 as result already exists
2022-08-05 20:45:03.864 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D9 as result already exists
2022-08-05 20:45:03.864 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D10 as result already exists
2022-08-05 20:45:03.864 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D11 as result already exists
2022-08-05 20:45:03.864 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-05 20:45:03.864 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B0 as result already exists
2022-08-05 20:45:03.864 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B1 as result already exists
2022-08-05 20:45:03.865 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B2 as result already exists
2022-08-05 20:45:03.865 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B3 as result already exists
2022-08-05 20:45:03.865 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B4 as result already exists
2022-08-05 20:45:03.865 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B5 as result already exists
2022-08-05 20:45:03.865 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B6 as result already exists
2022-08-05 20:45:03.865 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B7 as result already exists
2022-08-05 20:45:03.865 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B8 as result already exists
2022-08-05 20:45:03.865 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B9 as result already exists
2022-08-05 20:45:03.865 | DEBUG    | __main__:run:363 - Number of queries: 11
2022-08-05 20:45:03.865 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C0 as result already exists
2022-08-05 20:45:03.866 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C1 as result already exists
2022-08-05 20:45:03.866 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C2 as result already exists
2022-08-05 20:45:03.866 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C3 as result already exists
2022-08-05 20:45:03.866 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C4 as result already exists
2022-08-05 20:45:03.866 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C5 as result already exists
2022-08-05 20:45:03.866 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C6 as result already exists
2022-08-05 20:45:03.866 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C7 as result already exists
2022-08-05 20:45:03.866 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C8 as result already exists
2022-08-05 20:45:03.866 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C9 as result already exists
2022-08-05 20:45:03.867 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C10 as result already exists
2022-08-05 20:45:03.867 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-05 20:45:03.867 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E0 as result already exists
2022-08-05 20:45:03.867 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E1 as result already exists
2022-08-05 20:45:03.867 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E2 as result already exists
2022-08-05 20:45:03.867 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E3 as result already exists
2022-08-05 20:45:03.867 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E4 as result already exists
2022-08-05 20:45:03.867 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E5 as result already exists
2022-08-05 20:45:03.867 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E6 as result already exists
2022-08-05 20:45:03.867 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E7 as result already exists
2022-08-05 20:45:03.868 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E8 as result already exists
2022-08-05 20:45:03.868 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E9 as result already exists
2022-08-05 20:45:03.868 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E10 as result already exists
2022-08-05 20:45:03.868 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E11 as result already exists
2022-08-05 20:45:03.868 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E12 as result already exists
2022-08-05 20:45:03.868 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E13 as result already exists
2022-08-05 20:45:03.868 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E14 as result already exists
2022-08-05 20:45:03.868 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E15 as result already exists
2022-08-05 20:45:03.868 | DEBUG    | __main__:run:356 - Running benchmark 3
2022-08-05 20:45:03.869 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:45:03.869 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:45:03.869 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A0 as result already exists
2022-08-05 20:45:03.869 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A1 as result already exists
2022-08-05 20:45:03.869 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A2 as result already exists
2022-08-05 20:45:03.869 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A3 as result already exists
2022-08-05 20:45:03.869 | DEBUG    | __main__:run:363 - Number of queries: 11
2022-08-05 20:45:03.869 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D0 as result already exists
2022-08-05 20:45:03.869 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D1 as result already exists
2022-08-05 20:45:03.869 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D2 as result already exists
2022-08-05 20:45:03.870 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D3 as result already exists
2022-08-05 20:45:03.870 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D4 as result already exists
2022-08-05 20:45:03.870 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D5 as result already exists
2022-08-05 20:45:03.870 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D6 as result already exists
2022-08-05 20:45:03.870 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D7 as result already exists
2022-08-05 20:45:03.870 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D8 as result already exists
2022-08-05 20:45:03.870 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D9 as result already exists
2022-08-05 20:45:03.870 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D10 as result already exists
2022-08-05 20:45:03.870 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:45:03.871 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B0 as result already exists
2022-08-05 20:45:03.871 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B1 as result already exists
2022-08-05 20:45:03.871 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B2 as result already exists
2022-08-05 20:45:03.871 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B3 as result already exists
2022-08-05 20:45:03.871 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B4 as result already exists
2022-08-05 20:45:03.871 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B5 as result already exists
2022-08-05 20:45:03.871 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-05 20:45:03.871 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C0 as result already exists
2022-08-05 20:45:03.871 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C1 as result already exists
2022-08-05 20:45:03.872 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C2 as result already exists
2022-08-05 20:45:03.872 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C3 as result already exists
2022-08-05 20:45:03.872 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C4 as result already exists
2022-08-05 20:45:03.872 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C5 as result already exists
2022-08-05 20:45:03.872 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C6 as result already exists
2022-08-05 20:45:03.872 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C7 as result already exists
2022-08-05 20:45:03.872 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C8 as result already exists
2022-08-05 20:45:03.872 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:45:03.872 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E0 as result already exists
2022-08-05 20:45:03.872 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E1 as result already exists
2022-08-05 20:45:03.873 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E2 as result already exists
2022-08-05 20:45:03.873 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E3 as result already exists
2022-08-05 20:45:03.873 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E4 as result already exists
2022-08-05 20:45:03.873 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E5 as result already exists
2022-08-05 20:45:03.873 | DEBUG    | __main__:run:356 - Running benchmark 4
2022-08-05 20:45:03.873 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:45:03.873 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:45:03.873 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A0 as result already exists
2022-08-05 20:45:03.873 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A1 as result already exists
2022-08-05 20:45:03.874 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A2 as result already exists
2022-08-05 20:45:03.874 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A3 as result already exists
2022-08-05 20:45:03.874 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A4 as result already exists
2022-08-05 20:45:03.874 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A5 as result already exists
2022-08-05 20:45:03.874 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:45:03.874 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D0 as result already exists
2022-08-05 20:45:03.874 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D1 as result already exists
2022-08-05 20:45:03.874 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D2 as result already exists
2022-08-05 20:45:03.874 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D3 as result already exists
2022-08-05 20:45:03.875 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D4 as result already exists
2022-08-05 20:45:03.875 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D5 as result already exists
2022-08-05 20:45:03.875 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D6 as result already exists
2022-08-05 20:45:03.875 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-05 20:45:03.875 | DEBUG    | __main__:run:370 - Skipping benchmark 4:B0 as result already exists
2022-08-05 20:45:03.875 | DEBUG    | __main__:run:370 - Skipping benchmark 4:B1 as result already exists
2022-08-05 20:45:03.875 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:45:03.875 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C0 as result already exists
2022-08-05 20:45:03.875 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C1 as result already exists
2022-08-05 20:45:03.876 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C2 as result already exists
2022-08-05 20:45:03.876 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C3 as result already exists
2022-08-05 20:45:03.876 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C4 as result already exists
2022-08-05 20:45:03.876 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C5 as result already exists
2022-08-05 20:45:03.876 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C6 as result already exists
2022-08-05 20:45:03.876 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:45:03.876 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E0 as result already exists
2022-08-05 20:45:03.876 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E1 as result already exists
2022-08-05 20:45:03.876 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E2 as result already exists
2022-08-05 20:45:03.877 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E3 as result already exists
2022-08-05 20:45:03.877 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E4 as result already exists
2022-08-05 20:45:03.877 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E5 as result already exists
2022-08-05 20:45:03.877 | DEBUG    | __main__:run:356 - Running benchmark 5
2022-08-05 20:45:03.877 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:45:03.877 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:45:03.877 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A0 as result already exists
2022-08-05 20:45:03.877 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A1 as result already exists
2022-08-05 20:45:03.877 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A2 as result already exists
2022-08-05 20:45:03.877 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A3 as result already exists
2022-08-05 20:45:03.878 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-05 20:45:03.878 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D0 as result already exists
2022-08-05 20:45:03.878 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D1 as result already exists
2022-08-05 20:45:03.878 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D2 as result already exists
2022-08-05 20:45:03.878 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D3 as result already exists
2022-08-05 20:45:03.878 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D4 as result already exists
2022-08-05 20:45:03.878 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D5 as result already exists
2022-08-05 20:45:03.878 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D6 as result already exists
2022-08-05 20:45:03.878 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D7 as result already exists
2022-08-05 20:45:03.879 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D8 as result already exists
2022-08-05 20:45:03.879 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D9 as result already exists
2022-08-05 20:45:03.879 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D10 as result already exists
2022-08-05 20:45:03.879 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D11 as result already exists
2022-08-05 20:45:03.879 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D12 as result already exists
2022-08-05 20:45:03.879 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D13 as result already exists
2022-08-05 20:45:03.879 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D14 as result already exists
2022-08-05 20:45:03.879 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D15 as result already exists
2022-08-05 20:45:03.880 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:45:03.880 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B0 as result already exists
2022-08-05 20:45:03.880 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B1 as result already exists
2022-08-05 20:45:03.880 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B2 as result already exists
2022-08-05 20:45:03.880 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B3 as result already exists
2022-08-05 20:45:03.880 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B4 as result already exists
2022-08-05 20:45:03.880 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B5 as result already exists
2022-08-05 20:45:03.880 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B6 as result already exists
2022-08-05 20:45:03.880 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:45:03.880 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C0 as result already exists
2022-08-05 20:45:03.881 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C1 as result already exists
2022-08-05 20:45:03.881 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C2 as result already exists
2022-08-05 20:45:03.881 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C3 as result already exists
2022-08-05 20:45:03.881 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C4 as result already exists
2022-08-05 20:45:03.881 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C5 as result already exists
2022-08-05 20:45:03.881 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-05 20:45:03.881 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E0 as result already exists
2022-08-05 20:45:03.881 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E1 as result already exists
2022-08-05 20:45:03.881 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E2 as result already exists
2022-08-05 20:45:03.882 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E3 as result already exists
2022-08-05 20:45:03.882 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E4 as result already exists
2022-08-05 20:45:03.882 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E5 as result already exists
2022-08-05 20:45:03.882 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E6 as result already exists
2022-08-05 20:45:03.882 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E7 as result already exists
2022-08-05 20:45:03.882 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E8 as result already exists
2022-08-05 20:45:03.882 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E9 as result already exists
2022-08-05 20:45:03.882 | DEBUG    | __main__:run:356 - Running benchmark 6
2022-08-05 20:45:03.882 | DEBUG    | __main__:run:357 - Number of Sets: 4
2022-08-05 20:45:03.882 | DEBUG    | __main__:run:363 - Number of queries: 27
2022-08-05 20:45:03.883 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D0 as result already exists
2022-08-05 20:45:03.883 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D1 as result already exists
2022-08-05 20:45:03.883 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D2 as result already exists
2022-08-05 20:45:03.883 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D3 as result already exists
2022-08-05 20:45:03.883 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D4 as result already exists
2022-08-05 20:45:03.883 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D5 as result already exists
2022-08-05 20:45:03.883 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D6 as result already exists
2022-08-05 20:45:03.883 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D7 as result already exists
2022-08-05 20:45:03.883 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D8 as result already exists
2022-08-05 20:45:03.883 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D9 as result already exists
2022-08-05 20:45:03.883 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D10 as result already exists
2022-08-05 20:45:03.884 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D11 as result already exists
2022-08-05 20:45:03.884 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D12 as result already exists
2022-08-05 20:45:03.884 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D13 as result already exists
2022-08-05 20:45:03.884 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D14 as result already exists
2022-08-05 20:45:03.884 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D15 as result already exists
2022-08-05 20:45:03.884 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D16 as result already exists
2022-08-05 20:45:03.884 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D17 as result already exists
2022-08-05 20:45:03.884 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D18 as result already exists
2022-08-05 20:45:03.884 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D19 as result already exists
2022-08-05 20:45:03.885 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D20 as result already exists
2022-08-05 20:45:03.885 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D21 as result already exists
2022-08-05 20:45:03.885 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D22 as result already exists
2022-08-05 20:45:03.885 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D23 as result already exists
2022-08-05 20:45:03.885 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D24 as result already exists
2022-08-05 20:45:03.885 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D25 as result already exists
2022-08-05 20:45:03.885 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D26 as result already exists
2022-08-05 20:45:03.885 | DEBUG    | __main__:run:363 - Number of queries: 26
2022-08-05 20:45:03.885 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B0 as result already exists
2022-08-05 20:45:03.886 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B1 as result already exists
2022-08-05 20:45:03.886 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B2 as result already exists
2022-08-05 20:45:03.886 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B3 as result already exists
2022-08-05 20:45:03.886 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B4 as result already exists
2022-08-05 20:45:03.886 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B5 as result already exists
2022-08-05 20:45:03.886 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B6 as result already exists
2022-08-05 20:45:03.886 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B7 as result already exists
2022-08-05 20:45:03.886 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B8 as result already exists
2022-08-05 20:45:03.887 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B9 as result already exists
2022-08-05 20:45:03.887 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B10 as result already exists
2022-08-05 20:45:03.887 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B11 as result already exists
2022-08-05 20:45:03.887 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B12 as result already exists
2022-08-05 20:45:03.887 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B13 as result already exists
2022-08-05 20:45:03.887 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B14 as result already exists
2022-08-05 20:45:03.887 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B15 as result already exists
2022-08-05 20:45:03.887 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B16 as result already exists
2022-08-05 20:45:03.887 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B17 as result already exists
2022-08-05 20:45:03.888 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B18 as result already exists
2022-08-05 20:45:03.888 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B19 as result already exists
2022-08-05 20:45:03.888 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B20 as result already exists
2022-08-05 20:45:03.888 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B21 as result already exists
2022-08-05 20:45:03.888 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B22 as result already exists
2022-08-05 20:45:03.888 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B23 as result already exists
2022-08-05 20:45:03.888 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B24 as result already exists
2022-08-05 20:45:03.888 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B25 as result already exists
2022-08-05 20:45:03.889 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:45:03.889 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E0 as result already exists
2022-08-05 20:45:03.889 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E1 as result already exists
2022-08-05 20:45:03.889 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E2 as result already exists
2022-08-05 20:45:03.889 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E3 as result already exists
2022-08-05 20:45:03.889 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E4 as result already exists
2022-08-05 20:45:03.889 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E5 as result already exists
2022-08-05 20:45:03.889 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E6 as result already exists
2022-08-05 20:45:03.889 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-05 20:45:03.890 | DEBUG    | __main__:run:370 - Skipping benchmark 6:C0 as result already exists
2022-08-05 20:45:03.890 | DEBUG    | __main__:run:370 - Skipping benchmark 6:C1 as result already exists
2022-08-05 20:45:03.890 | DEBUG    | __main__:run:356 - Running benchmark 7
2022-08-05 20:45:03.890 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-05 20:45:03.890 | DEBUG    | __main__:run:363 - Number of queries: 21
2022-08-05 20:45:03.890 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D0 as result already exists
2022-08-05 20:45:03.890 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D1 as result already exists
2022-08-05 20:45:03.891 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D2 as result already exists
2022-08-05 20:45:03.891 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D3 as result already exists
2022-08-05 20:45:03.891 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D4 as result already exists
2022-08-05 20:45:03.891 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D5 as result already exists
2022-08-05 20:45:03.891 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D6 as result already exists
2022-08-05 20:45:03.891 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D7 as result already exists
2022-08-05 20:45:03.891 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D8 as result already exists
2022-08-05 20:45:03.891 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D9 as result already exists
2022-08-05 20:45:03.892 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D10 as result already exists
2022-08-05 20:45:03.892 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D11 as result already exists
2022-08-05 20:45:03.892 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D12 as result already exists
2022-08-05 20:45:03.892 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D13 as result already exists
2022-08-05 20:45:03.892 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D14 as result already exists
2022-08-05 20:45:03.892 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D15 as result already exists
2022-08-05 20:45:03.892 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D16 as result already exists
2022-08-05 20:45:03.892 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D17 as result already exists
2022-08-05 20:45:03.892 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D18 as result already exists
2022-08-05 20:45:03.893 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D19 as result already exists
2022-08-05 20:45:03.893 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D20 as result already exists
2022-08-05 20:45:03.893 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:45:03.893 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A0 as result already exists
2022-08-05 20:45:03.893 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A1 as result already exists
2022-08-05 20:45:03.893 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A2 as result already exists
2022-08-05 20:45:03.893 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-05 20:45:03.893 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E0 as result already exists
2022-08-05 20:45:03.893 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E1 as result already exists
2022-08-05 20:45:03.894 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E2 as result already exists
2022-08-05 20:45:03.894 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E3 as result already exists
2022-08-05 20:45:03.894 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E4 as result already exists
2022-08-05 20:45:03.894 | DEBUG    | __main__:run:356 - Running benchmark 8
2022-08-05 20:45:03.894 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-05 20:45:03.894 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:45:03.894 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C0 as result already exists
2022-08-05 20:45:03.894 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C1 as result already exists
2022-08-05 20:45:03.895 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C2 as result already exists
2022-08-05 20:45:03.895 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C3 as result already exists
2022-08-05 20:45:03.895 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:45:03.895 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A0 as result already exists
2022-08-05 20:45:03.895 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A1 as result already exists
2022-08-05 20:45:03.895 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A2 as result already exists
2022-08-05 20:45:03.895 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A3 as result already exists
2022-08-05 20:45:03.895 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A4 as result already exists
2022-08-05 20:45:03.896 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A5 as result already exists
2022-08-05 20:45:03.896 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-05 20:45:03.896 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D0 as result already exists
2022-08-05 20:45:03.896 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D1 as result already exists
2022-08-05 20:45:03.896 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D2 as result already exists
2022-08-05 20:45:03.896 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D3 as result already exists
2022-08-05 20:45:03.896 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D4 as result already exists
2022-08-05 20:45:03.896 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D5 as result already exists
2022-08-05 20:45:03.896 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D6 as result already exists
2022-08-05 20:45:03.897 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D7 as result already exists
2022-08-05 20:45:03.897 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D8 as result already exists
2022-08-05 20:45:03.897 | DEBUG    | __main__:run:356 - Running benchmark 9
2022-08-05 20:45:03.897 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:45:03.897 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-05 20:45:03.897 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D0 as result already exists
2022-08-05 20:45:03.897 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D1 as result already exists
2022-08-05 20:45:03.897 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D2 as result already exists
2022-08-05 20:45:03.897 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D3 as result already exists
2022-08-05 20:45:03.898 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D4 as result already exists
2022-08-05 20:45:03.898 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D5 as result already exists
2022-08-05 20:45:03.898 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D6 as result already exists
2022-08-05 20:45:03.898 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D7 as result already exists
2022-08-05 20:45:03.898 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D8 as result already exists
2022-08-05 20:45:03.898 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D9 as result already exists
2022-08-05 20:45:03.898 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:45:03.898 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B0 as result already exists
2022-08-05 20:45:03.898 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B1 as result already exists
2022-08-05 20:45:03.899 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B2 as result already exists
2022-08-05 20:45:03.899 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:45:03.899 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C0 as result already exists
2022-08-05 20:45:03.899 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C1 as result already exists
2022-08-05 20:45:03.899 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C2 as result already exists
2022-08-05 20:45:03.899 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C3 as result already exists
2022-08-05 20:45:03.899 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C4 as result already exists
2022-08-05 20:45:03.899 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C5 as result already exists
2022-08-05 20:45:03.899 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C6 as result already exists
2022-08-05 20:45:03.900 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-05 20:45:03.900 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A0 as result already exists
2022-08-05 20:45:03.900 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A1 as result already exists
2022-08-05 20:45:03.900 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A2 as result already exists
2022-08-05 20:45:03.900 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A3 as result already exists
2022-08-05 20:45:03.900 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A4 as result already exists
2022-08-05 20:45:03.900 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:45:03.900 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E0 as result already exists
2022-08-05 20:45:03.901 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E1 as result already exists
2022-08-05 20:45:03.901 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E2 as result already exists
2022-08-05 20:45:03.901 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E3 as result already exists
2022-08-05 20:45:03.901 | DEBUG    | __main__:run:356 - Running benchmark 10
2022-08-05 20:45:03.901 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:45:03.901 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.901 | DEBUG    | __main__:run:370 - Skipping benchmark 10:C0 as result already exists
2022-08-05 20:45:03.901 | DEBUG    | __main__:run:363 - Number of queries: 23
2022-08-05 20:45:03.902 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D0 as result already exists
2022-08-05 20:45:03.902 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D1 as result already exists
2022-08-05 20:45:03.902 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D2 as result already exists
2022-08-05 20:45:03.902 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D3 as result already exists
2022-08-05 20:45:03.902 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D4 as result already exists
2022-08-05 20:45:03.902 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D5 as result already exists
2022-08-05 20:45:03.902 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D6 as result already exists
2022-08-05 20:45:03.902 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D7 as result already exists
2022-08-05 20:45:03.902 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D8 as result already exists
2022-08-05 20:45:03.903 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D9 as result already exists
2022-08-05 20:45:03.903 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D10 as result already exists
2022-08-05 20:45:03.903 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D11 as result already exists
2022-08-05 20:45:03.903 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D12 as result already exists
2022-08-05 20:45:03.903 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D13 as result already exists
2022-08-05 20:45:03.903 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D14 as result already exists
2022-08-05 20:45:03.903 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D15 as result already exists
2022-08-05 20:45:03.903 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D16 as result already exists
2022-08-05 20:45:03.903 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D17 as result already exists
2022-08-05 20:45:03.904 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D18 as result already exists
2022-08-05 20:45:03.904 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D19 as result already exists
2022-08-05 20:45:03.904 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D20 as result already exists
2022-08-05 20:45:03.904 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D21 as result already exists
2022-08-05 20:45:03.904 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D22 as result already exists
2022-08-05 20:45:03.904 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.904 | DEBUG    | __main__:run:370 - Skipping benchmark 10:A0 as result already exists
2022-08-05 20:45:03.904 | DEBUG    | __main__:run:363 - Number of queries: 12
2022-08-05 20:45:03.904 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E0 as result already exists
2022-08-05 20:45:03.905 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E1 as result already exists
2022-08-05 20:45:03.905 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E2 as result already exists
2022-08-05 20:45:03.905 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E3 as result already exists
2022-08-05 20:45:03.905 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E4 as result already exists
2022-08-05 20:45:03.905 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E5 as result already exists
2022-08-05 20:45:03.905 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E6 as result already exists
2022-08-05 20:45:03.905 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E7 as result already exists
2022-08-05 20:45:03.905 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E8 as result already exists
2022-08-05 20:45:03.905 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E9 as result already exists
2022-08-05 20:45:03.905 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E10 as result already exists
2022-08-05 20:45:03.906 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E11 as result already exists
2022-08-05 20:45:03.906 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.906 | DEBUG    | __main__:run:370 - Skipping benchmark 10:B0 as result already exists
2022-08-05 20:45:03.906 | DEBUG    | __main__:run:356 - Running benchmark 11
2022-08-05 20:45:03.906 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:45:03.906 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:45:03.906 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D0 as result already exists
2022-08-05 20:45:03.906 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D1 as result already exists
2022-08-05 20:45:03.906 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D2 as result already exists
2022-08-05 20:45:03.906 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D3 as result already exists
2022-08-05 20:45:03.907 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D4 as result already exists
2022-08-05 20:45:03.907 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D5 as result already exists
2022-08-05 20:45:03.907 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D6 as result already exists
2022-08-05 20:45:03.907 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D7 as result already exists
2022-08-05 20:45:03.907 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.907 | DEBUG    | __main__:run:370 - Skipping benchmark 11:C0 as result already exists
2022-08-05 20:45:03.907 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:45:03.907 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A0 as result already exists
2022-08-05 20:45:03.907 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A1 as result already exists
2022-08-05 20:45:03.907 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A2 as result already exists
2022-08-05 20:45:03.908 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A3 as result already exists
2022-08-05 20:45:03.908 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:45:03.908 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E0 as result already exists
2022-08-05 20:45:03.908 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E1 as result already exists
2022-08-05 20:45:03.908 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E2 as result already exists
2022-08-05 20:45:03.908 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:45:03.908 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B0 as result already exists
2022-08-05 20:45:03.908 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B1 as result already exists
2022-08-05 20:45:03.908 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B2 as result already exists
2022-08-05 20:45:03.908 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B3 as result already exists
2022-08-05 20:45:03.909 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B4 as result already exists
2022-08-05 20:45:03.909 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B5 as result already exists
2022-08-05 20:45:03.909 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B6 as result already exists
2022-08-05 20:45:03.909 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B7 as result already exists
2022-08-05 20:45:03.909 | DEBUG    | __main__:run:356 - Running benchmark 12
2022-08-05 20:45:03.909 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:45:03.909 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:45:03.909 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D0 as result already exists
2022-08-05 20:45:03.909 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D1 as result already exists
2022-08-05 20:45:03.909 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D2 as result already exists
2022-08-05 20:45:03.910 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D3 as result already exists
2022-08-05 20:45:03.910 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.910 | DEBUG    | __main__:run:370 - Skipping benchmark 12:B0 as result already exists
2022-08-05 20:45:03.910 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-05 20:45:03.910 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C0 as result already exists
2022-08-05 20:45:03.910 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C1 as result already exists
2022-08-05 20:45:03.910 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C2 as result already exists
2022-08-05 20:45:03.910 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C3 as result already exists
2022-08-05 20:45:03.910 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C4 as result already exists
2022-08-05 20:45:03.910 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:45:03.910 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A0 as result already exists
2022-08-05 20:45:03.911 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A1 as result already exists
2022-08-05 20:45:03.911 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A2 as result already exists
2022-08-05 20:45:03.911 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A3 as result already exists
2022-08-05 20:45:03.911 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A4 as result already exists
2022-08-05 20:45:03.911 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A5 as result already exists
2022-08-05 20:45:03.911 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A6 as result already exists
2022-08-05 20:45:03.911 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A7 as result already exists
2022-08-05 20:45:03.911 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:45:03.911 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E0 as result already exists
2022-08-05 20:45:03.911 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E1 as result already exists
2022-08-05 20:45:03.912 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E2 as result already exists
2022-08-05 20:45:03.912 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E3 as result already exists
2022-08-05 20:45:03.912 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E4 as result already exists
2022-08-05 20:45:03.912 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E5 as result already exists
2022-08-05 20:45:03.912 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E6 as result already exists
2022-08-05 20:45:03.912 | DEBUG    | __main__:run:356 - Running benchmark 13
2022-08-05 20:45:03.912 | DEBUG    | __main__:run:357 - Number of Sets: 2
2022-08-05 20:45:03.912 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-05 20:45:03.912 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B0 as result already exists
2022-08-05 20:45:03.912 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B1 as result already exists
2022-08-05 20:45:03.913 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B2 as result already exists
2022-08-05 20:45:03.913 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:03.913 | DEBUG    | __main__:run:370 - Skipping benchmark 13:A0 as result already exists
2022-08-05 20:45:03.913 | DEBUG    | __main__:run:356 - Running benchmark 14
2022-08-05 20:45:03.913 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:45:03.913 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-05 20:45:03.913 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D0 as result already exists
2022-08-05 20:45:03.913 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D1 as result already exists
2022-08-05 20:45:03.913 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D2 as result already exists
2022-08-05 20:45:03.913 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D3 as result already exists
2022-08-05 20:45:03.914 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D4 as result already exists
2022-08-05 20:45:03.914 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D5 as result already exists
2022-08-05 20:45:03.914 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D6 as result already exists
2022-08-05 20:45:03.914 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D7 as result already exists
2022-08-05 20:45:03.914 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D8 as result already exists
2022-08-05 20:45:03.914 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D9 as result already exists
2022-08-05 20:45:03.914 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-05 20:45:03.914 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C0 as result already exists
2022-08-05 20:45:03.914 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C1 as result already exists
2022-08-05 20:45:03.914 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C2 as result already exists
2022-08-05 20:45:03.915 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C3 as result already exists
2022-08-05 20:45:03.915 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C4 as result already exists
2022-08-05 20:45:03.915 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C5 as result already exists
2022-08-05 20:45:03.915 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C6 as result already exists
2022-08-05 20:45:03.915 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C7 as result already exists
2022-08-05 20:45:03.915 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C8 as result already exists
2022-08-05 20:45:03.915 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-05 20:45:03.915 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A0 as result already exists
2022-08-05 20:45:03.915 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A1 as result already exists
2022-08-05 20:45:03.915 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A2 as result already exists
2022-08-05 20:45:03.916 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A3 as result already exists
2022-08-05 20:45:03.916 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A4 as result already exists
2022-08-05 20:45:03.916 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-05 20:45:03.916 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E0 as result already exists
2022-08-05 20:45:03.916 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E1 as result already exists
2022-08-05 20:45:03.916 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E2 as result already exists
2022-08-05 20:45:03.916 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E3 as result already exists
2022-08-05 20:45:03.916 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E4 as result already exists
2022-08-05 20:45:03.916 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E5 as result already exists
2022-08-05 20:45:03.916 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E6 as result already exists
2022-08-05 20:45:03.917 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E7 as result already exists
2022-08-05 20:45:03.917 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E8 as result already exists
2022-08-05 20:45:03.917 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E9 as result already exists
2022-08-05 20:45:03.917 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E10 as result already exists
2022-08-05 20:45:03.917 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E11 as result already exists
2022-08-05 20:45:03.917 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E12 as result already exists
2022-08-05 20:45:03.917 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:45:03.917 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B0 as result already exists
2022-08-05 20:45:03.917 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B1 as result already exists
2022-08-05 20:45:03.917 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B2 as result already exists
2022-08-05 20:45:03.918 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B3 as result already exists
2022-08-05 20:45:03.918 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B4 as result already exists
2022-08-05 20:45:03.918 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B5 as result already exists
2022-08-05 20:45:03.918 | DEBUG    | __main__:run:356 - Running benchmark 15
2022-08-05 20:45:03.918 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:45:03.918 | DEBUG    | __main__:run:363 - Number of queries: 18
2022-08-05 20:45:03.918 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D0 as result already exists
2022-08-05 20:45:03.918 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D1 as result already exists
2022-08-05 20:45:03.918 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D2 as result already exists
2022-08-05 20:45:03.918 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D3 as result already exists
2022-08-05 20:45:03.919 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D4 as result already exists
2022-08-05 20:45:03.919 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D5 as result already exists
2022-08-05 20:45:03.919 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D6 as result already exists
2022-08-05 20:45:03.919 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D7 as result already exists
2022-08-05 20:45:03.919 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D8 as result already exists
2022-08-05 20:45:03.919 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D9 as result already exists
2022-08-05 20:45:03.919 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D10 as result already exists
2022-08-05 20:45:03.919 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D11 as result already exists
2022-08-05 20:45:03.919 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D12 as result already exists
2022-08-05 20:45:03.919 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D13 as result already exists
2022-08-05 20:45:03.920 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D14 as result already exists
2022-08-05 20:45:03.920 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D15 as result already exists
2022-08-05 20:45:03.920 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D16 as result already exists
2022-08-05 20:45:03.920 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D17 as result already exists
2022-08-05 20:45:03.920 | DEBUG    | __main__:run:363 - Number of queries: 22
2022-08-05 20:45:04.076 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B0 as result already exists
2022-08-05 20:45:04.076 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B1 as result already exists
2022-08-05 20:45:04.076 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B2 as result already exists
2022-08-05 20:45:04.076 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B3 as result already exists
2022-08-05 20:45:04.076 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B4 as result already exists
2022-08-05 20:45:04.077 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B5 as result already exists
2022-08-05 20:45:04.077 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B6 as result already exists
2022-08-05 20:45:04.077 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B7 as result already exists
2022-08-05 20:45:04.077 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B8 as result already exists
2022-08-05 20:45:04.077 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B9 as result already exists
2022-08-05 20:45:04.077 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B10 as result already exists
2022-08-05 20:45:04.077 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B11 as result already exists
2022-08-05 20:45:04.077 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B12 as result already exists
2022-08-05 20:45:04.078 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B13 as result already exists
2022-08-05 20:45:04.078 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B14 as result already exists
2022-08-05 20:45:04.078 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B15 as result already exists
2022-08-05 20:45:04.078 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B16 as result already exists
2022-08-05 20:45:04.078 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B17 as result already exists
2022-08-05 20:45:04.078 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B18 as result already exists
2022-08-05 20:45:04.078 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B19 as result already exists
2022-08-05 20:45:04.078 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B20 as result already exists
2022-08-05 20:45:04.078 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B21 as result already exists
2022-08-05 20:45:04.078 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-05 20:45:04.079 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C0 as result already exists
2022-08-05 20:45:04.079 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C1 as result already exists
2022-08-05 20:45:04.079 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C2 as result already exists
2022-08-05 20:45:04.079 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C3 as result already exists
2022-08-05 20:45:04.079 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C4 as result already exists
2022-08-05 20:45:04.079 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:45:04.079 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A0 as result already exists
2022-08-05 20:45:04.079 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A1 as result already exists
2022-08-05 20:45:04.079 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A2 as result already exists
2022-08-05 20:45:04.079 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A3 as result already exists
2022-08-05 20:45:04.080 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A4 as result already exists
2022-08-05 20:45:04.080 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A5 as result already exists
2022-08-05 20:45:04.080 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A6 as result already exists
2022-08-05 20:45:04.080 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A7 as result already exists
2022-08-05 20:45:04.080 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-05 20:45:04.080 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E0 as result already exists
2022-08-05 20:45:04.080 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E1 as result already exists
2022-08-05 20:45:04.080 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E2 as result already exists
2022-08-05 20:45:04.080 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E3 as result already exists
2022-08-05 20:45:04.080 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E4 as result already exists
2022-08-05 20:45:04.081 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E5 as result already exists
2022-08-05 20:45:04.081 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E6 as result already exists
2022-08-05 20:45:04.081 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E7 as result already exists
2022-08-05 20:45:04.081 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E8 as result already exists
2022-08-05 20:45:04.081 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E9 as result already exists
2022-08-05 20:45:04.081 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E10 as result already exists
2022-08-05 20:45:04.081 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E11 as result already exists
2022-08-05 20:45:04.081 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E12 as result already exists
2022-08-05 20:45:04.081 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E13 as result already exists
2022-08-05 20:45:04.082 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E14 as result already exists
2022-08-05 20:45:04.082 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E15 as result already exists
2022-08-05 20:45:04.082 | DEBUG    | __main__:run:356 - Running benchmark 16
2022-08-05 20:45:04.082 | DEBUG    | __main__:run:357 - Number of Sets: 4
2022-08-05 20:45:04.082 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-05 20:45:04.082 | DEBUG    | __main__:run:370 - Skipping benchmark 16:B0 as result already exists
2022-08-05 20:45:04.082 | DEBUG    | __main__:run:370 - Skipping benchmark 16:B1 as result already exists
2022-08-05 20:45:04.082 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:45:04.082 | DEBUG    | __main__:run:370 - Skipping benchmark 16:A0 as result already exists
2022-08-05 20:45:04.082 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:45:04.083 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E0 as result already exists
2022-08-05 20:45:04.083 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E1 as result already exists
2022-08-05 20:45:04.083 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E2 as result already exists
2022-08-05 20:45:04.083 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E3 as result already exists
2022-08-05 20:45:04.083 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E4 as result already exists
2022-08-05 20:45:04.083 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E5 as result already exists
2022-08-05 20:45:04.083 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:45:04.083 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D0 as result already exists
2022-08-05 20:45:04.083 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D1 as result already exists
2022-08-05 20:45:04.083 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D2 as result already exists
2022-08-05 20:45:04.084 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D3 as result already exists
2022-08-05 20:45:04.084 | DEBUG    | __main__:run:356 - Running benchmark 17
2022-08-05 20:45:04.084 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:45:04.084 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:45:04.084 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B0 as result already exists
2022-08-05 20:45:04.084 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B1 as result already exists
2022-08-05 20:45:04.084 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B2 as result already exists
2022-08-05 20:45:04.084 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B3 as result already exists
2022-08-05 20:45:04.084 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B4 as result already exists
2022-08-05 20:45:04.084 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B5 as result already exists
2022-08-05 20:45:04.085 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B6 as result already exists
2022-08-05 20:45:04.085 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B7 as result already exists
2022-08-05 20:45:04.085 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-05 20:45:04.085 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C0 as result already exists
2022-08-05 20:45:04.085 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C1 as result already exists
2022-08-05 20:45:04.085 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C2 as result already exists
2022-08-05 20:45:04.085 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C3 as result already exists
2022-08-05 20:45:04.085 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C4 as result already exists
2022-08-05 20:45:04.085 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C5 as result already exists
2022-08-05 20:45:04.085 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C6 as result already exists
2022-08-05 20:45:04.086 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C7 as result already exists
2022-08-05 20:45:04.086 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C8 as result already exists
2022-08-05 20:45:04.086 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C9 as result already exists
2022-08-05 20:45:04.086 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C10 as result already exists
2022-08-05 20:45:04.086 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C11 as result already exists
2022-08-05 20:45:04.086 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C12 as result already exists
2022-08-05 20:45:04.086 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-05 20:45:04.086 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A0 as result already exists
2022-08-05 20:45:04.086 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A1 as result already exists
2022-08-05 20:45:04.086 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A2 as result already exists
2022-08-05 20:45:04.087 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A3 as result already exists
2022-08-05 20:45:04.087 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A4 as result already exists
2022-08-05 20:45:04.087 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A5 as result already exists
2022-08-05 20:45:04.087 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A6 as result already exists
2022-08-05 20:45:04.087 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-05 20:45:04.087 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D0 as result already exists
2022-08-05 20:45:06.423 | DEBUG    | __main__:run_benchmark:297 - Query: Convert negative numberts of 'dfin' to 0 in column 'inp2'
2022-08-05 20:45:06.423 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['inp2'] < 0, 'inp2'] = 0
2022-08-05 20:45:06.433 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:07.082 | DEBUG    | __main__:run_benchmark:297 - Query: Convert negative numberts to 0 in column 'inp2'
2022-08-05 20:45:07.082 | DEBUG    | __main__:run_benchmark:298 - dfin['inp2'] = dfin['inp2'].apply(lambda x: 0 if x < 0 else x)
2022-08-05 20:45:07.091 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:07.724 | DEBUG    | __main__:run_benchmark:297 - Query: Convert negative numbers of 'dfin' to 0 in column 'inp2'
2022-08-05 20:45:07.724 | DEBUG    | __main__:run_benchmark:298 - dfin['inp2'] = dfin['inp2'].apply(lambda x: 0 if x < 0 else x)
2022-08-05 20:45:07.732 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:09.073 | DEBUG    | __main__:run_benchmark:297 - Query: Change value of column 'inp2' to 0 if value of column 'inp2' is less than 0
2022-08-05 20:45:09.074 | DEBUG    | __main__:run_benchmark:298 - #  Change value of column 'target' to 0 if value of column 'target' is less than 0
2022-08-05 20:45:09.074 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:45:09.767 | DEBUG    | __main__:run_benchmark:297 - Query: replace negative values in 'inp2' by 0
2022-08-05 20:45:09.768 | DEBUG    | __main__:run_benchmark:298 - dfin['inp2'] = dfin['inp2'].apply(lambda x: x if x > 0 else 0)
2022-08-05 20:45:09.775 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:10.873 | DEBUG    | __main__:run_benchmark:297 - Query: if 'inp2'<0 then 'inp2'=0
2022-08-05 20:45:10.873 | DEBUG    | __main__:run_benchmark:298 - dfin['inp2'] = dfin['inp2'].apply(lambda x: 0 if x<0 else x)
2022-08-05 20:45:10.881 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:11.720 | DEBUG    | __main__:run_benchmark:297 - Query: replace 'inp2' by 0 if 'inp2' less than 0
2022-08-05 20:45:11.720 | DEBUG    | __main__:run_benchmark:298 - dfin['inp2'] = dfin['inp2'].replace(to_replace = -5, value = 0)
2022-08-05 20:45:11.728 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:45:12.399 | DEBUG    | __main__:run_benchmark:297 - Query: replace column 'inp2' in 'dfin' with 0 if 'inp2' less than 0
2022-08-05 20:45:12.399 | DEBUG    | __main__:run_benchmark:298 - dfin['inp2'] = dfin['inp2'].apply(lambda x: 0 if x < 0 else x)
2022-08-05 20:45:12.407 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:13.476 | DEBUG    | __main__:run_benchmark:297 - Query: replace values in column 'inp2' in 'dfin' with 0 if 'inp2' less than 0
2022-08-05 20:45:13.476 | DEBUG    | __main__:run_benchmark:298 - 
2022-08-05 20:45:13.476 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:45:14.139 | DEBUG    | __main__:run_benchmark:297 - Query: replace values in column 'inp2' in table 'dfin' with 0 if 'inp2' less than 0
2022-08-05 20:45:14.139 | DEBUG    | __main__:run_benchmark:298 - dfin['inp2'] = dfin['inp2'].apply(lambda x: 0 if x < 0 else x)
2022-08-05 20:45:14.148 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:14.513 | DEBUG    | __main__:run_benchmark:297 - Query: copy dfin to dfout; replace negative values in column 'inp2' by 0
2022-08-05 20:45:14.514 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin.copy()
2022-08-05 20:45:14.525 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:45:15.325 | DEBUG    | __main__:run_benchmark:297 - Query: replace value in column 'inp2' with 0 if value is less than 0
2022-08-05 20:45:15.325 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['inp2'] < 0, 'inp2'] = 0
2022-08-05 20:45:15.334 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:15.339 | DEBUG    | __main__:run:363 - Number of queries: 25
2022-08-05 20:45:15.974 | DEBUG    | __main__:run_benchmark:297 - Query: replace elements that are greater than 0 with 0 in column 'inputB'
2022-08-05 20:45:15.974 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['inputB'] > 0, 'inputB'] = 0
2022-08-05 20:45:15.987 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:17.184 | DEBUG    | __main__:run_benchmark:297 - Query: replace positive elements with 0 in column 'inputB'
2022-08-05 20:45:17.184 | DEBUG    | __main__:run_benchmark:298 - dfin['inputB'] = dfin['inputB'].apply(lambda x: 0 if x>0 else x)
2022-08-05 20:45:17.192 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:17.840 | DEBUG    | __main__:run_benchmark:297 - Query: replace positive elements by 0 in column 'inputB'
2022-08-05 20:45:17.840 | DEBUG    | __main__:run_benchmark:298 - dfin['inputB'] = dfin['inputB'].apply(lambda x: 0 if x > 0 else x)
2022-08-05 20:45:17.848 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:18.411 | DEBUG    | __main__:run_benchmark:297 - Query: replace elements greater than 0 by 0 in column 'inputB'
2022-08-05 20:45:18.412 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['inputB'] > 0, 'inputB'] = 0
2022-08-05 20:45:18.419 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:19.058 | DEBUG    | __main__:run_benchmark:297 - Query: replace elements greater than 0 by zero in column 'inputB'
2022-08-05 20:45:19.059 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['inputB'] > 0, 'inputB'] = 0
2022-08-05 20:45:19.067 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:19.759 | DEBUG    | __main__:run_benchmark:297 - Query: in column 'inputB', replace elements greater than 0 by zero
2022-08-05 20:45:19.759 | DEBUG    | __main__:run_benchmark:298 - dfin['inputB'] = dfin['inputB'].apply(lambda x: 0 if x > 0 else x)
2022-08-05 20:45:19.767 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:20.482 | DEBUG    | __main__:run_benchmark:297 - Query: in column 'inputB', replace positive values by zero
2022-08-05 20:45:20.482 | DEBUG    | __main__:run_benchmark:298 - dfin['inputB'] = np.where(dfin['inputB'] > 0, 0, dfin['inputB'])
2022-08-05 20:45:20.490 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:21.209 | DEBUG    | __main__:run_benchmark:297 - Query: replace positive values in column 'inputB' by zero
2022-08-05 20:45:21.209 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['inputB'] > 0, 'inputB'] = 0
2022-08-05 20:45:21.217 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:22.012 | DEBUG    | __main__:run_benchmark:297 - Query: replace positive values in column 'inputB' by zero'
2022-08-05 20:45:22.012 | DEBUG    | __main__:run_benchmark:298 - dfin['inputB'] = dfin['inputB'].replace(to_replace=r'^\d+$', value='0', regex=True)
2022-08-05 20:45:22.019 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:45:22.726 | DEBUG    | __main__:run_benchmark:297 - Query: if value in column 'inputB' > 0 replace with 0
2022-08-05 20:45:22.726 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['inputB'] > 0, 'inputB'] = 0
2022-08-05 20:45:22.734 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:23.413 | DEBUG    | __main__:run_benchmark:297 - Query: replace value in column 'inputB' with 0 if value > 0
2022-08-05 20:45:23.413 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['inputB'] > 0, 'inputB'] = 0
2022-08-05 20:45:23.421 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:24.839 | DEBUG    | __main__:run_benchmark:297 - Query: replace positive vlues of column 'inputB' with 0
2022-08-05 20:45:24.839 | DEBUG    | __main__:run_benchmark:298 - #  replace negative vlues of column 'inputC' with 0
2022-08-05 20:45:24.840 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:45:25.439 | DEBUG    | __main__:run_benchmark:297 - Query: replace positive values of column 'inputB' to '0'
2022-08-05 20:45:25.439 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['inputB']>0, 'inputB'] = 0
2022-08-05 20:45:25.447 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:26.118 | DEBUG    | __main__:run_benchmark:297 - Query: set positive values in column 'inputB' to '0'
2022-08-05 20:45:26.118 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['inputB'] > 0, 'inputB'] = 0
2022-08-05 20:45:26.126 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:45:26.931 | DEBUG    | __main__:run_benchmark:297 - Query: Set inputB=0 if inputB<0
2022-08-05 20:45:26.931 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['inputB'] < 0, 'inputB'] = 0
2022-08-05 20:45:26.939 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:46:06.080 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-PLNC6ulVlY7Nc2Arf9QxoEyT on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fc42d3d87a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7fc42d5588c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "replace elements that are greater than 0 with 0 in column 'inputB'", 'user': 'u5'}, {'query': "replac...
    │               └ {'queries': [{'query': "replace elements that are greater than 0 with 0 in column 'inputB'", 'user': 'u5'}, {'query': "replac...
    └ {'query': 'replace inputB with 0 if inputB>0', 'user': 'u16'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               └ ["dfin = pd.DataFrame({'inputA': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, 'inputB': {0: 12, 1: -5, 2: 7, 3: -3, 4: 20}, 'inputC': {...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7fc398571c90>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'inputA': {0: 5, 1: 15, 2: 3, 3: 33, 4: 42}, 'inputB': {0: 12...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fc39868ae60>
                       └ <openai.api_requestor.APIRequestor object at 0x7fc397637490>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:46:06 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '373', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fc41eefcef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:46:06 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '373', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-PLNC6ulVlY7Nc2Arf9QxoEyT on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fc39764dcd0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-PLNC6ulVlY7Nc2Arf9QxoEyT on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-PLNC6ulVlY7Nc2Arf9QxoEyT on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase.
2022-08-05 20:46:06.085 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:46:36.834 | DEBUG    | __main__:run_benchmark:297 - Query: replace inputB with 0 if inputB>0
2022-08-05 20:46:36.834 | DEBUG    | __main__:run_benchmark:298 - dfin['inputB'] = dfin['inputB'].apply(lambda x: 0 if x > 0 else x)
2022-08-05 20:46:36.842 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:46:37.534 | DEBUG    | __main__:run_benchmark:297 - Query: set inputB as 0 if inputB>0
2022-08-05 20:46:37.534 | DEBUG    | __main__:run_benchmark:298 - dfin['inputB'][dfin['inputB']>0] = 0
2022-08-05 20:46:37.543 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:46:38.048 | DEBUG    | __main__:run_benchmark:297 - Query: Replace column 'inputB' with 0 if inputB>0
2022-08-05 20:46:38.048 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['inputB'] > 0, 'inputB'] = 0
2022-08-05 20:46:38.056 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:46:38.728 | DEBUG    | __main__:run_benchmark:297 - Query: Replace 'inputB' with 0 if inputB>0
2022-08-05 20:46:38.728 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['inputB'] > 0, 'inputB'] = 0
2022-08-05 20:46:38.736 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:46:39.518 | DEBUG    | __main__:run_benchmark:297 - Query: Replace 'inputB' with 0 if inputB is positive
2022-08-05 20:46:39.519 | DEBUG    | __main__:run_benchmark:298 - dfin['inputB'] = dfin.apply(lambda row: 0 if row['inputB'] > 0 else row['inputB'], axis = 1)
2022-08-05 20:46:39.527 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:46:40.196 | DEBUG    | __main__:run_benchmark:297 - Query: if inputB>0 set inputB=0
2022-08-05 20:46:40.196 | DEBUG    | __main__:run_benchmark:298 - dfin['inputB'] = np.where(dfin['inputB']>0,0,dfin['inputB'])
2022-08-05 20:46:40.209 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:46:41.315 | DEBUG    | __main__:run_benchmark:297 - Query: if inputB>0 update inputB=0
2022-08-05 20:46:41.316 | DEBUG    | __main__:run_benchmark:298 - 
2022-08-05 20:46:41.316 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:46:41.989 | DEBUG    | __main__:run_benchmark:297 - Query: replace values greater than 0 with 0 in 'inputB' column in 'dfin'
2022-08-05 20:46:41.989 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin['inputB'] > 0, 'inputB'] = 0
2022-08-05 20:46:41.997 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:46:42.648 | DEBUG    | __main__:run_benchmark:297 - Query: update values greater than 0 in 'inputB' column with 0
2022-08-05 20:46:42.648 | DEBUG    | __main__:run_benchmark:298 - dfin['inputB'] = dfin['inputB'].mask(dfin['inputB']>0,0)
2022-08-05 20:46:42.656 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:46:44.080 | DEBUG    | __main__:run_benchmark:297 - Query: 'inputB' = 0 if 'inputB' > 0 in dfin
2022-08-05 20:46:44.080 | DEBUG    | __main__:run_benchmark:298 - dfin['inputB'].where(dfin['inputB'] > 0, 0, inplace=True)
2022-08-05 20:46:44.091 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:46:44.099 | DEBUG    | __main__:run:356 - Running benchmark 18
2022-08-05 20:46:44.099 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-05 20:46:44.099 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-05 20:46:45.083 | DEBUG    | __main__:run_benchmark:297 - Query: Given a dataframe dfin, remove all rows where there exists a cell with value '-'
2022-08-05 20:46:45.083 | DEBUG    | __main__:run_benchmark:298 - 
2022-08-05 20:46:45.083 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:46:46.158 | DEBUG    | __main__:run_benchmark:297 - Query: Given a dataframe dfin, select all rows where there is a '-'
2022-08-05 20:46:46.158 | DEBUG    | __main__:run_benchmark:298 - #  Given a dataframe dfin, select all rows where there is a '-' and '+'
2022-08-05 20:46:46.158 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:46:46.691 | DEBUG    | __main__:run_benchmark:297 - Query: Given a dataframe dfin, select all rows where there is an occurence of '-' for any column
2022-08-05 20:46:46.691 | DEBUG    | __main__:run_benchmark:298 - dfin.loc[dfin.eq('-').sum(axis=1).gt(0)]
2022-08-05 20:46:46.715 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:46:47.413 | DEBUG    | __main__:run_benchmark:297 - Query: Drop rows containing '-'
2022-08-05 20:46:47.414 | DEBUG    | __main__:run_benchmark:298 - dfin.drop(dfin[dfin['B'] == '-'].index, inplace=True)
2022-08-05 20:46:47.431 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:46:48.004 | DEBUG    | __main__:run_benchmark:297 - Query: Drop rows containing value equal to '-'
2022-08-05 20:46:48.004 | DEBUG    | __main__:run_benchmark:298 - df = dfin.replace('-',np.nan).dropna()
2022-08-05 20:46:48.028 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:46:48.613 | DEBUG    | __main__:run_benchmark:297 - Query: Drop rows where containing value is equal to '-'
2022-08-05 20:46:48.613 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.drop(dfin[dfin['B'] == '-'].index)
2022-08-05 20:46:48.631 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:46:48.636 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-05 20:46:49.144 | DEBUG    | __main__:run_benchmark:297 - Query: Remove rows with '?' in any column
2022-08-05 20:46:49.144 | DEBUG    | __main__:run_benchmark:298 - dfin.dropna(inplace=True)
2022-08-05 20:46:49.162 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:46:49.700 | DEBUG    | __main__:run_benchmark:297 - Query: Remove rows with '?'
2022-08-05 20:46:49.700 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin[dfin.B != '?']
2022-08-05 20:46:49.727 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:46:50.280 | DEBUG    | __main__:run_benchmark:297 - Query: Remove rows with value '?'
2022-08-05 20:46:50.280 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin[dfin.B != '?']
2022-08-05 20:46:50.297 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:46:50.980 | DEBUG    | __main__:run_benchmark:297 - Query: Remove rows with ? in any column of dfin
2022-08-05 20:46:50.981 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin[(dfin!='?').all(1)]
2022-08-05 20:46:50.990 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:46:51.539 | DEBUG    | __main__:run_benchmark:297 - Query: Replace values '?' with 'NaN' and Remove rows which has any column value missing
2022-08-05 20:46:51.539 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.replace('?',np.NaN)
2022-08-05 20:46:51.558 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:46:52.153 | DEBUG    | __main__:run_benchmark:297 - Query: Replace values '?' with 'NaN' and then drop rows which has any column value missing
2022-08-05 20:46:52.153 | DEBUG    | __main__:run_benchmark:298 - dfin.replace('?', np.NaN,inplace=True)
2022-08-05 20:46:52.172 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:46:52.724 | DEBUG    | __main__:run_benchmark:297 - Query: Replace values '?' with 'NaN' in dfin and then drop rows which has any column value missing
2022-08-05 20:46:52.724 | DEBUG    | __main__:run_benchmark:298 - dfin.replace('?', np.NaN, inplace=True)
2022-08-05 20:46:52.743 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:46:52.864 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fc42d3d87a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7fc42d5588c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Remove rows with '?' in any column", 'user': 'u13'}, {'query': "Remove rows with '?'", 'user': 'u13'}...
    │               └ {'queries': [{'query': "Remove rows with '?' in any column", 'user': 'u13'}, {'query': "Remove rows with '?'", 'user': 'u13'}...
    └ {'query': "Replace values '?' with numpy NaN in dfin and then drop rows which has any column value missing", 'user': 'u15'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               └ ["dfin = pd.DataFrame({'A': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, 'B': {0: 0, 1: 0, 2: '?', 3: 1, 4: 1, 5: 0, 6: 1}, 'C...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7fc398571c90>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'A': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, 'B': {0: 0, ...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fc39868ae60>
                       └ <openai.api_requestor.APIRequestor object at 0x7fc3975b4d50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:46:52 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fc41eefcef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:46:52 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fc3975bfd10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:46:52.868 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:47:23.472 | DEBUG    | __main__:run_benchmark:297 - Query: Replace values '?' with numpy NaN in dfin and then drop rows which has any column value missing
2022-08-05 20:47:23.473 | DEBUG    | __main__:run_benchmark:298 - dfin.replace('?', np.nan, inplace=True)
2022-08-05 20:47:23.491 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:47:23.609 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fc42d3d87a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7fc42d5588c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Remove rows with '?' in any column", 'user': 'u13'}, {'query': "Remove rows with '?'", 'user': 'u13'}...
    │               └ {'queries': [{'query': "Remove rows with '?' in any column", 'user': 'u13'}, {'query': "Remove rows with '?'", 'user': 'u13'}...
    └ {'query': "Replace values '?' with numpy NaN in dfin and then drop rows which has any missing value", 'user': 'u15'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               └ ["dfin = pd.DataFrame({'A': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, 'B': {0: 0, 1: 0, 2: '?', 3: 1, 4: 1, 5: 0, 6: 1}, 'C...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7fc398571c90>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({'A': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, 'B': {0: 0, ...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fc39868ae60>
                       └ <openai.api_requestor.APIRequestor object at 0x7fc397637b10>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:47:23 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fc41eefcef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:47:23 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fc39762b950>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 44.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:47:23.616 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:47:54.221 | DEBUG    | __main__:run_benchmark:297 - Query: Replace values '?' with numpy NaN in dfin and then drop rows which has any missing value
2022-08-05 20:47:54.221 | DEBUG    | __main__:run_benchmark:298 - dfin.replace(['?'],np.nan,inplace=True)
2022-08-05 20:47:54.242 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:47:54.748 | DEBUG    | __main__:run_benchmark:297 - Query: Replace values '?' with numpy NaN in dfin and drop rows which has any missing value
2022-08-05 20:47:54.748 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.replace('?', np.nan)
2022-08-05 20:47:54.767 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:47:55.555 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows where values are '?'
2022-08-05 20:47:55.556 | DEBUG    | __main__:run_benchmark:298 - dfin.dropna(inplace=True)
2022-08-05 20:47:55.573 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:47:56.764 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows in 'dfin' where values are '?'
2022-08-05 20:47:56.764 | DEBUG    | __main__:run_benchmark:298 - #  replace '?' with NaN
2022-08-05 20:47:56.764 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:47:57.417 | DEBUG    | __main__:run_benchmark:297 - Query: get columns in 'dfin'; drop rows in values in columns are '?'
2022-08-05 20:47:57.417 | DEBUG    | __main__:run_benchmark:298 - cols = dfin.columns[dfin.isin(['?']).any()]
2022-08-05 20:47:57.434 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:47:58.741 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows in 'dfin' if some column has value '?'
2022-08-05 20:47:58.741 | DEBUG    | __main__:run_benchmark:298 - #  drop columns in 'dfin' if some row has value '?'
2022-08-05 20:47:58.741 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:47:59.385 | DEBUG    | __main__:run_benchmark:297 - Query: drop na values where nan is '?'
2022-08-05 20:47:59.385 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.dropna(subset=['B'])
2022-08-05 20:47:59.403 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:47:59.904 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows where any value is '?'
2022-08-05 20:47:59.904 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-05 20:47:59.922 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:47:59.927 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:48:00.573 | DEBUG    | __main__:run_benchmark:297 - Query: Remove rows having '?'
2022-08-05 20:48:00.573 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin[dfin['B']!='?']
2022-08-05 20:48:00.590 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:48:01.354 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows having '?'
2022-08-05 20:48:01.354 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-05 20:48:01.371 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:48:02.097 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows having '?' in any column
2022-08-05 20:48:02.097 | DEBUG    | __main__:run_benchmark:298 - dfout = dfin.dropna()
2022-08-05 20:48:02.122 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:48:03.176 | DEBUG    | __main__:run_benchmark:297 - Query: select rows if does not contain '?'
2022-08-05 20:48:03.177 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin[(dfin != '?').all(axis=1)]
2022-08-05 20:48:03.186 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:48:03.761 | DEBUG    | __main__:run_benchmark:297 - Query: remove rows from 'dfin' that have ?
2022-08-05 20:48:03.761 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin[dfin['B'] != '?']
2022-08-05 20:48:03.777 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:48:04.430 | DEBUG    | __main__:run_benchmark:297 - Query: remove rows from 'dfin' that have '?'
2022-08-05 20:48:04.430 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin[(dfin != '?').all(1)]
2022-08-05 20:48:04.440 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:48:05.020 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows from 'dfin' that contain '?'
2022-08-05 20:48:05.020 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin[dfin['B'] != '?']
2022-08-05 20:48:05.037 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:48:05.690 | DEBUG    | __main__:run_benchmark:297 - Query: drop rows from 'dfin' that contain ?
2022-08-05 20:48:05.690 | DEBUG    | __main__:run_benchmark:298 - dfin = dfin.drop(dfin[dfin['B'] == '?'].index)
2022-08-05 20:48:05.708 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:48:05.713 | DEBUG    | __main__:run:356 - Running benchmark 19
2022-08-05 20:48:05.713 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:48:05.713 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-05 20:48:06.108 | DEBUG    | __main__:run_benchmark:297 - Query: Remove rows from dataframe 'data' that are present in dataframe 'test'
2022-08-05 20:48:06.108 | DEBUG    | __main__:run_benchmark:298 - data = data[~data.isin(test)].dropna()
2022-08-05 20:48:06.123 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:48:06.727 | DEBUG    | __main__:run_benchmark:297 - Query: remove rows in test from data
2022-08-05 20:48:06.727 | DEBUG    | __main__:run_benchmark:298 - data = data[data.Label != 2]
2022-08-05 20:48:06.750 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:48:06.755 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-05 20:48:08.073 | DEBUG    | __main__:run_benchmark:297 - Query: select all rows from "data" that are not present in "test"
2022-08-05 20:48:08.073 | DEBUG    | __main__:run_benchmark:298 - def get_rows_not_in_test(data, test):
2022-08-05 20:48:08.073 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:48:08.194 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fc42d3d87a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7fc42d5588c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'select all rows from "data" that are not present in "test"', 'user': 'u4'}, {'query': 'remove  "test"...
    │               └ {'queries': [{'query': 'select all rows from "data" that are not present in "test"', 'user': 'u4'}, {'query': 'remove  "test"...
    └ {'query': 'remove  "test" rows from "data"', 'user': 'u4'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               └ ['data = pd.DataFrame({\'ftr1\': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, \'ftr2\': {0: 0, 1: 0, 2: 2, 3: 1, 4: 1, 5: 0, 6...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7fc398571c90>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['data = pd.DataFrame({\'ftr1\': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, \'ftr2\...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fc39868ae60>
                       └ <openai.api_requestor.APIRequestor object at 0x7fc3975bf790>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:48:08 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fc41eefcef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:48:08 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fc3975bf090>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 36.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:48:08.199 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:48:38.343 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fc42d3d87a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7fc42d5588c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'select all rows from "data" that are not present in "test"', 'user': 'u4'}, {'query': 'remove  "test"...
    │               └ {'queries': [{'query': 'select all rows from "data" that are not present in "test"', 'user': 'u4'}, {'query': 'remove  "test"...
    └ {'query': 'remove  "test" rows from "data"', 'user': 'u4'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               └ ['data = pd.DataFrame({\'ftr1\': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, \'ftr2\': {0: 0, 1: 0, 2: 2, 3: 1, 4: 1, 5: 0, 6...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7fc398571c90>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ['data = pd.DataFrame({\'ftr1\': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, \'ftr2\...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fc39868ae60>
                       └ <openai.api_requestor.APIRequestor object at 0x7fc39764d1d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:48:38 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fc41eefcef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:48:38 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fc3975b4ed0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:48:38.351 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:49:08.941 | DEBUG    | __main__:run_benchmark:297 - Query: remove  "test" rows from "data"
2022-08-05 20:49:08.941 | DEBUG    | __main__:run_benchmark:298 - data = data[data.index.isin(test.index) == False]
2022-08-05 20:49:08.953 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:49:10.259 | DEBUG    | __main__:run_benchmark:297 - Query: select all "data" rows not in "test"
2022-08-05 20:49:10.259 | DEBUG    | __main__:run_benchmark:298 - #print(data.ftr1[~data.ftr1.isin(test.ftr1)])
2022-08-05 20:49:10.259 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:49:10.807 | DEBUG    | __main__:run_benchmark:297 - Query: remove all common rows that "data" and "test" contain
2022-08-05 20:49:10.807 | DEBUG    | __main__:run_benchmark:298 - data = data[~data.index.isin(test.index)]
2022-08-05 20:49:10.819 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:49:11.327 | DEBUG    | __main__:run_benchmark:297 - Query: select all rows of data that are not in test
2022-08-05 20:49:11.327 | DEBUG    | __main__:run_benchmark:298 - train = data[~data.index.isin(test.index)]
2022-08-05 20:49:11.341 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:49:11.347 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-05 20:49:11.725 | DEBUG    | __main__:run_benchmark:297 - Query: Remove test from data and store it in train
2022-08-05 20:49:11.725 | DEBUG    | __main__:run_benchmark:298 - train = data.drop(data.index[3])
2022-08-05 20:49:11.753 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:49:12.637 | DEBUG    | __main__:run_benchmark:297 - Query: subtract test dataframe from data
2022-08-05 20:49:12.637 | DEBUG    | __main__:run_benchmark:298 - data = data[['inp1', 'inp2', 'inp3']].subtract(test[['inp1', 'inp2', 'inp3']].values)
2022-08-05 20:49:12.651 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:49:13.445 | DEBUG    | __main__:run_benchmark:297 - Query: sub() test dataframe from data dataframe
2022-08-05 20:49:13.446 | DEBUG    | __main__:run_benchmark:298 - sub = data[:7]
2022-08-05 20:49:13.473 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:49:13.995 | DEBUG    | __main__:run_benchmark:297 - Query: remove test from data
2022-08-05 20:49:13.995 | DEBUG    | __main__:run_benchmark:298 - data = data.drop(data[data.index == 6].index)
2022-08-05 20:49:14.007 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:49:14.540 | DEBUG    | __main__:run_benchmark:297 - Query: Remove row from data which is in test
2022-08-05 20:49:14.540 | DEBUG    | __main__:run_benchmark:298 - data = data.loc[~data.index.isin(test.index)]
2022-08-05 20:49:14.552 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:49:15.645 | DEBUG    | __main__:run_benchmark:297 - Query: Choose row from 'data' which is not in 'test'
2022-08-05 20:49:15.645 | DEBUG    | __main__:run_benchmark:298 - def make_test_set(data, test):
2022-08-05 20:49:15.645 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:49:16.072 | DEBUG    | __main__:run_benchmark:297 - Query: Remove dataframe test from dataframe data
2022-08-05 20:49:16.072 | DEBUG    | __main__:run_benchmark:298 - data = data[~data.isin(test)].dropna()
2022-08-05 20:49:16.095 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:49:16.610 | DEBUG    | __main__:run_benchmark:297 - Query: subtract table 'test' from table 'data' and store in 'train'
2022-08-05 20:49:16.611 | DEBUG    | __main__:run_benchmark:298 - train = data.append(test)
2022-08-05 20:49:16.639 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:49:16.644 | DEBUG    | __main__:run:363 - Number of queries: 18
2022-08-05 20:49:17.265 | DEBUG    | __main__:run_benchmark:297 - Query: Drop rows in data that also exist in test
2022-08-05 20:49:17.265 | DEBUG    | __main__:run_benchmark:298 - data = data.set_index('feat1').drop(test.set_index('feat1').index).reset_index()
2022-08-05 20:49:17.288 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:49:17.815 | DEBUG    | __main__:run_benchmark:297 - Query: Filter indexes in data that are in test
2022-08-05 20:49:17.816 | DEBUG    | __main__:run_benchmark:298 - indexes = np.array(test.index)
2022-08-05 20:49:17.837 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:49:18.556 | DEBUG    | __main__:run_benchmark:297 - Query: Filter indexes in data that are not in test
2022-08-05 20:49:18.556 | DEBUG    | __main__:run_benchmark:298 - drop_indexes = [i for i in range(len(data)) if i not in test.index]
2022-08-05 20:49:18.578 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:49:19.137 | DEBUG    | __main__:run_benchmark:297 - Query: Keep indexes in data that are not in test
2022-08-05 20:49:19.137 | DEBUG    | __main__:run_benchmark:298 - train = data[~data.index.isin(test.index)]
2022-08-05 20:49:19.157 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:49:20.299 | DEBUG    | __main__:run_benchmark:297 - Query: Filter rows in data that are not in test
2022-08-05 20:49:20.300 | DEBUG    | __main__:run_benchmark:298 - def filter_data(data, test):
2022-08-05 20:49:20.300 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:49:20.889 | DEBUG    | __main__:run_benchmark:297 - Query: Keep rows in data that are not in test
2022-08-05 20:49:20.889 | DEBUG    | __main__:run_benchmark:298 - data = data.loc[~data.index.isin(test.index)]
2022-08-05 20:49:20.909 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:49:21.496 | DEBUG    | __main__:run_benchmark:297 - Query: Keep rows in df named data that are not in df named test
2022-08-05 20:49:21.497 | DEBUG    | __main__:run_benchmark:298 - data = data[~data.index.isin(test.index)]
2022-08-05 20:49:21.509 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:49:21.947 | DEBUG    | __main__:run_benchmark:297 - Query: Drop rows in df named data that are in df named test
2022-08-05 20:49:21.947 | DEBUG    | __main__:run_benchmark:298 - data.drop(test.index, inplace=True)
2022-08-05 20:49:21.967 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:49:22.680 | DEBUG    | __main__:run_benchmark:297 - Query: Drop rows in df data that are in df test
2022-08-05 20:49:22.680 | DEBUG    | __main__:run_benchmark:298 - df_data = df_data.loc[~df_data.index.isin(test.index)]
2022-08-05 20:49:22.684 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:49:22.804 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fc42d3d87a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7fc42d5588c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Drop rows in data that also exist in test', 'user': 'u9'}, {'query': 'Filter indexes in data that are...
    │               └ {'queries': [{'query': 'Drop rows in data that also exist in test', 'user': 'u9'}, {'query': 'Filter indexes in data that are...
    └ {'query': 'Drop rows in df named data whose index is in df named test', 'user': 'u9'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               └ ["data = pd.DataFrame({'feat1': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, 'feat2': {0: 0, 1: 0, 2: 2, 3: 1, 4: 1, 5: 0, 6: ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7fc398571c90>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["data = pd.DataFrame({'feat1': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, 'feat2':...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fc39868ae60>
                       └ <openai.api_requestor.APIRequestor object at 0x7fc3975b4990>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:49:22 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fc41eefcef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:49:22 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fc3975bf350>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 28.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:49:22.808 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:49:53.450 | DEBUG    | __main__:run_benchmark:297 - Query: Drop rows in df named data whose index is in df named test
2022-08-05 20:49:53.451 | DEBUG    | __main__:run_benchmark:298 - data.drop(test.index, inplace=True)
2022-08-05 20:49:53.468 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:49:54.037 | DEBUG    | __main__:run_benchmark:297 - Query: Given data and test, return all rows in data which are not in test
2022-08-05 20:49:54.038 | DEBUG    | __main__:run_benchmark:298 - def remove_rows(data, test):
2022-08-05 20:49:54.038 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:49:54.464 | DEBUG    | __main__:run_benchmark:297 - Query: Given dataframes data and test, return all rows in data which are not in test
2022-08-05 20:49:54.464 | DEBUG    | __main__:run_benchmark:298 - def get_new_data(data, test):
2022-08-05 20:49:54.464 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:49:55.669 | DEBUG    | __main__:run_benchmark:297 - Query: Given dataframes data and test, select all rows in data which are not in test
2022-08-05 20:49:55.669 | DEBUG    | __main__:run_benchmark:298 - data[~data.isin(test)].dropna()
2022-08-05 20:49:55.687 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:49:55.806 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fc42d3d87a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7fc42d5588c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': 'Drop rows in data that also exist in test', 'user': 'u9'}, {'query': 'Filter indexes in data that are...
    │               └ {'queries': [{'query': 'Drop rows in data that also exist in test', 'user': 'u9'}, {'query': 'Filter indexes in data that are...
    └ {'query': 'Given dataframes data and test, select all rows in data which are not present in test', 'user': 'u18'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               └ ["data = pd.DataFrame({'feat1': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, 'feat2': {0: 0, 1: 0, 2: 2, 3: 1, 4: 1, 5: 0, 6: ...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7fc398571c90>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["data = pd.DataFrame({'feat1': {0: 1, 1: 1, 2: 2, 3: 0, 4: 0, 5: 1, 6: 0}, 'feat2':...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fc39868ae60>
                       └ <openai.api_requestor.APIRequestor object at 0x7fc39762b7d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:49:55 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fc41eefcef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:49:55 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fc397644ad0>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:49:55.810 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:50:26.385 | DEBUG    | __main__:run_benchmark:297 - Query: Given dataframes data and test, select all rows in data which are not present in test
2022-08-05 20:50:26.385 | DEBUG    | __main__:run_benchmark:298 - data[~data.isin(test).all(axis=1)]
2022-08-05 20:50:26.401 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:50:27.496 | DEBUG    | __main__:run_benchmark:297 - Query: Given dataframes data and test, return the difference of data and test
2022-08-05 20:50:27.497 | DEBUG    | __main__:run_benchmark:298 - def diff_df(data, test):
2022-08-05 20:50:27.497 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:50:28.026 | DEBUG    | __main__:run_benchmark:297 - Query: Remove test values from data
2022-08-05 20:50:28.027 | DEBUG    | __main__:run_benchmark:298 - data = data[~data.index.isin(test.index)]
2022-08-05 20:50:28.038 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:50:28.577 | DEBUG    | __main__:run_benchmark:297 - Query: Remove 'test' values from 'data'
2022-08-05 20:50:28.577 | DEBUG    | __main__:run_benchmark:298 - data = data.drop(test.index)
2022-08-05 20:50:28.590 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:50:29.105 | DEBUG    | __main__:run_benchmark:297 - Query: create 'train' data by removing 'test' from 'data'
2022-08-05 20:50:29.106 | DEBUG    | __main__:run_benchmark:298 - train = data.drop([6, 2])
2022-08-05 20:50:29.120 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:50:29.126 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-05 20:50:29.958 | DEBUG    | __main__:run_benchmark:297 - Query: in 'data', remove the rows that are present in 'test'
2022-08-05 20:50:29.959 | DEBUG    | __main__:run_benchmark:298 - 
2022-08-05 20:50:29.959 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:50:30.665 | DEBUG    | __main__:run_benchmark:297 - Query: remove similar rows between dataframe 'data' and dataframe 'test'
2022-08-05 20:50:30.665 | DEBUG    | __main__:run_benchmark:298 - data_test = pd.concat([data, test], keys=['data', 'test'])
2022-08-05 20:50:30.695 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:50:31.357 | DEBUG    | __main__:run_benchmark:297 - Query: Subtract test from data
2022-08-05 20:50:31.357 | DEBUG    | __main__:run_benchmark:298 - diff = data.append(test, ignore_index=True)
2022-08-05 20:50:31.386 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:50:32.068 | DEBUG    | __main__:run_benchmark:297 - Query: remove 'train' from 'data'
2022-08-05 20:50:32.068 | DEBUG    | __main__:run_benchmark:298 - data = data.drop(columns=['GoldTarget'])
2022-08-05 20:50:32.089 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:50:33.200 | DEBUG    | __main__:run_benchmark:297 - Query: remove rows in 'train' from 'data'
2022-08-05 20:50:33.200 | DEBUG    | __main__:run_benchmark:298 - #  replace 'train' with 'data'
2022-08-05 20:50:33.200 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:50:33.206 | DEBUG    | __main__:run:356 - Running benchmark 20
2022-08-05 20:50:33.206 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-05 20:50:33.206 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-05 20:50:34.403 | DEBUG    | __main__:run_benchmark:297 - Query: Get the argmax of the first 3 columns for each row and assign it to a new column 'Pred'
2022-08-05 20:50:34.403 | DEBUG    | __main__:run_benchmark:298 - dfin['Pred'] = dfin[0:3].idxmax(axis=1)
2022-08-05 20:50:34.415 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:50:35.089 | DEBUG    | __main__:run_benchmark:297 - Query: Get the argmax of the columns '0', '1' and '2' for each row and assign it to a new column 'Pred'
2022-08-05 20:50:35.089 | DEBUG    | __main__:run_benchmark:298 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-05 20:50:35.091 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:50:35.755 | DEBUG    | __main__:run_benchmark:297 - Query: Get the argmax of the columns '0', '1' and '2' for each row in dataframe 'dfin' and assign it to a new column 'Pred'
2022-08-05 20:50:35.756 | DEBUG    | __main__:run_benchmark:298 - dfin['Pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-05 20:50:35.757 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:50:36.475 | DEBUG    | __main__:run_benchmark:297 - Query: Create new column 'Pred' in dataframe 'dfin' whose value is the name of the column that has the largest value among the columns 0, 1 and 2
2022-08-05 20:50:36.476 | DEBUG    | __main__:run_benchmark:298 - dfin['Pred'] = dfin[[0,1,2]].idxmax(axis=1)
2022-08-05 20:50:36.487 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:50:36.493 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-05 20:50:37.323 | DEBUG    | __main__:run_benchmark:297 - Query: find maximum value of first three columns of row and add its column name to a new column "output"
2022-08-05 20:50:37.323 | DEBUG    | __main__:run_benchmark:298 - dfout = df.apply(lambda x: x.argmax(), axis=1)
2022-08-05 20:50:37.324 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:50:37.330 | DEBUG    | __main__:run:363 - Number of queries: 17
2022-08-05 20:50:38.017 | DEBUG    | __main__:run_benchmark:297 - Query: Get maximum value of rows and store in a new column 'prediction'
2022-08-05 20:50:38.017 | DEBUG    | __main__:run_benchmark:298 - dfin["prediction"] = dfin.iloc[:,:-1].values.argmax(axis=1)
2022-08-05 20:50:38.031 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:50:39.144 | DEBUG    | __main__:run_benchmark:297 - Query: Get maximum value of rows without column 'target' and store in a new column 'prediction'
2022-08-05 20:50:39.144 | DEBUG    | __main__:run_benchmark:298 - dfin['prediction'] = dfin.ix[:,0:4].idxmax(axis=1)
2022-08-05 20:50:39.146 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:50:40.450 | DEBUG    | __main__:run_benchmark:297 - Query: Get maximum of each row having columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-05 20:50:40.450 | DEBUG    | __main__:run_benchmark:298 - dfout = df.apply(lambda x: x[['0', '1', '2', '3', '4']].max(), axis=1)
2022-08-05 20:50:40.451 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:50:41.529 | DEBUG    | __main__:run_benchmark:297 - Query: Get maximum columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-05 20:50:41.530 | DEBUG    | __main__:run_benchmark:298 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-05 20:50:41.532 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:50:41.654 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fc42d3d87a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7fc42d5588c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Get maximum value of rows and store in a new column 'prediction'", 'user': 'u6'}, {'query': "Get maxi...
    │               └ {'queries': [{'query': "Get maximum value of rows and store in a new column 'prediction'", 'user': 'u6'}, {'query': "Get maxi...
    └ {'query': "Get maximum columns 0, 1, 2, 3, and 4 and store in a new column 'prediction'", 'user': 'u6'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               └ ["dfin = pd.DataFrame({0: {0: 0.2, 1: 0.4, 2: 0.99, 3: 0.1, 4: 0.31, 5: 0.11}, 1: {0: 0.7, 1: 0.3, 2: 0.0, 3: 0.2, 4: 0.3, 5:...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7fc398571c90>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({0: {0: 0.2, 1: 0.4, 2: 0.99, 3: 0.1, 4: 0.31, 5: 0.11}, 1: {0...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fc39868ae60>
                       └ <openai.api_requestor.APIRequestor object at 0x7fc3975e5e10>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:50:41 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fc41eefcef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:50:41 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fc3975e5250>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 40.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:50:41.658 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:51:12.424 | DEBUG    | __main__:run_benchmark:297 - Query: Get maximum columns 0, 1, 2, 3, and 4 and store in a new column 'prediction'
2022-08-05 20:51:12.425 | DEBUG    | __main__:run_benchmark:298 - dfin['prediction'] = dfin[list(range(5))].idxmax(axis=1)
2022-08-05 20:51:12.441 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:51:13.276 | DEBUG    | __main__:run_benchmark:297 - Query: Get maximum of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-05 20:51:13.276 | DEBUG    | __main__:run_benchmark:298 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-05 20:51:13.278 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:51:14.183 | DEBUG    | __main__:run_benchmark:297 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction'
2022-08-05 20:51:14.183 | DEBUG    | __main__:run_benchmark:298 - dfout = df.apply(lambda x: pd.Series([x[0:5].idxmax()]), axis=1)
2022-08-05 20:51:14.184 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:51:15.136 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fc42d3d87a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7fc42d5588c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Get maximum value of rows and store in a new column 'prediction'", 'user': 'u6'}, {'query': "Get maxi...
    │               └ {'queries': [{'query': "Get maximum value of rows and store in a new column 'prediction'", 'user': 'u6'}, {'query': "Get maxi...
    └ {'query': "Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin",...

  File "experiments/jigsaw_experiments.py", line 291, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               └ ["dfin = pd.DataFrame({0: {0: 0.2, 1: 0.4, 2: 0.99, 3: 0.1, 4: 0.31, 5: 0.11}, 1: {0: 0.7, 1: 0.3, 2: 0.0, 3: 0.2, 4: 0.3, 5:...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7fc398571c90>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({0: {0: 0.2, 1: 0.4, 2: 0.99, 3: 0.1, 4: 0.31, 5: 0.11}, 1: {0...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fc39868ae60>
                       └ <openai.api_requestor.APIRequestor object at 0x7fc3983c4d50>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:51:15 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fc41eefcef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:51:15 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fc3975b4290>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:51:15.140 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:51:46.423 | DEBUG    | __main__:run_benchmark:297 - Query: Get argmax of each row of the columns '0', '1', '2', '3', and '4' and store in a new column 'prediction' in dfin
2022-08-05 20:51:46.423 | DEBUG    | __main__:run_benchmark:298 - #  Get the value of 'target' column from dfin and compare it with the 'prediction' column. If the value of 'target' and 'prediction' is the same, then set the value of the 'correct' column to 1 else 0.
2022-08-05 20:51:46.423 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:51:47.531 | DEBUG    | __main__:run_benchmark:297 - Query: Choose name of column with highest value in first five columns of row in prediction column
2022-08-05 20:51:47.532 | DEBUG    | __main__:run_benchmark:298 - def idxmax(row):
2022-08-05 20:51:47.532 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:51:48.692 | DEBUG    | __main__:run_benchmark:297 - Query: Choose name of column with highest value in first five columns of row and create prediction column
2022-08-05 20:51:48.692 | DEBUG    | __main__:run_benchmark:298 - dfin['prediction'] = dfin.iloc[:,:5].apply(lambda x: x.idxmax(), axis=1)
2022-08-05 20:51:48.707 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:51:50.447 | DEBUG    | __main__:run_benchmark:297 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store that column as a new column 'prediction'
2022-08-05 20:51:50.448 | DEBUG    | __main__:run_benchmark:298 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-05 20:51:50.449 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:51:51.127 | DEBUG    | __main__:run_benchmark:297 - Query: Find column with higest value among columns '0', '1', '2', '3', and '4' and store index of that column as a new column 'prediction'
2022-08-05 20:51:51.127 | DEBUG    | __main__:run_benchmark:298 - dfin['prediction'] = dfin[[0,1,2,3,4]].idxmax(axis=1)
2022-08-05 20:51:51.142 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:51:51.919 | DEBUG    | __main__:run_benchmark:297 - Query: Create new column 'prediction' in dfin and set its value to the column name which has highest value among '0', '1', '2', '3', and '4'
2022-08-05 20:51:51.920 | DEBUG    | __main__:run_benchmark:298 - dfin['prediction'] = dfin[['0', '1', '2', '3', '4']].idxmax(axis=1)
2022-08-05 20:51:51.921 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:51:53.373 | DEBUG    | __main__:run_benchmark:297 - Query: Get the index of maximum value among columns 0, 1, 2, 3 and 4 and store it as column name prediction
2022-08-05 20:51:53.374 | DEBUG    | __main__:run_benchmark:298 - #  Print the dataframe dfin and check the result
2022-08-05 20:51:53.374 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:51:53.932 | DEBUG    | __main__:run_benchmark:297 - Query: Get the index of maximum value among first five columns and store it as column name prediction
2022-08-05 20:51:53.932 | DEBUG    | __main__:run_benchmark:298 - prediction = dfin.iloc[:, :5].idxmax(axis=1)
2022-08-05 20:51:53.945 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:51:54.655 | DEBUG    | __main__:run_benchmark:297 - Query: Create new column 'prediction' in dfin and set its value to the index with maximum value among columns 0, 1, 2, 3 and 4
2022-08-05 20:51:54.655 | DEBUG    | __main__:run_benchmark:298 - dfin['prediction'] = dfin[0:5].idxmax(axis=1)
2022-08-05 20:51:54.670 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:51:54.801 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fc42d3d87a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7fc42d5588c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Get maximum value of rows and store in a new column 'prediction'", 'user': 'u6'}, {'query': "Get maxi...
    │               └ {'queries': [{'query': "Get maximum value of rows and store in a new column 'prediction'", 'user': 'u6'}, {'query': "Get maxi...
    └ {'query': "Create new column 'prediction' in dfin and set its value to the index with maximum value among first five columns"...

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               └ ["dfin = pd.DataFrame({0: {0: 0.2, 1: 0.4, 2: 0.99, 3: 0.1, 4: 0.31, 5: 0.11}, 1: {0: 0.7, 1: 0.3, 2: 0.0, 3: 0.2, 4: 0.3, 5:...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7fc398571c90>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({0: {0: 0.2, 1: 0.4, 2: 0.99, 3: 0.1, 4: 0.31, 5: 0.11}, 1: {0...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fc39868ae60>
                       └ <openai.api_requestor.APIRequestor object at 0x7fc3975ff710>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:51:54 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fc41eefcef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:51:54 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fc39762b050>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 32.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:51:54.805 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:52:25.550 | DEBUG    | __main__:run_benchmark:297 - Query: Create new column 'prediction' in dfin and set its value to the index with maximum value among first five columns
2022-08-05 20:52:25.551 | DEBUG    | __main__:run_benchmark:298 - dfin['prediction'] = dfin.iloc[:,0:5].idxmax(axis=1)
2022-08-05 20:52:25.565 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:52:25.570 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-05 20:52:26.224 | DEBUG    | __main__:run_benchmark:297 - Query: Create a new columns called 'pred' with the column name containing max of first 3 columns
2022-08-05 20:52:26.224 | DEBUG    | __main__:run_benchmark:298 - dfin['pred'] = dfin[['0', '1', '2']].idxmax(axis=1)
2022-08-05 20:52:26.226 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:52:26.347 | ERROR    | databutler.utils.langmodels:openai_completion:417 - Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
Traceback (most recent call last):

  File "experiments/jigsaw_experiments.py", line 977, in <module>
    fire.Fire()
    │    └ <function Fire at 0x7fc42d3d87a0>
    └ <module 'fire' from '/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/__init__.py'>

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
                      │     │          │     │                 │        └ 'jigsaw_experiments.py'
                      │     │          │     │                 └ {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader obj...
                      │     │          │     └ Namespace(completion=None, help=False, interactive=False, separator='-', trace=False, verbose=False)
                      │     │          └ ['CodexBaseline', '--results-save-path=experiments/datana_final', '--temperature=0.5', '--num-repetitions=5', '--run-id=code0...
                      │     └ None
                      └ <function _Fire at 0x7fc42d5588c0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
           └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
                │   │          └ {}
                │   └ []
                └ <bound method CodexBaseline.run of <__main__.CodexBaseline object at 0x7fc398571c90>>

  File "experiments/jigsaw_experiments.py", line 375, in run
    query["query"], bench_set["ios"], bench_set["solutions"]
    │               │                 └ {'queries': [{'query': "Create a new columns called 'pred' with the column name containing max of first 3 columns", 'user': '...
    │               └ {'queries': [{'query': "Create a new columns called 'pred' with the column name containing max of first 3 columns", 'user': '...
    └ {'query': "In each row, find argmax of first 3 columns and assign it to 'pred'", 'user': 'u9'}

  File "experiments/jigsaw_experiments.py", line 281, in run_benchmark
    self.engine, prompts=prompts, temperature=self.temperature, stop=["\n"], max_tokens=64, num_completions=self.num_repetitions
    │    │               │                    │    │                                                        │    └ 5
    │    │               │                    │    │                                                        └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               │                    │    └ 0.5
    │    │               │                    └ <__main__.CodexBaseline object at 0x7fc398571c90>
    │    │               └ ["dfin = pd.DataFrame({0: {0: 0.2, 1: 0.4, 2: 0.99, 3: 0.1, 4: 0.31, 5: 0.11}, 1: {0: 0.7, 1: 0.3, 2: 0.0, 3: 0.2, 4: 0.3, 5:...
    │    └ 'code-davinci-001'
    └ <__main__.CodexBaseline object at 0x7fc398571c90>

> File "/public/databutler/databutler/utils/langmodels.py", line 404, in openai_completion
    **completion_kwargs,
      └ {}

  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/completion.py", line 31, in create
    return super().create(*args, **kwargs)
                           │       └ {'engine': 'code-davinci-001', 'prompt': ["dfin = pd.DataFrame({0: {0: 0.2, 1: 0.4, 2: 0.99, 3: 0.1, 4: 0.31, 5: 0.11}, 1: {0...
                           └ ()
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 96, in create
    request_id=request_id,
               └ None
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 109, in request
    resp, got_stream = self._interpret_response(result, stream)
                       │    │                   │       └ False
                       │    │                   └ <Response [429]>
                       │    └ <function APIRequestor._interpret_response at 0x7fc39868ae60>
                       └ <openai.api_requestor.APIRequestor object at 0x7fc3975c32d0>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 317, in _interpret_response
    result.content, result.status_code, result.headers, stream=False
    │      │        │      │            │      └ {'Date': 'Sat, 06 Aug 2022 03:52:26 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │        │      │            └ <Response [429]>
    │      │        │      └ 429
    │      │        └ <Response [429]>
    │      └ <property object at 0x7fc41eefcef0>
    └ <Response [429]>
  File "/home/rbavishi/pyenv/databutler-latest/lib/python3.7/site-packages/openai/api_requestor.py", line 343, in _interpret_response_line
    rbody, rcode, resp.data, rheaders, stream_error=stream_error
    │      │      │    │     │                      └ False
    │      │      │    │     └ {'Date': 'Sat, 06 Aug 2022 03:52:26 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '517', 'Connec...
    │      │      │    └ {'error': {'message': 'Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min....
    │      │      └ <openai.openai_response.OpenAIResponse object at 0x7fc3975c3c10>
    │      └ 429
    └ '{\n    "error": {\n        "message": "Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on ...

openai.error.RateLimitError: Rate limit reached for default-codex in organization org-CmZQoZIuB4agzMeieJyjx8iX on requests per min. Limit: 20.000000 / min. Current: 24.000000 / min. Contact support@openai.com if you continue to have issues or if you’d like to request an increase. Please add a payment method to your account to increase your rate limit. Visit https://beta.openai.com/account/billing to add a payment method.
2022-08-05 20:52:26.351 | WARNING  | databutler.utils.langmodels:openai_completion:418 - Forced to sleep for 30 seconds
2022-08-05 20:52:57.618 | DEBUG    | __main__:run_benchmark:297 - Query: In each row, find argmax of first 3 columns and assign it to 'pred'
2022-08-05 20:52:57.619 | DEBUG    | __main__:run_benchmark:298 - 
2022-08-05 20:52:57.619 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:52:58.312 | DEBUG    | __main__:run_benchmark:297 - Query: In each row, find argmax of first 3 columns. Store in new column called 'pred'
2022-08-05 20:52:58.312 | DEBUG    | __main__:run_benchmark:298 - dfin['pred'] = dfin.iloc[:, 0:3].idxmax(axis=1)
2022-08-05 20:52:58.323 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:52:59.767 | DEBUG    | __main__:run_benchmark:297 - Query: In each row of dfin, find argmax of first 3 columns and assign it to 'pred'
2022-08-05 20:52:59.767 | DEBUG    | __main__:run_benchmark:298 - #  Find labels of those rows where 'pred' is equal to 'labels'
2022-08-05 20:52:59.767 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:53:00.594 | DEBUG    | __main__:run_benchmark:297 - Query: In each row, find argmax of first three values and assign it to 'pred'
2022-08-05 20:53:00.594 | DEBUG    | __main__:run_benchmark:298 - dfout = pd.DataFrame({'pred': {0: 2, 1: 1, 2: 0, 3: 2, 4: 2, 5: 1}})
2022-08-05 20:53:00.605 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-05 20:53:00.610 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-05 20:53:01.803 | DEBUG    | __main__:run_benchmark:297 - Query: select index of greatest value in every row where row name is not equal to 'GoldTarget' and assin to 'OurPred'
2022-08-05 20:53:01.803 | DEBUG    | __main__:run_benchmark:298 - dfin['OurPred'] = dfin.iloc[:, :-1].idxmax(axis=1)
2022-08-05 20:53:01.817 | DEBUG    | __main__:run_benchmark:300 - Eval Result: True
2022-08-05 20:53:02.633 | DEBUG    | __main__:run_benchmark:297 - Query: select index of maximum value from first five columns and assign to 'OurPred'
2022-08-05 20:53:02.634 | DEBUG    | __main__:run_benchmark:298 - dfout['OurPred'] = dfout.iloc[:,:5].idxmax(axis=1)
2022-08-05 20:53:02.635 | DEBUG    | __main__:run_benchmark:300 - Eval Result: False
2022-08-06 05:05:05.942 | DEBUG    | __main__:run:345 - Running benchmark set PandasEval1
2022-08-06 05:05:05.942 | DEBUG    | __main__:run:346 - Found 68 benchmarks in PandasEval1
2022-08-06 05:05:05.942 | DEBUG    | __main__:run:356 - Running benchmark 0
2022-08-06 05:05:05.942 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.943 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.943 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A0 as result already exists
2022-08-06 05:05:05.943 | DEBUG    | __main__:run:356 - Running benchmark 1
2022-08-06 05:05:05.943 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.943 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.943 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A0 as result already exists
2022-08-06 05:05:05.944 | DEBUG    | __main__:run:356 - Running benchmark 2
2022-08-06 05:05:05.944 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.944 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.944 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A0 as result already exists
2022-08-06 05:05:05.944 | DEBUG    | __main__:run:356 - Running benchmark 3
2022-08-06 05:05:05.944 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.944 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.945 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A0 as result already exists
2022-08-06 05:05:05.945 | DEBUG    | __main__:run:356 - Running benchmark 4
2022-08-06 05:05:05.945 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.945 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.945 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A0 as result already exists
2022-08-06 05:05:05.945 | DEBUG    | __main__:run:356 - Running benchmark 5
2022-08-06 05:05:05.945 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.945 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.946 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A0 as result already exists
2022-08-06 05:05:05.946 | DEBUG    | __main__:run:356 - Running benchmark 6
2022-08-06 05:05:05.946 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.946 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.946 | DEBUG    | __main__:run:370 - Skipping benchmark 6:A0 as result already exists
2022-08-06 05:05:05.946 | DEBUG    | __main__:run:356 - Running benchmark 7
2022-08-06 05:05:05.946 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.946 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.946 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A0 as result already exists
2022-08-06 05:05:05.947 | DEBUG    | __main__:run:356 - Running benchmark 8
2022-08-06 05:05:05.947 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.947 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.947 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A0 as result already exists
2022-08-06 05:05:05.947 | DEBUG    | __main__:run:356 - Running benchmark 9
2022-08-06 05:05:05.947 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.947 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.947 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A0 as result already exists
2022-08-06 05:05:05.947 | DEBUG    | __main__:run:356 - Running benchmark 10
2022-08-06 05:05:05.947 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.948 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.948 | DEBUG    | __main__:run:370 - Skipping benchmark 10:A0 as result already exists
2022-08-06 05:05:05.948 | DEBUG    | __main__:run:356 - Running benchmark 11
2022-08-06 05:05:05.948 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.948 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.948 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A0 as result already exists
2022-08-06 05:05:05.948 | DEBUG    | __main__:run:356 - Running benchmark 12
2022-08-06 05:05:05.948 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.948 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.949 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A0 as result already exists
2022-08-06 05:05:05.949 | DEBUG    | __main__:run:356 - Running benchmark 13
2022-08-06 05:05:05.949 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.949 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.949 | DEBUG    | __main__:run:370 - Skipping benchmark 13:A0 as result already exists
2022-08-06 05:05:05.949 | DEBUG    | __main__:run:356 - Running benchmark 14
2022-08-06 05:05:05.949 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.949 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.950 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A0 as result already exists
2022-08-06 05:05:05.950 | DEBUG    | __main__:run:356 - Running benchmark 15
2022-08-06 05:05:05.950 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.950 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.950 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A0 as result already exists
2022-08-06 05:05:05.950 | DEBUG    | __main__:run:356 - Running benchmark 16
2022-08-06 05:05:05.950 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.950 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.950 | DEBUG    | __main__:run:370 - Skipping benchmark 16:A0 as result already exists
2022-08-06 05:05:05.950 | DEBUG    | __main__:run:356 - Running benchmark 17
2022-08-06 05:05:05.951 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.951 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.951 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A0 as result already exists
2022-08-06 05:05:05.951 | DEBUG    | __main__:run:356 - Running benchmark 18
2022-08-06 05:05:05.951 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.951 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.951 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A0 as result already exists
2022-08-06 05:05:05.951 | DEBUG    | __main__:run:356 - Running benchmark 19
2022-08-06 05:05:05.951 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.951 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.952 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A0 as result already exists
2022-08-06 05:05:05.952 | DEBUG    | __main__:run:356 - Running benchmark 20
2022-08-06 05:05:05.952 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.952 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.952 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A0 as result already exists
2022-08-06 05:05:05.952 | DEBUG    | __main__:run:356 - Running benchmark 21
2022-08-06 05:05:05.952 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.952 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.952 | DEBUG    | __main__:run:370 - Skipping benchmark 21:A0 as result already exists
2022-08-06 05:05:05.952 | DEBUG    | __main__:run:356 - Running benchmark 22
2022-08-06 05:05:05.953 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.953 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.953 | DEBUG    | __main__:run:370 - Skipping benchmark 22:A0 as result already exists
2022-08-06 05:05:05.953 | DEBUG    | __main__:run:356 - Running benchmark 23
2022-08-06 05:05:05.953 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.953 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.953 | DEBUG    | __main__:run:370 - Skipping benchmark 23:A0 as result already exists
2022-08-06 05:05:05.953 | DEBUG    | __main__:run:356 - Running benchmark 24
2022-08-06 05:05:05.953 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.953 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.954 | DEBUG    | __main__:run:370 - Skipping benchmark 24:A0 as result already exists
2022-08-06 05:05:05.954 | DEBUG    | __main__:run:356 - Running benchmark 25
2022-08-06 05:05:05.954 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.954 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.954 | DEBUG    | __main__:run:370 - Skipping benchmark 25:A0 as result already exists
2022-08-06 05:05:05.954 | DEBUG    | __main__:run:356 - Running benchmark 26
2022-08-06 05:05:05.954 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.954 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.954 | DEBUG    | __main__:run:370 - Skipping benchmark 26:A0 as result already exists
2022-08-06 05:05:05.954 | DEBUG    | __main__:run:356 - Running benchmark 27
2022-08-06 05:05:05.955 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.955 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.955 | DEBUG    | __main__:run:370 - Skipping benchmark 27:A0 as result already exists
2022-08-06 05:05:05.955 | DEBUG    | __main__:run:356 - Running benchmark 28
2022-08-06 05:05:05.955 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.955 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.955 | DEBUG    | __main__:run:370 - Skipping benchmark 28:A0 as result already exists
2022-08-06 05:05:05.955 | DEBUG    | __main__:run:356 - Running benchmark 29
2022-08-06 05:05:05.955 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.955 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.956 | DEBUG    | __main__:run:370 - Skipping benchmark 29:A0 as result already exists
2022-08-06 05:05:05.956 | DEBUG    | __main__:run:356 - Running benchmark 30
2022-08-06 05:05:05.956 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.956 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.956 | DEBUG    | __main__:run:370 - Skipping benchmark 30:A0 as result already exists
2022-08-06 05:05:05.956 | DEBUG    | __main__:run:356 - Running benchmark 31
2022-08-06 05:05:05.956 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.956 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.956 | DEBUG    | __main__:run:370 - Skipping benchmark 31:A0 as result already exists
2022-08-06 05:05:05.956 | DEBUG    | __main__:run:356 - Running benchmark 32
2022-08-06 05:05:05.957 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.957 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.957 | DEBUG    | __main__:run:370 - Skipping benchmark 32:A0 as result already exists
2022-08-06 05:05:05.957 | DEBUG    | __main__:run:356 - Running benchmark 33
2022-08-06 05:05:05.957 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.957 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.957 | DEBUG    | __main__:run:370 - Skipping benchmark 33:A0 as result already exists
2022-08-06 05:05:05.957 | DEBUG    | __main__:run:356 - Running benchmark 34
2022-08-06 05:05:05.957 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.957 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.958 | DEBUG    | __main__:run:370 - Skipping benchmark 34:A0 as result already exists
2022-08-06 05:05:05.958 | DEBUG    | __main__:run:356 - Running benchmark 35
2022-08-06 05:05:05.958 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.958 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.958 | DEBUG    | __main__:run:370 - Skipping benchmark 35:A0 as result already exists
2022-08-06 05:05:05.958 | DEBUG    | __main__:run:356 - Running benchmark 36
2022-08-06 05:05:05.958 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.958 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.958 | DEBUG    | __main__:run:370 - Skipping benchmark 36:A0 as result already exists
2022-08-06 05:05:05.958 | DEBUG    | __main__:run:356 - Running benchmark 37
2022-08-06 05:05:05.959 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.959 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.959 | DEBUG    | __main__:run:370 - Skipping benchmark 37:A0 as result already exists
2022-08-06 05:05:05.959 | DEBUG    | __main__:run:356 - Running benchmark 38
2022-08-06 05:05:05.959 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.959 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.959 | DEBUG    | __main__:run:370 - Skipping benchmark 38:A0 as result already exists
2022-08-06 05:05:05.959 | DEBUG    | __main__:run:356 - Running benchmark 39
2022-08-06 05:05:05.959 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.960 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.960 | DEBUG    | __main__:run:370 - Skipping benchmark 39:A0 as result already exists
2022-08-06 05:05:05.960 | DEBUG    | __main__:run:356 - Running benchmark 40
2022-08-06 05:05:05.960 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.960 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.960 | DEBUG    | __main__:run:370 - Skipping benchmark 40:A0 as result already exists
2022-08-06 05:05:05.960 | DEBUG    | __main__:run:356 - Running benchmark 41
2022-08-06 05:05:05.960 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.960 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.960 | DEBUG    | __main__:run:370 - Skipping benchmark 41:A0 as result already exists
2022-08-06 05:05:05.961 | DEBUG    | __main__:run:356 - Running benchmark 42
2022-08-06 05:05:05.961 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.961 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.961 | DEBUG    | __main__:run:370 - Skipping benchmark 42:A0 as result already exists
2022-08-06 05:05:05.961 | DEBUG    | __main__:run:356 - Running benchmark 43
2022-08-06 05:05:05.961 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.961 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.961 | DEBUG    | __main__:run:370 - Skipping benchmark 43:A0 as result already exists
2022-08-06 05:05:05.961 | DEBUG    | __main__:run:356 - Running benchmark 44
2022-08-06 05:05:05.961 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.962 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.962 | DEBUG    | __main__:run:370 - Skipping benchmark 44:A0 as result already exists
2022-08-06 05:05:05.962 | DEBUG    | __main__:run:356 - Running benchmark 45
2022-08-06 05:05:05.962 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.962 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.962 | DEBUG    | __main__:run:370 - Skipping benchmark 45:A0 as result already exists
2022-08-06 05:05:05.962 | DEBUG    | __main__:run:356 - Running benchmark 46
2022-08-06 05:05:05.962 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.962 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.962 | DEBUG    | __main__:run:370 - Skipping benchmark 46:A0 as result already exists
2022-08-06 05:05:05.963 | DEBUG    | __main__:run:356 - Running benchmark 47
2022-08-06 05:05:05.963 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.963 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.963 | DEBUG    | __main__:run:370 - Skipping benchmark 47:A0 as result already exists
2022-08-06 05:05:05.963 | DEBUG    | __main__:run:356 - Running benchmark 48
2022-08-06 05:05:05.963 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.963 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.963 | DEBUG    | __main__:run:370 - Skipping benchmark 48:A0 as result already exists
2022-08-06 05:05:05.963 | DEBUG    | __main__:run:356 - Running benchmark 49
2022-08-06 05:05:05.963 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.964 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.964 | DEBUG    | __main__:run:370 - Skipping benchmark 49:A0 as result already exists
2022-08-06 05:05:05.964 | DEBUG    | __main__:run:356 - Running benchmark 50
2022-08-06 05:05:05.964 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.964 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.964 | DEBUG    | __main__:run:370 - Skipping benchmark 50:A0 as result already exists
2022-08-06 05:05:05.964 | DEBUG    | __main__:run:356 - Running benchmark 51
2022-08-06 05:05:05.964 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.964 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.964 | DEBUG    | __main__:run:370 - Skipping benchmark 51:A0 as result already exists
2022-08-06 05:05:05.965 | DEBUG    | __main__:run:356 - Running benchmark 52
2022-08-06 05:05:05.965 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.965 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.965 | DEBUG    | __main__:run:370 - Skipping benchmark 52:A0 as result already exists
2022-08-06 05:05:05.965 | DEBUG    | __main__:run:356 - Running benchmark 53
2022-08-06 05:05:05.965 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.965 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.965 | DEBUG    | __main__:run:370 - Skipping benchmark 53:A0 as result already exists
2022-08-06 05:05:05.965 | DEBUG    | __main__:run:356 - Running benchmark 54
2022-08-06 05:05:05.965 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.966 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.966 | DEBUG    | __main__:run:370 - Skipping benchmark 54:A0 as result already exists
2022-08-06 05:05:05.966 | DEBUG    | __main__:run:356 - Running benchmark 55
2022-08-06 05:05:05.966 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.966 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.966 | DEBUG    | __main__:run:370 - Skipping benchmark 55:A0 as result already exists
2022-08-06 05:05:05.966 | DEBUG    | __main__:run:356 - Running benchmark 56
2022-08-06 05:05:05.966 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.966 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.966 | DEBUG    | __main__:run:370 - Skipping benchmark 56:A0 as result already exists
2022-08-06 05:05:05.967 | DEBUG    | __main__:run:356 - Running benchmark 57
2022-08-06 05:05:05.967 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.967 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.967 | DEBUG    | __main__:run:370 - Skipping benchmark 57:A0 as result already exists
2022-08-06 05:05:05.967 | DEBUG    | __main__:run:356 - Running benchmark 58
2022-08-06 05:05:05.967 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.967 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.967 | DEBUG    | __main__:run:370 - Skipping benchmark 58:A0 as result already exists
2022-08-06 05:05:05.967 | DEBUG    | __main__:run:356 - Running benchmark 59
2022-08-06 05:05:05.967 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.968 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.968 | DEBUG    | __main__:run:370 - Skipping benchmark 59:A0 as result already exists
2022-08-06 05:05:05.968 | DEBUG    | __main__:run:356 - Running benchmark 60
2022-08-06 05:05:05.968 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.968 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.968 | DEBUG    | __main__:run:370 - Skipping benchmark 60:A0 as result already exists
2022-08-06 05:05:05.968 | DEBUG    | __main__:run:356 - Running benchmark 62
2022-08-06 05:05:05.968 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.968 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.968 | DEBUG    | __main__:run:370 - Skipping benchmark 62:A0 as result already exists
2022-08-06 05:05:05.969 | DEBUG    | __main__:run:356 - Running benchmark 63
2022-08-06 05:05:05.969 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.969 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.969 | DEBUG    | __main__:run:370 - Skipping benchmark 63:A0 as result already exists
2022-08-06 05:05:05.969 | DEBUG    | __main__:run:356 - Running benchmark 64
2022-08-06 05:05:05.969 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.969 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.969 | DEBUG    | __main__:run:370 - Skipping benchmark 64:A0 as result already exists
2022-08-06 05:05:05.969 | DEBUG    | __main__:run:356 - Running benchmark 65
2022-08-06 05:05:05.970 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.970 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.970 | DEBUG    | __main__:run:370 - Skipping benchmark 65:A0 as result already exists
2022-08-06 05:05:05.970 | DEBUG    | __main__:run:356 - Running benchmark 66
2022-08-06 05:05:05.970 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.970 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.970 | DEBUG    | __main__:run:370 - Skipping benchmark 66:A0 as result already exists
2022-08-06 05:05:05.970 | DEBUG    | __main__:run:356 - Running benchmark 67
2022-08-06 05:05:05.970 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:05:05.970 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.971 | DEBUG    | __main__:run:370 - Skipping benchmark 67:A0 as result already exists
2022-08-06 05:05:05.971 | DEBUG    | __main__:run:345 - Running benchmark set PandasEval2
2022-08-06 05:05:05.971 | DEBUG    | __main__:run:346 - Found 21 benchmarks in PandasEval2
2022-08-06 05:05:05.971 | DEBUG    | __main__:run:356 - Running benchmark 0
2022-08-06 05:05:05.971 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:05:05.971 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 05:05:05.971 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A0 as result already exists
2022-08-06 05:05:05.971 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A1 as result already exists
2022-08-06 05:05:05.971 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A2 as result already exists
2022-08-06 05:05:05.971 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 05:05:05.972 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D0 as result already exists
2022-08-06 05:05:05.972 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D1 as result already exists
2022-08-06 05:05:05.972 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D2 as result already exists
2022-08-06 05:05:05.972 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D3 as result already exists
2022-08-06 05:05:05.972 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D4 as result already exists
2022-08-06 05:05:05.972 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D5 as result already exists
2022-08-06 05:05:05.972 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D6 as result already exists
2022-08-06 05:05:05.972 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:05.972 | DEBUG    | __main__:run:370 - Skipping benchmark 0:B0 as result already exists
2022-08-06 05:05:05.972 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 05:05:05.973 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C0 as result already exists
2022-08-06 05:05:05.973 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C1 as result already exists
2022-08-06 05:05:05.973 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C2 as result already exists
2022-08-06 05:05:05.973 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 05:05:05.973 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E0 as result already exists
2022-08-06 05:05:05.973 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E1 as result already exists
2022-08-06 05:05:05.973 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E2 as result already exists
2022-08-06 05:05:05.973 | DEBUG    | __main__:run:356 - Running benchmark 1
2022-08-06 05:05:05.973 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:05:05.973 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 05:05:05.974 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A0 as result already exists
2022-08-06 05:05:05.974 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A1 as result already exists
2022-08-06 05:05:05.974 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A2 as result already exists
2022-08-06 05:05:05.974 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A3 as result already exists
2022-08-06 05:05:05.974 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 05:05:05.974 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D0 as result already exists
2022-08-06 05:05:05.974 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D1 as result already exists
2022-08-06 05:05:05.974 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D2 as result already exists
2022-08-06 05:05:05.974 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D3 as result already exists
2022-08-06 05:05:05.974 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D4 as result already exists
2022-08-06 05:05:05.975 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D5 as result already exists
2022-08-06 05:05:05.975 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D6 as result already exists
2022-08-06 05:05:05.975 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D7 as result already exists
2022-08-06 05:05:05.975 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 05:05:05.975 | DEBUG    | __main__:run:370 - Skipping benchmark 1:B0 as result already exists
2022-08-06 05:05:05.975 | DEBUG    | __main__:run:370 - Skipping benchmark 1:B1 as result already exists
2022-08-06 05:05:05.975 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:05:05.975 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C0 as result already exists
2022-08-06 05:05:05.975 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C1 as result already exists
2022-08-06 05:05:05.975 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C2 as result already exists
2022-08-06 05:05:05.976 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C3 as result already exists
2022-08-06 05:05:05.976 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C4 as result already exists
2022-08-06 05:05:05.976 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C5 as result already exists
2022-08-06 05:05:05.976 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 05:05:05.976 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E0 as result already exists
2022-08-06 05:05:05.976 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E1 as result already exists
2022-08-06 05:05:05.976 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E2 as result already exists
2022-08-06 05:05:05.976 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E3 as result already exists
2022-08-06 05:05:05.976 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E4 as result already exists
2022-08-06 05:05:05.976 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E5 as result already exists
2022-08-06 05:05:05.977 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E6 as result already exists
2022-08-06 05:05:05.977 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E7 as result already exists
2022-08-06 05:05:05.977 | DEBUG    | __main__:run:356 - Running benchmark 2
2022-08-06 05:05:05.977 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:05:05.977 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:05:05.977 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A0 as result already exists
2022-08-06 05:05:05.977 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A1 as result already exists
2022-08-06 05:05:05.977 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A2 as result already exists
2022-08-06 05:05:05.977 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A3 as result already exists
2022-08-06 05:05:05.978 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A4 as result already exists
2022-08-06 05:05:05.978 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A5 as result already exists
2022-08-06 05:05:05.978 | DEBUG    | __main__:run:363 - Number of queries: 12
2022-08-06 05:05:05.978 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D0 as result already exists
2022-08-06 05:05:05.978 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D1 as result already exists
2022-08-06 05:05:05.978 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D2 as result already exists
2022-08-06 05:05:05.978 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D3 as result already exists
2022-08-06 05:05:05.978 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D4 as result already exists
2022-08-06 05:05:05.978 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D5 as result already exists
2022-08-06 05:05:05.978 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D6 as result already exists
2022-08-06 05:05:05.979 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D7 as result already exists
2022-08-06 05:05:05.979 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D8 as result already exists
2022-08-06 05:05:05.979 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D9 as result already exists
2022-08-06 05:05:05.979 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D10 as result already exists
2022-08-06 05:05:05.979 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D11 as result already exists
2022-08-06 05:05:05.979 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 05:05:05.979 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B0 as result already exists
2022-08-06 05:05:05.979 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B1 as result already exists
2022-08-06 05:05:05.979 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B2 as result already exists
2022-08-06 05:05:05.979 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B3 as result already exists
2022-08-06 05:05:05.980 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B4 as result already exists
2022-08-06 05:05:05.980 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B5 as result already exists
2022-08-06 05:05:05.980 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B6 as result already exists
2022-08-06 05:05:05.980 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B7 as result already exists
2022-08-06 05:05:05.980 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B8 as result already exists
2022-08-06 05:05:05.980 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B9 as result already exists
2022-08-06 05:05:05.980 | DEBUG    | __main__:run:363 - Number of queries: 11
2022-08-06 05:05:05.980 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C0 as result already exists
2022-08-06 05:05:05.980 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C1 as result already exists
2022-08-06 05:05:05.980 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C2 as result already exists
2022-08-06 05:05:05.981 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C3 as result already exists
2022-08-06 05:05:05.981 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C4 as result already exists
2022-08-06 05:05:05.981 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C5 as result already exists
2022-08-06 05:05:05.981 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C6 as result already exists
2022-08-06 05:05:05.981 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C7 as result already exists
2022-08-06 05:05:05.981 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C8 as result already exists
2022-08-06 05:05:05.981 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C9 as result already exists
2022-08-06 05:05:05.981 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C10 as result already exists
2022-08-06 05:05:05.981 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 05:05:05.981 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E0 as result already exists
2022-08-06 05:05:05.982 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E1 as result already exists
2022-08-06 05:05:05.982 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E2 as result already exists
2022-08-06 05:05:05.982 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E3 as result already exists
2022-08-06 05:05:05.982 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E4 as result already exists
2022-08-06 05:05:05.982 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E5 as result already exists
2022-08-06 05:05:05.982 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E6 as result already exists
2022-08-06 05:05:05.982 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E7 as result already exists
2022-08-06 05:05:05.982 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E8 as result already exists
2022-08-06 05:05:05.982 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E9 as result already exists
2022-08-06 05:05:05.982 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E10 as result already exists
2022-08-06 05:05:05.983 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E11 as result already exists
2022-08-06 05:05:05.983 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E12 as result already exists
2022-08-06 05:05:05.983 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E13 as result already exists
2022-08-06 05:05:05.983 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E14 as result already exists
2022-08-06 05:05:05.983 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E15 as result already exists
2022-08-06 05:05:05.983 | DEBUG    | __main__:run:356 - Running benchmark 3
2022-08-06 05:05:05.983 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:05:05.983 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 05:05:05.983 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A0 as result already exists
2022-08-06 05:05:05.983 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A1 as result already exists
2022-08-06 05:05:05.984 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A2 as result already exists
2022-08-06 05:05:05.984 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A3 as result already exists
2022-08-06 05:05:05.984 | DEBUG    | __main__:run:363 - Number of queries: 11
2022-08-06 05:05:05.984 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D0 as result already exists
2022-08-06 05:05:05.984 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D1 as result already exists
2022-08-06 05:05:05.984 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D2 as result already exists
2022-08-06 05:05:05.984 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D3 as result already exists
2022-08-06 05:05:05.984 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D4 as result already exists
2022-08-06 05:05:05.984 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D5 as result already exists
2022-08-06 05:05:05.984 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D6 as result already exists
2022-08-06 05:05:05.985 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D7 as result already exists
2022-08-06 05:05:05.985 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D8 as result already exists
2022-08-06 05:05:05.985 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D9 as result already exists
2022-08-06 05:05:05.985 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D10 as result already exists
2022-08-06 05:05:05.985 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:05:05.985 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B0 as result already exists
2022-08-06 05:05:05.985 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B1 as result already exists
2022-08-06 05:05:05.985 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B2 as result already exists
2022-08-06 05:05:05.985 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B3 as result already exists
2022-08-06 05:05:05.985 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B4 as result already exists
2022-08-06 05:05:05.986 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B5 as result already exists
2022-08-06 05:05:05.986 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-06 05:05:05.986 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C0 as result already exists
2022-08-06 05:05:05.986 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C1 as result already exists
2022-08-06 05:05:05.986 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C2 as result already exists
2022-08-06 05:05:05.986 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C3 as result already exists
2022-08-06 05:05:05.986 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C4 as result already exists
2022-08-06 05:05:05.986 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C5 as result already exists
2022-08-06 05:05:05.986 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C6 as result already exists
2022-08-06 05:05:05.986 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C7 as result already exists
2022-08-06 05:05:05.987 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C8 as result already exists
2022-08-06 05:05:05.987 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:05:05.987 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E0 as result already exists
2022-08-06 05:05:05.987 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E1 as result already exists
2022-08-06 05:05:05.987 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E2 as result already exists
2022-08-06 05:05:05.987 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E3 as result already exists
2022-08-06 05:05:05.987 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E4 as result already exists
2022-08-06 05:05:05.987 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E5 as result already exists
2022-08-06 05:05:05.987 | DEBUG    | __main__:run:356 - Running benchmark 4
2022-08-06 05:05:05.987 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:05:05.988 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:05:05.988 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A0 as result already exists
2022-08-06 05:05:05.988 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A1 as result already exists
2022-08-06 05:05:05.988 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A2 as result already exists
2022-08-06 05:05:05.988 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A3 as result already exists
2022-08-06 05:05:05.988 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A4 as result already exists
2022-08-06 05:05:05.988 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A5 as result already exists
2022-08-06 05:05:05.988 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 05:05:05.988 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D0 as result already exists
2022-08-06 05:05:05.988 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D1 as result already exists
2022-08-06 05:05:05.989 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D2 as result already exists
2022-08-06 05:05:05.989 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D3 as result already exists
2022-08-06 05:05:05.989 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D4 as result already exists
2022-08-06 05:05:05.989 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D5 as result already exists
2022-08-06 05:05:05.989 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D6 as result already exists
2022-08-06 05:05:05.989 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 05:05:05.989 | DEBUG    | __main__:run:370 - Skipping benchmark 4:B0 as result already exists
2022-08-06 05:05:05.989 | DEBUG    | __main__:run:370 - Skipping benchmark 4:B1 as result already exists
2022-08-06 05:05:05.989 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 05:05:05.989 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C0 as result already exists
2022-08-06 05:05:05.990 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C1 as result already exists
2022-08-06 05:05:05.990 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C2 as result already exists
2022-08-06 05:05:05.990 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C3 as result already exists
2022-08-06 05:05:05.990 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C4 as result already exists
2022-08-06 05:05:05.990 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C5 as result already exists
2022-08-06 05:05:05.990 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C6 as result already exists
2022-08-06 05:05:05.990 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:05:05.990 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E0 as result already exists
2022-08-06 05:05:05.990 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E1 as result already exists
2022-08-06 05:05:05.990 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E2 as result already exists
2022-08-06 05:05:05.991 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E3 as result already exists
2022-08-06 05:05:05.991 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E4 as result already exists
2022-08-06 05:05:05.991 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E5 as result already exists
2022-08-06 05:05:05.991 | DEBUG    | __main__:run:356 - Running benchmark 5
2022-08-06 05:05:05.991 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:05:05.991 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 05:05:05.991 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A0 as result already exists
2022-08-06 05:05:05.991 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A1 as result already exists
2022-08-06 05:05:05.991 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A2 as result already exists
2022-08-06 05:05:05.991 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A3 as result already exists
2022-08-06 05:05:05.992 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 05:05:05.992 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D0 as result already exists
2022-08-06 05:05:05.992 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D1 as result already exists
2022-08-06 05:05:05.992 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D2 as result already exists
2022-08-06 05:05:05.992 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D3 as result already exists
2022-08-06 05:05:05.992 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D4 as result already exists
2022-08-06 05:05:05.992 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D5 as result already exists
2022-08-06 05:05:05.992 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D6 as result already exists
2022-08-06 05:05:05.992 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D7 as result already exists
2022-08-06 05:05:05.993 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D8 as result already exists
2022-08-06 05:05:05.993 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D9 as result already exists
2022-08-06 05:05:05.993 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D10 as result already exists
2022-08-06 05:05:05.993 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D11 as result already exists
2022-08-06 05:05:05.993 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D12 as result already exists
2022-08-06 05:05:05.993 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D13 as result already exists
2022-08-06 05:05:05.993 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D14 as result already exists
2022-08-06 05:05:05.993 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D15 as result already exists
2022-08-06 05:05:05.993 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 05:05:05.993 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B0 as result already exists
2022-08-06 05:05:05.994 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B1 as result already exists
2022-08-06 05:05:05.994 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B2 as result already exists
2022-08-06 05:05:05.994 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B3 as result already exists
2022-08-06 05:05:05.994 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B4 as result already exists
2022-08-06 05:05:05.994 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B5 as result already exists
2022-08-06 05:05:05.994 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B6 as result already exists
2022-08-06 05:05:05.994 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:05:05.994 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C0 as result already exists
2022-08-06 05:05:05.994 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C1 as result already exists
2022-08-06 05:05:05.994 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C2 as result already exists
2022-08-06 05:05:05.995 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C3 as result already exists
2022-08-06 05:05:05.995 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C4 as result already exists
2022-08-06 05:05:05.995 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C5 as result already exists
2022-08-06 05:05:05.995 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 05:05:05.995 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E0 as result already exists
2022-08-06 05:05:05.995 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E1 as result already exists
2022-08-06 05:05:05.995 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E2 as result already exists
2022-08-06 05:05:05.995 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E3 as result already exists
2022-08-06 05:05:05.995 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E4 as result already exists
2022-08-06 05:05:05.995 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E5 as result already exists
2022-08-06 05:05:05.996 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E6 as result already exists
2022-08-06 05:05:05.996 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E7 as result already exists
2022-08-06 05:05:05.996 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E8 as result already exists
2022-08-06 05:05:05.996 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E9 as result already exists
2022-08-06 05:05:05.996 | DEBUG    | __main__:run:356 - Running benchmark 6
2022-08-06 05:05:05.996 | DEBUG    | __main__:run:357 - Number of Sets: 4
2022-08-06 05:05:05.996 | DEBUG    | __main__:run:363 - Number of queries: 27
2022-08-06 05:05:05.996 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D0 as result already exists
2022-08-06 05:05:05.996 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D1 as result already exists
2022-08-06 05:05:05.996 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D2 as result already exists
2022-08-06 05:05:05.997 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D3 as result already exists
2022-08-06 05:05:05.997 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D4 as result already exists
2022-08-06 05:05:05.997 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D5 as result already exists
2022-08-06 05:05:05.997 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D6 as result already exists
2022-08-06 05:05:05.997 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D7 as result already exists
2022-08-06 05:05:05.997 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D8 as result already exists
2022-08-06 05:05:05.997 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D9 as result already exists
2022-08-06 05:05:05.997 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D10 as result already exists
2022-08-06 05:05:05.997 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D11 as result already exists
2022-08-06 05:05:05.997 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D12 as result already exists
2022-08-06 05:05:05.998 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D13 as result already exists
2022-08-06 05:05:05.998 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D14 as result already exists
2022-08-06 05:05:05.998 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D15 as result already exists
2022-08-06 05:05:05.998 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D16 as result already exists
2022-08-06 05:05:05.998 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D17 as result already exists
2022-08-06 05:05:05.998 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D18 as result already exists
2022-08-06 05:05:05.998 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D19 as result already exists
2022-08-06 05:05:05.998 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D20 as result already exists
2022-08-06 05:05:05.998 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D21 as result already exists
2022-08-06 05:05:05.998 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D22 as result already exists
2022-08-06 05:05:05.999 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D23 as result already exists
2022-08-06 05:05:05.999 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D24 as result already exists
2022-08-06 05:05:05.999 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D25 as result already exists
2022-08-06 05:05:05.999 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D26 as result already exists
2022-08-06 05:05:05.999 | DEBUG    | __main__:run:363 - Number of queries: 26
2022-08-06 05:05:05.999 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B0 as result already exists
2022-08-06 05:05:05.999 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B1 as result already exists
2022-08-06 05:05:05.999 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B2 as result already exists
2022-08-06 05:05:05.999 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B3 as result already exists
2022-08-06 05:05:05.999 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B4 as result already exists
2022-08-06 05:05:06.000 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B5 as result already exists
2022-08-06 05:05:06.000 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B6 as result already exists
2022-08-06 05:05:06.000 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B7 as result already exists
2022-08-06 05:05:06.000 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B8 as result already exists
2022-08-06 05:05:06.000 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B9 as result already exists
2022-08-06 05:05:06.000 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B10 as result already exists
2022-08-06 05:05:06.000 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B11 as result already exists
2022-08-06 05:05:06.000 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B12 as result already exists
2022-08-06 05:05:06.000 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B13 as result already exists
2022-08-06 05:05:06.001 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B14 as result already exists
2022-08-06 05:05:06.001 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B15 as result already exists
2022-08-06 05:05:06.001 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B16 as result already exists
2022-08-06 05:05:06.001 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B17 as result already exists
2022-08-06 05:05:06.001 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B18 as result already exists
2022-08-06 05:05:06.001 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B19 as result already exists
2022-08-06 05:05:06.001 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B20 as result already exists
2022-08-06 05:05:06.001 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B21 as result already exists
2022-08-06 05:05:06.001 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B22 as result already exists
2022-08-06 05:05:06.001 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B23 as result already exists
2022-08-06 05:05:06.002 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B24 as result already exists
2022-08-06 05:05:06.002 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B25 as result already exists
2022-08-06 05:05:06.002 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 05:05:06.002 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E0 as result already exists
2022-08-06 05:05:06.002 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E1 as result already exists
2022-08-06 05:05:06.002 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E2 as result already exists
2022-08-06 05:05:06.002 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E3 as result already exists
2022-08-06 05:05:06.002 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E4 as result already exists
2022-08-06 05:05:06.002 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E5 as result already exists
2022-08-06 05:05:06.002 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E6 as result already exists
2022-08-06 05:05:06.003 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 05:05:06.003 | DEBUG    | __main__:run:370 - Skipping benchmark 6:C0 as result already exists
2022-08-06 05:05:06.003 | DEBUG    | __main__:run:370 - Skipping benchmark 6:C1 as result already exists
2022-08-06 05:05:06.003 | DEBUG    | __main__:run:356 - Running benchmark 7
2022-08-06 05:05:06.003 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-06 05:05:06.003 | DEBUG    | __main__:run:363 - Number of queries: 21
2022-08-06 05:05:06.003 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D0 as result already exists
2022-08-06 05:05:06.003 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D1 as result already exists
2022-08-06 05:05:06.003 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D2 as result already exists
2022-08-06 05:05:06.003 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D3 as result already exists
2022-08-06 05:05:06.004 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D4 as result already exists
2022-08-06 05:05:06.004 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D5 as result already exists
2022-08-06 05:05:06.004 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D6 as result already exists
2022-08-06 05:05:06.004 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D7 as result already exists
2022-08-06 05:05:06.004 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D8 as result already exists
2022-08-06 05:05:06.004 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D9 as result already exists
2022-08-06 05:05:06.004 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D10 as result already exists
2022-08-06 05:05:06.004 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D11 as result already exists
2022-08-06 05:05:06.004 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D12 as result already exists
2022-08-06 05:05:06.004 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D13 as result already exists
2022-08-06 05:05:06.005 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D14 as result already exists
2022-08-06 05:05:06.005 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D15 as result already exists
2022-08-06 05:05:06.005 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D16 as result already exists
2022-08-06 05:05:06.005 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D17 as result already exists
2022-08-06 05:05:06.005 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D18 as result already exists
2022-08-06 05:05:06.005 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D19 as result already exists
2022-08-06 05:05:06.005 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D20 as result already exists
2022-08-06 05:05:06.005 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 05:05:06.005 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A0 as result already exists
2022-08-06 05:05:06.006 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A1 as result already exists
2022-08-06 05:05:06.006 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A2 as result already exists
2022-08-06 05:05:06.006 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 05:05:06.006 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E0 as result already exists
2022-08-06 05:05:06.006 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E1 as result already exists
2022-08-06 05:05:06.006 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E2 as result already exists
2022-08-06 05:05:06.006 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E3 as result already exists
2022-08-06 05:05:06.006 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E4 as result already exists
2022-08-06 05:05:06.006 | DEBUG    | __main__:run:356 - Running benchmark 8
2022-08-06 05:05:06.006 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-06 05:05:06.007 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 05:05:06.007 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C0 as result already exists
2022-08-06 05:05:06.007 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C1 as result already exists
2022-08-06 05:05:06.007 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C2 as result already exists
2022-08-06 05:05:06.007 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C3 as result already exists
2022-08-06 05:05:06.007 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:05:06.007 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A0 as result already exists
2022-08-06 05:05:06.007 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A1 as result already exists
2022-08-06 05:05:06.007 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A2 as result already exists
2022-08-06 05:05:06.007 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A3 as result already exists
2022-08-06 05:05:06.008 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A4 as result already exists
2022-08-06 05:05:06.008 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A5 as result already exists
2022-08-06 05:05:06.008 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-06 05:05:06.008 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D0 as result already exists
2022-08-06 05:05:06.008 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D1 as result already exists
2022-08-06 05:05:06.008 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D2 as result already exists
2022-08-06 05:05:06.008 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D3 as result already exists
2022-08-06 05:05:06.008 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D4 as result already exists
2022-08-06 05:05:06.008 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D5 as result already exists
2022-08-06 05:05:06.008 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D6 as result already exists
2022-08-06 05:05:06.009 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D7 as result already exists
2022-08-06 05:05:06.009 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D8 as result already exists
2022-08-06 05:05:06.009 | DEBUG    | __main__:run:356 - Running benchmark 9
2022-08-06 05:05:06.009 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:05:06.009 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 05:05:06.009 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D0 as result already exists
2022-08-06 05:05:06.009 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D1 as result already exists
2022-08-06 05:05:06.009 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D2 as result already exists
2022-08-06 05:05:06.009 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D3 as result already exists
2022-08-06 05:05:06.009 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D4 as result already exists
2022-08-06 05:05:06.010 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D5 as result already exists
2022-08-06 05:05:06.010 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D6 as result already exists
2022-08-06 05:05:06.010 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D7 as result already exists
2022-08-06 05:05:06.010 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D8 as result already exists
2022-08-06 05:05:06.010 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D9 as result already exists
2022-08-06 05:05:06.010 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 05:05:06.010 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B0 as result already exists
2022-08-06 05:05:06.010 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B1 as result already exists
2022-08-06 05:05:06.010 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B2 as result already exists
2022-08-06 05:05:06.010 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 05:05:06.011 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C0 as result already exists
2022-08-06 05:05:06.011 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C1 as result already exists
2022-08-06 05:05:06.011 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C2 as result already exists
2022-08-06 05:05:06.011 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C3 as result already exists
2022-08-06 05:05:06.011 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C4 as result already exists
2022-08-06 05:05:06.011 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C5 as result already exists
2022-08-06 05:05:06.011 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C6 as result already exists
2022-08-06 05:05:06.011 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 05:05:06.011 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A0 as result already exists
2022-08-06 05:05:06.011 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A1 as result already exists
2022-08-06 05:05:06.012 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A2 as result already exists
2022-08-06 05:05:06.012 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A3 as result already exists
2022-08-06 05:05:06.012 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A4 as result already exists
2022-08-06 05:05:06.012 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 05:05:06.012 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E0 as result already exists
2022-08-06 05:05:06.012 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E1 as result already exists
2022-08-06 05:05:06.012 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E2 as result already exists
2022-08-06 05:05:06.012 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E3 as result already exists
2022-08-06 05:05:06.012 | DEBUG    | __main__:run:356 - Running benchmark 10
2022-08-06 05:05:06.012 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:05:06.013 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:06.013 | DEBUG    | __main__:run:370 - Skipping benchmark 10:C0 as result already exists
2022-08-06 05:05:06.013 | DEBUG    | __main__:run:363 - Number of queries: 23
2022-08-06 05:05:06.013 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D0 as result already exists
2022-08-06 05:05:06.013 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D1 as result already exists
2022-08-06 05:05:06.013 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D2 as result already exists
2022-08-06 05:05:06.013 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D3 as result already exists
2022-08-06 05:05:06.013 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D4 as result already exists
2022-08-06 05:05:06.013 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D5 as result already exists
2022-08-06 05:05:06.013 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D6 as result already exists
2022-08-06 05:05:06.014 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D7 as result already exists
2022-08-06 05:05:06.014 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D8 as result already exists
2022-08-06 05:05:06.014 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D9 as result already exists
2022-08-06 05:05:06.014 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D10 as result already exists
2022-08-06 05:05:06.014 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D11 as result already exists
2022-08-06 05:05:06.014 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D12 as result already exists
2022-08-06 05:05:06.014 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D13 as result already exists
2022-08-06 05:05:06.014 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D14 as result already exists
2022-08-06 05:05:06.014 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D15 as result already exists
2022-08-06 05:05:06.014 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D16 as result already exists
2022-08-06 05:05:06.015 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D17 as result already exists
2022-08-06 05:05:06.015 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D18 as result already exists
2022-08-06 05:05:06.015 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D19 as result already exists
2022-08-06 05:05:06.015 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D20 as result already exists
2022-08-06 05:05:06.015 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D21 as result already exists
2022-08-06 05:05:06.015 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D22 as result already exists
2022-08-06 05:05:06.015 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:06.015 | DEBUG    | __main__:run:370 - Skipping benchmark 10:A0 as result already exists
2022-08-06 05:05:06.015 | DEBUG    | __main__:run:363 - Number of queries: 12
2022-08-06 05:05:06.016 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E0 as result already exists
2022-08-06 05:05:06.016 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E1 as result already exists
2022-08-06 05:05:06.016 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E2 as result already exists
2022-08-06 05:05:06.016 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E3 as result already exists
2022-08-06 05:05:06.016 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E4 as result already exists
2022-08-06 05:05:06.016 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E5 as result already exists
2022-08-06 05:05:06.016 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E6 as result already exists
2022-08-06 05:05:06.016 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E7 as result already exists
2022-08-06 05:05:06.016 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E8 as result already exists
2022-08-06 05:05:06.016 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E9 as result already exists
2022-08-06 05:05:06.017 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E10 as result already exists
2022-08-06 05:05:06.017 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E11 as result already exists
2022-08-06 05:05:06.017 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:06.017 | DEBUG    | __main__:run:370 - Skipping benchmark 10:B0 as result already exists
2022-08-06 05:05:06.017 | DEBUG    | __main__:run:356 - Running benchmark 11
2022-08-06 05:05:06.017 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:05:06.017 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 05:05:06.017 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D0 as result already exists
2022-08-06 05:05:06.017 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D1 as result already exists
2022-08-06 05:05:06.017 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D2 as result already exists
2022-08-06 05:05:06.018 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D3 as result already exists
2022-08-06 05:05:06.018 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D4 as result already exists
2022-08-06 05:05:06.018 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D5 as result already exists
2022-08-06 05:05:06.018 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D6 as result already exists
2022-08-06 05:05:06.018 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D7 as result already exists
2022-08-06 05:05:06.018 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:06.018 | DEBUG    | __main__:run:370 - Skipping benchmark 11:C0 as result already exists
2022-08-06 05:05:06.018 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 05:05:06.018 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A0 as result already exists
2022-08-06 05:05:06.018 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A1 as result already exists
2022-08-06 05:05:06.019 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A2 as result already exists
2022-08-06 05:05:06.019 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A3 as result already exists
2022-08-06 05:05:06.019 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 05:05:06.019 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E0 as result already exists
2022-08-06 05:05:06.019 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E1 as result already exists
2022-08-06 05:05:06.019 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E2 as result already exists
2022-08-06 05:05:06.019 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 05:05:06.019 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B0 as result already exists
2022-08-06 05:05:06.019 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B1 as result already exists
2022-08-06 05:05:06.019 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B2 as result already exists
2022-08-06 05:05:06.020 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B3 as result already exists
2022-08-06 05:05:06.020 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B4 as result already exists
2022-08-06 05:05:06.020 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B5 as result already exists
2022-08-06 05:05:06.020 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B6 as result already exists
2022-08-06 05:05:06.020 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B7 as result already exists
2022-08-06 05:05:06.020 | DEBUG    | __main__:run:356 - Running benchmark 12
2022-08-06 05:05:06.020 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:05:06.020 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 05:05:06.020 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D0 as result already exists
2022-08-06 05:05:06.020 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D1 as result already exists
2022-08-06 05:05:06.021 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D2 as result already exists
2022-08-06 05:05:06.021 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D3 as result already exists
2022-08-06 05:05:06.021 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:06.021 | DEBUG    | __main__:run:370 - Skipping benchmark 12:B0 as result already exists
2022-08-06 05:05:06.021 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 05:05:06.021 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C0 as result already exists
2022-08-06 05:05:06.021 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C1 as result already exists
2022-08-06 05:05:06.021 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C2 as result already exists
2022-08-06 05:05:06.021 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C3 as result already exists
2022-08-06 05:05:06.021 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C4 as result already exists
2022-08-06 05:05:06.022 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 05:05:06.022 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A0 as result already exists
2022-08-06 05:05:06.022 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A1 as result already exists
2022-08-06 05:05:06.022 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A2 as result already exists
2022-08-06 05:05:06.022 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A3 as result already exists
2022-08-06 05:05:06.022 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A4 as result already exists
2022-08-06 05:05:06.022 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A5 as result already exists
2022-08-06 05:05:06.022 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A6 as result already exists
2022-08-06 05:05:06.022 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A7 as result already exists
2022-08-06 05:05:06.022 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 05:05:06.023 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E0 as result already exists
2022-08-06 05:05:06.023 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E1 as result already exists
2022-08-06 05:05:06.023 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E2 as result already exists
2022-08-06 05:05:06.023 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E3 as result already exists
2022-08-06 05:05:06.023 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E4 as result already exists
2022-08-06 05:05:06.023 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E5 as result already exists
2022-08-06 05:05:06.023 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E6 as result already exists
2022-08-06 05:05:06.023 | DEBUG    | __main__:run:356 - Running benchmark 13
2022-08-06 05:05:06.023 | DEBUG    | __main__:run:357 - Number of Sets: 2
2022-08-06 05:05:06.024 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 05:05:06.024 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B0 as result already exists
2022-08-06 05:05:06.024 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B1 as result already exists
2022-08-06 05:05:06.024 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B2 as result already exists
2022-08-06 05:05:06.024 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:06.024 | DEBUG    | __main__:run:370 - Skipping benchmark 13:A0 as result already exists
2022-08-06 05:05:06.024 | DEBUG    | __main__:run:356 - Running benchmark 14
2022-08-06 05:05:06.024 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:05:06.024 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 05:05:06.024 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D0 as result already exists
2022-08-06 05:05:06.025 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D1 as result already exists
2022-08-06 05:05:06.025 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D2 as result already exists
2022-08-06 05:05:06.025 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D3 as result already exists
2022-08-06 05:05:06.025 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D4 as result already exists
2022-08-06 05:05:06.025 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D5 as result already exists
2022-08-06 05:05:06.025 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D6 as result already exists
2022-08-06 05:05:06.025 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D7 as result already exists
2022-08-06 05:05:06.025 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D8 as result already exists
2022-08-06 05:05:06.025 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D9 as result already exists
2022-08-06 05:05:06.025 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-06 05:05:06.026 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C0 as result already exists
2022-08-06 05:05:06.026 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C1 as result already exists
2022-08-06 05:05:06.026 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C2 as result already exists
2022-08-06 05:05:06.026 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C3 as result already exists
2022-08-06 05:05:06.026 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C4 as result already exists
2022-08-06 05:05:06.026 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C5 as result already exists
2022-08-06 05:05:06.026 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C6 as result already exists
2022-08-06 05:05:06.026 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C7 as result already exists
2022-08-06 05:05:06.027 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C8 as result already exists
2022-08-06 05:05:06.027 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 05:05:06.027 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A0 as result already exists
2022-08-06 05:05:06.027 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A1 as result already exists
2022-08-06 05:05:06.027 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A2 as result already exists
2022-08-06 05:05:06.027 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A3 as result already exists
2022-08-06 05:05:06.027 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A4 as result already exists
2022-08-06 05:05:06.027 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-06 05:05:06.027 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E0 as result already exists
2022-08-06 05:05:06.027 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E1 as result already exists
2022-08-06 05:05:06.028 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E2 as result already exists
2022-08-06 05:05:06.028 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E3 as result already exists
2022-08-06 05:05:06.028 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E4 as result already exists
2022-08-06 05:05:06.028 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E5 as result already exists
2022-08-06 05:05:06.028 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E6 as result already exists
2022-08-06 05:05:06.028 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E7 as result already exists
2022-08-06 05:05:06.028 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E8 as result already exists
2022-08-06 05:05:06.028 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E9 as result already exists
2022-08-06 05:05:06.028 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E10 as result already exists
2022-08-06 05:05:06.028 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E11 as result already exists
2022-08-06 05:05:06.029 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E12 as result already exists
2022-08-06 05:05:06.029 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:05:06.029 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B0 as result already exists
2022-08-06 05:05:06.029 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B1 as result already exists
2022-08-06 05:05:06.029 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B2 as result already exists
2022-08-06 05:05:06.029 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B3 as result already exists
2022-08-06 05:05:06.029 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B4 as result already exists
2022-08-06 05:05:06.029 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B5 as result already exists
2022-08-06 05:05:06.029 | DEBUG    | __main__:run:356 - Running benchmark 15
2022-08-06 05:05:06.029 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:05:06.030 | DEBUG    | __main__:run:363 - Number of queries: 18
2022-08-06 05:05:06.030 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D0 as result already exists
2022-08-06 05:05:06.030 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D1 as result already exists
2022-08-06 05:05:06.030 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D2 as result already exists
2022-08-06 05:05:06.030 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D3 as result already exists
2022-08-06 05:05:06.030 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D4 as result already exists
2022-08-06 05:05:06.030 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D5 as result already exists
2022-08-06 05:05:06.030 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D6 as result already exists
2022-08-06 05:05:06.030 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D7 as result already exists
2022-08-06 05:05:06.030 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D8 as result already exists
2022-08-06 05:05:06.031 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D9 as result already exists
2022-08-06 05:05:06.031 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D10 as result already exists
2022-08-06 05:05:06.031 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D11 as result already exists
2022-08-06 05:05:06.031 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D12 as result already exists
2022-08-06 05:05:06.031 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D13 as result already exists
2022-08-06 05:05:06.031 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D14 as result already exists
2022-08-06 05:05:06.031 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D15 as result already exists
2022-08-06 05:05:06.239 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D16 as result already exists
2022-08-06 05:05:06.239 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D17 as result already exists
2022-08-06 05:05:06.239 | DEBUG    | __main__:run:363 - Number of queries: 22
2022-08-06 05:05:06.239 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B0 as result already exists
2022-08-06 05:05:06.239 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B1 as result already exists
2022-08-06 05:05:06.239 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B2 as result already exists
2022-08-06 05:05:06.239 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B3 as result already exists
2022-08-06 05:05:06.240 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B4 as result already exists
2022-08-06 05:05:06.240 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B5 as result already exists
2022-08-06 05:05:06.240 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B6 as result already exists
2022-08-06 05:05:06.240 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B7 as result already exists
2022-08-06 05:05:06.240 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B8 as result already exists
2022-08-06 05:05:06.240 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B9 as result already exists
2022-08-06 05:05:06.240 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B10 as result already exists
2022-08-06 05:05:06.240 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B11 as result already exists
2022-08-06 05:05:06.240 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B12 as result already exists
2022-08-06 05:05:06.241 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B13 as result already exists
2022-08-06 05:05:06.241 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B14 as result already exists
2022-08-06 05:05:06.241 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B15 as result already exists
2022-08-06 05:05:06.241 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B16 as result already exists
2022-08-06 05:05:06.241 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B17 as result already exists
2022-08-06 05:05:06.241 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B18 as result already exists
2022-08-06 05:05:06.241 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B19 as result already exists
2022-08-06 05:05:06.241 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B20 as result already exists
2022-08-06 05:05:06.241 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B21 as result already exists
2022-08-06 05:05:06.242 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 05:05:06.242 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C0 as result already exists
2022-08-06 05:05:06.242 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C1 as result already exists
2022-08-06 05:05:06.242 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C2 as result already exists
2022-08-06 05:05:06.242 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C3 as result already exists
2022-08-06 05:05:06.242 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C4 as result already exists
2022-08-06 05:05:06.242 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 05:05:06.242 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A0 as result already exists
2022-08-06 05:05:06.242 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A1 as result already exists
2022-08-06 05:05:06.243 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A2 as result already exists
2022-08-06 05:05:06.243 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A3 as result already exists
2022-08-06 05:05:06.243 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A4 as result already exists
2022-08-06 05:05:06.243 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A5 as result already exists
2022-08-06 05:05:06.243 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A6 as result already exists
2022-08-06 05:05:06.243 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A7 as result already exists
2022-08-06 05:05:06.243 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 05:05:06.243 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E0 as result already exists
2022-08-06 05:05:06.243 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E1 as result already exists
2022-08-06 05:05:06.244 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E2 as result already exists
2022-08-06 05:05:06.244 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E3 as result already exists
2022-08-06 05:05:06.244 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E4 as result already exists
2022-08-06 05:05:06.244 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E5 as result already exists
2022-08-06 05:05:06.244 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E6 as result already exists
2022-08-06 05:05:06.244 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E7 as result already exists
2022-08-06 05:05:06.244 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E8 as result already exists
2022-08-06 05:05:06.244 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E9 as result already exists
2022-08-06 05:05:06.244 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E10 as result already exists
2022-08-06 05:05:06.245 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E11 as result already exists
2022-08-06 05:05:06.245 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E12 as result already exists
2022-08-06 05:05:06.245 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E13 as result already exists
2022-08-06 05:05:06.245 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E14 as result already exists
2022-08-06 05:05:06.245 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E15 as result already exists
2022-08-06 05:05:06.245 | DEBUG    | __main__:run:356 - Running benchmark 16
2022-08-06 05:05:06.245 | DEBUG    | __main__:run:357 - Number of Sets: 4
2022-08-06 05:05:06.245 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 05:05:06.245 | DEBUG    | __main__:run:370 - Skipping benchmark 16:B0 as result already exists
2022-08-06 05:05:06.245 | DEBUG    | __main__:run:370 - Skipping benchmark 16:B1 as result already exists
2022-08-06 05:05:06.246 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:06.246 | DEBUG    | __main__:run:370 - Skipping benchmark 16:A0 as result already exists
2022-08-06 05:05:06.246 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:05:06.246 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E0 as result already exists
2022-08-06 05:05:06.246 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E1 as result already exists
2022-08-06 05:05:06.246 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E2 as result already exists
2022-08-06 05:05:06.246 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E3 as result already exists
2022-08-06 05:05:06.246 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E4 as result already exists
2022-08-06 05:05:06.246 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E5 as result already exists
2022-08-06 05:05:06.247 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 05:05:06.247 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D0 as result already exists
2022-08-06 05:05:06.247 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D1 as result already exists
2022-08-06 05:05:06.247 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D2 as result already exists
2022-08-06 05:05:06.247 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D3 as result already exists
2022-08-06 05:05:06.247 | DEBUG    | __main__:run:356 - Running benchmark 17
2022-08-06 05:05:06.247 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:05:06.247 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 05:05:06.247 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B0 as result already exists
2022-08-06 05:05:06.248 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B1 as result already exists
2022-08-06 05:05:06.248 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B2 as result already exists
2022-08-06 05:05:06.248 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B3 as result already exists
2022-08-06 05:05:06.248 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B4 as result already exists
2022-08-06 05:05:06.248 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B5 as result already exists
2022-08-06 05:05:06.248 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B6 as result already exists
2022-08-06 05:05:06.248 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B7 as result already exists
2022-08-06 05:05:06.248 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-06 05:05:06.248 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C0 as result already exists
2022-08-06 05:05:06.248 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C1 as result already exists
2022-08-06 05:05:06.249 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C2 as result already exists
2022-08-06 05:05:06.249 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C3 as result already exists
2022-08-06 05:05:06.249 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C4 as result already exists
2022-08-06 05:05:06.249 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C5 as result already exists
2022-08-06 05:05:06.249 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C6 as result already exists
2022-08-06 05:05:06.249 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C7 as result already exists
2022-08-06 05:05:06.249 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C8 as result already exists
2022-08-06 05:05:06.249 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C9 as result already exists
2022-08-06 05:05:06.249 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C10 as result already exists
2022-08-06 05:05:06.250 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C11 as result already exists
2022-08-06 05:05:06.250 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C12 as result already exists
2022-08-06 05:05:06.250 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 05:05:06.250 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A0 as result already exists
2022-08-06 05:05:06.250 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A1 as result already exists
2022-08-06 05:05:06.250 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A2 as result already exists
2022-08-06 05:05:06.250 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A3 as result already exists
2022-08-06 05:05:06.250 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A4 as result already exists
2022-08-06 05:05:06.250 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A5 as result already exists
2022-08-06 05:05:06.250 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A6 as result already exists
2022-08-06 05:05:06.251 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-06 05:05:06.251 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D0 as result already exists
2022-08-06 05:05:06.251 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D1 as result already exists
2022-08-06 05:05:06.251 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D2 as result already exists
2022-08-06 05:05:06.251 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D3 as result already exists
2022-08-06 05:05:06.251 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D4 as result already exists
2022-08-06 05:05:06.251 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D5 as result already exists
2022-08-06 05:05:06.251 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D6 as result already exists
2022-08-06 05:05:06.251 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D7 as result already exists
2022-08-06 05:05:06.252 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D8 as result already exists
2022-08-06 05:05:06.252 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D9 as result already exists
2022-08-06 05:05:06.252 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D10 as result already exists
2022-08-06 05:05:06.252 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D11 as result already exists
2022-08-06 05:05:06.252 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D12 as result already exists
2022-08-06 05:05:06.252 | DEBUG    | __main__:run:363 - Number of queries: 25
2022-08-06 05:05:06.252 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E0 as result already exists
2022-08-06 05:05:06.252 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E1 as result already exists
2022-08-06 05:05:06.252 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E2 as result already exists
2022-08-06 05:05:06.252 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E3 as result already exists
2022-08-06 05:05:06.253 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E4 as result already exists
2022-08-06 05:05:06.253 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E5 as result already exists
2022-08-06 05:05:06.253 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E6 as result already exists
2022-08-06 05:05:06.253 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E7 as result already exists
2022-08-06 05:05:06.253 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E8 as result already exists
2022-08-06 05:05:06.253 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E9 as result already exists
2022-08-06 05:05:06.253 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E10 as result already exists
2022-08-06 05:05:06.253 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E11 as result already exists
2022-08-06 05:05:06.253 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E12 as result already exists
2022-08-06 05:05:06.254 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E13 as result already exists
2022-08-06 05:05:06.254 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E14 as result already exists
2022-08-06 05:05:06.254 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E15 as result already exists
2022-08-06 05:05:06.254 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E16 as result already exists
2022-08-06 05:05:06.254 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E17 as result already exists
2022-08-06 05:05:06.254 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E18 as result already exists
2022-08-06 05:05:06.254 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E19 as result already exists
2022-08-06 05:05:06.254 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E20 as result already exists
2022-08-06 05:05:06.254 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E21 as result already exists
2022-08-06 05:05:06.254 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E22 as result already exists
2022-08-06 05:05:06.255 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E23 as result already exists
2022-08-06 05:05:06.255 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E24 as result already exists
2022-08-06 05:05:06.255 | DEBUG    | __main__:run:356 - Running benchmark 18
2022-08-06 05:05:06.255 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-06 05:05:06.255 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:05:06.255 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A0 as result already exists
2022-08-06 05:05:06.255 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A1 as result already exists
2022-08-06 05:05:06.255 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A2 as result already exists
2022-08-06 05:05:06.255 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A3 as result already exists
2022-08-06 05:05:06.256 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A4 as result already exists
2022-08-06 05:05:06.256 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A5 as result already exists
2022-08-06 05:05:06.256 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 05:05:06.256 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D0 as result already exists
2022-08-06 05:05:06.256 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D1 as result already exists
2022-08-06 05:05:06.256 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D2 as result already exists
2022-08-06 05:05:06.256 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D3 as result already exists
2022-08-06 05:05:06.256 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D4 as result already exists
2022-08-06 05:05:06.256 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D5 as result already exists
2022-08-06 05:05:06.256 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D6 as result already exists
2022-08-06 05:05:06.257 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D7 as result already exists
2022-08-06 05:05:06.257 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D8 as result already exists
2022-08-06 05:05:06.257 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D9 as result already exists
2022-08-06 05:05:06.257 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D10 as result already exists
2022-08-06 05:05:06.257 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D11 as result already exists
2022-08-06 05:05:06.257 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D12 as result already exists
2022-08-06 05:05:06.257 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D13 as result already exists
2022-08-06 05:05:06.257 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D14 as result already exists
2022-08-06 05:05:06.257 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D15 as result already exists
2022-08-06 05:05:06.258 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 05:05:06.258 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E0 as result already exists
2022-08-06 05:05:06.258 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E1 as result already exists
2022-08-06 05:05:06.258 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E2 as result already exists
2022-08-06 05:05:06.258 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E3 as result already exists
2022-08-06 05:05:06.258 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E4 as result already exists
2022-08-06 05:05:06.258 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E5 as result already exists
2022-08-06 05:05:06.258 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E6 as result already exists
2022-08-06 05:05:06.258 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E7 as result already exists
2022-08-06 05:05:06.258 | DEBUG    | __main__:run:356 - Running benchmark 19
2022-08-06 05:05:06.259 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:05:06.259 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 05:05:06.259 | DEBUG    | __main__:run:370 - Skipping benchmark 19:B0 as result already exists
2022-08-06 05:05:06.259 | DEBUG    | __main__:run:370 - Skipping benchmark 19:B1 as result already exists
2022-08-06 05:05:06.259 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 05:05:06.259 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C0 as result already exists
2022-08-06 05:05:06.259 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C1 as result already exists
2022-08-06 05:05:06.259 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C2 as result already exists
2022-08-06 05:05:06.259 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C3 as result already exists
2022-08-06 05:05:06.260 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C4 as result already exists
2022-08-06 05:05:06.260 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 05:05:06.260 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D0 as result already exists
2022-08-06 05:05:06.260 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D1 as result already exists
2022-08-06 05:05:06.260 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D2 as result already exists
2022-08-06 05:05:06.260 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D3 as result already exists
2022-08-06 05:05:06.260 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D4 as result already exists
2022-08-06 05:05:06.260 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D5 as result already exists
2022-08-06 05:05:06.260 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D6 as result already exists
2022-08-06 05:05:06.261 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D7 as result already exists
2022-08-06 05:05:06.261 | DEBUG    | __main__:run:363 - Number of queries: 18
2022-08-06 05:05:06.261 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A0 as result already exists
2022-08-06 05:05:06.261 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A1 as result already exists
2022-08-06 05:05:06.261 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A2 as result already exists
2022-08-06 05:05:06.261 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A3 as result already exists
2022-08-06 05:05:06.261 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A4 as result already exists
2022-08-06 05:05:06.261 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A5 as result already exists
2022-08-06 05:05:06.261 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A6 as result already exists
2022-08-06 05:05:06.261 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A7 as result already exists
2022-08-06 05:05:06.262 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A8 as result already exists
2022-08-06 05:05:06.262 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A9 as result already exists
2022-08-06 05:05:06.262 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A10 as result already exists
2022-08-06 05:05:06.262 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A11 as result already exists
2022-08-06 05:05:06.262 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A12 as result already exists
2022-08-06 05:05:06.262 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A13 as result already exists
2022-08-06 05:05:06.262 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A14 as result already exists
2022-08-06 05:05:06.262 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A15 as result already exists
2022-08-06 05:05:06.262 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A16 as result already exists
2022-08-06 05:05:06.263 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A17 as result already exists
2022-08-06 05:05:06.263 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 05:05:06.263 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E0 as result already exists
2022-08-06 05:05:06.263 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E1 as result already exists
2022-08-06 05:05:06.263 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E2 as result already exists
2022-08-06 05:05:06.263 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E3 as result already exists
2022-08-06 05:05:06.263 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E4 as result already exists
2022-08-06 05:05:06.263 | DEBUG    | __main__:run:356 - Running benchmark 20
2022-08-06 05:05:06.263 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:05:06.263 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 05:05:06.264 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B0 as result already exists
2022-08-06 05:05:06.264 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B1 as result already exists
2022-08-06 05:05:06.264 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B2 as result already exists
2022-08-06 05:05:06.264 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B3 as result already exists
2022-08-06 05:05:06.264 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:05:06.264 | DEBUG    | __main__:run:370 - Skipping benchmark 20:C0 as result already exists
2022-08-06 05:05:06.264 | DEBUG    | __main__:run:363 - Number of queries: 17
2022-08-06 05:05:06.264 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D0 as result already exists
2022-08-06 05:05:06.264 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D1 as result already exists
2022-08-06 05:05:06.265 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D2 as result already exists
2022-08-06 05:05:06.265 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D3 as result already exists
2022-08-06 05:05:06.265 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D4 as result already exists
2022-08-06 05:05:06.265 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D5 as result already exists
2022-08-06 05:05:06.265 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D6 as result already exists
2022-08-06 05:05:06.265 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D7 as result already exists
2022-08-06 05:05:06.265 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D8 as result already exists
2022-08-06 05:05:06.265 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D9 as result already exists
2022-08-06 05:05:06.265 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D10 as result already exists
2022-08-06 05:05:06.265 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D11 as result already exists
2022-08-06 05:05:06.266 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D12 as result already exists
2022-08-06 05:05:06.266 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D13 as result already exists
2022-08-06 05:05:06.266 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D14 as result already exists
2022-08-06 05:05:06.266 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D15 as result already exists
2022-08-06 05:05:06.266 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D16 as result already exists
2022-08-06 05:05:06.266 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 05:05:06.266 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A0 as result already exists
2022-08-06 05:05:06.266 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A1 as result already exists
2022-08-06 05:05:06.266 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A2 as result already exists
2022-08-06 05:05:06.267 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A3 as result already exists
2022-08-06 05:05:06.267 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A4 as result already exists
2022-08-06 05:05:06.267 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 05:05:06.267 | DEBUG    | __main__:run:370 - Skipping benchmark 20:E0 as result already exists
2022-08-06 05:05:06.267 | DEBUG    | __main__:run:370 - Skipping benchmark 20:E1 as result already exists
2022-08-06 05:26:25.614 | DEBUG    | __main__:run:345 - Running benchmark set PandasEval1
2022-08-06 05:26:25.615 | DEBUG    | __main__:run:346 - Found 68 benchmarks in PandasEval1
2022-08-06 05:26:25.615 | DEBUG    | __main__:run:356 - Running benchmark 0
2022-08-06 05:26:25.615 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.615 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.616 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A0 as result already exists
2022-08-06 05:26:25.616 | DEBUG    | __main__:run:356 - Running benchmark 1
2022-08-06 05:26:25.616 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.616 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.617 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A0 as result already exists
2022-08-06 05:26:25.617 | DEBUG    | __main__:run:356 - Running benchmark 2
2022-08-06 05:26:25.617 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.617 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.617 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A0 as result already exists
2022-08-06 05:26:25.618 | DEBUG    | __main__:run:356 - Running benchmark 3
2022-08-06 05:26:25.618 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.618 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.618 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A0 as result already exists
2022-08-06 05:26:25.618 | DEBUG    | __main__:run:356 - Running benchmark 4
2022-08-06 05:26:25.618 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.619 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.619 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A0 as result already exists
2022-08-06 05:26:25.619 | DEBUG    | __main__:run:356 - Running benchmark 5
2022-08-06 05:26:25.619 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.619 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.619 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A0 as result already exists
2022-08-06 05:26:25.620 | DEBUG    | __main__:run:356 - Running benchmark 6
2022-08-06 05:26:25.620 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.620 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.620 | DEBUG    | __main__:run:370 - Skipping benchmark 6:A0 as result already exists
2022-08-06 05:26:25.620 | DEBUG    | __main__:run:356 - Running benchmark 7
2022-08-06 05:26:25.620 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.621 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.621 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A0 as result already exists
2022-08-06 05:26:25.621 | DEBUG    | __main__:run:356 - Running benchmark 8
2022-08-06 05:26:25.621 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.622 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.622 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A0 as result already exists
2022-08-06 05:26:25.622 | DEBUG    | __main__:run:356 - Running benchmark 9
2022-08-06 05:26:25.622 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.622 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.622 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A0 as result already exists
2022-08-06 05:26:25.623 | DEBUG    | __main__:run:356 - Running benchmark 10
2022-08-06 05:26:25.623 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.623 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.623 | DEBUG    | __main__:run:370 - Skipping benchmark 10:A0 as result already exists
2022-08-06 05:26:25.623 | DEBUG    | __main__:run:356 - Running benchmark 11
2022-08-06 05:26:25.623 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.623 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.624 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A0 as result already exists
2022-08-06 05:26:25.624 | DEBUG    | __main__:run:356 - Running benchmark 12
2022-08-06 05:26:25.624 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.624 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.624 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A0 as result already exists
2022-08-06 05:26:25.624 | DEBUG    | __main__:run:356 - Running benchmark 13
2022-08-06 05:26:25.625 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.625 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.625 | DEBUG    | __main__:run:370 - Skipping benchmark 13:A0 as result already exists
2022-08-06 05:26:25.625 | DEBUG    | __main__:run:356 - Running benchmark 14
2022-08-06 05:26:25.625 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.625 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.625 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A0 as result already exists
2022-08-06 05:26:25.626 | DEBUG    | __main__:run:356 - Running benchmark 15
2022-08-06 05:26:25.626 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.626 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.626 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A0 as result already exists
2022-08-06 05:26:25.626 | DEBUG    | __main__:run:356 - Running benchmark 16
2022-08-06 05:26:25.627 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.627 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.627 | DEBUG    | __main__:run:370 - Skipping benchmark 16:A0 as result already exists
2022-08-06 05:26:25.627 | DEBUG    | __main__:run:356 - Running benchmark 17
2022-08-06 05:26:25.627 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.627 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.628 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A0 as result already exists
2022-08-06 05:26:25.628 | DEBUG    | __main__:run:356 - Running benchmark 18
2022-08-06 05:26:25.628 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.628 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.628 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A0 as result already exists
2022-08-06 05:26:25.629 | DEBUG    | __main__:run:356 - Running benchmark 19
2022-08-06 05:26:25.629 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.629 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.629 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A0 as result already exists
2022-08-06 05:26:25.629 | DEBUG    | __main__:run:356 - Running benchmark 20
2022-08-06 05:26:25.630 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.630 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.630 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A0 as result already exists
2022-08-06 05:26:25.630 | DEBUG    | __main__:run:356 - Running benchmark 21
2022-08-06 05:26:25.630 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.630 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.630 | DEBUG    | __main__:run:370 - Skipping benchmark 21:A0 as result already exists
2022-08-06 05:26:25.631 | DEBUG    | __main__:run:356 - Running benchmark 22
2022-08-06 05:26:25.631 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.631 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.631 | DEBUG    | __main__:run:370 - Skipping benchmark 22:A0 as result already exists
2022-08-06 05:26:25.631 | DEBUG    | __main__:run:356 - Running benchmark 23
2022-08-06 05:26:25.632 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.632 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.632 | DEBUG    | __main__:run:370 - Skipping benchmark 23:A0 as result already exists
2022-08-06 05:26:25.632 | DEBUG    | __main__:run:356 - Running benchmark 24
2022-08-06 05:26:25.632 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.632 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.633 | DEBUG    | __main__:run:370 - Skipping benchmark 24:A0 as result already exists
2022-08-06 05:26:25.633 | DEBUG    | __main__:run:356 - Running benchmark 25
2022-08-06 05:26:25.633 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.633 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.633 | DEBUG    | __main__:run:370 - Skipping benchmark 25:A0 as result already exists
2022-08-06 05:26:25.633 | DEBUG    | __main__:run:356 - Running benchmark 26
2022-08-06 05:26:25.634 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.634 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.634 | DEBUG    | __main__:run:370 - Skipping benchmark 26:A0 as result already exists
2022-08-06 05:26:25.634 | DEBUG    | __main__:run:356 - Running benchmark 27
2022-08-06 05:26:25.634 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.634 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.634 | DEBUG    | __main__:run:370 - Skipping benchmark 27:A0 as result already exists
2022-08-06 05:26:25.635 | DEBUG    | __main__:run:356 - Running benchmark 28
2022-08-06 05:26:25.635 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.635 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.635 | DEBUG    | __main__:run:370 - Skipping benchmark 28:A0 as result already exists
2022-08-06 05:26:25.635 | DEBUG    | __main__:run:356 - Running benchmark 29
2022-08-06 05:26:25.635 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.635 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.636 | DEBUG    | __main__:run:370 - Skipping benchmark 29:A0 as result already exists
2022-08-06 05:26:25.636 | DEBUG    | __main__:run:356 - Running benchmark 30
2022-08-06 05:26:25.636 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.636 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.636 | DEBUG    | __main__:run:370 - Skipping benchmark 30:A0 as result already exists
2022-08-06 05:26:25.636 | DEBUG    | __main__:run:356 - Running benchmark 31
2022-08-06 05:26:25.637 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.637 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.637 | DEBUG    | __main__:run:370 - Skipping benchmark 31:A0 as result already exists
2022-08-06 05:26:25.637 | DEBUG    | __main__:run:356 - Running benchmark 32
2022-08-06 05:26:25.637 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.637 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.637 | DEBUG    | __main__:run:370 - Skipping benchmark 32:A0 as result already exists
2022-08-06 05:26:25.638 | DEBUG    | __main__:run:356 - Running benchmark 33
2022-08-06 05:26:25.638 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.638 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.638 | DEBUG    | __main__:run:370 - Skipping benchmark 33:A0 as result already exists
2022-08-06 05:26:25.638 | DEBUG    | __main__:run:356 - Running benchmark 34
2022-08-06 05:26:25.638 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.639 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.639 | DEBUG    | __main__:run:370 - Skipping benchmark 34:A0 as result already exists
2022-08-06 05:26:25.639 | DEBUG    | __main__:run:356 - Running benchmark 35
2022-08-06 05:26:25.639 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.639 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.639 | DEBUG    | __main__:run:370 - Skipping benchmark 35:A0 as result already exists
2022-08-06 05:26:25.639 | DEBUG    | __main__:run:356 - Running benchmark 36
2022-08-06 05:26:25.639 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.640 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.640 | DEBUG    | __main__:run:370 - Skipping benchmark 36:A0 as result already exists
2022-08-06 05:26:25.640 | DEBUG    | __main__:run:356 - Running benchmark 37
2022-08-06 05:26:25.640 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.640 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.640 | DEBUG    | __main__:run:370 - Skipping benchmark 37:A0 as result already exists
2022-08-06 05:26:25.640 | DEBUG    | __main__:run:356 - Running benchmark 38
2022-08-06 05:26:25.641 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.641 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.641 | DEBUG    | __main__:run:370 - Skipping benchmark 38:A0 as result already exists
2022-08-06 05:26:25.641 | DEBUG    | __main__:run:356 - Running benchmark 39
2022-08-06 05:26:25.641 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.641 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.642 | DEBUG    | __main__:run:370 - Skipping benchmark 39:A0 as result already exists
2022-08-06 05:26:25.642 | DEBUG    | __main__:run:356 - Running benchmark 40
2022-08-06 05:26:25.642 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.642 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.642 | DEBUG    | __main__:run:370 - Skipping benchmark 40:A0 as result already exists
2022-08-06 05:26:25.642 | DEBUG    | __main__:run:356 - Running benchmark 41
2022-08-06 05:26:25.643 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.643 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.643 | DEBUG    | __main__:run:370 - Skipping benchmark 41:A0 as result already exists
2022-08-06 05:26:25.643 | DEBUG    | __main__:run:356 - Running benchmark 42
2022-08-06 05:26:25.643 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.643 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.643 | DEBUG    | __main__:run:370 - Skipping benchmark 42:A0 as result already exists
2022-08-06 05:26:25.644 | DEBUG    | __main__:run:356 - Running benchmark 43
2022-08-06 05:26:25.644 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.644 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.644 | DEBUG    | __main__:run:370 - Skipping benchmark 43:A0 as result already exists
2022-08-06 05:26:25.644 | DEBUG    | __main__:run:356 - Running benchmark 44
2022-08-06 05:26:25.644 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.644 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.645 | DEBUG    | __main__:run:370 - Skipping benchmark 44:A0 as result already exists
2022-08-06 05:26:25.645 | DEBUG    | __main__:run:356 - Running benchmark 45
2022-08-06 05:26:25.645 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.645 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.645 | DEBUG    | __main__:run:370 - Skipping benchmark 45:A0 as result already exists
2022-08-06 05:26:25.645 | DEBUG    | __main__:run:356 - Running benchmark 46
2022-08-06 05:26:25.646 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.646 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.646 | DEBUG    | __main__:run:370 - Skipping benchmark 46:A0 as result already exists
2022-08-06 05:26:25.646 | DEBUG    | __main__:run:356 - Running benchmark 47
2022-08-06 05:26:25.646 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.647 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.647 | DEBUG    | __main__:run:370 - Skipping benchmark 47:A0 as result already exists
2022-08-06 05:26:25.647 | DEBUG    | __main__:run:356 - Running benchmark 48
2022-08-06 05:26:25.647 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.647 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.647 | DEBUG    | __main__:run:370 - Skipping benchmark 48:A0 as result already exists
2022-08-06 05:26:25.647 | DEBUG    | __main__:run:356 - Running benchmark 49
2022-08-06 05:26:25.648 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.648 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.648 | DEBUG    | __main__:run:370 - Skipping benchmark 49:A0 as result already exists
2022-08-06 05:26:25.648 | DEBUG    | __main__:run:356 - Running benchmark 50
2022-08-06 05:26:25.648 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.648 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.649 | DEBUG    | __main__:run:370 - Skipping benchmark 50:A0 as result already exists
2022-08-06 05:26:25.649 | DEBUG    | __main__:run:356 - Running benchmark 51
2022-08-06 05:26:25.649 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.649 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.649 | DEBUG    | __main__:run:370 - Skipping benchmark 51:A0 as result already exists
2022-08-06 05:26:25.649 | DEBUG    | __main__:run:356 - Running benchmark 52
2022-08-06 05:26:25.650 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.650 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.650 | DEBUG    | __main__:run:370 - Skipping benchmark 52:A0 as result already exists
2022-08-06 05:26:25.650 | DEBUG    | __main__:run:356 - Running benchmark 53
2022-08-06 05:26:25.650 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.650 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.651 | DEBUG    | __main__:run:370 - Skipping benchmark 53:A0 as result already exists
2022-08-06 05:26:25.651 | DEBUG    | __main__:run:356 - Running benchmark 54
2022-08-06 05:26:25.651 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.651 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.651 | DEBUG    | __main__:run:370 - Skipping benchmark 54:A0 as result already exists
2022-08-06 05:26:25.652 | DEBUG    | __main__:run:356 - Running benchmark 55
2022-08-06 05:26:25.652 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.652 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.652 | DEBUG    | __main__:run:370 - Skipping benchmark 55:A0 as result already exists
2022-08-06 05:26:25.652 | DEBUG    | __main__:run:356 - Running benchmark 56
2022-08-06 05:26:25.652 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.652 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.653 | DEBUG    | __main__:run:370 - Skipping benchmark 56:A0 as result already exists
2022-08-06 05:26:25.653 | DEBUG    | __main__:run:356 - Running benchmark 57
2022-08-06 05:26:25.653 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.653 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.653 | DEBUG    | __main__:run:370 - Skipping benchmark 57:A0 as result already exists
2022-08-06 05:26:25.653 | DEBUG    | __main__:run:356 - Running benchmark 58
2022-08-06 05:26:25.653 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.654 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.654 | DEBUG    | __main__:run:370 - Skipping benchmark 58:A0 as result already exists
2022-08-06 05:26:25.654 | DEBUG    | __main__:run:356 - Running benchmark 59
2022-08-06 05:26:25.654 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.654 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.654 | DEBUG    | __main__:run:370 - Skipping benchmark 59:A0 as result already exists
2022-08-06 05:26:25.654 | DEBUG    | __main__:run:356 - Running benchmark 60
2022-08-06 05:26:25.654 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.655 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.655 | DEBUG    | __main__:run:370 - Skipping benchmark 60:A0 as result already exists
2022-08-06 05:26:25.655 | DEBUG    | __main__:run:356 - Running benchmark 62
2022-08-06 05:26:25.655 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.655 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.655 | DEBUG    | __main__:run:370 - Skipping benchmark 62:A0 as result already exists
2022-08-06 05:26:25.655 | DEBUG    | __main__:run:356 - Running benchmark 63
2022-08-06 05:26:25.656 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.656 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.656 | DEBUG    | __main__:run:370 - Skipping benchmark 63:A0 as result already exists
2022-08-06 05:26:25.656 | DEBUG    | __main__:run:356 - Running benchmark 64
2022-08-06 05:26:25.656 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.656 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.656 | DEBUG    | __main__:run:370 - Skipping benchmark 64:A0 as result already exists
2022-08-06 05:26:25.657 | DEBUG    | __main__:run:356 - Running benchmark 65
2022-08-06 05:26:25.657 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.657 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.657 | DEBUG    | __main__:run:370 - Skipping benchmark 65:A0 as result already exists
2022-08-06 05:26:25.657 | DEBUG    | __main__:run:356 - Running benchmark 66
2022-08-06 05:26:25.657 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.657 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.658 | DEBUG    | __main__:run:370 - Skipping benchmark 66:A0 as result already exists
2022-08-06 05:26:25.658 | DEBUG    | __main__:run:356 - Running benchmark 67
2022-08-06 05:26:25.658 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 05:26:25.658 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.658 | DEBUG    | __main__:run:370 - Skipping benchmark 67:A0 as result already exists
2022-08-06 05:26:25.658 | DEBUG    | __main__:run:345 - Running benchmark set PandasEval2
2022-08-06 05:26:25.658 | DEBUG    | __main__:run:346 - Found 21 benchmarks in PandasEval2
2022-08-06 05:26:25.658 | DEBUG    | __main__:run:356 - Running benchmark 0
2022-08-06 05:26:25.659 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:26:25.659 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 05:26:25.659 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A0 as result already exists
2022-08-06 05:26:25.659 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A1 as result already exists
2022-08-06 05:26:25.659 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A2 as result already exists
2022-08-06 05:26:25.659 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 05:26:25.659 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D0 as result already exists
2022-08-06 05:26:25.659 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D1 as result already exists
2022-08-06 05:26:25.660 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D2 as result already exists
2022-08-06 05:26:25.660 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D3 as result already exists
2022-08-06 05:26:25.660 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D4 as result already exists
2022-08-06 05:26:25.660 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D5 as result already exists
2022-08-06 05:26:25.660 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D6 as result already exists
2022-08-06 05:26:25.660 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.660 | DEBUG    | __main__:run:370 - Skipping benchmark 0:B0 as result already exists
2022-08-06 05:26:25.661 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 05:26:25.661 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C0 as result already exists
2022-08-06 05:26:25.661 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C1 as result already exists
2022-08-06 05:26:25.661 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C2 as result already exists
2022-08-06 05:26:25.661 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 05:26:25.661 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E0 as result already exists
2022-08-06 05:26:25.661 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E1 as result already exists
2022-08-06 05:26:25.662 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E2 as result already exists
2022-08-06 05:26:25.662 | DEBUG    | __main__:run:356 - Running benchmark 1
2022-08-06 05:26:25.662 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:26:25.662 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 05:26:25.662 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A0 as result already exists
2022-08-06 05:26:25.662 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A1 as result already exists
2022-08-06 05:26:25.662 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A2 as result already exists
2022-08-06 05:26:25.662 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A3 as result already exists
2022-08-06 05:26:25.663 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 05:26:25.663 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D0 as result already exists
2022-08-06 05:26:25.663 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D1 as result already exists
2022-08-06 05:26:25.663 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D2 as result already exists
2022-08-06 05:26:25.663 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D3 as result already exists
2022-08-06 05:26:25.663 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D4 as result already exists
2022-08-06 05:26:25.663 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D5 as result already exists
2022-08-06 05:26:25.664 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D6 as result already exists
2022-08-06 05:26:25.664 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D7 as result already exists
2022-08-06 05:26:25.664 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 05:26:25.664 | DEBUG    | __main__:run:370 - Skipping benchmark 1:B0 as result already exists
2022-08-06 05:26:25.664 | DEBUG    | __main__:run:370 - Skipping benchmark 1:B1 as result already exists
2022-08-06 05:26:25.664 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:26:25.664 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C0 as result already exists
2022-08-06 05:26:25.664 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C1 as result already exists
2022-08-06 05:26:25.665 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C2 as result already exists
2022-08-06 05:26:25.665 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C3 as result already exists
2022-08-06 05:26:25.665 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C4 as result already exists
2022-08-06 05:26:25.665 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C5 as result already exists
2022-08-06 05:26:25.665 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 05:26:25.665 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E0 as result already exists
2022-08-06 05:26:25.665 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E1 as result already exists
2022-08-06 05:26:25.665 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E2 as result already exists
2022-08-06 05:26:25.666 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E3 as result already exists
2022-08-06 05:26:25.666 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E4 as result already exists
2022-08-06 05:26:25.666 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E5 as result already exists
2022-08-06 05:26:25.666 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E6 as result already exists
2022-08-06 05:26:25.666 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E7 as result already exists
2022-08-06 05:26:25.666 | DEBUG    | __main__:run:356 - Running benchmark 2
2022-08-06 05:26:25.667 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:26:25.667 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:26:25.667 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A0 as result already exists
2022-08-06 05:26:25.667 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A1 as result already exists
2022-08-06 05:26:25.667 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A2 as result already exists
2022-08-06 05:26:25.667 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A3 as result already exists
2022-08-06 05:26:25.667 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A4 as result already exists
2022-08-06 05:26:25.667 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A5 as result already exists
2022-08-06 05:26:25.668 | DEBUG    | __main__:run:363 - Number of queries: 12
2022-08-06 05:26:25.668 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D0 as result already exists
2022-08-06 05:26:25.668 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D1 as result already exists
2022-08-06 05:26:25.668 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D2 as result already exists
2022-08-06 05:26:25.668 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D3 as result already exists
2022-08-06 05:26:25.668 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D4 as result already exists
2022-08-06 05:26:25.668 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D5 as result already exists
2022-08-06 05:26:25.669 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D6 as result already exists
2022-08-06 05:26:25.669 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D7 as result already exists
2022-08-06 05:26:25.669 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D8 as result already exists
2022-08-06 05:26:25.669 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D9 as result already exists
2022-08-06 05:26:25.669 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D10 as result already exists
2022-08-06 05:26:25.669 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D11 as result already exists
2022-08-06 05:26:25.669 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 05:26:25.669 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B0 as result already exists
2022-08-06 05:26:25.670 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B1 as result already exists
2022-08-06 05:26:25.670 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B2 as result already exists
2022-08-06 05:26:25.670 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B3 as result already exists
2022-08-06 05:26:25.670 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B4 as result already exists
2022-08-06 05:26:25.670 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B5 as result already exists
2022-08-06 05:26:25.670 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B6 as result already exists
2022-08-06 05:26:25.670 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B7 as result already exists
2022-08-06 05:26:25.671 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B8 as result already exists
2022-08-06 05:26:25.671 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B9 as result already exists
2022-08-06 05:26:25.671 | DEBUG    | __main__:run:363 - Number of queries: 11
2022-08-06 05:26:25.671 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C0 as result already exists
2022-08-06 05:26:25.671 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C1 as result already exists
2022-08-06 05:26:25.671 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C2 as result already exists
2022-08-06 05:26:25.671 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C3 as result already exists
2022-08-06 05:26:25.672 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C4 as result already exists
2022-08-06 05:26:25.672 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C5 as result already exists
2022-08-06 05:26:25.672 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C6 as result already exists
2022-08-06 05:26:25.672 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C7 as result already exists
2022-08-06 05:26:25.672 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C8 as result already exists
2022-08-06 05:26:25.672 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C9 as result already exists
2022-08-06 05:26:25.672 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C10 as result already exists
2022-08-06 05:26:25.672 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 05:26:25.673 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E0 as result already exists
2022-08-06 05:26:25.673 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E1 as result already exists
2022-08-06 05:26:25.673 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E2 as result already exists
2022-08-06 05:26:25.673 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E3 as result already exists
2022-08-06 05:26:25.673 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E4 as result already exists
2022-08-06 05:26:25.673 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E5 as result already exists
2022-08-06 05:26:25.673 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E6 as result already exists
2022-08-06 05:26:25.674 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E7 as result already exists
2022-08-06 05:26:25.674 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E8 as result already exists
2022-08-06 05:26:25.674 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E9 as result already exists
2022-08-06 05:26:25.674 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E10 as result already exists
2022-08-06 05:26:25.674 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E11 as result already exists
2022-08-06 05:26:25.674 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E12 as result already exists
2022-08-06 05:26:25.674 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E13 as result already exists
2022-08-06 05:26:25.674 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E14 as result already exists
2022-08-06 05:26:25.675 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E15 as result already exists
2022-08-06 05:26:25.675 | DEBUG    | __main__:run:356 - Running benchmark 3
2022-08-06 05:26:25.675 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:26:25.675 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 05:26:25.675 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A0 as result already exists
2022-08-06 05:26:25.675 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A1 as result already exists
2022-08-06 05:26:25.675 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A2 as result already exists
2022-08-06 05:26:25.675 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A3 as result already exists
2022-08-06 05:26:25.676 | DEBUG    | __main__:run:363 - Number of queries: 11
2022-08-06 05:26:25.676 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D0 as result already exists
2022-08-06 05:26:25.676 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D1 as result already exists
2022-08-06 05:26:25.676 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D2 as result already exists
2022-08-06 05:26:25.676 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D3 as result already exists
2022-08-06 05:26:25.676 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D4 as result already exists
2022-08-06 05:26:25.676 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D5 as result already exists
2022-08-06 05:26:25.677 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D6 as result already exists
2022-08-06 05:26:25.677 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D7 as result already exists
2022-08-06 05:26:25.677 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D8 as result already exists
2022-08-06 05:26:25.677 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D9 as result already exists
2022-08-06 05:26:25.677 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D10 as result already exists
2022-08-06 05:26:25.677 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:26:25.677 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B0 as result already exists
2022-08-06 05:26:25.677 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B1 as result already exists
2022-08-06 05:26:25.678 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B2 as result already exists
2022-08-06 05:26:25.678 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B3 as result already exists
2022-08-06 05:26:25.678 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B4 as result already exists
2022-08-06 05:26:25.678 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B5 as result already exists
2022-08-06 05:26:25.678 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-06 05:26:25.678 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C0 as result already exists
2022-08-06 05:26:25.678 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C1 as result already exists
2022-08-06 05:26:25.678 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C2 as result already exists
2022-08-06 05:26:25.679 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C3 as result already exists
2022-08-06 05:26:25.679 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C4 as result already exists
2022-08-06 05:26:25.679 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C5 as result already exists
2022-08-06 05:26:25.679 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C6 as result already exists
2022-08-06 05:26:25.679 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C7 as result already exists
2022-08-06 05:26:25.679 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C8 as result already exists
2022-08-06 05:26:25.679 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:26:25.679 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E0 as result already exists
2022-08-06 05:26:25.679 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E1 as result already exists
2022-08-06 05:26:25.680 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E2 as result already exists
2022-08-06 05:26:25.680 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E3 as result already exists
2022-08-06 05:26:25.680 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E4 as result already exists
2022-08-06 05:26:25.680 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E5 as result already exists
2022-08-06 05:26:25.680 | DEBUG    | __main__:run:356 - Running benchmark 4
2022-08-06 05:26:25.680 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:26:25.680 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:26:25.680 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A0 as result already exists
2022-08-06 05:26:25.680 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A1 as result already exists
2022-08-06 05:26:25.680 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A2 as result already exists
2022-08-06 05:26:25.681 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A3 as result already exists
2022-08-06 05:26:25.681 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A4 as result already exists
2022-08-06 05:26:25.681 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A5 as result already exists
2022-08-06 05:26:25.681 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 05:26:25.681 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D0 as result already exists
2022-08-06 05:26:25.681 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D1 as result already exists
2022-08-06 05:26:25.681 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D2 as result already exists
2022-08-06 05:26:25.681 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D3 as result already exists
2022-08-06 05:26:25.681 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D4 as result already exists
2022-08-06 05:26:25.681 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D5 as result already exists
2022-08-06 05:26:25.682 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D6 as result already exists
2022-08-06 05:26:25.682 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 05:26:25.682 | DEBUG    | __main__:run:370 - Skipping benchmark 4:B0 as result already exists
2022-08-06 05:26:25.682 | DEBUG    | __main__:run:370 - Skipping benchmark 4:B1 as result already exists
2022-08-06 05:26:25.682 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 05:26:25.682 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C0 as result already exists
2022-08-06 05:26:25.682 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C1 as result already exists
2022-08-06 05:26:25.682 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C2 as result already exists
2022-08-06 05:26:25.682 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C3 as result already exists
2022-08-06 05:26:25.683 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C4 as result already exists
2022-08-06 05:26:25.683 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C5 as result already exists
2022-08-06 05:26:25.683 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C6 as result already exists
2022-08-06 05:26:25.683 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:26:25.683 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E0 as result already exists
2022-08-06 05:26:25.683 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E1 as result already exists
2022-08-06 05:26:25.683 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E2 as result already exists
2022-08-06 05:26:25.683 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E3 as result already exists
2022-08-06 05:26:25.683 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E4 as result already exists
2022-08-06 05:26:25.683 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E5 as result already exists
2022-08-06 05:26:25.684 | DEBUG    | __main__:run:356 - Running benchmark 5
2022-08-06 05:26:25.684 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:26:25.684 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 05:26:25.684 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A0 as result already exists
2022-08-06 05:26:25.684 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A1 as result already exists
2022-08-06 05:26:25.684 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A2 as result already exists
2022-08-06 05:26:25.684 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A3 as result already exists
2022-08-06 05:26:25.684 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 05:26:25.684 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D0 as result already exists
2022-08-06 05:26:25.684 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D1 as result already exists
2022-08-06 05:26:25.685 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D2 as result already exists
2022-08-06 05:26:25.685 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D3 as result already exists
2022-08-06 05:26:25.685 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D4 as result already exists
2022-08-06 05:26:25.685 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D5 as result already exists
2022-08-06 05:26:25.685 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D6 as result already exists
2022-08-06 05:26:25.685 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D7 as result already exists
2022-08-06 05:26:25.685 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D8 as result already exists
2022-08-06 05:26:25.685 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D9 as result already exists
2022-08-06 05:26:25.685 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D10 as result already exists
2022-08-06 05:26:25.685 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D11 as result already exists
2022-08-06 05:26:25.686 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D12 as result already exists
2022-08-06 05:26:25.686 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D13 as result already exists
2022-08-06 05:26:25.686 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D14 as result already exists
2022-08-06 05:26:25.686 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D15 as result already exists
2022-08-06 05:26:25.686 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 05:26:25.686 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B0 as result already exists
2022-08-06 05:26:25.686 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B1 as result already exists
2022-08-06 05:26:25.686 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B2 as result already exists
2022-08-06 05:26:25.686 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B3 as result already exists
2022-08-06 05:26:25.687 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B4 as result already exists
2022-08-06 05:26:25.687 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B5 as result already exists
2022-08-06 05:26:25.687 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B6 as result already exists
2022-08-06 05:26:25.687 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:26:25.687 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C0 as result already exists
2022-08-06 05:26:25.687 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C1 as result already exists
2022-08-06 05:26:25.687 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C2 as result already exists
2022-08-06 05:26:25.687 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C3 as result already exists
2022-08-06 05:26:25.687 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C4 as result already exists
2022-08-06 05:26:25.687 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C5 as result already exists
2022-08-06 05:26:25.688 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 05:26:25.688 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E0 as result already exists
2022-08-06 05:26:25.688 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E1 as result already exists
2022-08-06 05:26:25.688 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E2 as result already exists
2022-08-06 05:26:25.688 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E3 as result already exists
2022-08-06 05:26:25.688 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E4 as result already exists
2022-08-06 05:26:25.688 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E5 as result already exists
2022-08-06 05:26:25.688 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E6 as result already exists
2022-08-06 05:26:25.688 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E7 as result already exists
2022-08-06 05:26:25.688 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E8 as result already exists
2022-08-06 05:26:25.689 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E9 as result already exists
2022-08-06 05:26:25.689 | DEBUG    | __main__:run:356 - Running benchmark 6
2022-08-06 05:26:25.689 | DEBUG    | __main__:run:357 - Number of Sets: 4
2022-08-06 05:26:25.689 | DEBUG    | __main__:run:363 - Number of queries: 27
2022-08-06 05:26:25.689 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D0 as result already exists
2022-08-06 05:26:25.689 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D1 as result already exists
2022-08-06 05:26:25.689 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D2 as result already exists
2022-08-06 05:26:25.689 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D3 as result already exists
2022-08-06 05:26:25.689 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D4 as result already exists
2022-08-06 05:26:25.689 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D5 as result already exists
2022-08-06 05:26:25.690 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D6 as result already exists
2022-08-06 05:26:25.690 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D7 as result already exists
2022-08-06 05:26:25.690 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D8 as result already exists
2022-08-06 05:26:25.690 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D9 as result already exists
2022-08-06 05:26:25.690 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D10 as result already exists
2022-08-06 05:26:25.690 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D11 as result already exists
2022-08-06 05:26:25.690 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D12 as result already exists
2022-08-06 05:26:25.690 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D13 as result already exists
2022-08-06 05:26:25.690 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D14 as result already exists
2022-08-06 05:26:25.691 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D15 as result already exists
2022-08-06 05:26:25.691 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D16 as result already exists
2022-08-06 05:26:25.691 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D17 as result already exists
2022-08-06 05:26:25.691 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D18 as result already exists
2022-08-06 05:26:25.691 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D19 as result already exists
2022-08-06 05:26:25.691 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D20 as result already exists
2022-08-06 05:26:25.691 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D21 as result already exists
2022-08-06 05:26:25.691 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D22 as result already exists
2022-08-06 05:26:25.691 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D23 as result already exists
2022-08-06 05:26:25.691 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D24 as result already exists
2022-08-06 05:26:25.692 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D25 as result already exists
2022-08-06 05:26:25.692 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D26 as result already exists
2022-08-06 05:26:25.692 | DEBUG    | __main__:run:363 - Number of queries: 26
2022-08-06 05:26:25.692 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B0 as result already exists
2022-08-06 05:26:25.692 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B1 as result already exists
2022-08-06 05:26:25.692 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B2 as result already exists
2022-08-06 05:26:25.692 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B3 as result already exists
2022-08-06 05:26:25.692 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B4 as result already exists
2022-08-06 05:26:25.692 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B5 as result already exists
2022-08-06 05:26:25.692 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B6 as result already exists
2022-08-06 05:26:25.693 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B7 as result already exists
2022-08-06 05:26:25.693 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B8 as result already exists
2022-08-06 05:26:25.693 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B9 as result already exists
2022-08-06 05:26:25.693 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B10 as result already exists
2022-08-06 05:26:25.693 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B11 as result already exists
2022-08-06 05:26:25.693 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B12 as result already exists
2022-08-06 05:26:25.693 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B13 as result already exists
2022-08-06 05:26:25.693 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B14 as result already exists
2022-08-06 05:26:25.693 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B15 as result already exists
2022-08-06 05:26:25.693 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B16 as result already exists
2022-08-06 05:26:25.694 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B17 as result already exists
2022-08-06 05:26:25.694 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B18 as result already exists
2022-08-06 05:26:25.694 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B19 as result already exists
2022-08-06 05:26:25.694 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B20 as result already exists
2022-08-06 05:26:25.694 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B21 as result already exists
2022-08-06 05:26:25.694 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B22 as result already exists
2022-08-06 05:26:25.694 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B23 as result already exists
2022-08-06 05:26:25.694 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B24 as result already exists
2022-08-06 05:26:25.694 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B25 as result already exists
2022-08-06 05:26:25.694 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 05:26:25.695 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E0 as result already exists
2022-08-06 05:26:25.695 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E1 as result already exists
2022-08-06 05:26:25.695 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E2 as result already exists
2022-08-06 05:26:25.695 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E3 as result already exists
2022-08-06 05:26:25.695 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E4 as result already exists
2022-08-06 05:26:25.695 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E5 as result already exists
2022-08-06 05:26:25.695 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E6 as result already exists
2022-08-06 05:26:25.695 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 05:26:25.695 | DEBUG    | __main__:run:370 - Skipping benchmark 6:C0 as result already exists
2022-08-06 05:26:25.695 | DEBUG    | __main__:run:370 - Skipping benchmark 6:C1 as result already exists
2022-08-06 05:26:25.696 | DEBUG    | __main__:run:356 - Running benchmark 7
2022-08-06 05:26:25.696 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-06 05:26:25.696 | DEBUG    | __main__:run:363 - Number of queries: 21
2022-08-06 05:26:25.696 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D0 as result already exists
2022-08-06 05:26:25.696 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D1 as result already exists
2022-08-06 05:26:25.696 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D2 as result already exists
2022-08-06 05:26:25.696 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D3 as result already exists
2022-08-06 05:26:25.696 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D4 as result already exists
2022-08-06 05:26:25.696 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D5 as result already exists
2022-08-06 05:26:25.697 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D6 as result already exists
2022-08-06 05:26:25.697 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D7 as result already exists
2022-08-06 05:26:25.697 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D8 as result already exists
2022-08-06 05:26:25.697 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D9 as result already exists
2022-08-06 05:26:25.697 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D10 as result already exists
2022-08-06 05:26:25.697 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D11 as result already exists
2022-08-06 05:26:25.697 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D12 as result already exists
2022-08-06 05:26:25.697 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D13 as result already exists
2022-08-06 05:26:25.697 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D14 as result already exists
2022-08-06 05:26:25.697 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D15 as result already exists
2022-08-06 05:26:25.698 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D16 as result already exists
2022-08-06 05:26:25.698 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D17 as result already exists
2022-08-06 05:26:25.698 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D18 as result already exists
2022-08-06 05:26:25.698 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D19 as result already exists
2022-08-06 05:26:25.698 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D20 as result already exists
2022-08-06 05:26:25.698 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 05:26:25.698 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A0 as result already exists
2022-08-06 05:26:25.698 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A1 as result already exists
2022-08-06 05:26:25.698 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A2 as result already exists
2022-08-06 05:26:25.698 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 05:26:25.699 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E0 as result already exists
2022-08-06 05:26:25.699 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E1 as result already exists
2022-08-06 05:26:25.699 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E2 as result already exists
2022-08-06 05:26:25.699 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E3 as result already exists
2022-08-06 05:26:25.699 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E4 as result already exists
2022-08-06 05:26:25.699 | DEBUG    | __main__:run:356 - Running benchmark 8
2022-08-06 05:26:25.699 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-06 05:26:25.699 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 05:26:25.699 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C0 as result already exists
2022-08-06 05:26:25.699 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C1 as result already exists
2022-08-06 05:26:25.700 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C2 as result already exists
2022-08-06 05:26:25.700 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C3 as result already exists
2022-08-06 05:26:25.700 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:26:25.700 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A0 as result already exists
2022-08-06 05:26:25.700 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A1 as result already exists
2022-08-06 05:26:25.700 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A2 as result already exists
2022-08-06 05:26:25.700 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A3 as result already exists
2022-08-06 05:26:25.700 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A4 as result already exists
2022-08-06 05:26:25.700 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A5 as result already exists
2022-08-06 05:26:25.700 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-06 05:26:25.701 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D0 as result already exists
2022-08-06 05:26:25.701 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D1 as result already exists
2022-08-06 05:26:25.701 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D2 as result already exists
2022-08-06 05:26:25.701 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D3 as result already exists
2022-08-06 05:26:25.701 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D4 as result already exists
2022-08-06 05:26:25.701 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D5 as result already exists
2022-08-06 05:26:25.701 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D6 as result already exists
2022-08-06 05:26:25.701 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D7 as result already exists
2022-08-06 05:26:25.701 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D8 as result already exists
2022-08-06 05:26:25.702 | DEBUG    | __main__:run:356 - Running benchmark 9
2022-08-06 05:26:25.702 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:26:25.702 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 05:26:25.702 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D0 as result already exists
2022-08-06 05:26:25.702 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D1 as result already exists
2022-08-06 05:26:25.702 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D2 as result already exists
2022-08-06 05:26:25.702 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D3 as result already exists
2022-08-06 05:26:25.702 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D4 as result already exists
2022-08-06 05:26:25.702 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D5 as result already exists
2022-08-06 05:26:25.702 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D6 as result already exists
2022-08-06 05:26:25.703 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D7 as result already exists
2022-08-06 05:26:25.703 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D8 as result already exists
2022-08-06 05:26:25.703 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D9 as result already exists
2022-08-06 05:26:25.703 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 05:26:25.703 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B0 as result already exists
2022-08-06 05:26:25.703 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B1 as result already exists
2022-08-06 05:26:25.703 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B2 as result already exists
2022-08-06 05:26:25.703 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 05:26:25.703 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C0 as result already exists
2022-08-06 05:26:25.703 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C1 as result already exists
2022-08-06 05:26:25.704 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C2 as result already exists
2022-08-06 05:26:25.704 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C3 as result already exists
2022-08-06 05:26:25.704 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C4 as result already exists
2022-08-06 05:26:25.704 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C5 as result already exists
2022-08-06 05:26:25.704 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C6 as result already exists
2022-08-06 05:26:25.704 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 05:26:25.704 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A0 as result already exists
2022-08-06 05:26:25.704 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A1 as result already exists
2022-08-06 05:26:25.704 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A2 as result already exists
2022-08-06 05:26:25.704 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A3 as result already exists
2022-08-06 05:26:25.705 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A4 as result already exists
2022-08-06 05:26:25.705 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 05:26:25.705 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E0 as result already exists
2022-08-06 05:26:25.705 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E1 as result already exists
2022-08-06 05:26:25.705 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E2 as result already exists
2022-08-06 05:26:25.705 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E3 as result already exists
2022-08-06 05:26:25.705 | DEBUG    | __main__:run:356 - Running benchmark 10
2022-08-06 05:26:25.705 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:26:25.705 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.705 | DEBUG    | __main__:run:370 - Skipping benchmark 10:C0 as result already exists
2022-08-06 05:26:25.706 | DEBUG    | __main__:run:363 - Number of queries: 23
2022-08-06 05:26:25.706 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D0 as result already exists
2022-08-06 05:26:25.706 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D1 as result already exists
2022-08-06 05:26:25.706 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D2 as result already exists
2022-08-06 05:26:25.706 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D3 as result already exists
2022-08-06 05:26:25.706 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D4 as result already exists
2022-08-06 05:26:25.706 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D5 as result already exists
2022-08-06 05:26:25.706 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D6 as result already exists
2022-08-06 05:26:25.706 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D7 as result already exists
2022-08-06 05:26:25.706 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D8 as result already exists
2022-08-06 05:26:25.707 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D9 as result already exists
2022-08-06 05:26:25.707 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D10 as result already exists
2022-08-06 05:26:25.707 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D11 as result already exists
2022-08-06 05:26:25.707 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D12 as result already exists
2022-08-06 05:26:25.707 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D13 as result already exists
2022-08-06 05:26:25.707 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D14 as result already exists
2022-08-06 05:26:25.707 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D15 as result already exists
2022-08-06 05:26:25.707 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D16 as result already exists
2022-08-06 05:26:25.707 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D17 as result already exists
2022-08-06 05:26:25.708 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D18 as result already exists
2022-08-06 05:26:25.708 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D19 as result already exists
2022-08-06 05:26:25.708 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D20 as result already exists
2022-08-06 05:26:25.708 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D21 as result already exists
2022-08-06 05:26:25.708 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D22 as result already exists
2022-08-06 05:26:25.708 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.708 | DEBUG    | __main__:run:370 - Skipping benchmark 10:A0 as result already exists
2022-08-06 05:26:25.708 | DEBUG    | __main__:run:363 - Number of queries: 12
2022-08-06 05:26:25.708 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E0 as result already exists
2022-08-06 05:26:25.708 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E1 as result already exists
2022-08-06 05:26:25.709 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E2 as result already exists
2022-08-06 05:26:25.709 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E3 as result already exists
2022-08-06 05:26:25.709 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E4 as result already exists
2022-08-06 05:26:25.709 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E5 as result already exists
2022-08-06 05:26:25.709 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E6 as result already exists
2022-08-06 05:26:25.709 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E7 as result already exists
2022-08-06 05:26:25.709 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E8 as result already exists
2022-08-06 05:26:25.709 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E9 as result already exists
2022-08-06 05:26:25.709 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E10 as result already exists
2022-08-06 05:26:25.709 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E11 as result already exists
2022-08-06 05:26:25.710 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.710 | DEBUG    | __main__:run:370 - Skipping benchmark 10:B0 as result already exists
2022-08-06 05:26:25.710 | DEBUG    | __main__:run:356 - Running benchmark 11
2022-08-06 05:26:25.710 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:26:25.710 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 05:26:25.710 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D0 as result already exists
2022-08-06 05:26:25.710 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D1 as result already exists
2022-08-06 05:26:25.710 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D2 as result already exists
2022-08-06 05:26:25.710 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D3 as result already exists
2022-08-06 05:26:25.710 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D4 as result already exists
2022-08-06 05:26:25.711 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D5 as result already exists
2022-08-06 05:26:25.711 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D6 as result already exists
2022-08-06 05:26:25.711 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D7 as result already exists
2022-08-06 05:26:25.711 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.711 | DEBUG    | __main__:run:370 - Skipping benchmark 11:C0 as result already exists
2022-08-06 05:26:25.711 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 05:26:25.711 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A0 as result already exists
2022-08-06 05:26:25.711 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A1 as result already exists
2022-08-06 05:26:25.711 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A2 as result already exists
2022-08-06 05:26:25.711 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A3 as result already exists
2022-08-06 05:26:25.712 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 05:26:25.712 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E0 as result already exists
2022-08-06 05:26:25.712 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E1 as result already exists
2022-08-06 05:26:25.712 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E2 as result already exists
2022-08-06 05:26:25.712 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 05:26:25.712 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B0 as result already exists
2022-08-06 05:26:25.712 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B1 as result already exists
2022-08-06 05:26:25.712 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B2 as result already exists
2022-08-06 05:26:25.712 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B3 as result already exists
2022-08-06 05:26:25.712 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B4 as result already exists
2022-08-06 05:26:25.713 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B5 as result already exists
2022-08-06 05:26:25.713 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B6 as result already exists
2022-08-06 05:26:25.713 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B7 as result already exists
2022-08-06 05:26:25.713 | DEBUG    | __main__:run:356 - Running benchmark 12
2022-08-06 05:26:25.713 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:26:25.713 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 05:26:25.713 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D0 as result already exists
2022-08-06 05:26:25.713 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D1 as result already exists
2022-08-06 05:26:25.713 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D2 as result already exists
2022-08-06 05:26:25.714 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D3 as result already exists
2022-08-06 05:26:25.714 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.714 | DEBUG    | __main__:run:370 - Skipping benchmark 12:B0 as result already exists
2022-08-06 05:26:25.714 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 05:26:25.714 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C0 as result already exists
2022-08-06 05:26:25.714 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C1 as result already exists
2022-08-06 05:26:25.714 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C2 as result already exists
2022-08-06 05:26:25.714 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C3 as result already exists
2022-08-06 05:26:25.714 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C4 as result already exists
2022-08-06 05:26:25.714 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 05:26:25.715 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A0 as result already exists
2022-08-06 05:26:25.715 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A1 as result already exists
2022-08-06 05:26:25.715 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A2 as result already exists
2022-08-06 05:26:25.715 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A3 as result already exists
2022-08-06 05:26:25.715 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A4 as result already exists
2022-08-06 05:26:25.715 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A5 as result already exists
2022-08-06 05:26:25.715 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A6 as result already exists
2022-08-06 05:26:25.715 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A7 as result already exists
2022-08-06 05:26:25.715 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 05:26:25.715 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E0 as result already exists
2022-08-06 05:26:25.716 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E1 as result already exists
2022-08-06 05:26:25.716 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E2 as result already exists
2022-08-06 05:26:25.716 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E3 as result already exists
2022-08-06 05:26:25.716 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E4 as result already exists
2022-08-06 05:26:25.716 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E5 as result already exists
2022-08-06 05:26:25.716 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E6 as result already exists
2022-08-06 05:26:25.716 | DEBUG    | __main__:run:356 - Running benchmark 13
2022-08-06 05:26:25.716 | DEBUG    | __main__:run:357 - Number of Sets: 2
2022-08-06 05:26:25.716 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 05:26:25.716 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B0 as result already exists
2022-08-06 05:26:25.717 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B1 as result already exists
2022-08-06 05:26:25.717 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B2 as result already exists
2022-08-06 05:26:25.717 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:25.717 | DEBUG    | __main__:run:370 - Skipping benchmark 13:A0 as result already exists
2022-08-06 05:26:25.717 | DEBUG    | __main__:run:356 - Running benchmark 14
2022-08-06 05:26:25.717 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:26:25.717 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 05:26:25.717 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D0 as result already exists
2022-08-06 05:26:25.717 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D1 as result already exists
2022-08-06 05:26:25.718 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D2 as result already exists
2022-08-06 05:26:25.718 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D3 as result already exists
2022-08-06 05:26:25.718 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D4 as result already exists
2022-08-06 05:26:25.718 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D5 as result already exists
2022-08-06 05:26:25.718 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D6 as result already exists
2022-08-06 05:26:25.718 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D7 as result already exists
2022-08-06 05:26:25.718 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D8 as result already exists
2022-08-06 05:26:25.718 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D9 as result already exists
2022-08-06 05:26:25.718 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-06 05:26:25.718 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C0 as result already exists
2022-08-06 05:26:25.719 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C1 as result already exists
2022-08-06 05:26:25.719 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C2 as result already exists
2022-08-06 05:26:25.719 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C3 as result already exists
2022-08-06 05:26:25.719 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C4 as result already exists
2022-08-06 05:26:25.719 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C5 as result already exists
2022-08-06 05:26:25.719 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C6 as result already exists
2022-08-06 05:26:25.719 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C7 as result already exists
2022-08-06 05:26:25.719 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C8 as result already exists
2022-08-06 05:26:25.719 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 05:26:25.719 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A0 as result already exists
2022-08-06 05:26:25.720 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A1 as result already exists
2022-08-06 05:26:25.720 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A2 as result already exists
2022-08-06 05:26:25.720 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A3 as result already exists
2022-08-06 05:26:25.720 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A4 as result already exists
2022-08-06 05:26:25.720 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-06 05:26:25.720 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E0 as result already exists
2022-08-06 05:26:25.720 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E1 as result already exists
2022-08-06 05:26:25.720 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E2 as result already exists
2022-08-06 05:26:25.720 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E3 as result already exists
2022-08-06 05:26:25.720 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E4 as result already exists
2022-08-06 05:26:25.721 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E5 as result already exists
2022-08-06 05:26:25.721 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E6 as result already exists
2022-08-06 05:26:25.721 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E7 as result already exists
2022-08-06 05:26:25.721 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E8 as result already exists
2022-08-06 05:26:25.721 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E9 as result already exists
2022-08-06 05:26:25.721 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E10 as result already exists
2022-08-06 05:26:25.721 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E11 as result already exists
2022-08-06 05:26:25.721 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E12 as result already exists
2022-08-06 05:26:25.721 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:26:25.721 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B0 as result already exists
2022-08-06 05:26:25.722 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B1 as result already exists
2022-08-06 05:26:25.722 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B2 as result already exists
2022-08-06 05:26:25.722 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B3 as result already exists
2022-08-06 05:26:25.722 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B4 as result already exists
2022-08-06 05:26:25.722 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B5 as result already exists
2022-08-06 05:26:25.722 | DEBUG    | __main__:run:356 - Running benchmark 15
2022-08-06 05:26:25.722 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:26:25.722 | DEBUG    | __main__:run:363 - Number of queries: 18
2022-08-06 05:26:25.722 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D0 as result already exists
2022-08-06 05:26:25.722 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D1 as result already exists
2022-08-06 05:26:25.723 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D2 as result already exists
2022-08-06 05:26:25.723 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D3 as result already exists
2022-08-06 05:26:25.723 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D4 as result already exists
2022-08-06 05:26:25.723 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D5 as result already exists
2022-08-06 05:26:25.723 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D6 as result already exists
2022-08-06 05:26:25.723 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D7 as result already exists
2022-08-06 05:26:25.723 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D8 as result already exists
2022-08-06 05:26:25.723 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D9 as result already exists
2022-08-06 05:26:25.723 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D10 as result already exists
2022-08-06 05:26:25.724 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D11 as result already exists
2022-08-06 05:26:25.724 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D12 as result already exists
2022-08-06 05:26:25.724 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D13 as result already exists
2022-08-06 05:26:25.724 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D14 as result already exists
2022-08-06 05:26:25.724 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D15 as result already exists
2022-08-06 05:26:25.724 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D16 as result already exists
2022-08-06 05:26:25.724 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D17 as result already exists
2022-08-06 05:26:25.724 | DEBUG    | __main__:run:363 - Number of queries: 22
2022-08-06 05:26:25.724 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B0 as result already exists
2022-08-06 05:26:25.724 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B1 as result already exists
2022-08-06 05:26:25.725 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B2 as result already exists
2022-08-06 05:26:25.725 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B3 as result already exists
2022-08-06 05:26:25.725 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B4 as result already exists
2022-08-06 05:26:25.725 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B5 as result already exists
2022-08-06 05:26:25.725 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B6 as result already exists
2022-08-06 05:26:25.725 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B7 as result already exists
2022-08-06 05:26:25.725 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B8 as result already exists
2022-08-06 05:26:25.725 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B9 as result already exists
2022-08-06 05:26:25.725 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B10 as result already exists
2022-08-06 05:26:25.725 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B11 as result already exists
2022-08-06 05:26:25.726 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B12 as result already exists
2022-08-06 05:26:25.726 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B13 as result already exists
2022-08-06 05:26:25.726 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B14 as result already exists
2022-08-06 05:26:25.726 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B15 as result already exists
2022-08-06 05:26:25.726 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B16 as result already exists
2022-08-06 05:26:25.726 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B17 as result already exists
2022-08-06 05:26:26.207 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B18 as result already exists
2022-08-06 05:26:26.207 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B19 as result already exists
2022-08-06 05:26:26.208 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B20 as result already exists
2022-08-06 05:26:26.208 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B21 as result already exists
2022-08-06 05:26:26.208 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 05:26:26.208 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C0 as result already exists
2022-08-06 05:26:26.208 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C1 as result already exists
2022-08-06 05:26:26.208 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C2 as result already exists
2022-08-06 05:26:26.209 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C3 as result already exists
2022-08-06 05:26:26.209 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C4 as result already exists
2022-08-06 05:26:26.209 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 05:26:26.209 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A0 as result already exists
2022-08-06 05:26:26.209 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A1 as result already exists
2022-08-06 05:26:26.209 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A2 as result already exists
2022-08-06 05:26:26.209 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A3 as result already exists
2022-08-06 05:26:26.210 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A4 as result already exists
2022-08-06 05:26:26.210 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A5 as result already exists
2022-08-06 05:26:26.210 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A6 as result already exists
2022-08-06 05:26:26.210 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A7 as result already exists
2022-08-06 05:26:26.210 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 05:26:26.210 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E0 as result already exists
2022-08-06 05:26:26.210 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E1 as result already exists
2022-08-06 05:26:26.210 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E2 as result already exists
2022-08-06 05:26:26.211 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E3 as result already exists
2022-08-06 05:26:26.211 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E4 as result already exists
2022-08-06 05:26:26.211 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E5 as result already exists
2022-08-06 05:26:26.211 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E6 as result already exists
2022-08-06 05:26:26.211 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E7 as result already exists
2022-08-06 05:26:26.211 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E8 as result already exists
2022-08-06 05:26:26.211 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E9 as result already exists
2022-08-06 05:26:26.211 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E10 as result already exists
2022-08-06 05:26:26.211 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E11 as result already exists
2022-08-06 05:26:26.211 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E12 as result already exists
2022-08-06 05:26:26.212 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E13 as result already exists
2022-08-06 05:26:26.212 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E14 as result already exists
2022-08-06 05:26:26.212 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E15 as result already exists
2022-08-06 05:26:26.212 | DEBUG    | __main__:run:356 - Running benchmark 16
2022-08-06 05:26:26.212 | DEBUG    | __main__:run:357 - Number of Sets: 4
2022-08-06 05:26:26.212 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 05:26:26.212 | DEBUG    | __main__:run:370 - Skipping benchmark 16:B0 as result already exists
2022-08-06 05:26:26.212 | DEBUG    | __main__:run:370 - Skipping benchmark 16:B1 as result already exists
2022-08-06 05:26:26.212 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:26.213 | DEBUG    | __main__:run:370 - Skipping benchmark 16:A0 as result already exists
2022-08-06 05:26:26.213 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:26:26.213 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E0 as result already exists
2022-08-06 05:26:26.213 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E1 as result already exists
2022-08-06 05:26:26.213 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E2 as result already exists
2022-08-06 05:26:26.213 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E3 as result already exists
2022-08-06 05:26:26.213 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E4 as result already exists
2022-08-06 05:26:26.213 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E5 as result already exists
2022-08-06 05:26:26.213 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 05:26:26.214 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D0 as result already exists
2022-08-06 05:26:26.214 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D1 as result already exists
2022-08-06 05:26:26.214 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D2 as result already exists
2022-08-06 05:26:26.214 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D3 as result already exists
2022-08-06 05:26:26.214 | DEBUG    | __main__:run:356 - Running benchmark 17
2022-08-06 05:26:26.214 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:26:26.214 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 05:26:26.214 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B0 as result already exists
2022-08-06 05:26:26.214 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B1 as result already exists
2022-08-06 05:26:26.215 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B2 as result already exists
2022-08-06 05:26:26.215 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B3 as result already exists
2022-08-06 05:26:26.215 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B4 as result already exists
2022-08-06 05:26:26.215 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B5 as result already exists
2022-08-06 05:26:26.215 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B6 as result already exists
2022-08-06 05:26:26.215 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B7 as result already exists
2022-08-06 05:26:26.215 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-06 05:26:26.215 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C0 as result already exists
2022-08-06 05:26:26.216 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C1 as result already exists
2022-08-06 05:26:26.216 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C2 as result already exists
2022-08-06 05:26:26.216 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C3 as result already exists
2022-08-06 05:26:26.216 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C4 as result already exists
2022-08-06 05:26:26.216 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C5 as result already exists
2022-08-06 05:26:26.216 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C6 as result already exists
2022-08-06 05:26:26.216 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C7 as result already exists
2022-08-06 05:26:26.216 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C8 as result already exists
2022-08-06 05:26:26.216 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C9 as result already exists
2022-08-06 05:26:26.217 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C10 as result already exists
2022-08-06 05:26:26.217 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C11 as result already exists
2022-08-06 05:26:26.217 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C12 as result already exists
2022-08-06 05:26:26.217 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 05:26:26.217 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A0 as result already exists
2022-08-06 05:26:26.217 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A1 as result already exists
2022-08-06 05:26:26.217 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A2 as result already exists
2022-08-06 05:26:26.217 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A3 as result already exists
2022-08-06 05:26:26.218 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A4 as result already exists
2022-08-06 05:26:26.218 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A5 as result already exists
2022-08-06 05:26:26.218 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A6 as result already exists
2022-08-06 05:26:26.218 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-06 05:26:26.218 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D0 as result already exists
2022-08-06 05:26:26.218 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D1 as result already exists
2022-08-06 05:26:26.218 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D2 as result already exists
2022-08-06 05:26:26.218 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D3 as result already exists
2022-08-06 05:26:26.218 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D4 as result already exists
2022-08-06 05:26:26.219 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D5 as result already exists
2022-08-06 05:26:26.219 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D6 as result already exists
2022-08-06 05:26:26.219 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D7 as result already exists
2022-08-06 05:26:26.219 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D8 as result already exists
2022-08-06 05:26:26.219 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D9 as result already exists
2022-08-06 05:26:26.219 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D10 as result already exists
2022-08-06 05:26:26.219 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D11 as result already exists
2022-08-06 05:26:26.219 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D12 as result already exists
2022-08-06 05:26:26.219 | DEBUG    | __main__:run:363 - Number of queries: 25
2022-08-06 05:26:26.220 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E0 as result already exists
2022-08-06 05:26:26.220 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E1 as result already exists
2022-08-06 05:26:26.220 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E2 as result already exists
2022-08-06 05:26:26.220 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E3 as result already exists
2022-08-06 05:26:26.220 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E4 as result already exists
2022-08-06 05:26:26.220 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E5 as result already exists
2022-08-06 05:26:26.220 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E6 as result already exists
2022-08-06 05:26:26.220 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E7 as result already exists
2022-08-06 05:26:26.221 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E8 as result already exists
2022-08-06 05:26:26.221 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E9 as result already exists
2022-08-06 05:26:26.221 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E10 as result already exists
2022-08-06 05:26:26.221 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E11 as result already exists
2022-08-06 05:26:26.221 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E12 as result already exists
2022-08-06 05:26:26.221 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E13 as result already exists
2022-08-06 05:26:26.221 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E14 as result already exists
2022-08-06 05:26:26.221 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E15 as result already exists
2022-08-06 05:26:26.221 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E16 as result already exists
2022-08-06 05:26:26.222 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E17 as result already exists
2022-08-06 05:26:26.222 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E18 as result already exists
2022-08-06 05:26:26.222 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E19 as result already exists
2022-08-06 05:26:26.222 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E20 as result already exists
2022-08-06 05:26:26.222 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E21 as result already exists
2022-08-06 05:26:26.222 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E22 as result already exists
2022-08-06 05:26:26.222 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E23 as result already exists
2022-08-06 05:26:26.222 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E24 as result already exists
2022-08-06 05:26:26.223 | DEBUG    | __main__:run:356 - Running benchmark 18
2022-08-06 05:26:26.223 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-06 05:26:26.223 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 05:26:26.223 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A0 as result already exists
2022-08-06 05:26:26.223 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A1 as result already exists
2022-08-06 05:26:26.223 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A2 as result already exists
2022-08-06 05:26:26.223 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A3 as result already exists
2022-08-06 05:26:26.223 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A4 as result already exists
2022-08-06 05:26:26.223 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A5 as result already exists
2022-08-06 05:26:26.224 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 05:26:26.224 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D0 as result already exists
2022-08-06 05:26:26.224 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D1 as result already exists
2022-08-06 05:26:26.224 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D2 as result already exists
2022-08-06 05:26:26.224 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D3 as result already exists
2022-08-06 05:26:26.224 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D4 as result already exists
2022-08-06 05:26:26.224 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D5 as result already exists
2022-08-06 05:26:26.224 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D6 as result already exists
2022-08-06 05:26:26.225 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D7 as result already exists
2022-08-06 05:26:26.225 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D8 as result already exists
2022-08-06 05:26:26.225 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D9 as result already exists
2022-08-06 05:26:26.225 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D10 as result already exists
2022-08-06 05:26:26.225 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D11 as result already exists
2022-08-06 05:26:26.225 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D12 as result already exists
2022-08-06 05:26:26.225 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D13 as result already exists
2022-08-06 05:26:26.225 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D14 as result already exists
2022-08-06 05:26:26.225 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D15 as result already exists
2022-08-06 05:26:26.226 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 05:26:26.226 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E0 as result already exists
2022-08-06 05:26:26.226 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E1 as result already exists
2022-08-06 05:26:26.226 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E2 as result already exists
2022-08-06 05:26:26.226 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E3 as result already exists
2022-08-06 05:26:26.226 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E4 as result already exists
2022-08-06 05:26:26.226 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E5 as result already exists
2022-08-06 05:26:26.226 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E6 as result already exists
2022-08-06 05:26:26.227 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E7 as result already exists
2022-08-06 05:26:26.227 | DEBUG    | __main__:run:356 - Running benchmark 19
2022-08-06 05:26:26.227 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:26:26.227 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 05:26:26.227 | DEBUG    | __main__:run:370 - Skipping benchmark 19:B0 as result already exists
2022-08-06 05:26:26.227 | DEBUG    | __main__:run:370 - Skipping benchmark 19:B1 as result already exists
2022-08-06 05:26:26.227 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 05:26:26.227 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C0 as result already exists
2022-08-06 05:26:26.227 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C1 as result already exists
2022-08-06 05:26:26.228 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C2 as result already exists
2022-08-06 05:26:26.228 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C3 as result already exists
2022-08-06 05:26:26.228 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C4 as result already exists
2022-08-06 05:26:26.228 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 05:26:26.228 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D0 as result already exists
2022-08-06 05:26:26.228 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D1 as result already exists
2022-08-06 05:26:26.228 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D2 as result already exists
2022-08-06 05:26:26.228 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D3 as result already exists
2022-08-06 05:26:26.229 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D4 as result already exists
2022-08-06 05:26:26.229 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D5 as result already exists
2022-08-06 05:26:26.229 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D6 as result already exists
2022-08-06 05:26:26.229 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D7 as result already exists
2022-08-06 05:26:26.229 | DEBUG    | __main__:run:363 - Number of queries: 18
2022-08-06 05:26:26.229 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A0 as result already exists
2022-08-06 05:26:26.229 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A1 as result already exists
2022-08-06 05:26:26.229 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A2 as result already exists
2022-08-06 05:26:26.229 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A3 as result already exists
2022-08-06 05:26:26.230 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A4 as result already exists
2022-08-06 05:26:26.230 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A5 as result already exists
2022-08-06 05:26:26.230 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A6 as result already exists
2022-08-06 05:26:26.230 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A7 as result already exists
2022-08-06 05:26:26.230 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A8 as result already exists
2022-08-06 05:26:26.230 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A9 as result already exists
2022-08-06 05:26:26.230 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A10 as result already exists
2022-08-06 05:26:26.230 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A11 as result already exists
2022-08-06 05:26:26.230 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A12 as result already exists
2022-08-06 05:26:26.231 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A13 as result already exists
2022-08-06 05:26:26.231 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A14 as result already exists
2022-08-06 05:26:26.231 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A15 as result already exists
2022-08-06 05:26:26.231 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A16 as result already exists
2022-08-06 05:26:26.231 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A17 as result already exists
2022-08-06 05:26:26.231 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 05:26:26.231 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E0 as result already exists
2022-08-06 05:26:26.231 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E1 as result already exists
2022-08-06 05:26:26.232 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E2 as result already exists
2022-08-06 05:26:26.232 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E3 as result already exists
2022-08-06 05:26:26.232 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E4 as result already exists
2022-08-06 05:26:26.232 | DEBUG    | __main__:run:356 - Running benchmark 20
2022-08-06 05:26:26.232 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 05:26:26.232 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 05:26:26.232 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B0 as result already exists
2022-08-06 05:26:26.232 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B1 as result already exists
2022-08-06 05:26:26.232 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B2 as result already exists
2022-08-06 05:26:26.233 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B3 as result already exists
2022-08-06 05:26:26.233 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 05:26:26.233 | DEBUG    | __main__:run:370 - Skipping benchmark 20:C0 as result already exists
2022-08-06 05:26:26.233 | DEBUG    | __main__:run:363 - Number of queries: 17
2022-08-06 05:26:26.233 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D0 as result already exists
2022-08-06 05:26:26.233 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D1 as result already exists
2022-08-06 05:26:26.233 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D2 as result already exists
2022-08-06 05:26:26.233 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D3 as result already exists
2022-08-06 05:26:26.234 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D4 as result already exists
2022-08-06 05:26:26.234 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D5 as result already exists
2022-08-06 05:26:26.234 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D6 as result already exists
2022-08-06 05:26:26.234 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D7 as result already exists
2022-08-06 05:26:26.234 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D8 as result already exists
2022-08-06 05:26:26.234 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D9 as result already exists
2022-08-06 05:26:26.234 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D10 as result already exists
2022-08-06 05:26:26.234 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D11 as result already exists
2022-08-06 05:26:26.234 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D12 as result already exists
2022-08-06 05:26:26.235 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D13 as result already exists
2022-08-06 05:26:26.235 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D14 as result already exists
2022-08-06 05:26:26.235 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D15 as result already exists
2022-08-06 05:26:26.235 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D16 as result already exists
2022-08-06 05:26:26.235 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 05:26:26.235 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A0 as result already exists
2022-08-06 05:26:26.235 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A1 as result already exists
2022-08-06 05:26:26.235 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A2 as result already exists
2022-08-06 05:26:26.236 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A3 as result already exists
2022-08-06 05:26:26.236 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A4 as result already exists
2022-08-06 05:26:26.236 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 05:26:26.236 | DEBUG    | __main__:run:370 - Skipping benchmark 20:E0 as result already exists
2022-08-06 05:26:26.236 | DEBUG    | __main__:run:370 - Skipping benchmark 20:E1 as result already exists
2022-08-06 06:38:57.137 | DEBUG    | __main__:run:345 - Running benchmark set PandasEval1
2022-08-06 06:38:57.137 | DEBUG    | __main__:run:346 - Found 68 benchmarks in PandasEval1
2022-08-06 06:38:57.137 | DEBUG    | __main__:run:356 - Running benchmark 0
2022-08-06 06:38:57.137 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.137 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.137 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A0 as result already exists
2022-08-06 06:38:57.138 | DEBUG    | __main__:run:356 - Running benchmark 1
2022-08-06 06:38:57.138 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.138 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.138 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A0 as result already exists
2022-08-06 06:38:57.138 | DEBUG    | __main__:run:356 - Running benchmark 2
2022-08-06 06:38:57.138 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.138 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.139 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A0 as result already exists
2022-08-06 06:38:57.139 | DEBUG    | __main__:run:356 - Running benchmark 3
2022-08-06 06:38:57.139 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.139 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.139 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A0 as result already exists
2022-08-06 06:38:57.139 | DEBUG    | __main__:run:356 - Running benchmark 4
2022-08-06 06:38:57.139 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.140 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.140 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A0 as result already exists
2022-08-06 06:38:57.140 | DEBUG    | __main__:run:356 - Running benchmark 5
2022-08-06 06:38:57.140 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.140 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.140 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A0 as result already exists
2022-08-06 06:38:57.140 | DEBUG    | __main__:run:356 - Running benchmark 6
2022-08-06 06:38:57.140 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.140 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.141 | DEBUG    | __main__:run:370 - Skipping benchmark 6:A0 as result already exists
2022-08-06 06:38:57.141 | DEBUG    | __main__:run:356 - Running benchmark 7
2022-08-06 06:38:57.141 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.141 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.141 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A0 as result already exists
2022-08-06 06:38:57.141 | DEBUG    | __main__:run:356 - Running benchmark 8
2022-08-06 06:38:57.141 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.141 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.142 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A0 as result already exists
2022-08-06 06:38:57.142 | DEBUG    | __main__:run:356 - Running benchmark 9
2022-08-06 06:38:57.142 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.142 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.142 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A0 as result already exists
2022-08-06 06:38:57.142 | DEBUG    | __main__:run:356 - Running benchmark 10
2022-08-06 06:38:57.143 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.143 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.143 | DEBUG    | __main__:run:370 - Skipping benchmark 10:A0 as result already exists
2022-08-06 06:38:57.143 | DEBUG    | __main__:run:356 - Running benchmark 11
2022-08-06 06:38:57.143 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.143 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.143 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A0 as result already exists
2022-08-06 06:38:57.143 | DEBUG    | __main__:run:356 - Running benchmark 12
2022-08-06 06:38:57.143 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.144 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.144 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A0 as result already exists
2022-08-06 06:38:57.144 | DEBUG    | __main__:run:356 - Running benchmark 13
2022-08-06 06:38:57.144 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.144 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.144 | DEBUG    | __main__:run:370 - Skipping benchmark 13:A0 as result already exists
2022-08-06 06:38:57.144 | DEBUG    | __main__:run:356 - Running benchmark 14
2022-08-06 06:38:57.144 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.145 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.145 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A0 as result already exists
2022-08-06 06:38:57.145 | DEBUG    | __main__:run:356 - Running benchmark 15
2022-08-06 06:38:57.145 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.145 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.145 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A0 as result already exists
2022-08-06 06:38:57.145 | DEBUG    | __main__:run:356 - Running benchmark 16
2022-08-06 06:38:57.146 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.146 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.146 | DEBUG    | __main__:run:370 - Skipping benchmark 16:A0 as result already exists
2022-08-06 06:38:57.146 | DEBUG    | __main__:run:356 - Running benchmark 17
2022-08-06 06:38:57.146 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.146 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.146 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A0 as result already exists
2022-08-06 06:38:57.147 | DEBUG    | __main__:run:356 - Running benchmark 18
2022-08-06 06:38:57.147 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.147 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.147 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A0 as result already exists
2022-08-06 06:38:57.147 | DEBUG    | __main__:run:356 - Running benchmark 19
2022-08-06 06:38:57.147 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.147 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.148 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A0 as result already exists
2022-08-06 06:38:57.148 | DEBUG    | __main__:run:356 - Running benchmark 20
2022-08-06 06:38:57.148 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.148 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.148 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A0 as result already exists
2022-08-06 06:38:57.148 | DEBUG    | __main__:run:356 - Running benchmark 21
2022-08-06 06:38:57.148 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.148 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.149 | DEBUG    | __main__:run:370 - Skipping benchmark 21:A0 as result already exists
2022-08-06 06:38:57.149 | DEBUG    | __main__:run:356 - Running benchmark 22
2022-08-06 06:38:57.149 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.149 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.149 | DEBUG    | __main__:run:370 - Skipping benchmark 22:A0 as result already exists
2022-08-06 06:38:57.149 | DEBUG    | __main__:run:356 - Running benchmark 23
2022-08-06 06:38:57.149 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.150 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.150 | DEBUG    | __main__:run:370 - Skipping benchmark 23:A0 as result already exists
2022-08-06 06:38:57.150 | DEBUG    | __main__:run:356 - Running benchmark 24
2022-08-06 06:38:57.150 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.150 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.150 | DEBUG    | __main__:run:370 - Skipping benchmark 24:A0 as result already exists
2022-08-06 06:38:57.151 | DEBUG    | __main__:run:356 - Running benchmark 25
2022-08-06 06:38:57.151 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.151 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.151 | DEBUG    | __main__:run:370 - Skipping benchmark 25:A0 as result already exists
2022-08-06 06:38:57.151 | DEBUG    | __main__:run:356 - Running benchmark 26
2022-08-06 06:38:57.151 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.151 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.152 | DEBUG    | __main__:run:370 - Skipping benchmark 26:A0 as result already exists
2022-08-06 06:38:57.152 | DEBUG    | __main__:run:356 - Running benchmark 27
2022-08-06 06:38:57.152 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.152 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.152 | DEBUG    | __main__:run:370 - Skipping benchmark 27:A0 as result already exists
2022-08-06 06:38:57.152 | DEBUG    | __main__:run:356 - Running benchmark 28
2022-08-06 06:38:57.152 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.152 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.153 | DEBUG    | __main__:run:370 - Skipping benchmark 28:A0 as result already exists
2022-08-06 06:38:57.153 | DEBUG    | __main__:run:356 - Running benchmark 29
2022-08-06 06:38:57.153 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.153 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.153 | DEBUG    | __main__:run:370 - Skipping benchmark 29:A0 as result already exists
2022-08-06 06:38:57.153 | DEBUG    | __main__:run:356 - Running benchmark 30
2022-08-06 06:38:57.153 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.153 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.154 | DEBUG    | __main__:run:370 - Skipping benchmark 30:A0 as result already exists
2022-08-06 06:38:57.154 | DEBUG    | __main__:run:356 - Running benchmark 31
2022-08-06 06:38:57.154 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.154 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.154 | DEBUG    | __main__:run:370 - Skipping benchmark 31:A0 as result already exists
2022-08-06 06:38:57.154 | DEBUG    | __main__:run:356 - Running benchmark 32
2022-08-06 06:38:57.154 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.155 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.155 | DEBUG    | __main__:run:370 - Skipping benchmark 32:A0 as result already exists
2022-08-06 06:38:57.155 | DEBUG    | __main__:run:356 - Running benchmark 33
2022-08-06 06:38:57.155 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.155 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.155 | DEBUG    | __main__:run:370 - Skipping benchmark 33:A0 as result already exists
2022-08-06 06:38:57.155 | DEBUG    | __main__:run:356 - Running benchmark 34
2022-08-06 06:38:57.156 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.156 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.156 | DEBUG    | __main__:run:370 - Skipping benchmark 34:A0 as result already exists
2022-08-06 06:38:57.156 | DEBUG    | __main__:run:356 - Running benchmark 35
2022-08-06 06:38:57.156 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.156 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.156 | DEBUG    | __main__:run:370 - Skipping benchmark 35:A0 as result already exists
2022-08-06 06:38:57.156 | DEBUG    | __main__:run:356 - Running benchmark 36
2022-08-06 06:38:57.156 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.157 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.157 | DEBUG    | __main__:run:370 - Skipping benchmark 36:A0 as result already exists
2022-08-06 06:38:57.157 | DEBUG    | __main__:run:356 - Running benchmark 37
2022-08-06 06:38:57.157 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.157 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.157 | DEBUG    | __main__:run:370 - Skipping benchmark 37:A0 as result already exists
2022-08-06 06:38:57.157 | DEBUG    | __main__:run:356 - Running benchmark 38
2022-08-06 06:38:57.157 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.158 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.158 | DEBUG    | __main__:run:370 - Skipping benchmark 38:A0 as result already exists
2022-08-06 06:38:57.158 | DEBUG    | __main__:run:356 - Running benchmark 39
2022-08-06 06:38:57.158 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.158 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.158 | DEBUG    | __main__:run:370 - Skipping benchmark 39:A0 as result already exists
2022-08-06 06:38:57.158 | DEBUG    | __main__:run:356 - Running benchmark 40
2022-08-06 06:38:57.158 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.158 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.159 | DEBUG    | __main__:run:370 - Skipping benchmark 40:A0 as result already exists
2022-08-06 06:38:57.159 | DEBUG    | __main__:run:356 - Running benchmark 41
2022-08-06 06:38:57.159 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.159 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.159 | DEBUG    | __main__:run:370 - Skipping benchmark 41:A0 as result already exists
2022-08-06 06:38:57.159 | DEBUG    | __main__:run:356 - Running benchmark 42
2022-08-06 06:38:57.159 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.159 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.159 | DEBUG    | __main__:run:370 - Skipping benchmark 42:A0 as result already exists
2022-08-06 06:38:57.160 | DEBUG    | __main__:run:356 - Running benchmark 43
2022-08-06 06:38:57.160 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.160 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.160 | DEBUG    | __main__:run:370 - Skipping benchmark 43:A0 as result already exists
2022-08-06 06:38:57.160 | DEBUG    | __main__:run:356 - Running benchmark 44
2022-08-06 06:38:57.160 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.160 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.160 | DEBUG    | __main__:run:370 - Skipping benchmark 44:A0 as result already exists
2022-08-06 06:38:57.161 | DEBUG    | __main__:run:356 - Running benchmark 45
2022-08-06 06:38:57.161 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.161 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.161 | DEBUG    | __main__:run:370 - Skipping benchmark 45:A0 as result already exists
2022-08-06 06:38:57.161 | DEBUG    | __main__:run:356 - Running benchmark 46
2022-08-06 06:38:57.161 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.161 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.161 | DEBUG    | __main__:run:370 - Skipping benchmark 46:A0 as result already exists
2022-08-06 06:38:57.161 | DEBUG    | __main__:run:356 - Running benchmark 47
2022-08-06 06:38:57.162 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.162 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.162 | DEBUG    | __main__:run:370 - Skipping benchmark 47:A0 as result already exists
2022-08-06 06:38:57.162 | DEBUG    | __main__:run:356 - Running benchmark 48
2022-08-06 06:38:57.162 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.162 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.162 | DEBUG    | __main__:run:370 - Skipping benchmark 48:A0 as result already exists
2022-08-06 06:38:57.162 | DEBUG    | __main__:run:356 - Running benchmark 49
2022-08-06 06:38:57.163 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.163 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.163 | DEBUG    | __main__:run:370 - Skipping benchmark 49:A0 as result already exists
2022-08-06 06:38:57.163 | DEBUG    | __main__:run:356 - Running benchmark 50
2022-08-06 06:38:57.163 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.163 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.163 | DEBUG    | __main__:run:370 - Skipping benchmark 50:A0 as result already exists
2022-08-06 06:38:57.163 | DEBUG    | __main__:run:356 - Running benchmark 51
2022-08-06 06:38:57.164 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.164 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.164 | DEBUG    | __main__:run:370 - Skipping benchmark 51:A0 as result already exists
2022-08-06 06:38:57.164 | DEBUG    | __main__:run:356 - Running benchmark 52
2022-08-06 06:38:57.164 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.164 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.164 | DEBUG    | __main__:run:370 - Skipping benchmark 52:A0 as result already exists
2022-08-06 06:38:57.164 | DEBUG    | __main__:run:356 - Running benchmark 53
2022-08-06 06:38:57.165 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.165 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.165 | DEBUG    | __main__:run:370 - Skipping benchmark 53:A0 as result already exists
2022-08-06 06:38:57.165 | DEBUG    | __main__:run:356 - Running benchmark 54
2022-08-06 06:38:57.165 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.165 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.165 | DEBUG    | __main__:run:370 - Skipping benchmark 54:A0 as result already exists
2022-08-06 06:38:57.165 | DEBUG    | __main__:run:356 - Running benchmark 55
2022-08-06 06:38:57.165 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.166 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.166 | DEBUG    | __main__:run:370 - Skipping benchmark 55:A0 as result already exists
2022-08-06 06:38:57.166 | DEBUG    | __main__:run:356 - Running benchmark 56
2022-08-06 06:38:57.166 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.166 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.166 | DEBUG    | __main__:run:370 - Skipping benchmark 56:A0 as result already exists
2022-08-06 06:38:57.166 | DEBUG    | __main__:run:356 - Running benchmark 57
2022-08-06 06:38:57.166 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.166 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.167 | DEBUG    | __main__:run:370 - Skipping benchmark 57:A0 as result already exists
2022-08-06 06:38:57.167 | DEBUG    | __main__:run:356 - Running benchmark 58
2022-08-06 06:38:57.167 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.167 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.167 | DEBUG    | __main__:run:370 - Skipping benchmark 58:A0 as result already exists
2022-08-06 06:38:57.167 | DEBUG    | __main__:run:356 - Running benchmark 59
2022-08-06 06:38:57.167 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.167 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.167 | DEBUG    | __main__:run:370 - Skipping benchmark 59:A0 as result already exists
2022-08-06 06:38:57.167 | DEBUG    | __main__:run:356 - Running benchmark 60
2022-08-06 06:38:57.168 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.168 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.168 | DEBUG    | __main__:run:370 - Skipping benchmark 60:A0 as result already exists
2022-08-06 06:38:57.168 | DEBUG    | __main__:run:356 - Running benchmark 62
2022-08-06 06:38:57.168 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.168 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.168 | DEBUG    | __main__:run:370 - Skipping benchmark 62:A0 as result already exists
2022-08-06 06:38:57.168 | DEBUG    | __main__:run:356 - Running benchmark 63
2022-08-06 06:38:57.169 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.169 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.169 | DEBUG    | __main__:run:370 - Skipping benchmark 63:A0 as result already exists
2022-08-06 06:38:57.169 | DEBUG    | __main__:run:356 - Running benchmark 64
2022-08-06 06:38:57.169 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.169 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.169 | DEBUG    | __main__:run:370 - Skipping benchmark 64:A0 as result already exists
2022-08-06 06:38:57.169 | DEBUG    | __main__:run:356 - Running benchmark 65
2022-08-06 06:38:57.169 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.170 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.170 | DEBUG    | __main__:run:370 - Skipping benchmark 65:A0 as result already exists
2022-08-06 06:38:57.170 | DEBUG    | __main__:run:356 - Running benchmark 66
2022-08-06 06:38:57.170 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.170 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.170 | DEBUG    | __main__:run:370 - Skipping benchmark 66:A0 as result already exists
2022-08-06 06:38:57.170 | DEBUG    | __main__:run:356 - Running benchmark 67
2022-08-06 06:38:57.170 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:38:57.170 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.171 | DEBUG    | __main__:run:370 - Skipping benchmark 67:A0 as result already exists
2022-08-06 06:38:57.171 | DEBUG    | __main__:run:345 - Running benchmark set PandasEval2
2022-08-06 06:38:57.171 | DEBUG    | __main__:run:346 - Found 21 benchmarks in PandasEval2
2022-08-06 06:38:57.171 | DEBUG    | __main__:run:356 - Running benchmark 0
2022-08-06 06:38:57.171 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:38:57.171 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 06:38:57.171 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A0 as result already exists
2022-08-06 06:38:57.171 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A1 as result already exists
2022-08-06 06:38:57.171 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A2 as result already exists
2022-08-06 06:38:57.172 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 06:38:57.172 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D0 as result already exists
2022-08-06 06:38:57.172 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D1 as result already exists
2022-08-06 06:38:57.172 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D2 as result already exists
2022-08-06 06:38:57.172 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D3 as result already exists
2022-08-06 06:38:57.172 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D4 as result already exists
2022-08-06 06:38:57.172 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D5 as result already exists
2022-08-06 06:38:57.172 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D6 as result already exists
2022-08-06 06:38:57.172 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.173 | DEBUG    | __main__:run:370 - Skipping benchmark 0:B0 as result already exists
2022-08-06 06:38:57.173 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 06:38:57.173 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C0 as result already exists
2022-08-06 06:38:57.173 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C1 as result already exists
2022-08-06 06:38:57.173 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C2 as result already exists
2022-08-06 06:38:57.173 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 06:38:57.173 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E0 as result already exists
2022-08-06 06:38:57.173 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E1 as result already exists
2022-08-06 06:38:57.173 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E2 as result already exists
2022-08-06 06:38:57.174 | DEBUG    | __main__:run:356 - Running benchmark 1
2022-08-06 06:38:57.174 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:38:57.174 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 06:38:57.174 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A0 as result already exists
2022-08-06 06:38:57.174 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A1 as result already exists
2022-08-06 06:38:57.174 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A2 as result already exists
2022-08-06 06:38:57.174 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A3 as result already exists
2022-08-06 06:38:57.174 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 06:38:57.174 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D0 as result already exists
2022-08-06 06:38:57.174 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D1 as result already exists
2022-08-06 06:38:57.175 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D2 as result already exists
2022-08-06 06:38:57.175 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D3 as result already exists
2022-08-06 06:38:57.175 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D4 as result already exists
2022-08-06 06:38:57.175 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D5 as result already exists
2022-08-06 06:38:57.175 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D6 as result already exists
2022-08-06 06:38:57.175 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D7 as result already exists
2022-08-06 06:38:57.175 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 06:38:57.175 | DEBUG    | __main__:run:370 - Skipping benchmark 1:B0 as result already exists
2022-08-06 06:38:57.175 | DEBUG    | __main__:run:370 - Skipping benchmark 1:B1 as result already exists
2022-08-06 06:38:57.175 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:38:57.176 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C0 as result already exists
2022-08-06 06:38:57.176 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C1 as result already exists
2022-08-06 06:38:57.176 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C2 as result already exists
2022-08-06 06:38:57.176 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C3 as result already exists
2022-08-06 06:38:57.176 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C4 as result already exists
2022-08-06 06:38:57.176 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C5 as result already exists
2022-08-06 06:38:57.176 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 06:38:57.176 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E0 as result already exists
2022-08-06 06:38:57.176 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E1 as result already exists
2022-08-06 06:38:57.177 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E2 as result already exists
2022-08-06 06:38:57.177 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E3 as result already exists
2022-08-06 06:38:57.177 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E4 as result already exists
2022-08-06 06:38:57.177 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E5 as result already exists
2022-08-06 06:38:57.177 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E6 as result already exists
2022-08-06 06:38:57.177 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E7 as result already exists
2022-08-06 06:38:57.177 | DEBUG    | __main__:run:356 - Running benchmark 2
2022-08-06 06:38:57.177 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:38:57.177 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:38:57.177 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A0 as result already exists
2022-08-06 06:38:57.178 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A1 as result already exists
2022-08-06 06:38:57.178 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A2 as result already exists
2022-08-06 06:38:57.178 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A3 as result already exists
2022-08-06 06:38:57.178 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A4 as result already exists
2022-08-06 06:38:57.178 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A5 as result already exists
2022-08-06 06:38:57.178 | DEBUG    | __main__:run:363 - Number of queries: 12
2022-08-06 06:38:57.178 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D0 as result already exists
2022-08-06 06:38:57.178 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D1 as result already exists
2022-08-06 06:38:57.178 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D2 as result already exists
2022-08-06 06:38:57.179 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D3 as result already exists
2022-08-06 06:38:57.179 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D4 as result already exists
2022-08-06 06:38:57.179 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D5 as result already exists
2022-08-06 06:38:57.179 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D6 as result already exists
2022-08-06 06:38:57.179 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D7 as result already exists
2022-08-06 06:38:57.179 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D8 as result already exists
2022-08-06 06:38:57.179 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D9 as result already exists
2022-08-06 06:38:57.179 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D10 as result already exists
2022-08-06 06:38:57.179 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D11 as result already exists
2022-08-06 06:38:57.179 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 06:38:57.180 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B0 as result already exists
2022-08-06 06:38:57.180 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B1 as result already exists
2022-08-06 06:38:57.180 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B2 as result already exists
2022-08-06 06:38:57.180 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B3 as result already exists
2022-08-06 06:38:57.180 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B4 as result already exists
2022-08-06 06:38:57.180 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B5 as result already exists
2022-08-06 06:38:57.180 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B6 as result already exists
2022-08-06 06:38:57.180 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B7 as result already exists
2022-08-06 06:38:57.180 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B8 as result already exists
2022-08-06 06:38:57.181 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B9 as result already exists
2022-08-06 06:38:57.181 | DEBUG    | __main__:run:363 - Number of queries: 11
2022-08-06 06:38:57.181 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C0 as result already exists
2022-08-06 06:38:57.181 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C1 as result already exists
2022-08-06 06:38:57.181 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C2 as result already exists
2022-08-06 06:38:57.181 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C3 as result already exists
2022-08-06 06:38:57.181 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C4 as result already exists
2022-08-06 06:38:57.181 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C5 as result already exists
2022-08-06 06:38:57.181 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C6 as result already exists
2022-08-06 06:38:57.181 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C7 as result already exists
2022-08-06 06:38:57.182 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C8 as result already exists
2022-08-06 06:38:57.182 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C9 as result already exists
2022-08-06 06:38:57.182 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C10 as result already exists
2022-08-06 06:38:57.182 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 06:38:57.182 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E0 as result already exists
2022-08-06 06:38:57.182 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E1 as result already exists
2022-08-06 06:38:57.182 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E2 as result already exists
2022-08-06 06:38:57.182 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E3 as result already exists
2022-08-06 06:38:57.182 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E4 as result already exists
2022-08-06 06:38:57.183 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E5 as result already exists
2022-08-06 06:38:57.183 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E6 as result already exists
2022-08-06 06:38:57.183 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E7 as result already exists
2022-08-06 06:38:57.183 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E8 as result already exists
2022-08-06 06:38:57.183 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E9 as result already exists
2022-08-06 06:38:57.183 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E10 as result already exists
2022-08-06 06:38:57.183 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E11 as result already exists
2022-08-06 06:38:57.183 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E12 as result already exists
2022-08-06 06:38:57.183 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E13 as result already exists
2022-08-06 06:38:57.183 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E14 as result already exists
2022-08-06 06:38:57.184 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E15 as result already exists
2022-08-06 06:38:57.184 | DEBUG    | __main__:run:356 - Running benchmark 3
2022-08-06 06:38:57.184 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:38:57.184 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 06:38:57.184 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A0 as result already exists
2022-08-06 06:38:57.184 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A1 as result already exists
2022-08-06 06:38:57.184 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A2 as result already exists
2022-08-06 06:38:57.184 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A3 as result already exists
2022-08-06 06:38:57.184 | DEBUG    | __main__:run:363 - Number of queries: 11
2022-08-06 06:38:57.184 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D0 as result already exists
2022-08-06 06:38:57.185 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D1 as result already exists
2022-08-06 06:38:57.185 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D2 as result already exists
2022-08-06 06:38:57.185 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D3 as result already exists
2022-08-06 06:38:57.185 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D4 as result already exists
2022-08-06 06:38:57.185 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D5 as result already exists
2022-08-06 06:38:57.185 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D6 as result already exists
2022-08-06 06:38:57.185 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D7 as result already exists
2022-08-06 06:38:57.185 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D8 as result already exists
2022-08-06 06:38:57.185 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D9 as result already exists
2022-08-06 06:38:57.186 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D10 as result already exists
2022-08-06 06:38:57.186 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:38:57.186 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B0 as result already exists
2022-08-06 06:38:57.186 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B1 as result already exists
2022-08-06 06:38:57.186 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B2 as result already exists
2022-08-06 06:38:57.186 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B3 as result already exists
2022-08-06 06:38:57.186 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B4 as result already exists
2022-08-06 06:38:57.186 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B5 as result already exists
2022-08-06 06:38:57.186 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-06 06:38:57.186 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C0 as result already exists
2022-08-06 06:38:57.187 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C1 as result already exists
2022-08-06 06:38:57.187 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C2 as result already exists
2022-08-06 06:38:57.187 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C3 as result already exists
2022-08-06 06:38:57.187 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C4 as result already exists
2022-08-06 06:38:57.187 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C5 as result already exists
2022-08-06 06:38:57.187 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C6 as result already exists
2022-08-06 06:38:57.187 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C7 as result already exists
2022-08-06 06:38:57.187 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C8 as result already exists
2022-08-06 06:38:57.187 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:38:57.188 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E0 as result already exists
2022-08-06 06:38:57.188 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E1 as result already exists
2022-08-06 06:38:57.188 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E2 as result already exists
2022-08-06 06:38:57.188 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E3 as result already exists
2022-08-06 06:38:57.188 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E4 as result already exists
2022-08-06 06:38:57.188 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E5 as result already exists
2022-08-06 06:38:57.188 | DEBUG    | __main__:run:356 - Running benchmark 4
2022-08-06 06:38:57.188 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:38:57.188 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:38:57.188 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A0 as result already exists
2022-08-06 06:38:57.189 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A1 as result already exists
2022-08-06 06:38:57.189 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A2 as result already exists
2022-08-06 06:38:57.189 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A3 as result already exists
2022-08-06 06:38:57.189 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A4 as result already exists
2022-08-06 06:38:57.189 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A5 as result already exists
2022-08-06 06:38:57.189 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 06:38:57.189 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D0 as result already exists
2022-08-06 06:38:57.189 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D1 as result already exists
2022-08-06 06:38:57.189 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D2 as result already exists
2022-08-06 06:38:57.189 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D3 as result already exists
2022-08-06 06:38:57.190 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D4 as result already exists
2022-08-06 06:38:57.190 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D5 as result already exists
2022-08-06 06:38:57.190 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D6 as result already exists
2022-08-06 06:38:57.190 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 06:38:57.190 | DEBUG    | __main__:run:370 - Skipping benchmark 4:B0 as result already exists
2022-08-06 06:38:57.190 | DEBUG    | __main__:run:370 - Skipping benchmark 4:B1 as result already exists
2022-08-06 06:38:57.190 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 06:38:57.190 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C0 as result already exists
2022-08-06 06:38:57.190 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C1 as result already exists
2022-08-06 06:38:57.191 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C2 as result already exists
2022-08-06 06:38:57.191 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C3 as result already exists
2022-08-06 06:38:57.191 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C4 as result already exists
2022-08-06 06:38:57.191 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C5 as result already exists
2022-08-06 06:38:57.191 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C6 as result already exists
2022-08-06 06:38:57.191 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:38:57.191 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E0 as result already exists
2022-08-06 06:38:57.191 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E1 as result already exists
2022-08-06 06:38:57.191 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E2 as result already exists
2022-08-06 06:38:57.191 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E3 as result already exists
2022-08-06 06:38:57.192 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E4 as result already exists
2022-08-06 06:38:57.192 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E5 as result already exists
2022-08-06 06:38:57.192 | DEBUG    | __main__:run:356 - Running benchmark 5
2022-08-06 06:38:57.192 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:38:57.192 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 06:38:57.192 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A0 as result already exists
2022-08-06 06:38:57.192 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A1 as result already exists
2022-08-06 06:38:57.192 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A2 as result already exists
2022-08-06 06:38:57.192 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A3 as result already exists
2022-08-06 06:38:57.193 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 06:38:57.193 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D0 as result already exists
2022-08-06 06:38:57.193 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D1 as result already exists
2022-08-06 06:38:57.193 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D2 as result already exists
2022-08-06 06:38:57.193 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D3 as result already exists
2022-08-06 06:38:57.193 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D4 as result already exists
2022-08-06 06:38:57.193 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D5 as result already exists
2022-08-06 06:38:57.193 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D6 as result already exists
2022-08-06 06:38:57.193 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D7 as result already exists
2022-08-06 06:38:57.193 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D8 as result already exists
2022-08-06 06:38:57.194 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D9 as result already exists
2022-08-06 06:38:57.194 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D10 as result already exists
2022-08-06 06:38:57.194 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D11 as result already exists
2022-08-06 06:38:57.194 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D12 as result already exists
2022-08-06 06:38:57.194 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D13 as result already exists
2022-08-06 06:38:57.194 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D14 as result already exists
2022-08-06 06:38:57.194 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D15 as result already exists
2022-08-06 06:38:57.194 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 06:38:57.194 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B0 as result already exists
2022-08-06 06:38:57.195 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B1 as result already exists
2022-08-06 06:38:57.195 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B2 as result already exists
2022-08-06 06:38:57.195 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B3 as result already exists
2022-08-06 06:38:57.195 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B4 as result already exists
2022-08-06 06:38:57.195 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B5 as result already exists
2022-08-06 06:38:57.195 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B6 as result already exists
2022-08-06 06:38:57.195 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:38:57.195 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C0 as result already exists
2022-08-06 06:38:57.195 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C1 as result already exists
2022-08-06 06:38:57.195 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C2 as result already exists
2022-08-06 06:38:57.196 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C3 as result already exists
2022-08-06 06:38:57.196 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C4 as result already exists
2022-08-06 06:38:57.196 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C5 as result already exists
2022-08-06 06:38:57.196 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 06:38:57.196 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E0 as result already exists
2022-08-06 06:38:57.196 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E1 as result already exists
2022-08-06 06:38:57.196 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E2 as result already exists
2022-08-06 06:38:57.196 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E3 as result already exists
2022-08-06 06:38:57.196 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E4 as result already exists
2022-08-06 06:38:57.196 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E5 as result already exists
2022-08-06 06:38:57.197 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E6 as result already exists
2022-08-06 06:38:57.197 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E7 as result already exists
2022-08-06 06:38:57.197 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E8 as result already exists
2022-08-06 06:38:57.197 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E9 as result already exists
2022-08-06 06:38:57.197 | DEBUG    | __main__:run:356 - Running benchmark 6
2022-08-06 06:38:57.197 | DEBUG    | __main__:run:357 - Number of Sets: 4
2022-08-06 06:38:57.197 | DEBUG    | __main__:run:363 - Number of queries: 27
2022-08-06 06:38:57.197 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D0 as result already exists
2022-08-06 06:38:57.197 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D1 as result already exists
2022-08-06 06:38:57.198 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D2 as result already exists
2022-08-06 06:38:57.198 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D3 as result already exists
2022-08-06 06:38:57.198 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D4 as result already exists
2022-08-06 06:38:57.198 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D5 as result already exists
2022-08-06 06:38:57.198 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D6 as result already exists
2022-08-06 06:38:57.198 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D7 as result already exists
2022-08-06 06:38:57.198 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D8 as result already exists
2022-08-06 06:38:57.198 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D9 as result already exists
2022-08-06 06:38:57.198 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D10 as result already exists
2022-08-06 06:38:57.198 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D11 as result already exists
2022-08-06 06:38:57.199 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D12 as result already exists
2022-08-06 06:38:57.199 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D13 as result already exists
2022-08-06 06:38:57.199 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D14 as result already exists
2022-08-06 06:38:57.199 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D15 as result already exists
2022-08-06 06:38:57.199 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D16 as result already exists
2022-08-06 06:38:57.199 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D17 as result already exists
2022-08-06 06:38:57.199 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D18 as result already exists
2022-08-06 06:38:57.199 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D19 as result already exists
2022-08-06 06:38:57.199 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D20 as result already exists
2022-08-06 06:38:57.200 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D21 as result already exists
2022-08-06 06:38:57.200 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D22 as result already exists
2022-08-06 06:38:57.200 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D23 as result already exists
2022-08-06 06:38:57.200 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D24 as result already exists
2022-08-06 06:38:57.200 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D25 as result already exists
2022-08-06 06:38:57.200 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D26 as result already exists
2022-08-06 06:38:57.200 | DEBUG    | __main__:run:363 - Number of queries: 26
2022-08-06 06:38:57.200 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B0 as result already exists
2022-08-06 06:38:57.200 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B1 as result already exists
2022-08-06 06:38:57.200 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B2 as result already exists
2022-08-06 06:38:57.201 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B3 as result already exists
2022-08-06 06:38:57.201 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B4 as result already exists
2022-08-06 06:38:57.201 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B5 as result already exists
2022-08-06 06:38:57.201 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B6 as result already exists
2022-08-06 06:38:57.201 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B7 as result already exists
2022-08-06 06:38:57.201 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B8 as result already exists
2022-08-06 06:38:57.201 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B9 as result already exists
2022-08-06 06:38:57.201 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B10 as result already exists
2022-08-06 06:38:57.201 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B11 as result already exists
2022-08-06 06:38:57.201 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B12 as result already exists
2022-08-06 06:38:57.202 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B13 as result already exists
2022-08-06 06:38:57.202 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B14 as result already exists
2022-08-06 06:38:57.202 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B15 as result already exists
2022-08-06 06:38:57.202 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B16 as result already exists
2022-08-06 06:38:57.202 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B17 as result already exists
2022-08-06 06:38:57.202 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B18 as result already exists
2022-08-06 06:38:57.202 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B19 as result already exists
2022-08-06 06:38:57.202 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B20 as result already exists
2022-08-06 06:38:57.202 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B21 as result already exists
2022-08-06 06:38:57.203 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B22 as result already exists
2022-08-06 06:38:57.203 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B23 as result already exists
2022-08-06 06:38:57.203 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B24 as result already exists
2022-08-06 06:38:57.203 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B25 as result already exists
2022-08-06 06:38:57.203 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 06:38:57.203 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E0 as result already exists
2022-08-06 06:38:57.203 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E1 as result already exists
2022-08-06 06:38:57.203 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E2 as result already exists
2022-08-06 06:38:57.203 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E3 as result already exists
2022-08-06 06:38:57.203 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E4 as result already exists
2022-08-06 06:38:57.204 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E5 as result already exists
2022-08-06 06:38:57.204 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E6 as result already exists
2022-08-06 06:38:57.204 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 06:38:57.204 | DEBUG    | __main__:run:370 - Skipping benchmark 6:C0 as result already exists
2022-08-06 06:38:57.204 | DEBUG    | __main__:run:370 - Skipping benchmark 6:C1 as result already exists
2022-08-06 06:38:57.204 | DEBUG    | __main__:run:356 - Running benchmark 7
2022-08-06 06:38:57.204 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-06 06:38:57.204 | DEBUG    | __main__:run:363 - Number of queries: 21
2022-08-06 06:38:57.204 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D0 as result already exists
2022-08-06 06:38:57.204 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D1 as result already exists
2022-08-06 06:38:57.205 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D2 as result already exists
2022-08-06 06:38:57.205 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D3 as result already exists
2022-08-06 06:38:57.205 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D4 as result already exists
2022-08-06 06:38:57.205 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D5 as result already exists
2022-08-06 06:38:57.205 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D6 as result already exists
2022-08-06 06:38:57.205 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D7 as result already exists
2022-08-06 06:38:57.205 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D8 as result already exists
2022-08-06 06:38:57.205 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D9 as result already exists
2022-08-06 06:38:57.205 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D10 as result already exists
2022-08-06 06:38:57.206 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D11 as result already exists
2022-08-06 06:38:57.206 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D12 as result already exists
2022-08-06 06:38:57.206 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D13 as result already exists
2022-08-06 06:38:57.206 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D14 as result already exists
2022-08-06 06:38:57.206 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D15 as result already exists
2022-08-06 06:38:57.206 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D16 as result already exists
2022-08-06 06:38:57.206 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D17 as result already exists
2022-08-06 06:38:57.206 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D18 as result already exists
2022-08-06 06:38:57.206 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D19 as result already exists
2022-08-06 06:38:57.206 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D20 as result already exists
2022-08-06 06:38:57.207 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 06:38:57.207 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A0 as result already exists
2022-08-06 06:38:57.207 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A1 as result already exists
2022-08-06 06:38:57.207 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A2 as result already exists
2022-08-06 06:38:57.207 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 06:38:57.207 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E0 as result already exists
2022-08-06 06:38:57.207 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E1 as result already exists
2022-08-06 06:38:57.207 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E2 as result already exists
2022-08-06 06:38:57.207 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E3 as result already exists
2022-08-06 06:38:57.208 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E4 as result already exists
2022-08-06 06:38:57.208 | DEBUG    | __main__:run:356 - Running benchmark 8
2022-08-06 06:38:57.208 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-06 06:38:57.208 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 06:38:57.208 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C0 as result already exists
2022-08-06 06:38:57.208 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C1 as result already exists
2022-08-06 06:38:57.208 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C2 as result already exists
2022-08-06 06:38:57.208 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C3 as result already exists
2022-08-06 06:38:57.208 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:38:57.208 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A0 as result already exists
2022-08-06 06:38:57.209 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A1 as result already exists
2022-08-06 06:38:57.209 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A2 as result already exists
2022-08-06 06:38:57.209 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A3 as result already exists
2022-08-06 06:38:57.209 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A4 as result already exists
2022-08-06 06:38:57.209 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A5 as result already exists
2022-08-06 06:38:57.209 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-06 06:38:57.209 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D0 as result already exists
2022-08-06 06:38:57.209 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D1 as result already exists
2022-08-06 06:38:57.209 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D2 as result already exists
2022-08-06 06:38:57.209 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D3 as result already exists
2022-08-06 06:38:57.210 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D4 as result already exists
2022-08-06 06:38:57.210 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D5 as result already exists
2022-08-06 06:38:57.210 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D6 as result already exists
2022-08-06 06:38:57.210 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D7 as result already exists
2022-08-06 06:38:57.210 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D8 as result already exists
2022-08-06 06:38:57.210 | DEBUG    | __main__:run:356 - Running benchmark 9
2022-08-06 06:38:57.210 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:38:57.210 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 06:38:57.210 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D0 as result already exists
2022-08-06 06:38:57.211 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D1 as result already exists
2022-08-06 06:38:57.211 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D2 as result already exists
2022-08-06 06:38:57.211 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D3 as result already exists
2022-08-06 06:38:57.211 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D4 as result already exists
2022-08-06 06:38:57.211 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D5 as result already exists
2022-08-06 06:38:57.211 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D6 as result already exists
2022-08-06 06:38:57.211 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D7 as result already exists
2022-08-06 06:38:57.211 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D8 as result already exists
2022-08-06 06:38:57.211 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D9 as result already exists
2022-08-06 06:38:57.211 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 06:38:57.212 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B0 as result already exists
2022-08-06 06:38:57.212 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B1 as result already exists
2022-08-06 06:38:57.212 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B2 as result already exists
2022-08-06 06:38:57.212 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 06:38:57.212 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C0 as result already exists
2022-08-06 06:38:57.212 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C1 as result already exists
2022-08-06 06:38:57.212 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C2 as result already exists
2022-08-06 06:38:57.212 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C3 as result already exists
2022-08-06 06:38:57.212 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C4 as result already exists
2022-08-06 06:38:57.213 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C5 as result already exists
2022-08-06 06:38:57.213 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C6 as result already exists
2022-08-06 06:38:57.213 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 06:38:57.213 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A0 as result already exists
2022-08-06 06:38:57.213 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A1 as result already exists
2022-08-06 06:38:57.213 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A2 as result already exists
2022-08-06 06:38:57.213 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A3 as result already exists
2022-08-06 06:38:57.213 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A4 as result already exists
2022-08-06 06:38:57.213 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 06:38:57.213 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E0 as result already exists
2022-08-06 06:38:57.214 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E1 as result already exists
2022-08-06 06:38:57.214 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E2 as result already exists
2022-08-06 06:38:57.214 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E3 as result already exists
2022-08-06 06:38:57.214 | DEBUG    | __main__:run:356 - Running benchmark 10
2022-08-06 06:38:57.214 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:38:57.214 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.214 | DEBUG    | __main__:run:370 - Skipping benchmark 10:C0 as result already exists
2022-08-06 06:38:57.214 | DEBUG    | __main__:run:363 - Number of queries: 23
2022-08-06 06:38:57.214 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D0 as result already exists
2022-08-06 06:38:57.214 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D1 as result already exists
2022-08-06 06:38:57.215 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D2 as result already exists
2022-08-06 06:38:57.215 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D3 as result already exists
2022-08-06 06:38:57.215 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D4 as result already exists
2022-08-06 06:38:57.215 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D5 as result already exists
2022-08-06 06:38:57.215 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D6 as result already exists
2022-08-06 06:38:57.215 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D7 as result already exists
2022-08-06 06:38:57.215 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D8 as result already exists
2022-08-06 06:38:57.215 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D9 as result already exists
2022-08-06 06:38:57.215 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D10 as result already exists
2022-08-06 06:38:57.216 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D11 as result already exists
2022-08-06 06:38:57.216 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D12 as result already exists
2022-08-06 06:38:57.216 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D13 as result already exists
2022-08-06 06:38:57.216 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D14 as result already exists
2022-08-06 06:38:57.216 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D15 as result already exists
2022-08-06 06:38:57.216 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D16 as result already exists
2022-08-06 06:38:57.216 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D17 as result already exists
2022-08-06 06:38:57.216 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D18 as result already exists
2022-08-06 06:38:57.216 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D19 as result already exists
2022-08-06 06:38:57.216 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D20 as result already exists
2022-08-06 06:38:57.217 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D21 as result already exists
2022-08-06 06:38:57.217 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D22 as result already exists
2022-08-06 06:38:57.217 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.217 | DEBUG    | __main__:run:370 - Skipping benchmark 10:A0 as result already exists
2022-08-06 06:38:57.217 | DEBUG    | __main__:run:363 - Number of queries: 12
2022-08-06 06:38:57.217 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E0 as result already exists
2022-08-06 06:38:57.217 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E1 as result already exists
2022-08-06 06:38:57.217 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E2 as result already exists
2022-08-06 06:38:57.217 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E3 as result already exists
2022-08-06 06:38:57.218 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E4 as result already exists
2022-08-06 06:38:57.218 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E5 as result already exists
2022-08-06 06:38:57.218 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E6 as result already exists
2022-08-06 06:38:57.218 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E7 as result already exists
2022-08-06 06:38:57.218 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E8 as result already exists
2022-08-06 06:38:57.218 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E9 as result already exists
2022-08-06 06:38:57.218 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E10 as result already exists
2022-08-06 06:38:57.218 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E11 as result already exists
2022-08-06 06:38:57.218 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.218 | DEBUG    | __main__:run:370 - Skipping benchmark 10:B0 as result already exists
2022-08-06 06:38:57.219 | DEBUG    | __main__:run:356 - Running benchmark 11
2022-08-06 06:38:57.219 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:38:57.219 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 06:38:57.219 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D0 as result already exists
2022-08-06 06:38:57.219 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D1 as result already exists
2022-08-06 06:38:57.219 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D2 as result already exists
2022-08-06 06:38:57.219 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D3 as result already exists
2022-08-06 06:38:57.219 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D4 as result already exists
2022-08-06 06:38:57.219 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D5 as result already exists
2022-08-06 06:38:57.220 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D6 as result already exists
2022-08-06 06:38:57.220 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D7 as result already exists
2022-08-06 06:38:57.220 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.220 | DEBUG    | __main__:run:370 - Skipping benchmark 11:C0 as result already exists
2022-08-06 06:38:57.220 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 06:38:57.220 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A0 as result already exists
2022-08-06 06:38:57.220 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A1 as result already exists
2022-08-06 06:38:57.220 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A2 as result already exists
2022-08-06 06:38:57.220 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A3 as result already exists
2022-08-06 06:38:57.220 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 06:38:57.221 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E0 as result already exists
2022-08-06 06:38:57.221 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E1 as result already exists
2022-08-06 06:38:57.221 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E2 as result already exists
2022-08-06 06:38:57.221 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 06:38:57.221 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B0 as result already exists
2022-08-06 06:38:57.221 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B1 as result already exists
2022-08-06 06:38:57.221 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B2 as result already exists
2022-08-06 06:38:57.221 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B3 as result already exists
2022-08-06 06:38:57.221 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B4 as result already exists
2022-08-06 06:38:57.221 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B5 as result already exists
2022-08-06 06:38:57.222 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B6 as result already exists
2022-08-06 06:38:57.222 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B7 as result already exists
2022-08-06 06:38:57.222 | DEBUG    | __main__:run:356 - Running benchmark 12
2022-08-06 06:38:57.222 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:38:57.222 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 06:38:57.222 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D0 as result already exists
2022-08-06 06:38:57.222 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D1 as result already exists
2022-08-06 06:38:57.222 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D2 as result already exists
2022-08-06 06:38:57.222 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D3 as result already exists
2022-08-06 06:38:57.223 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.223 | DEBUG    | __main__:run:370 - Skipping benchmark 12:B0 as result already exists
2022-08-06 06:38:57.223 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 06:38:57.223 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C0 as result already exists
2022-08-06 06:38:57.223 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C1 as result already exists
2022-08-06 06:38:57.223 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C2 as result already exists
2022-08-06 06:38:57.223 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C3 as result already exists
2022-08-06 06:38:57.223 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C4 as result already exists
2022-08-06 06:38:57.223 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 06:38:57.223 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A0 as result already exists
2022-08-06 06:38:57.224 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A1 as result already exists
2022-08-06 06:38:57.224 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A2 as result already exists
2022-08-06 06:38:57.224 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A3 as result already exists
2022-08-06 06:38:57.224 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A4 as result already exists
2022-08-06 06:38:57.224 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A5 as result already exists
2022-08-06 06:38:57.224 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A6 as result already exists
2022-08-06 06:38:57.224 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A7 as result already exists
2022-08-06 06:38:57.224 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 06:38:57.224 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E0 as result already exists
2022-08-06 06:38:57.225 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E1 as result already exists
2022-08-06 06:38:57.225 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E2 as result already exists
2022-08-06 06:38:57.225 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E3 as result already exists
2022-08-06 06:38:57.225 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E4 as result already exists
2022-08-06 06:38:57.225 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E5 as result already exists
2022-08-06 06:38:57.225 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E6 as result already exists
2022-08-06 06:38:57.225 | DEBUG    | __main__:run:356 - Running benchmark 13
2022-08-06 06:38:57.225 | DEBUG    | __main__:run:357 - Number of Sets: 2
2022-08-06 06:38:57.225 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 06:38:57.225 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B0 as result already exists
2022-08-06 06:38:57.226 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B1 as result already exists
2022-08-06 06:38:57.226 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B2 as result already exists
2022-08-06 06:38:57.226 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.226 | DEBUG    | __main__:run:370 - Skipping benchmark 13:A0 as result already exists
2022-08-06 06:38:57.226 | DEBUG    | __main__:run:356 - Running benchmark 14
2022-08-06 06:38:57.226 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:38:57.226 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 06:38:57.226 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D0 as result already exists
2022-08-06 06:38:57.226 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D1 as result already exists
2022-08-06 06:38:57.226 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D2 as result already exists
2022-08-06 06:38:57.227 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D3 as result already exists
2022-08-06 06:38:57.227 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D4 as result already exists
2022-08-06 06:38:57.227 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D5 as result already exists
2022-08-06 06:38:57.227 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D6 as result already exists
2022-08-06 06:38:57.227 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D7 as result already exists
2022-08-06 06:38:57.227 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D8 as result already exists
2022-08-06 06:38:57.227 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D9 as result already exists
2022-08-06 06:38:57.227 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-06 06:38:57.227 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C0 as result already exists
2022-08-06 06:38:57.228 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C1 as result already exists
2022-08-06 06:38:57.228 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C2 as result already exists
2022-08-06 06:38:57.228 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C3 as result already exists
2022-08-06 06:38:57.228 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C4 as result already exists
2022-08-06 06:38:57.228 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C5 as result already exists
2022-08-06 06:38:57.228 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C6 as result already exists
2022-08-06 06:38:57.228 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C7 as result already exists
2022-08-06 06:38:57.228 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C8 as result already exists
2022-08-06 06:38:57.228 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 06:38:57.228 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A0 as result already exists
2022-08-06 06:38:57.229 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A1 as result already exists
2022-08-06 06:38:57.229 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A2 as result already exists
2022-08-06 06:38:57.229 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A3 as result already exists
2022-08-06 06:38:57.229 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A4 as result already exists
2022-08-06 06:38:57.229 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-06 06:38:57.229 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E0 as result already exists
2022-08-06 06:38:57.229 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E1 as result already exists
2022-08-06 06:38:57.229 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E2 as result already exists
2022-08-06 06:38:57.229 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E3 as result already exists
2022-08-06 06:38:57.230 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E4 as result already exists
2022-08-06 06:38:57.230 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E5 as result already exists
2022-08-06 06:38:57.230 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E6 as result already exists
2022-08-06 06:38:57.230 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E7 as result already exists
2022-08-06 06:38:57.230 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E8 as result already exists
2022-08-06 06:38:57.230 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E9 as result already exists
2022-08-06 06:38:57.230 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E10 as result already exists
2022-08-06 06:38:57.230 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E11 as result already exists
2022-08-06 06:38:57.230 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E12 as result already exists
2022-08-06 06:38:57.230 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:38:57.231 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B0 as result already exists
2022-08-06 06:38:57.231 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B1 as result already exists
2022-08-06 06:38:57.231 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B2 as result already exists
2022-08-06 06:38:57.231 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B3 as result already exists
2022-08-06 06:38:57.231 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B4 as result already exists
2022-08-06 06:38:57.231 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B5 as result already exists
2022-08-06 06:38:57.231 | DEBUG    | __main__:run:356 - Running benchmark 15
2022-08-06 06:38:57.231 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:38:57.231 | DEBUG    | __main__:run:363 - Number of queries: 18
2022-08-06 06:38:57.231 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D0 as result already exists
2022-08-06 06:38:57.232 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D1 as result already exists
2022-08-06 06:38:57.232 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D2 as result already exists
2022-08-06 06:38:57.232 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D3 as result already exists
2022-08-06 06:38:57.232 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D4 as result already exists
2022-08-06 06:38:57.232 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D5 as result already exists
2022-08-06 06:38:57.232 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D6 as result already exists
2022-08-06 06:38:57.232 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D7 as result already exists
2022-08-06 06:38:57.232 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D8 as result already exists
2022-08-06 06:38:57.232 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D9 as result already exists
2022-08-06 06:38:57.233 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D10 as result already exists
2022-08-06 06:38:57.233 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D11 as result already exists
2022-08-06 06:38:57.233 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D12 as result already exists
2022-08-06 06:38:57.233 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D13 as result already exists
2022-08-06 06:38:57.233 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D14 as result already exists
2022-08-06 06:38:57.233 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D15 as result already exists
2022-08-06 06:38:57.233 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D16 as result already exists
2022-08-06 06:38:57.233 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D17 as result already exists
2022-08-06 06:38:57.233 | DEBUG    | __main__:run:363 - Number of queries: 22
2022-08-06 06:38:57.233 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B0 as result already exists
2022-08-06 06:38:57.234 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B1 as result already exists
2022-08-06 06:38:57.234 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B2 as result already exists
2022-08-06 06:38:57.234 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B3 as result already exists
2022-08-06 06:38:57.234 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B4 as result already exists
2022-08-06 06:38:57.234 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B5 as result already exists
2022-08-06 06:38:57.234 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B6 as result already exists
2022-08-06 06:38:57.234 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B7 as result already exists
2022-08-06 06:38:57.234 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B8 as result already exists
2022-08-06 06:38:57.234 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B9 as result already exists
2022-08-06 06:38:57.234 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B10 as result already exists
2022-08-06 06:38:57.235 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B11 as result already exists
2022-08-06 06:38:57.235 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B12 as result already exists
2022-08-06 06:38:57.235 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B13 as result already exists
2022-08-06 06:38:57.235 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B14 as result already exists
2022-08-06 06:38:57.235 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B15 as result already exists
2022-08-06 06:38:57.235 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B16 as result already exists
2022-08-06 06:38:57.235 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B17 as result already exists
2022-08-06 06:38:57.338 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B18 as result already exists
2022-08-06 06:38:57.339 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B19 as result already exists
2022-08-06 06:38:57.339 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B20 as result already exists
2022-08-06 06:38:57.340 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B21 as result already exists
2022-08-06 06:38:57.341 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 06:38:57.341 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C0 as result already exists
2022-08-06 06:38:57.342 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C1 as result already exists
2022-08-06 06:38:57.343 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C2 as result already exists
2022-08-06 06:38:57.343 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C3 as result already exists
2022-08-06 06:38:57.343 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C4 as result already exists
2022-08-06 06:38:57.343 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 06:38:57.343 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A0 as result already exists
2022-08-06 06:38:57.343 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A1 as result already exists
2022-08-06 06:38:57.344 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A2 as result already exists
2022-08-06 06:38:57.344 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A3 as result already exists
2022-08-06 06:38:57.344 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A4 as result already exists
2022-08-06 06:38:57.344 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A5 as result already exists
2022-08-06 06:38:57.344 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A6 as result already exists
2022-08-06 06:38:57.344 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A7 as result already exists
2022-08-06 06:38:57.344 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 06:38:57.344 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E0 as result already exists
2022-08-06 06:38:57.344 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E1 as result already exists
2022-08-06 06:38:57.344 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E2 as result already exists
2022-08-06 06:38:57.345 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E3 as result already exists
2022-08-06 06:38:57.345 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E4 as result already exists
2022-08-06 06:38:57.345 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E5 as result already exists
2022-08-06 06:38:57.345 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E6 as result already exists
2022-08-06 06:38:57.345 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E7 as result already exists
2022-08-06 06:38:57.345 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E8 as result already exists
2022-08-06 06:38:57.345 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E9 as result already exists
2022-08-06 06:38:57.345 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E10 as result already exists
2022-08-06 06:38:57.345 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E11 as result already exists
2022-08-06 06:38:57.346 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E12 as result already exists
2022-08-06 06:38:57.346 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E13 as result already exists
2022-08-06 06:38:57.346 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E14 as result already exists
2022-08-06 06:38:57.346 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E15 as result already exists
2022-08-06 06:38:57.346 | DEBUG    | __main__:run:356 - Running benchmark 16
2022-08-06 06:38:57.346 | DEBUG    | __main__:run:357 - Number of Sets: 4
2022-08-06 06:38:57.346 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 06:38:57.346 | DEBUG    | __main__:run:370 - Skipping benchmark 16:B0 as result already exists
2022-08-06 06:38:57.346 | DEBUG    | __main__:run:370 - Skipping benchmark 16:B1 as result already exists
2022-08-06 06:38:57.347 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.347 | DEBUG    | __main__:run:370 - Skipping benchmark 16:A0 as result already exists
2022-08-06 06:38:57.347 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:38:57.347 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E0 as result already exists
2022-08-06 06:38:57.347 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E1 as result already exists
2022-08-06 06:38:57.347 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E2 as result already exists
2022-08-06 06:38:57.347 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E3 as result already exists
2022-08-06 06:38:57.347 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E4 as result already exists
2022-08-06 06:38:57.347 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E5 as result already exists
2022-08-06 06:38:57.348 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 06:38:57.348 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D0 as result already exists
2022-08-06 06:38:57.348 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D1 as result already exists
2022-08-06 06:38:57.348 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D2 as result already exists
2022-08-06 06:38:57.348 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D3 as result already exists
2022-08-06 06:38:57.348 | DEBUG    | __main__:run:356 - Running benchmark 17
2022-08-06 06:38:57.348 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:38:57.348 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 06:38:57.348 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B0 as result already exists
2022-08-06 06:38:57.348 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B1 as result already exists
2022-08-06 06:38:57.349 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B2 as result already exists
2022-08-06 06:38:57.349 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B3 as result already exists
2022-08-06 06:38:57.349 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B4 as result already exists
2022-08-06 06:38:57.349 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B5 as result already exists
2022-08-06 06:38:57.349 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B6 as result already exists
2022-08-06 06:38:57.349 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B7 as result already exists
2022-08-06 06:38:57.349 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-06 06:38:57.349 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C0 as result already exists
2022-08-06 06:38:57.349 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C1 as result already exists
2022-08-06 06:38:57.350 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C2 as result already exists
2022-08-06 06:38:57.350 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C3 as result already exists
2022-08-06 06:38:57.350 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C4 as result already exists
2022-08-06 06:38:57.350 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C5 as result already exists
2022-08-06 06:38:57.350 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C6 as result already exists
2022-08-06 06:38:57.350 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C7 as result already exists
2022-08-06 06:38:57.350 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C8 as result already exists
2022-08-06 06:38:57.350 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C9 as result already exists
2022-08-06 06:38:57.350 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C10 as result already exists
2022-08-06 06:38:57.350 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C11 as result already exists
2022-08-06 06:38:57.351 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C12 as result already exists
2022-08-06 06:38:57.351 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 06:38:57.351 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A0 as result already exists
2022-08-06 06:38:57.351 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A1 as result already exists
2022-08-06 06:38:57.351 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A2 as result already exists
2022-08-06 06:38:57.351 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A3 as result already exists
2022-08-06 06:38:57.351 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A4 as result already exists
2022-08-06 06:38:57.351 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A5 as result already exists
2022-08-06 06:38:57.351 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A6 as result already exists
2022-08-06 06:38:57.352 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-06 06:38:57.352 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D0 as result already exists
2022-08-06 06:38:57.352 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D1 as result already exists
2022-08-06 06:38:57.352 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D2 as result already exists
2022-08-06 06:38:57.352 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D3 as result already exists
2022-08-06 06:38:57.352 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D4 as result already exists
2022-08-06 06:38:57.352 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D5 as result already exists
2022-08-06 06:38:57.352 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D6 as result already exists
2022-08-06 06:38:57.352 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D7 as result already exists
2022-08-06 06:38:57.352 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D8 as result already exists
2022-08-06 06:38:57.353 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D9 as result already exists
2022-08-06 06:38:57.353 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D10 as result already exists
2022-08-06 06:38:57.353 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D11 as result already exists
2022-08-06 06:38:57.353 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D12 as result already exists
2022-08-06 06:38:57.353 | DEBUG    | __main__:run:363 - Number of queries: 25
2022-08-06 06:38:57.353 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E0 as result already exists
2022-08-06 06:38:57.353 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E1 as result already exists
2022-08-06 06:38:57.353 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E2 as result already exists
2022-08-06 06:38:57.353 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E3 as result already exists
2022-08-06 06:38:57.354 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E4 as result already exists
2022-08-06 06:38:57.354 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E5 as result already exists
2022-08-06 06:38:57.354 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E6 as result already exists
2022-08-06 06:38:57.354 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E7 as result already exists
2022-08-06 06:38:57.354 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E8 as result already exists
2022-08-06 06:38:57.354 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E9 as result already exists
2022-08-06 06:38:57.354 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E10 as result already exists
2022-08-06 06:38:57.354 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E11 as result already exists
2022-08-06 06:38:57.354 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E12 as result already exists
2022-08-06 06:38:57.355 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E13 as result already exists
2022-08-06 06:38:57.355 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E14 as result already exists
2022-08-06 06:38:57.355 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E15 as result already exists
2022-08-06 06:38:57.355 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E16 as result already exists
2022-08-06 06:38:57.355 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E17 as result already exists
2022-08-06 06:38:57.355 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E18 as result already exists
2022-08-06 06:38:57.355 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E19 as result already exists
2022-08-06 06:38:57.355 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E20 as result already exists
2022-08-06 06:38:57.355 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E21 as result already exists
2022-08-06 06:38:57.355 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E22 as result already exists
2022-08-06 06:38:57.356 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E23 as result already exists
2022-08-06 06:38:57.356 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E24 as result already exists
2022-08-06 06:38:57.356 | DEBUG    | __main__:run:356 - Running benchmark 18
2022-08-06 06:38:57.356 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-06 06:38:57.356 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:38:57.356 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A0 as result already exists
2022-08-06 06:38:57.356 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A1 as result already exists
2022-08-06 06:38:57.356 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A2 as result already exists
2022-08-06 06:38:57.356 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A3 as result already exists
2022-08-06 06:38:57.357 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A4 as result already exists
2022-08-06 06:38:57.357 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A5 as result already exists
2022-08-06 06:38:57.357 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 06:38:57.357 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D0 as result already exists
2022-08-06 06:38:57.357 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D1 as result already exists
2022-08-06 06:38:57.357 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D2 as result already exists
2022-08-06 06:38:57.357 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D3 as result already exists
2022-08-06 06:38:57.357 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D4 as result already exists
2022-08-06 06:38:57.357 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D5 as result already exists
2022-08-06 06:38:57.357 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D6 as result already exists
2022-08-06 06:38:57.358 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D7 as result already exists
2022-08-06 06:38:57.358 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D8 as result already exists
2022-08-06 06:38:57.358 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D9 as result already exists
2022-08-06 06:38:57.358 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D10 as result already exists
2022-08-06 06:38:57.358 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D11 as result already exists
2022-08-06 06:38:57.358 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D12 as result already exists
2022-08-06 06:38:57.358 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D13 as result already exists
2022-08-06 06:38:57.358 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D14 as result already exists
2022-08-06 06:38:57.358 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D15 as result already exists
2022-08-06 06:38:57.359 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 06:38:57.359 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E0 as result already exists
2022-08-06 06:38:57.359 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E1 as result already exists
2022-08-06 06:38:57.359 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E2 as result already exists
2022-08-06 06:38:57.359 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E3 as result already exists
2022-08-06 06:38:57.359 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E4 as result already exists
2022-08-06 06:38:57.359 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E5 as result already exists
2022-08-06 06:38:57.359 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E6 as result already exists
2022-08-06 06:38:57.359 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E7 as result already exists
2022-08-06 06:38:57.359 | DEBUG    | __main__:run:356 - Running benchmark 19
2022-08-06 06:38:57.360 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:38:57.360 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 06:38:57.360 | DEBUG    | __main__:run:370 - Skipping benchmark 19:B0 as result already exists
2022-08-06 06:38:57.360 | DEBUG    | __main__:run:370 - Skipping benchmark 19:B1 as result already exists
2022-08-06 06:38:57.360 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 06:38:57.360 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C0 as result already exists
2022-08-06 06:38:57.360 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C1 as result already exists
2022-08-06 06:38:57.360 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C2 as result already exists
2022-08-06 06:38:57.360 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C3 as result already exists
2022-08-06 06:38:57.361 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C4 as result already exists
2022-08-06 06:38:57.361 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 06:38:57.361 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D0 as result already exists
2022-08-06 06:38:57.361 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D1 as result already exists
2022-08-06 06:38:57.361 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D2 as result already exists
2022-08-06 06:38:57.361 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D3 as result already exists
2022-08-06 06:38:57.361 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D4 as result already exists
2022-08-06 06:38:57.361 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D5 as result already exists
2022-08-06 06:38:57.361 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D6 as result already exists
2022-08-06 06:38:57.362 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D7 as result already exists
2022-08-06 06:38:57.362 | DEBUG    | __main__:run:363 - Number of queries: 18
2022-08-06 06:38:57.362 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A0 as result already exists
2022-08-06 06:38:57.362 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A1 as result already exists
2022-08-06 06:38:57.362 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A2 as result already exists
2022-08-06 06:38:57.362 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A3 as result already exists
2022-08-06 06:38:57.362 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A4 as result already exists
2022-08-06 06:38:57.362 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A5 as result already exists
2022-08-06 06:38:57.362 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A6 as result already exists
2022-08-06 06:38:57.362 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A7 as result already exists
2022-08-06 06:38:57.363 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A8 as result already exists
2022-08-06 06:38:57.363 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A9 as result already exists
2022-08-06 06:38:57.363 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A10 as result already exists
2022-08-06 06:38:57.363 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A11 as result already exists
2022-08-06 06:38:57.363 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A12 as result already exists
2022-08-06 06:38:57.363 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A13 as result already exists
2022-08-06 06:38:57.363 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A14 as result already exists
2022-08-06 06:38:57.363 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A15 as result already exists
2022-08-06 06:38:57.363 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A16 as result already exists
2022-08-06 06:38:57.364 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A17 as result already exists
2022-08-06 06:38:57.364 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 06:38:57.364 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E0 as result already exists
2022-08-06 06:38:57.364 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E1 as result already exists
2022-08-06 06:38:57.364 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E2 as result already exists
2022-08-06 06:38:57.364 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E3 as result already exists
2022-08-06 06:38:57.364 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E4 as result already exists
2022-08-06 06:38:57.364 | DEBUG    | __main__:run:356 - Running benchmark 20
2022-08-06 06:38:57.364 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:38:57.364 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 06:38:57.365 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B0 as result already exists
2022-08-06 06:38:57.365 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B1 as result already exists
2022-08-06 06:38:57.365 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B2 as result already exists
2022-08-06 06:38:57.365 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B3 as result already exists
2022-08-06 06:38:57.365 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:38:57.365 | DEBUG    | __main__:run:370 - Skipping benchmark 20:C0 as result already exists
2022-08-06 06:38:57.365 | DEBUG    | __main__:run:363 - Number of queries: 17
2022-08-06 06:38:57.365 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D0 as result already exists
2022-08-06 06:38:57.365 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D1 as result already exists
2022-08-06 06:38:57.366 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D2 as result already exists
2022-08-06 06:38:57.366 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D3 as result already exists
2022-08-06 06:38:57.366 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D4 as result already exists
2022-08-06 06:38:57.366 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D5 as result already exists
2022-08-06 06:38:57.366 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D6 as result already exists
2022-08-06 06:38:57.366 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D7 as result already exists
2022-08-06 06:38:57.366 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D8 as result already exists
2022-08-06 06:38:57.366 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D9 as result already exists
2022-08-06 06:38:57.366 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D10 as result already exists
2022-08-06 06:38:57.367 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D11 as result already exists
2022-08-06 06:38:57.367 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D12 as result already exists
2022-08-06 06:38:57.367 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D13 as result already exists
2022-08-06 06:38:57.367 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D14 as result already exists
2022-08-06 06:38:57.367 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D15 as result already exists
2022-08-06 06:38:57.367 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D16 as result already exists
2022-08-06 06:38:57.367 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 06:38:57.367 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A0 as result already exists
2022-08-06 06:38:57.367 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A1 as result already exists
2022-08-06 06:38:57.367 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A2 as result already exists
2022-08-06 06:38:57.368 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A3 as result already exists
2022-08-06 06:38:57.368 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A4 as result already exists
2022-08-06 06:38:57.368 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 06:38:57.368 | DEBUG    | __main__:run:370 - Skipping benchmark 20:E0 as result already exists
2022-08-06 06:38:57.368 | DEBUG    | __main__:run:370 - Skipping benchmark 20:E1 as result already exists
2022-08-06 06:39:48.459 | DEBUG    | __main__:run:345 - Running benchmark set PandasEval1
2022-08-06 06:39:48.459 | DEBUG    | __main__:run:346 - Found 68 benchmarks in PandasEval1
2022-08-06 06:39:48.459 | DEBUG    | __main__:run:356 - Running benchmark 0
2022-08-06 06:39:48.459 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.459 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.459 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A0 as result already exists
2022-08-06 06:39:48.459 | DEBUG    | __main__:run:356 - Running benchmark 1
2022-08-06 06:39:48.460 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.460 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.460 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A0 as result already exists
2022-08-06 06:39:48.460 | DEBUG    | __main__:run:356 - Running benchmark 2
2022-08-06 06:39:48.460 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.460 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.460 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A0 as result already exists
2022-08-06 06:39:48.460 | DEBUG    | __main__:run:356 - Running benchmark 3
2022-08-06 06:39:48.461 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.461 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.461 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A0 as result already exists
2022-08-06 06:39:48.461 | DEBUG    | __main__:run:356 - Running benchmark 4
2022-08-06 06:39:48.461 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.461 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.461 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A0 as result already exists
2022-08-06 06:39:48.461 | DEBUG    | __main__:run:356 - Running benchmark 5
2022-08-06 06:39:48.461 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.461 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.462 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A0 as result already exists
2022-08-06 06:39:48.462 | DEBUG    | __main__:run:356 - Running benchmark 6
2022-08-06 06:39:48.462 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.462 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.462 | DEBUG    | __main__:run:370 - Skipping benchmark 6:A0 as result already exists
2022-08-06 06:39:48.462 | DEBUG    | __main__:run:356 - Running benchmark 7
2022-08-06 06:39:48.462 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.462 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.462 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A0 as result already exists
2022-08-06 06:39:48.462 | DEBUG    | __main__:run:356 - Running benchmark 8
2022-08-06 06:39:48.463 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.463 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.463 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A0 as result already exists
2022-08-06 06:39:48.463 | DEBUG    | __main__:run:356 - Running benchmark 9
2022-08-06 06:39:48.463 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.463 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.463 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A0 as result already exists
2022-08-06 06:39:48.463 | DEBUG    | __main__:run:356 - Running benchmark 10
2022-08-06 06:39:48.463 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.464 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.464 | DEBUG    | __main__:run:370 - Skipping benchmark 10:A0 as result already exists
2022-08-06 06:39:48.464 | DEBUG    | __main__:run:356 - Running benchmark 11
2022-08-06 06:39:48.464 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.464 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.464 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A0 as result already exists
2022-08-06 06:39:48.464 | DEBUG    | __main__:run:356 - Running benchmark 12
2022-08-06 06:39:48.464 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.464 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.465 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A0 as result already exists
2022-08-06 06:39:48.465 | DEBUG    | __main__:run:356 - Running benchmark 13
2022-08-06 06:39:48.465 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.465 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.465 | DEBUG    | __main__:run:370 - Skipping benchmark 13:A0 as result already exists
2022-08-06 06:39:48.465 | DEBUG    | __main__:run:356 - Running benchmark 14
2022-08-06 06:39:48.465 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.465 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.465 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A0 as result already exists
2022-08-06 06:39:48.465 | DEBUG    | __main__:run:356 - Running benchmark 15
2022-08-06 06:39:48.466 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.466 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.466 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A0 as result already exists
2022-08-06 06:39:48.466 | DEBUG    | __main__:run:356 - Running benchmark 16
2022-08-06 06:39:48.466 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.466 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.466 | DEBUG    | __main__:run:370 - Skipping benchmark 16:A0 as result already exists
2022-08-06 06:39:48.466 | DEBUG    | __main__:run:356 - Running benchmark 17
2022-08-06 06:39:48.466 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.466 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.467 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A0 as result already exists
2022-08-06 06:39:48.467 | DEBUG    | __main__:run:356 - Running benchmark 18
2022-08-06 06:39:48.467 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.467 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.467 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A0 as result already exists
2022-08-06 06:39:48.467 | DEBUG    | __main__:run:356 - Running benchmark 19
2022-08-06 06:39:48.467 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.467 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.467 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A0 as result already exists
2022-08-06 06:39:48.468 | DEBUG    | __main__:run:356 - Running benchmark 20
2022-08-06 06:39:48.468 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.468 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.468 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A0 as result already exists
2022-08-06 06:39:48.468 | DEBUG    | __main__:run:356 - Running benchmark 21
2022-08-06 06:39:48.468 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.468 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.468 | DEBUG    | __main__:run:370 - Skipping benchmark 21:A0 as result already exists
2022-08-06 06:39:48.468 | DEBUG    | __main__:run:356 - Running benchmark 22
2022-08-06 06:39:48.469 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.469 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.469 | DEBUG    | __main__:run:370 - Skipping benchmark 22:A0 as result already exists
2022-08-06 06:39:48.469 | DEBUG    | __main__:run:356 - Running benchmark 23
2022-08-06 06:39:48.469 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.469 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.469 | DEBUG    | __main__:run:370 - Skipping benchmark 23:A0 as result already exists
2022-08-06 06:39:48.469 | DEBUG    | __main__:run:356 - Running benchmark 24
2022-08-06 06:39:48.469 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.470 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.470 | DEBUG    | __main__:run:370 - Skipping benchmark 24:A0 as result already exists
2022-08-06 06:39:48.470 | DEBUG    | __main__:run:356 - Running benchmark 25
2022-08-06 06:39:48.470 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.470 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.470 | DEBUG    | __main__:run:370 - Skipping benchmark 25:A0 as result already exists
2022-08-06 06:39:48.470 | DEBUG    | __main__:run:356 - Running benchmark 26
2022-08-06 06:39:48.470 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.470 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.471 | DEBUG    | __main__:run:370 - Skipping benchmark 26:A0 as result already exists
2022-08-06 06:39:48.471 | DEBUG    | __main__:run:356 - Running benchmark 27
2022-08-06 06:39:48.471 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.471 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.471 | DEBUG    | __main__:run:370 - Skipping benchmark 27:A0 as result already exists
2022-08-06 06:39:48.471 | DEBUG    | __main__:run:356 - Running benchmark 28
2022-08-06 06:39:48.471 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.471 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.471 | DEBUG    | __main__:run:370 - Skipping benchmark 28:A0 as result already exists
2022-08-06 06:39:48.471 | DEBUG    | __main__:run:356 - Running benchmark 29
2022-08-06 06:39:48.472 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.472 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.472 | DEBUG    | __main__:run:370 - Skipping benchmark 29:A0 as result already exists
2022-08-06 06:39:48.472 | DEBUG    | __main__:run:356 - Running benchmark 30
2022-08-06 06:39:48.472 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.472 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.472 | DEBUG    | __main__:run:370 - Skipping benchmark 30:A0 as result already exists
2022-08-06 06:39:48.472 | DEBUG    | __main__:run:356 - Running benchmark 31
2022-08-06 06:39:48.472 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.472 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.473 | DEBUG    | __main__:run:370 - Skipping benchmark 31:A0 as result already exists
2022-08-06 06:39:48.473 | DEBUG    | __main__:run:356 - Running benchmark 32
2022-08-06 06:39:48.473 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.473 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.473 | DEBUG    | __main__:run:370 - Skipping benchmark 32:A0 as result already exists
2022-08-06 06:39:48.473 | DEBUG    | __main__:run:356 - Running benchmark 33
2022-08-06 06:39:48.473 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.473 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.473 | DEBUG    | __main__:run:370 - Skipping benchmark 33:A0 as result already exists
2022-08-06 06:39:48.473 | DEBUG    | __main__:run:356 - Running benchmark 34
2022-08-06 06:39:48.474 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.474 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.474 | DEBUG    | __main__:run:370 - Skipping benchmark 34:A0 as result already exists
2022-08-06 06:39:48.474 | DEBUG    | __main__:run:356 - Running benchmark 35
2022-08-06 06:39:48.474 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.474 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.474 | DEBUG    | __main__:run:370 - Skipping benchmark 35:A0 as result already exists
2022-08-06 06:39:48.474 | DEBUG    | __main__:run:356 - Running benchmark 36
2022-08-06 06:39:48.474 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.475 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.475 | DEBUG    | __main__:run:370 - Skipping benchmark 36:A0 as result already exists
2022-08-06 06:39:48.475 | DEBUG    | __main__:run:356 - Running benchmark 37
2022-08-06 06:39:48.475 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.475 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.475 | DEBUG    | __main__:run:370 - Skipping benchmark 37:A0 as result already exists
2022-08-06 06:39:48.475 | DEBUG    | __main__:run:356 - Running benchmark 38
2022-08-06 06:39:48.475 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.475 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.475 | DEBUG    | __main__:run:370 - Skipping benchmark 38:A0 as result already exists
2022-08-06 06:39:48.476 | DEBUG    | __main__:run:356 - Running benchmark 39
2022-08-06 06:39:48.476 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.476 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.476 | DEBUG    | __main__:run:370 - Skipping benchmark 39:A0 as result already exists
2022-08-06 06:39:48.476 | DEBUG    | __main__:run:356 - Running benchmark 40
2022-08-06 06:39:48.476 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.476 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.476 | DEBUG    | __main__:run:370 - Skipping benchmark 40:A0 as result already exists
2022-08-06 06:39:48.476 | DEBUG    | __main__:run:356 - Running benchmark 41
2022-08-06 06:39:48.476 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.477 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.477 | DEBUG    | __main__:run:370 - Skipping benchmark 41:A0 as result already exists
2022-08-06 06:39:48.477 | DEBUG    | __main__:run:356 - Running benchmark 42
2022-08-06 06:39:48.477 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.477 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.477 | DEBUG    | __main__:run:370 - Skipping benchmark 42:A0 as result already exists
2022-08-06 06:39:48.477 | DEBUG    | __main__:run:356 - Running benchmark 43
2022-08-06 06:39:48.477 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.477 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.477 | DEBUG    | __main__:run:370 - Skipping benchmark 43:A0 as result already exists
2022-08-06 06:39:48.478 | DEBUG    | __main__:run:356 - Running benchmark 44
2022-08-06 06:39:48.478 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.478 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.478 | DEBUG    | __main__:run:370 - Skipping benchmark 44:A0 as result already exists
2022-08-06 06:39:48.478 | DEBUG    | __main__:run:356 - Running benchmark 45
2022-08-06 06:39:48.478 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.478 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.478 | DEBUG    | __main__:run:370 - Skipping benchmark 45:A0 as result already exists
2022-08-06 06:39:48.478 | DEBUG    | __main__:run:356 - Running benchmark 46
2022-08-06 06:39:48.478 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.479 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.479 | DEBUG    | __main__:run:370 - Skipping benchmark 46:A0 as result already exists
2022-08-06 06:39:48.479 | DEBUG    | __main__:run:356 - Running benchmark 47
2022-08-06 06:39:48.479 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.479 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.479 | DEBUG    | __main__:run:370 - Skipping benchmark 47:A0 as result already exists
2022-08-06 06:39:48.479 | DEBUG    | __main__:run:356 - Running benchmark 48
2022-08-06 06:39:48.479 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.479 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.480 | DEBUG    | __main__:run:370 - Skipping benchmark 48:A0 as result already exists
2022-08-06 06:39:48.480 | DEBUG    | __main__:run:356 - Running benchmark 49
2022-08-06 06:39:48.480 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.480 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.480 | DEBUG    | __main__:run:370 - Skipping benchmark 49:A0 as result already exists
2022-08-06 06:39:48.480 | DEBUG    | __main__:run:356 - Running benchmark 50
2022-08-06 06:39:48.480 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.480 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.480 | DEBUG    | __main__:run:370 - Skipping benchmark 50:A0 as result already exists
2022-08-06 06:39:48.480 | DEBUG    | __main__:run:356 - Running benchmark 51
2022-08-06 06:39:48.481 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.481 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.481 | DEBUG    | __main__:run:370 - Skipping benchmark 51:A0 as result already exists
2022-08-06 06:39:48.481 | DEBUG    | __main__:run:356 - Running benchmark 52
2022-08-06 06:39:48.481 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.481 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.481 | DEBUG    | __main__:run:370 - Skipping benchmark 52:A0 as result already exists
2022-08-06 06:39:48.481 | DEBUG    | __main__:run:356 - Running benchmark 53
2022-08-06 06:39:48.481 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.481 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.482 | DEBUG    | __main__:run:370 - Skipping benchmark 53:A0 as result already exists
2022-08-06 06:39:48.482 | DEBUG    | __main__:run:356 - Running benchmark 54
2022-08-06 06:39:48.482 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.482 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.482 | DEBUG    | __main__:run:370 - Skipping benchmark 54:A0 as result already exists
2022-08-06 06:39:48.482 | DEBUG    | __main__:run:356 - Running benchmark 55
2022-08-06 06:39:48.482 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.482 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.482 | DEBUG    | __main__:run:370 - Skipping benchmark 55:A0 as result already exists
2022-08-06 06:39:48.482 | DEBUG    | __main__:run:356 - Running benchmark 56
2022-08-06 06:39:48.483 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.483 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.483 | DEBUG    | __main__:run:370 - Skipping benchmark 56:A0 as result already exists
2022-08-06 06:39:48.483 | DEBUG    | __main__:run:356 - Running benchmark 57
2022-08-06 06:39:48.483 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.483 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.483 | DEBUG    | __main__:run:370 - Skipping benchmark 57:A0 as result already exists
2022-08-06 06:39:48.483 | DEBUG    | __main__:run:356 - Running benchmark 58
2022-08-06 06:39:48.483 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.483 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.484 | DEBUG    | __main__:run:370 - Skipping benchmark 58:A0 as result already exists
2022-08-06 06:39:48.484 | DEBUG    | __main__:run:356 - Running benchmark 59
2022-08-06 06:39:48.484 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.484 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.484 | DEBUG    | __main__:run:370 - Skipping benchmark 59:A0 as result already exists
2022-08-06 06:39:48.484 | DEBUG    | __main__:run:356 - Running benchmark 60
2022-08-06 06:39:48.484 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.484 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.484 | DEBUG    | __main__:run:370 - Skipping benchmark 60:A0 as result already exists
2022-08-06 06:39:48.485 | DEBUG    | __main__:run:356 - Running benchmark 62
2022-08-06 06:39:48.485 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.485 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.485 | DEBUG    | __main__:run:370 - Skipping benchmark 62:A0 as result already exists
2022-08-06 06:39:48.485 | DEBUG    | __main__:run:356 - Running benchmark 63
2022-08-06 06:39:48.485 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.485 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.485 | DEBUG    | __main__:run:370 - Skipping benchmark 63:A0 as result already exists
2022-08-06 06:39:48.485 | DEBUG    | __main__:run:356 - Running benchmark 64
2022-08-06 06:39:48.485 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.486 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.486 | DEBUG    | __main__:run:370 - Skipping benchmark 64:A0 as result already exists
2022-08-06 06:39:48.486 | DEBUG    | __main__:run:356 - Running benchmark 65
2022-08-06 06:39:48.486 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.486 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.486 | DEBUG    | __main__:run:370 - Skipping benchmark 65:A0 as result already exists
2022-08-06 06:39:48.486 | DEBUG    | __main__:run:356 - Running benchmark 66
2022-08-06 06:39:48.486 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.486 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.486 | DEBUG    | __main__:run:370 - Skipping benchmark 66:A0 as result already exists
2022-08-06 06:39:48.487 | DEBUG    | __main__:run:356 - Running benchmark 67
2022-08-06 06:39:48.487 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 06:39:48.487 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.487 | DEBUG    | __main__:run:370 - Skipping benchmark 67:A0 as result already exists
2022-08-06 06:39:48.487 | DEBUG    | __main__:run:345 - Running benchmark set PandasEval2
2022-08-06 06:39:48.487 | DEBUG    | __main__:run:346 - Found 21 benchmarks in PandasEval2
2022-08-06 06:39:48.487 | DEBUG    | __main__:run:356 - Running benchmark 0
2022-08-06 06:39:48.487 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:39:48.487 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 06:39:48.488 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A0 as result already exists
2022-08-06 06:39:48.488 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A1 as result already exists
2022-08-06 06:39:48.488 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A2 as result already exists
2022-08-06 06:39:48.488 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 06:39:48.488 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D0 as result already exists
2022-08-06 06:39:48.488 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D1 as result already exists
2022-08-06 06:39:48.488 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D2 as result already exists
2022-08-06 06:39:48.488 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D3 as result already exists
2022-08-06 06:39:48.488 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D4 as result already exists
2022-08-06 06:39:48.488 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D5 as result already exists
2022-08-06 06:39:48.489 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D6 as result already exists
2022-08-06 06:39:48.489 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.489 | DEBUG    | __main__:run:370 - Skipping benchmark 0:B0 as result already exists
2022-08-06 06:39:48.489 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 06:39:48.489 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C0 as result already exists
2022-08-06 06:39:48.489 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C1 as result already exists
2022-08-06 06:39:48.489 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C2 as result already exists
2022-08-06 06:39:48.489 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 06:39:48.489 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E0 as result already exists
2022-08-06 06:39:48.489 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E1 as result already exists
2022-08-06 06:39:48.490 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E2 as result already exists
2022-08-06 06:39:48.490 | DEBUG    | __main__:run:356 - Running benchmark 1
2022-08-06 06:39:48.490 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:39:48.490 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 06:39:48.490 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A0 as result already exists
2022-08-06 06:39:48.490 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A1 as result already exists
2022-08-06 06:39:48.490 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A2 as result already exists
2022-08-06 06:39:48.490 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A3 as result already exists
2022-08-06 06:39:48.490 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 06:39:48.490 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D0 as result already exists
2022-08-06 06:39:48.491 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D1 as result already exists
2022-08-06 06:39:48.491 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D2 as result already exists
2022-08-06 06:39:48.491 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D3 as result already exists
2022-08-06 06:39:48.491 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D4 as result already exists
2022-08-06 06:39:48.491 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D5 as result already exists
2022-08-06 06:39:48.491 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D6 as result already exists
2022-08-06 06:39:48.491 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D7 as result already exists
2022-08-06 06:39:48.491 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 06:39:48.491 | DEBUG    | __main__:run:370 - Skipping benchmark 1:B0 as result already exists
2022-08-06 06:39:48.492 | DEBUG    | __main__:run:370 - Skipping benchmark 1:B1 as result already exists
2022-08-06 06:39:48.492 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:39:48.492 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C0 as result already exists
2022-08-06 06:39:48.492 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C1 as result already exists
2022-08-06 06:39:48.492 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C2 as result already exists
2022-08-06 06:39:48.492 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C3 as result already exists
2022-08-06 06:39:48.492 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C4 as result already exists
2022-08-06 06:39:48.492 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C5 as result already exists
2022-08-06 06:39:48.492 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 06:39:48.492 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E0 as result already exists
2022-08-06 06:39:48.493 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E1 as result already exists
2022-08-06 06:39:48.493 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E2 as result already exists
2022-08-06 06:39:48.493 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E3 as result already exists
2022-08-06 06:39:48.493 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E4 as result already exists
2022-08-06 06:39:48.493 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E5 as result already exists
2022-08-06 06:39:48.493 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E6 as result already exists
2022-08-06 06:39:48.493 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E7 as result already exists
2022-08-06 06:39:48.493 | DEBUG    | __main__:run:356 - Running benchmark 2
2022-08-06 06:39:48.493 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:39:48.493 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:39:48.494 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A0 as result already exists
2022-08-06 06:39:48.494 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A1 as result already exists
2022-08-06 06:39:48.494 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A2 as result already exists
2022-08-06 06:39:48.494 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A3 as result already exists
2022-08-06 06:39:48.494 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A4 as result already exists
2022-08-06 06:39:48.494 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A5 as result already exists
2022-08-06 06:39:48.494 | DEBUG    | __main__:run:363 - Number of queries: 12
2022-08-06 06:39:48.494 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D0 as result already exists
2022-08-06 06:39:48.494 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D1 as result already exists
2022-08-06 06:39:48.494 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D2 as result already exists
2022-08-06 06:39:48.495 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D3 as result already exists
2022-08-06 06:39:48.495 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D4 as result already exists
2022-08-06 06:39:48.495 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D5 as result already exists
2022-08-06 06:39:48.495 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D6 as result already exists
2022-08-06 06:39:48.495 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D7 as result already exists
2022-08-06 06:39:48.495 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D8 as result already exists
2022-08-06 06:39:48.495 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D9 as result already exists
2022-08-06 06:39:48.495 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D10 as result already exists
2022-08-06 06:39:48.495 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D11 as result already exists
2022-08-06 06:39:48.496 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 06:39:48.496 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B0 as result already exists
2022-08-06 06:39:48.496 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B1 as result already exists
2022-08-06 06:39:48.496 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B2 as result already exists
2022-08-06 06:39:48.496 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B3 as result already exists
2022-08-06 06:39:48.496 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B4 as result already exists
2022-08-06 06:39:48.496 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B5 as result already exists
2022-08-06 06:39:48.496 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B6 as result already exists
2022-08-06 06:39:48.496 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B7 as result already exists
2022-08-06 06:39:48.496 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B8 as result already exists
2022-08-06 06:39:48.497 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B9 as result already exists
2022-08-06 06:39:48.497 | DEBUG    | __main__:run:363 - Number of queries: 11
2022-08-06 06:39:48.497 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C0 as result already exists
2022-08-06 06:39:48.497 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C1 as result already exists
2022-08-06 06:39:48.497 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C2 as result already exists
2022-08-06 06:39:48.497 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C3 as result already exists
2022-08-06 06:39:48.497 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C4 as result already exists
2022-08-06 06:39:48.497 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C5 as result already exists
2022-08-06 06:39:48.497 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C6 as result already exists
2022-08-06 06:39:48.497 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C7 as result already exists
2022-08-06 06:39:48.498 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C8 as result already exists
2022-08-06 06:39:48.498 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C9 as result already exists
2022-08-06 06:39:48.498 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C10 as result already exists
2022-08-06 06:39:48.498 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 06:39:48.498 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E0 as result already exists
2022-08-06 06:39:48.498 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E1 as result already exists
2022-08-06 06:39:48.498 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E2 as result already exists
2022-08-06 06:39:48.498 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E3 as result already exists
2022-08-06 06:39:48.498 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E4 as result already exists
2022-08-06 06:39:48.498 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E5 as result already exists
2022-08-06 06:39:48.499 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E6 as result already exists
2022-08-06 06:39:48.499 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E7 as result already exists
2022-08-06 06:39:48.499 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E8 as result already exists
2022-08-06 06:39:48.499 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E9 as result already exists
2022-08-06 06:39:48.499 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E10 as result already exists
2022-08-06 06:39:48.499 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E11 as result already exists
2022-08-06 06:39:48.499 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E12 as result already exists
2022-08-06 06:39:48.499 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E13 as result already exists
2022-08-06 06:39:48.499 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E14 as result already exists
2022-08-06 06:39:48.499 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E15 as result already exists
2022-08-06 06:39:48.500 | DEBUG    | __main__:run:356 - Running benchmark 3
2022-08-06 06:39:48.500 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:39:48.500 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 06:39:48.500 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A0 as result already exists
2022-08-06 06:39:48.500 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A1 as result already exists
2022-08-06 06:39:48.500 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A2 as result already exists
2022-08-06 06:39:48.500 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A3 as result already exists
2022-08-06 06:39:48.500 | DEBUG    | __main__:run:363 - Number of queries: 11
2022-08-06 06:39:48.500 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D0 as result already exists
2022-08-06 06:39:48.501 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D1 as result already exists
2022-08-06 06:39:48.501 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D2 as result already exists
2022-08-06 06:39:48.501 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D3 as result already exists
2022-08-06 06:39:48.501 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D4 as result already exists
2022-08-06 06:39:48.501 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D5 as result already exists
2022-08-06 06:39:48.501 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D6 as result already exists
2022-08-06 06:39:48.501 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D7 as result already exists
2022-08-06 06:39:48.501 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D8 as result already exists
2022-08-06 06:39:48.501 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D9 as result already exists
2022-08-06 06:39:48.501 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D10 as result already exists
2022-08-06 06:39:48.502 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:39:48.502 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B0 as result already exists
2022-08-06 06:39:48.502 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B1 as result already exists
2022-08-06 06:39:48.502 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B2 as result already exists
2022-08-06 06:39:48.502 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B3 as result already exists
2022-08-06 06:39:48.502 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B4 as result already exists
2022-08-06 06:39:48.502 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B5 as result already exists
2022-08-06 06:39:48.502 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-06 06:39:48.502 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C0 as result already exists
2022-08-06 06:39:48.502 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C1 as result already exists
2022-08-06 06:39:48.503 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C2 as result already exists
2022-08-06 06:39:48.503 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C3 as result already exists
2022-08-06 06:39:48.503 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C4 as result already exists
2022-08-06 06:39:48.503 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C5 as result already exists
2022-08-06 06:39:48.503 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C6 as result already exists
2022-08-06 06:39:48.503 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C7 as result already exists
2022-08-06 06:39:48.503 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C8 as result already exists
2022-08-06 06:39:48.503 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:39:48.503 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E0 as result already exists
2022-08-06 06:39:48.503 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E1 as result already exists
2022-08-06 06:39:48.504 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E2 as result already exists
2022-08-06 06:39:48.504 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E3 as result already exists
2022-08-06 06:39:48.504 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E4 as result already exists
2022-08-06 06:39:48.504 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E5 as result already exists
2022-08-06 06:39:48.504 | DEBUG    | __main__:run:356 - Running benchmark 4
2022-08-06 06:39:48.504 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:39:48.504 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:39:48.504 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A0 as result already exists
2022-08-06 06:39:48.504 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A1 as result already exists
2022-08-06 06:39:48.504 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A2 as result already exists
2022-08-06 06:39:48.505 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A3 as result already exists
2022-08-06 06:39:48.505 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A4 as result already exists
2022-08-06 06:39:48.505 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A5 as result already exists
2022-08-06 06:39:48.505 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 06:39:48.505 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D0 as result already exists
2022-08-06 06:39:48.505 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D1 as result already exists
2022-08-06 06:39:48.505 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D2 as result already exists
2022-08-06 06:39:48.505 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D3 as result already exists
2022-08-06 06:39:48.505 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D4 as result already exists
2022-08-06 06:39:48.506 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D5 as result already exists
2022-08-06 06:39:48.506 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D6 as result already exists
2022-08-06 06:39:48.506 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 06:39:48.506 | DEBUG    | __main__:run:370 - Skipping benchmark 4:B0 as result already exists
2022-08-06 06:39:48.506 | DEBUG    | __main__:run:370 - Skipping benchmark 4:B1 as result already exists
2022-08-06 06:39:48.506 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 06:39:48.506 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C0 as result already exists
2022-08-06 06:39:48.506 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C1 as result already exists
2022-08-06 06:39:48.506 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C2 as result already exists
2022-08-06 06:39:48.506 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C3 as result already exists
2022-08-06 06:39:48.507 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C4 as result already exists
2022-08-06 06:39:48.507 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C5 as result already exists
2022-08-06 06:39:48.507 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C6 as result already exists
2022-08-06 06:39:48.507 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:39:48.507 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E0 as result already exists
2022-08-06 06:39:48.507 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E1 as result already exists
2022-08-06 06:39:48.507 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E2 as result already exists
2022-08-06 06:39:48.507 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E3 as result already exists
2022-08-06 06:39:48.507 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E4 as result already exists
2022-08-06 06:39:48.507 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E5 as result already exists
2022-08-06 06:39:48.508 | DEBUG    | __main__:run:356 - Running benchmark 5
2022-08-06 06:39:48.508 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:39:48.508 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 06:39:48.508 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A0 as result already exists
2022-08-06 06:39:48.508 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A1 as result already exists
2022-08-06 06:39:48.508 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A2 as result already exists
2022-08-06 06:39:48.508 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A3 as result already exists
2022-08-06 06:39:48.508 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 06:39:48.508 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D0 as result already exists
2022-08-06 06:39:48.508 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D1 as result already exists
2022-08-06 06:39:48.509 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D2 as result already exists
2022-08-06 06:39:48.509 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D3 as result already exists
2022-08-06 06:39:48.509 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D4 as result already exists
2022-08-06 06:39:48.509 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D5 as result already exists
2022-08-06 06:39:48.509 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D6 as result already exists
2022-08-06 06:39:48.509 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D7 as result already exists
2022-08-06 06:39:48.509 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D8 as result already exists
2022-08-06 06:39:48.509 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D9 as result already exists
2022-08-06 06:39:48.509 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D10 as result already exists
2022-08-06 06:39:48.509 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D11 as result already exists
2022-08-06 06:39:48.510 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D12 as result already exists
2022-08-06 06:39:48.510 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D13 as result already exists
2022-08-06 06:39:48.510 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D14 as result already exists
2022-08-06 06:39:48.510 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D15 as result already exists
2022-08-06 06:39:48.510 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 06:39:48.510 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B0 as result already exists
2022-08-06 06:39:48.510 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B1 as result already exists
2022-08-06 06:39:48.510 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B2 as result already exists
2022-08-06 06:39:48.510 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B3 as result already exists
2022-08-06 06:39:48.511 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B4 as result already exists
2022-08-06 06:39:48.511 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B5 as result already exists
2022-08-06 06:39:48.511 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B6 as result already exists
2022-08-06 06:39:48.511 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:39:48.511 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C0 as result already exists
2022-08-06 06:39:48.511 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C1 as result already exists
2022-08-06 06:39:48.511 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C2 as result already exists
2022-08-06 06:39:48.511 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C3 as result already exists
2022-08-06 06:39:48.511 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C4 as result already exists
2022-08-06 06:39:48.511 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C5 as result already exists
2022-08-06 06:39:48.512 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 06:39:48.512 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E0 as result already exists
2022-08-06 06:39:48.512 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E1 as result already exists
2022-08-06 06:39:48.512 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E2 as result already exists
2022-08-06 06:39:48.512 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E3 as result already exists
2022-08-06 06:39:48.512 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E4 as result already exists
2022-08-06 06:39:48.512 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E5 as result already exists
2022-08-06 06:39:48.512 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E6 as result already exists
2022-08-06 06:39:48.512 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E7 as result already exists
2022-08-06 06:39:48.512 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E8 as result already exists
2022-08-06 06:39:48.513 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E9 as result already exists
2022-08-06 06:39:48.513 | DEBUG    | __main__:run:356 - Running benchmark 6
2022-08-06 06:39:48.513 | DEBUG    | __main__:run:357 - Number of Sets: 4
2022-08-06 06:39:48.513 | DEBUG    | __main__:run:363 - Number of queries: 27
2022-08-06 06:39:48.513 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D0 as result already exists
2022-08-06 06:39:48.513 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D1 as result already exists
2022-08-06 06:39:48.513 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D2 as result already exists
2022-08-06 06:39:48.513 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D3 as result already exists
2022-08-06 06:39:48.513 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D4 as result already exists
2022-08-06 06:39:48.513 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D5 as result already exists
2022-08-06 06:39:48.514 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D6 as result already exists
2022-08-06 06:39:48.514 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D7 as result already exists
2022-08-06 06:39:48.514 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D8 as result already exists
2022-08-06 06:39:48.514 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D9 as result already exists
2022-08-06 06:39:48.514 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D10 as result already exists
2022-08-06 06:39:48.514 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D11 as result already exists
2022-08-06 06:39:48.514 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D12 as result already exists
2022-08-06 06:39:48.514 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D13 as result already exists
2022-08-06 06:39:48.514 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D14 as result already exists
2022-08-06 06:39:48.514 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D15 as result already exists
2022-08-06 06:39:48.515 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D16 as result already exists
2022-08-06 06:39:48.515 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D17 as result already exists
2022-08-06 06:39:48.515 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D18 as result already exists
2022-08-06 06:39:48.515 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D19 as result already exists
2022-08-06 06:39:48.515 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D20 as result already exists
2022-08-06 06:39:48.515 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D21 as result already exists
2022-08-06 06:39:48.515 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D22 as result already exists
2022-08-06 06:39:48.515 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D23 as result already exists
2022-08-06 06:39:48.515 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D24 as result already exists
2022-08-06 06:39:48.516 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D25 as result already exists
2022-08-06 06:39:48.516 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D26 as result already exists
2022-08-06 06:39:48.516 | DEBUG    | __main__:run:363 - Number of queries: 26
2022-08-06 06:39:48.516 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B0 as result already exists
2022-08-06 06:39:48.516 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B1 as result already exists
2022-08-06 06:39:48.516 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B2 as result already exists
2022-08-06 06:39:48.516 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B3 as result already exists
2022-08-06 06:39:48.516 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B4 as result already exists
2022-08-06 06:39:48.516 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B5 as result already exists
2022-08-06 06:39:48.516 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B6 as result already exists
2022-08-06 06:39:48.517 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B7 as result already exists
2022-08-06 06:39:48.517 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B8 as result already exists
2022-08-06 06:39:48.517 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B9 as result already exists
2022-08-06 06:39:48.517 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B10 as result already exists
2022-08-06 06:39:48.517 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B11 as result already exists
2022-08-06 06:39:48.517 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B12 as result already exists
2022-08-06 06:39:48.517 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B13 as result already exists
2022-08-06 06:39:48.517 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B14 as result already exists
2022-08-06 06:39:48.517 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B15 as result already exists
2022-08-06 06:39:48.517 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B16 as result already exists
2022-08-06 06:39:48.518 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B17 as result already exists
2022-08-06 06:39:48.518 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B18 as result already exists
2022-08-06 06:39:48.518 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B19 as result already exists
2022-08-06 06:39:48.518 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B20 as result already exists
2022-08-06 06:39:48.518 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B21 as result already exists
2022-08-06 06:39:48.518 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B22 as result already exists
2022-08-06 06:39:48.518 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B23 as result already exists
2022-08-06 06:39:48.518 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B24 as result already exists
2022-08-06 06:39:48.518 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B25 as result already exists
2022-08-06 06:39:48.518 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 06:39:48.519 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E0 as result already exists
2022-08-06 06:39:48.519 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E1 as result already exists
2022-08-06 06:39:48.519 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E2 as result already exists
2022-08-06 06:39:48.519 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E3 as result already exists
2022-08-06 06:39:48.519 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E4 as result already exists
2022-08-06 06:39:48.519 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E5 as result already exists
2022-08-06 06:39:48.519 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E6 as result already exists
2022-08-06 06:39:48.519 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 06:39:48.519 | DEBUG    | __main__:run:370 - Skipping benchmark 6:C0 as result already exists
2022-08-06 06:39:48.519 | DEBUG    | __main__:run:370 - Skipping benchmark 6:C1 as result already exists
2022-08-06 06:39:48.520 | DEBUG    | __main__:run:356 - Running benchmark 7
2022-08-06 06:39:48.520 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-06 06:39:48.520 | DEBUG    | __main__:run:363 - Number of queries: 21
2022-08-06 06:39:48.520 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D0 as result already exists
2022-08-06 06:39:48.520 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D1 as result already exists
2022-08-06 06:39:48.520 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D2 as result already exists
2022-08-06 06:39:48.520 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D3 as result already exists
2022-08-06 06:39:48.520 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D4 as result already exists
2022-08-06 06:39:48.520 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D5 as result already exists
2022-08-06 06:39:48.521 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D6 as result already exists
2022-08-06 06:39:48.521 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D7 as result already exists
2022-08-06 06:39:48.521 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D8 as result already exists
2022-08-06 06:39:48.521 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D9 as result already exists
2022-08-06 06:39:48.521 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D10 as result already exists
2022-08-06 06:39:48.521 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D11 as result already exists
2022-08-06 06:39:48.521 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D12 as result already exists
2022-08-06 06:39:48.521 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D13 as result already exists
2022-08-06 06:39:48.521 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D14 as result already exists
2022-08-06 06:39:48.521 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D15 as result already exists
2022-08-06 06:39:48.522 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D16 as result already exists
2022-08-06 06:39:48.522 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D17 as result already exists
2022-08-06 06:39:48.522 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D18 as result already exists
2022-08-06 06:39:48.522 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D19 as result already exists
2022-08-06 06:39:48.522 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D20 as result already exists
2022-08-06 06:39:48.522 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 06:39:48.522 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A0 as result already exists
2022-08-06 06:39:48.522 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A1 as result already exists
2022-08-06 06:39:48.522 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A2 as result already exists
2022-08-06 06:39:48.522 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 06:39:48.523 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E0 as result already exists
2022-08-06 06:39:48.523 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E1 as result already exists
2022-08-06 06:39:48.523 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E2 as result already exists
2022-08-06 06:39:48.523 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E3 as result already exists
2022-08-06 06:39:48.523 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E4 as result already exists
2022-08-06 06:39:48.523 | DEBUG    | __main__:run:356 - Running benchmark 8
2022-08-06 06:39:48.523 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-06 06:39:48.523 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 06:39:48.523 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C0 as result already exists
2022-08-06 06:39:48.523 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C1 as result already exists
2022-08-06 06:39:48.524 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C2 as result already exists
2022-08-06 06:39:48.524 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C3 as result already exists
2022-08-06 06:39:48.524 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:39:48.524 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A0 as result already exists
2022-08-06 06:39:48.524 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A1 as result already exists
2022-08-06 06:39:48.524 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A2 as result already exists
2022-08-06 06:39:48.524 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A3 as result already exists
2022-08-06 06:39:48.524 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A4 as result already exists
2022-08-06 06:39:48.524 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A5 as result already exists
2022-08-06 06:39:48.524 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-06 06:39:48.525 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D0 as result already exists
2022-08-06 06:39:48.525 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D1 as result already exists
2022-08-06 06:39:48.525 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D2 as result already exists
2022-08-06 06:39:48.525 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D3 as result already exists
2022-08-06 06:39:48.525 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D4 as result already exists
2022-08-06 06:39:48.525 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D5 as result already exists
2022-08-06 06:39:48.525 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D6 as result already exists
2022-08-06 06:39:48.525 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D7 as result already exists
2022-08-06 06:39:48.525 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D8 as result already exists
2022-08-06 06:39:48.525 | DEBUG    | __main__:run:356 - Running benchmark 9
2022-08-06 06:39:48.526 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:39:48.526 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 06:39:48.526 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D0 as result already exists
2022-08-06 06:39:48.526 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D1 as result already exists
2022-08-06 06:39:48.526 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D2 as result already exists
2022-08-06 06:39:48.526 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D3 as result already exists
2022-08-06 06:39:48.526 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D4 as result already exists
2022-08-06 06:39:48.526 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D5 as result already exists
2022-08-06 06:39:48.526 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D6 as result already exists
2022-08-06 06:39:48.527 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D7 as result already exists
2022-08-06 06:39:48.527 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D8 as result already exists
2022-08-06 06:39:48.527 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D9 as result already exists
2022-08-06 06:39:48.527 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 06:39:48.527 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B0 as result already exists
2022-08-06 06:39:48.527 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B1 as result already exists
2022-08-06 06:39:48.527 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B2 as result already exists
2022-08-06 06:39:48.527 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 06:39:48.527 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C0 as result already exists
2022-08-06 06:39:48.527 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C1 as result already exists
2022-08-06 06:39:48.528 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C2 as result already exists
2022-08-06 06:39:48.528 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C3 as result already exists
2022-08-06 06:39:48.528 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C4 as result already exists
2022-08-06 06:39:48.528 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C5 as result already exists
2022-08-06 06:39:48.528 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C6 as result already exists
2022-08-06 06:39:48.528 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 06:39:48.528 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A0 as result already exists
2022-08-06 06:39:48.528 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A1 as result already exists
2022-08-06 06:39:48.528 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A2 as result already exists
2022-08-06 06:39:48.528 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A3 as result already exists
2022-08-06 06:39:48.529 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A4 as result already exists
2022-08-06 06:39:48.529 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 06:39:48.529 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E0 as result already exists
2022-08-06 06:39:48.529 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E1 as result already exists
2022-08-06 06:39:48.529 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E2 as result already exists
2022-08-06 06:39:48.529 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E3 as result already exists
2022-08-06 06:39:48.529 | DEBUG    | __main__:run:356 - Running benchmark 10
2022-08-06 06:39:48.529 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:39:48.529 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.529 | DEBUG    | __main__:run:370 - Skipping benchmark 10:C0 as result already exists
2022-08-06 06:39:48.530 | DEBUG    | __main__:run:363 - Number of queries: 23
2022-08-06 06:39:48.530 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D0 as result already exists
2022-08-06 06:39:48.530 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D1 as result already exists
2022-08-06 06:39:48.530 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D2 as result already exists
2022-08-06 06:39:48.530 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D3 as result already exists
2022-08-06 06:39:48.530 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D4 as result already exists
2022-08-06 06:39:48.530 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D5 as result already exists
2022-08-06 06:39:48.530 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D6 as result already exists
2022-08-06 06:39:48.530 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D7 as result already exists
2022-08-06 06:39:48.530 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D8 as result already exists
2022-08-06 06:39:48.531 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D9 as result already exists
2022-08-06 06:39:48.531 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D10 as result already exists
2022-08-06 06:39:48.531 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D11 as result already exists
2022-08-06 06:39:48.531 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D12 as result already exists
2022-08-06 06:39:48.531 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D13 as result already exists
2022-08-06 06:39:48.531 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D14 as result already exists
2022-08-06 06:39:48.531 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D15 as result already exists
2022-08-06 06:39:48.531 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D16 as result already exists
2022-08-06 06:39:48.531 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D17 as result already exists
2022-08-06 06:39:48.532 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D18 as result already exists
2022-08-06 06:39:48.532 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D19 as result already exists
2022-08-06 06:39:48.532 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D20 as result already exists
2022-08-06 06:39:48.532 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D21 as result already exists
2022-08-06 06:39:48.532 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D22 as result already exists
2022-08-06 06:39:48.532 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.532 | DEBUG    | __main__:run:370 - Skipping benchmark 10:A0 as result already exists
2022-08-06 06:39:48.532 | DEBUG    | __main__:run:363 - Number of queries: 12
2022-08-06 06:39:48.532 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E0 as result already exists
2022-08-06 06:39:48.532 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E1 as result already exists
2022-08-06 06:39:48.533 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E2 as result already exists
2022-08-06 06:39:48.533 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E3 as result already exists
2022-08-06 06:39:48.533 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E4 as result already exists
2022-08-06 06:39:48.533 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E5 as result already exists
2022-08-06 06:39:48.533 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E6 as result already exists
2022-08-06 06:39:48.533 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E7 as result already exists
2022-08-06 06:39:48.533 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E8 as result already exists
2022-08-06 06:39:48.533 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E9 as result already exists
2022-08-06 06:39:48.533 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E10 as result already exists
2022-08-06 06:39:48.533 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E11 as result already exists
2022-08-06 06:39:48.534 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.534 | DEBUG    | __main__:run:370 - Skipping benchmark 10:B0 as result already exists
2022-08-06 06:39:48.534 | DEBUG    | __main__:run:356 - Running benchmark 11
2022-08-06 06:39:48.534 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:39:48.534 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 06:39:48.534 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D0 as result already exists
2022-08-06 06:39:48.534 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D1 as result already exists
2022-08-06 06:39:48.534 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D2 as result already exists
2022-08-06 06:39:48.534 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D3 as result already exists
2022-08-06 06:39:48.534 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D4 as result already exists
2022-08-06 06:39:48.535 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D5 as result already exists
2022-08-06 06:39:48.535 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D6 as result already exists
2022-08-06 06:39:48.535 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D7 as result already exists
2022-08-06 06:39:48.535 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.535 | DEBUG    | __main__:run:370 - Skipping benchmark 11:C0 as result already exists
2022-08-06 06:39:48.535 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 06:39:48.535 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A0 as result already exists
2022-08-06 06:39:48.535 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A1 as result already exists
2022-08-06 06:39:48.535 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A2 as result already exists
2022-08-06 06:39:48.535 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A3 as result already exists
2022-08-06 06:39:48.536 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 06:39:48.536 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E0 as result already exists
2022-08-06 06:39:48.536 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E1 as result already exists
2022-08-06 06:39:48.536 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E2 as result already exists
2022-08-06 06:39:48.536 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 06:39:48.536 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B0 as result already exists
2022-08-06 06:39:48.536 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B1 as result already exists
2022-08-06 06:39:48.536 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B2 as result already exists
2022-08-06 06:39:48.536 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B3 as result already exists
2022-08-06 06:39:48.537 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B4 as result already exists
2022-08-06 06:39:48.537 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B5 as result already exists
2022-08-06 06:39:48.537 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B6 as result already exists
2022-08-06 06:39:48.537 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B7 as result already exists
2022-08-06 06:39:48.537 | DEBUG    | __main__:run:356 - Running benchmark 12
2022-08-06 06:39:48.537 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:39:48.537 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 06:39:48.537 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D0 as result already exists
2022-08-06 06:39:48.537 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D1 as result already exists
2022-08-06 06:39:48.537 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D2 as result already exists
2022-08-06 06:39:48.538 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D3 as result already exists
2022-08-06 06:39:48.538 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.538 | DEBUG    | __main__:run:370 - Skipping benchmark 12:B0 as result already exists
2022-08-06 06:39:48.538 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 06:39:48.538 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C0 as result already exists
2022-08-06 06:39:48.538 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C1 as result already exists
2022-08-06 06:39:48.538 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C2 as result already exists
2022-08-06 06:39:48.538 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C3 as result already exists
2022-08-06 06:39:48.538 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C4 as result already exists
2022-08-06 06:39:48.538 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 06:39:48.539 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A0 as result already exists
2022-08-06 06:39:48.539 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A1 as result already exists
2022-08-06 06:39:48.539 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A2 as result already exists
2022-08-06 06:39:48.539 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A3 as result already exists
2022-08-06 06:39:48.539 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A4 as result already exists
2022-08-06 06:39:48.539 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A5 as result already exists
2022-08-06 06:39:48.539 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A6 as result already exists
2022-08-06 06:39:48.539 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A7 as result already exists
2022-08-06 06:39:48.539 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 06:39:48.539 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E0 as result already exists
2022-08-06 06:39:48.540 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E1 as result already exists
2022-08-06 06:39:48.540 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E2 as result already exists
2022-08-06 06:39:48.540 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E3 as result already exists
2022-08-06 06:39:48.540 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E4 as result already exists
2022-08-06 06:39:48.540 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E5 as result already exists
2022-08-06 06:39:48.540 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E6 as result already exists
2022-08-06 06:39:48.540 | DEBUG    | __main__:run:356 - Running benchmark 13
2022-08-06 06:39:48.540 | DEBUG    | __main__:run:357 - Number of Sets: 2
2022-08-06 06:39:48.540 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 06:39:48.540 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B0 as result already exists
2022-08-06 06:39:48.541 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B1 as result already exists
2022-08-06 06:39:48.541 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B2 as result already exists
2022-08-06 06:39:48.541 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.541 | DEBUG    | __main__:run:370 - Skipping benchmark 13:A0 as result already exists
2022-08-06 06:39:48.541 | DEBUG    | __main__:run:356 - Running benchmark 14
2022-08-06 06:39:48.541 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:39:48.541 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 06:39:48.541 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D0 as result already exists
2022-08-06 06:39:48.541 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D1 as result already exists
2022-08-06 06:39:48.541 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D2 as result already exists
2022-08-06 06:39:48.542 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D3 as result already exists
2022-08-06 06:39:48.542 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D4 as result already exists
2022-08-06 06:39:48.542 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D5 as result already exists
2022-08-06 06:39:48.542 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D6 as result already exists
2022-08-06 06:39:48.542 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D7 as result already exists
2022-08-06 06:39:48.542 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D8 as result already exists
2022-08-06 06:39:48.542 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D9 as result already exists
2022-08-06 06:39:48.542 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-06 06:39:48.542 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C0 as result already exists
2022-08-06 06:39:48.542 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C1 as result already exists
2022-08-06 06:39:48.543 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C2 as result already exists
2022-08-06 06:39:48.543 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C3 as result already exists
2022-08-06 06:39:48.543 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C4 as result already exists
2022-08-06 06:39:48.543 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C5 as result already exists
2022-08-06 06:39:48.543 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C6 as result already exists
2022-08-06 06:39:48.543 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C7 as result already exists
2022-08-06 06:39:48.543 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C8 as result already exists
2022-08-06 06:39:48.543 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 06:39:48.543 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A0 as result already exists
2022-08-06 06:39:48.544 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A1 as result already exists
2022-08-06 06:39:48.544 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A2 as result already exists
2022-08-06 06:39:48.544 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A3 as result already exists
2022-08-06 06:39:48.544 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A4 as result already exists
2022-08-06 06:39:48.544 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-06 06:39:48.544 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E0 as result already exists
2022-08-06 06:39:48.544 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E1 as result already exists
2022-08-06 06:39:48.544 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E2 as result already exists
2022-08-06 06:39:48.544 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E3 as result already exists
2022-08-06 06:39:48.544 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E4 as result already exists
2022-08-06 06:39:48.545 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E5 as result already exists
2022-08-06 06:39:48.545 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E6 as result already exists
2022-08-06 06:39:48.545 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E7 as result already exists
2022-08-06 06:39:48.545 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E8 as result already exists
2022-08-06 06:39:48.545 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E9 as result already exists
2022-08-06 06:39:48.545 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E10 as result already exists
2022-08-06 06:39:48.545 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E11 as result already exists
2022-08-06 06:39:48.545 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E12 as result already exists
2022-08-06 06:39:48.545 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:39:48.545 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B0 as result already exists
2022-08-06 06:39:48.546 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B1 as result already exists
2022-08-06 06:39:48.546 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B2 as result already exists
2022-08-06 06:39:48.546 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B3 as result already exists
2022-08-06 06:39:48.546 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B4 as result already exists
2022-08-06 06:39:48.546 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B5 as result already exists
2022-08-06 06:39:48.546 | DEBUG    | __main__:run:356 - Running benchmark 15
2022-08-06 06:39:48.546 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:39:48.546 | DEBUG    | __main__:run:363 - Number of queries: 18
2022-08-06 06:39:48.546 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D0 as result already exists
2022-08-06 06:39:48.546 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D1 as result already exists
2022-08-06 06:39:48.547 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D2 as result already exists
2022-08-06 06:39:48.547 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D3 as result already exists
2022-08-06 06:39:48.547 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D4 as result already exists
2022-08-06 06:39:48.547 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D5 as result already exists
2022-08-06 06:39:48.547 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D6 as result already exists
2022-08-06 06:39:48.547 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D7 as result already exists
2022-08-06 06:39:48.547 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D8 as result already exists
2022-08-06 06:39:48.547 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D9 as result already exists
2022-08-06 06:39:48.547 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D10 as result already exists
2022-08-06 06:39:48.547 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D11 as result already exists
2022-08-06 06:39:48.548 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D12 as result already exists
2022-08-06 06:39:48.548 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D13 as result already exists
2022-08-06 06:39:48.548 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D14 as result already exists
2022-08-06 06:39:48.548 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D15 as result already exists
2022-08-06 06:39:48.548 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D16 as result already exists
2022-08-06 06:39:48.548 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D17 as result already exists
2022-08-06 06:39:48.548 | DEBUG    | __main__:run:363 - Number of queries: 22
2022-08-06 06:39:48.548 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B0 as result already exists
2022-08-06 06:39:48.548 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B1 as result already exists
2022-08-06 06:39:48.549 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B2 as result already exists
2022-08-06 06:39:48.549 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B3 as result already exists
2022-08-06 06:39:48.549 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B4 as result already exists
2022-08-06 06:39:48.549 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B5 as result already exists
2022-08-06 06:39:48.549 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B6 as result already exists
2022-08-06 06:39:48.549 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B7 as result already exists
2022-08-06 06:39:48.549 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B8 as result already exists
2022-08-06 06:39:48.781 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B9 as result already exists
2022-08-06 06:39:48.782 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B10 as result already exists
2022-08-06 06:39:48.782 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B11 as result already exists
2022-08-06 06:39:48.783 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B12 as result already exists
2022-08-06 06:39:48.784 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B13 as result already exists
2022-08-06 06:39:48.784 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B14 as result already exists
2022-08-06 06:39:48.785 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B15 as result already exists
2022-08-06 06:39:48.786 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B16 as result already exists
2022-08-06 06:39:48.786 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B17 as result already exists
2022-08-06 06:39:48.786 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B18 as result already exists
2022-08-06 06:39:48.786 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B19 as result already exists
2022-08-06 06:39:48.787 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B20 as result already exists
2022-08-06 06:39:48.787 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B21 as result already exists
2022-08-06 06:39:48.787 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 06:39:48.787 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C0 as result already exists
2022-08-06 06:39:48.787 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C1 as result already exists
2022-08-06 06:39:48.787 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C2 as result already exists
2022-08-06 06:39:48.787 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C3 as result already exists
2022-08-06 06:39:48.788 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C4 as result already exists
2022-08-06 06:39:48.788 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 06:39:48.788 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A0 as result already exists
2022-08-06 06:39:48.788 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A1 as result already exists
2022-08-06 06:39:48.788 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A2 as result already exists
2022-08-06 06:39:48.788 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A3 as result already exists
2022-08-06 06:39:48.788 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A4 as result already exists
2022-08-06 06:39:48.788 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A5 as result already exists
2022-08-06 06:39:48.789 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A6 as result already exists
2022-08-06 06:39:48.789 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A7 as result already exists
2022-08-06 06:39:48.789 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 06:39:48.789 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E0 as result already exists
2022-08-06 06:39:48.789 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E1 as result already exists
2022-08-06 06:39:48.789 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E2 as result already exists
2022-08-06 06:39:48.789 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E3 as result already exists
2022-08-06 06:39:48.790 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E4 as result already exists
2022-08-06 06:39:48.790 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E5 as result already exists
2022-08-06 06:39:48.790 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E6 as result already exists
2022-08-06 06:39:48.790 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E7 as result already exists
2022-08-06 06:39:48.790 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E8 as result already exists
2022-08-06 06:39:48.790 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E9 as result already exists
2022-08-06 06:39:48.790 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E10 as result already exists
2022-08-06 06:39:48.790 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E11 as result already exists
2022-08-06 06:39:48.790 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E12 as result already exists
2022-08-06 06:39:48.790 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E13 as result already exists
2022-08-06 06:39:48.791 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E14 as result already exists
2022-08-06 06:39:48.791 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E15 as result already exists
2022-08-06 06:39:48.791 | DEBUG    | __main__:run:356 - Running benchmark 16
2022-08-06 06:39:48.791 | DEBUG    | __main__:run:357 - Number of Sets: 4
2022-08-06 06:39:48.791 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 06:39:48.791 | DEBUG    | __main__:run:370 - Skipping benchmark 16:B0 as result already exists
2022-08-06 06:39:48.791 | DEBUG    | __main__:run:370 - Skipping benchmark 16:B1 as result already exists
2022-08-06 06:39:48.791 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.791 | DEBUG    | __main__:run:370 - Skipping benchmark 16:A0 as result already exists
2022-08-06 06:39:48.791 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:39:48.792 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E0 as result already exists
2022-08-06 06:39:48.792 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E1 as result already exists
2022-08-06 06:39:48.792 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E2 as result already exists
2022-08-06 06:39:48.792 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E3 as result already exists
2022-08-06 06:39:48.792 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E4 as result already exists
2022-08-06 06:39:48.792 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E5 as result already exists
2022-08-06 06:39:48.792 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 06:39:48.792 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D0 as result already exists
2022-08-06 06:39:48.792 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D1 as result already exists
2022-08-06 06:39:48.793 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D2 as result already exists
2022-08-06 06:39:48.793 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D3 as result already exists
2022-08-06 06:39:48.793 | DEBUG    | __main__:run:356 - Running benchmark 17
2022-08-06 06:39:48.793 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:39:48.793 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 06:39:48.793 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B0 as result already exists
2022-08-06 06:39:48.793 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B1 as result already exists
2022-08-06 06:39:48.793 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B2 as result already exists
2022-08-06 06:39:48.793 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B3 as result already exists
2022-08-06 06:39:48.793 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B4 as result already exists
2022-08-06 06:39:48.794 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B5 as result already exists
2022-08-06 06:39:48.794 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B6 as result already exists
2022-08-06 06:39:48.794 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B7 as result already exists
2022-08-06 06:39:48.794 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-06 06:39:48.794 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C0 as result already exists
2022-08-06 06:39:48.794 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C1 as result already exists
2022-08-06 06:39:48.794 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C2 as result already exists
2022-08-06 06:39:48.794 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C3 as result already exists
2022-08-06 06:39:48.794 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C4 as result already exists
2022-08-06 06:39:48.794 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C5 as result already exists
2022-08-06 06:39:48.795 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C6 as result already exists
2022-08-06 06:39:48.795 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C7 as result already exists
2022-08-06 06:39:48.795 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C8 as result already exists
2022-08-06 06:39:48.795 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C9 as result already exists
2022-08-06 06:39:48.795 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C10 as result already exists
2022-08-06 06:39:48.795 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C11 as result already exists
2022-08-06 06:39:48.795 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C12 as result already exists
2022-08-06 06:39:48.795 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 06:39:48.795 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A0 as result already exists
2022-08-06 06:39:48.795 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A1 as result already exists
2022-08-06 06:39:48.796 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A2 as result already exists
2022-08-06 06:39:48.796 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A3 as result already exists
2022-08-06 06:39:48.796 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A4 as result already exists
2022-08-06 06:39:48.796 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A5 as result already exists
2022-08-06 06:39:48.796 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A6 as result already exists
2022-08-06 06:39:48.796 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-06 06:39:48.796 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D0 as result already exists
2022-08-06 06:39:48.796 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D1 as result already exists
2022-08-06 06:39:48.796 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D2 as result already exists
2022-08-06 06:39:48.796 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D3 as result already exists
2022-08-06 06:39:48.797 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D4 as result already exists
2022-08-06 06:39:48.797 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D5 as result already exists
2022-08-06 06:39:48.797 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D6 as result already exists
2022-08-06 06:39:48.797 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D7 as result already exists
2022-08-06 06:39:48.797 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D8 as result already exists
2022-08-06 06:39:48.797 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D9 as result already exists
2022-08-06 06:39:48.797 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D10 as result already exists
2022-08-06 06:39:48.797 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D11 as result already exists
2022-08-06 06:39:48.797 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D12 as result already exists
2022-08-06 06:39:48.797 | DEBUG    | __main__:run:363 - Number of queries: 25
2022-08-06 06:39:48.798 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E0 as result already exists
2022-08-06 06:39:48.798 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E1 as result already exists
2022-08-06 06:39:48.798 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E2 as result already exists
2022-08-06 06:39:48.798 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E3 as result already exists
2022-08-06 06:39:48.798 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E4 as result already exists
2022-08-06 06:39:48.798 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E5 as result already exists
2022-08-06 06:39:48.798 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E6 as result already exists
2022-08-06 06:39:48.798 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E7 as result already exists
2022-08-06 06:39:48.798 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E8 as result already exists
2022-08-06 06:39:48.799 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E9 as result already exists
2022-08-06 06:39:48.799 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E10 as result already exists
2022-08-06 06:39:48.799 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E11 as result already exists
2022-08-06 06:39:48.799 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E12 as result already exists
2022-08-06 06:39:48.799 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E13 as result already exists
2022-08-06 06:39:48.799 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E14 as result already exists
2022-08-06 06:39:48.799 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E15 as result already exists
2022-08-06 06:39:48.799 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E16 as result already exists
2022-08-06 06:39:48.799 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E17 as result already exists
2022-08-06 06:39:48.799 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E18 as result already exists
2022-08-06 06:39:48.800 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E19 as result already exists
2022-08-06 06:39:48.800 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E20 as result already exists
2022-08-06 06:39:48.800 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E21 as result already exists
2022-08-06 06:39:48.800 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E22 as result already exists
2022-08-06 06:39:48.800 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E23 as result already exists
2022-08-06 06:39:48.800 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E24 as result already exists
2022-08-06 06:39:48.800 | DEBUG    | __main__:run:356 - Running benchmark 18
2022-08-06 06:39:48.800 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-06 06:39:48.800 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 06:39:48.800 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A0 as result already exists
2022-08-06 06:39:48.801 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A1 as result already exists
2022-08-06 06:39:48.801 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A2 as result already exists
2022-08-06 06:39:48.801 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A3 as result already exists
2022-08-06 06:39:48.801 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A4 as result already exists
2022-08-06 06:39:48.801 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A5 as result already exists
2022-08-06 06:39:48.801 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 06:39:48.801 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D0 as result already exists
2022-08-06 06:39:48.801 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D1 as result already exists
2022-08-06 06:39:48.801 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D2 as result already exists
2022-08-06 06:39:48.801 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D3 as result already exists
2022-08-06 06:39:48.802 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D4 as result already exists
2022-08-06 06:39:48.802 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D5 as result already exists
2022-08-06 06:39:48.802 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D6 as result already exists
2022-08-06 06:39:48.802 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D7 as result already exists
2022-08-06 06:39:48.802 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D8 as result already exists
2022-08-06 06:39:48.802 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D9 as result already exists
2022-08-06 06:39:48.802 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D10 as result already exists
2022-08-06 06:39:48.802 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D11 as result already exists
2022-08-06 06:39:48.802 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D12 as result already exists
2022-08-06 06:39:48.802 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D13 as result already exists
2022-08-06 06:39:48.803 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D14 as result already exists
2022-08-06 06:39:48.803 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D15 as result already exists
2022-08-06 06:39:48.803 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 06:39:48.803 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E0 as result already exists
2022-08-06 06:39:48.803 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E1 as result already exists
2022-08-06 06:39:48.803 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E2 as result already exists
2022-08-06 06:39:48.803 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E3 as result already exists
2022-08-06 06:39:48.803 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E4 as result already exists
2022-08-06 06:39:48.803 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E5 as result already exists
2022-08-06 06:39:48.803 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E6 as result already exists
2022-08-06 06:39:48.804 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E7 as result already exists
2022-08-06 06:39:48.804 | DEBUG    | __main__:run:356 - Running benchmark 19
2022-08-06 06:39:48.804 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:39:48.804 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 06:39:48.804 | DEBUG    | __main__:run:370 - Skipping benchmark 19:B0 as result already exists
2022-08-06 06:39:48.804 | DEBUG    | __main__:run:370 - Skipping benchmark 19:B1 as result already exists
2022-08-06 06:39:48.804 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 06:39:48.804 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C0 as result already exists
2022-08-06 06:39:48.804 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C1 as result already exists
2022-08-06 06:39:48.805 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C2 as result already exists
2022-08-06 06:39:48.805 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C3 as result already exists
2022-08-06 06:39:48.805 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C4 as result already exists
2022-08-06 06:39:48.805 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 06:39:48.805 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D0 as result already exists
2022-08-06 06:39:48.805 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D1 as result already exists
2022-08-06 06:39:48.805 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D2 as result already exists
2022-08-06 06:39:48.805 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D3 as result already exists
2022-08-06 06:39:48.805 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D4 as result already exists
2022-08-06 06:39:48.805 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D5 as result already exists
2022-08-06 06:39:48.806 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D6 as result already exists
2022-08-06 06:39:48.806 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D7 as result already exists
2022-08-06 06:39:48.806 | DEBUG    | __main__:run:363 - Number of queries: 18
2022-08-06 06:39:48.806 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A0 as result already exists
2022-08-06 06:39:48.806 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A1 as result already exists
2022-08-06 06:39:48.806 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A2 as result already exists
2022-08-06 06:39:48.806 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A3 as result already exists
2022-08-06 06:39:48.806 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A4 as result already exists
2022-08-06 06:39:48.806 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A5 as result already exists
2022-08-06 06:39:48.806 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A6 as result already exists
2022-08-06 06:39:48.807 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A7 as result already exists
2022-08-06 06:39:48.807 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A8 as result already exists
2022-08-06 06:39:48.807 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A9 as result already exists
2022-08-06 06:39:48.807 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A10 as result already exists
2022-08-06 06:39:48.807 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A11 as result already exists
2022-08-06 06:39:48.807 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A12 as result already exists
2022-08-06 06:39:48.807 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A13 as result already exists
2022-08-06 06:39:48.807 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A14 as result already exists
2022-08-06 06:39:48.807 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A15 as result already exists
2022-08-06 06:39:48.807 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A16 as result already exists
2022-08-06 06:39:48.808 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A17 as result already exists
2022-08-06 06:39:48.808 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 06:39:48.808 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E0 as result already exists
2022-08-06 06:39:48.808 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E1 as result already exists
2022-08-06 06:39:48.808 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E2 as result already exists
2022-08-06 06:39:48.808 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E3 as result already exists
2022-08-06 06:39:48.808 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E4 as result already exists
2022-08-06 06:39:48.808 | DEBUG    | __main__:run:356 - Running benchmark 20
2022-08-06 06:39:48.808 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 06:39:48.809 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 06:39:48.809 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B0 as result already exists
2022-08-06 06:39:48.809 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B1 as result already exists
2022-08-06 06:39:48.809 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B2 as result already exists
2022-08-06 06:39:48.809 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B3 as result already exists
2022-08-06 06:39:48.809 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 06:39:48.809 | DEBUG    | __main__:run:370 - Skipping benchmark 20:C0 as result already exists
2022-08-06 06:39:48.809 | DEBUG    | __main__:run:363 - Number of queries: 17
2022-08-06 06:39:48.809 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D0 as result already exists
2022-08-06 06:39:48.809 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D1 as result already exists
2022-08-06 06:39:48.810 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D2 as result already exists
2022-08-06 06:39:48.810 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D3 as result already exists
2022-08-06 06:39:48.810 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D4 as result already exists
2022-08-06 06:39:48.810 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D5 as result already exists
2022-08-06 06:39:48.810 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D6 as result already exists
2022-08-06 06:39:48.810 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D7 as result already exists
2022-08-06 06:39:48.810 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D8 as result already exists
2022-08-06 06:39:48.810 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D9 as result already exists
2022-08-06 06:39:48.810 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D10 as result already exists
2022-08-06 06:39:48.810 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D11 as result already exists
2022-08-06 06:39:48.811 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D12 as result already exists
2022-08-06 06:39:48.811 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D13 as result already exists
2022-08-06 06:39:48.811 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D14 as result already exists
2022-08-06 06:39:48.811 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D15 as result already exists
2022-08-06 06:39:48.811 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D16 as result already exists
2022-08-06 06:39:48.811 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 06:39:48.811 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A0 as result already exists
2022-08-06 06:39:48.811 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A1 as result already exists
2022-08-06 06:39:48.811 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A2 as result already exists
2022-08-06 06:39:48.811 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A3 as result already exists
2022-08-06 06:39:48.812 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A4 as result already exists
2022-08-06 06:39:48.812 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 06:39:48.812 | DEBUG    | __main__:run:370 - Skipping benchmark 20:E0 as result already exists
2022-08-06 06:39:48.812 | DEBUG    | __main__:run:370 - Skipping benchmark 20:E1 as result already exists
2022-08-06 08:20:49.845 | DEBUG    | __main__:run:345 - Running benchmark set PandasEval1
2022-08-06 08:20:49.845 | DEBUG    | __main__:run:346 - Found 68 benchmarks in PandasEval1
2022-08-06 08:20:49.846 | DEBUG    | __main__:run:356 - Running benchmark 0
2022-08-06 08:20:49.846 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.846 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.846 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A0 as result already exists
2022-08-06 08:20:49.846 | DEBUG    | __main__:run:356 - Running benchmark 1
2022-08-06 08:20:49.846 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.846 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.846 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A0 as result already exists
2022-08-06 08:20:49.846 | DEBUG    | __main__:run:356 - Running benchmark 2
2022-08-06 08:20:49.847 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.847 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.847 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A0 as result already exists
2022-08-06 08:20:49.847 | DEBUG    | __main__:run:356 - Running benchmark 3
2022-08-06 08:20:49.847 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.847 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.847 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A0 as result already exists
2022-08-06 08:20:49.847 | DEBUG    | __main__:run:356 - Running benchmark 4
2022-08-06 08:20:49.848 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.848 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.848 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A0 as result already exists
2022-08-06 08:20:49.848 | DEBUG    | __main__:run:356 - Running benchmark 5
2022-08-06 08:20:49.848 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.848 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.848 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A0 as result already exists
2022-08-06 08:20:49.848 | DEBUG    | __main__:run:356 - Running benchmark 6
2022-08-06 08:20:49.849 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.849 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.849 | DEBUG    | __main__:run:370 - Skipping benchmark 6:A0 as result already exists
2022-08-06 08:20:49.849 | DEBUG    | __main__:run:356 - Running benchmark 7
2022-08-06 08:20:49.849 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.849 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.849 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A0 as result already exists
2022-08-06 08:20:49.849 | DEBUG    | __main__:run:356 - Running benchmark 8
2022-08-06 08:20:49.850 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.850 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.850 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A0 as result already exists
2022-08-06 08:20:49.850 | DEBUG    | __main__:run:356 - Running benchmark 9
2022-08-06 08:20:49.850 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.850 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.850 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A0 as result already exists
2022-08-06 08:20:49.850 | DEBUG    | __main__:run:356 - Running benchmark 10
2022-08-06 08:20:49.850 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.851 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.851 | DEBUG    | __main__:run:370 - Skipping benchmark 10:A0 as result already exists
2022-08-06 08:20:49.851 | DEBUG    | __main__:run:356 - Running benchmark 11
2022-08-06 08:20:49.851 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.851 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.851 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A0 as result already exists
2022-08-06 08:20:49.851 | DEBUG    | __main__:run:356 - Running benchmark 12
2022-08-06 08:20:49.851 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.851 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.852 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A0 as result already exists
2022-08-06 08:20:49.852 | DEBUG    | __main__:run:356 - Running benchmark 13
2022-08-06 08:20:49.852 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.852 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.852 | DEBUG    | __main__:run:370 - Skipping benchmark 13:A0 as result already exists
2022-08-06 08:20:49.852 | DEBUG    | __main__:run:356 - Running benchmark 14
2022-08-06 08:20:49.852 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.852 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.853 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A0 as result already exists
2022-08-06 08:20:49.853 | DEBUG    | __main__:run:356 - Running benchmark 15
2022-08-06 08:20:49.853 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.853 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.853 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A0 as result already exists
2022-08-06 08:20:49.853 | DEBUG    | __main__:run:356 - Running benchmark 16
2022-08-06 08:20:49.853 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.853 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.853 | DEBUG    | __main__:run:370 - Skipping benchmark 16:A0 as result already exists
2022-08-06 08:20:49.854 | DEBUG    | __main__:run:356 - Running benchmark 17
2022-08-06 08:20:49.854 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.854 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.854 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A0 as result already exists
2022-08-06 08:20:49.854 | DEBUG    | __main__:run:356 - Running benchmark 18
2022-08-06 08:20:49.854 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.854 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.854 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A0 as result already exists
2022-08-06 08:20:49.854 | DEBUG    | __main__:run:356 - Running benchmark 19
2022-08-06 08:20:49.855 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.855 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.855 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A0 as result already exists
2022-08-06 08:20:49.855 | DEBUG    | __main__:run:356 - Running benchmark 20
2022-08-06 08:20:49.855 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.855 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.855 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A0 as result already exists
2022-08-06 08:20:49.855 | DEBUG    | __main__:run:356 - Running benchmark 21
2022-08-06 08:20:49.855 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.856 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.856 | DEBUG    | __main__:run:370 - Skipping benchmark 21:A0 as result already exists
2022-08-06 08:20:49.856 | DEBUG    | __main__:run:356 - Running benchmark 22
2022-08-06 08:20:49.856 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.856 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.856 | DEBUG    | __main__:run:370 - Skipping benchmark 22:A0 as result already exists
2022-08-06 08:20:49.856 | DEBUG    | __main__:run:356 - Running benchmark 23
2022-08-06 08:20:49.856 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.857 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.857 | DEBUG    | __main__:run:370 - Skipping benchmark 23:A0 as result already exists
2022-08-06 08:20:49.857 | DEBUG    | __main__:run:356 - Running benchmark 24
2022-08-06 08:20:49.857 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.857 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.857 | DEBUG    | __main__:run:370 - Skipping benchmark 24:A0 as result already exists
2022-08-06 08:20:49.857 | DEBUG    | __main__:run:356 - Running benchmark 25
2022-08-06 08:20:49.857 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.857 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.858 | DEBUG    | __main__:run:370 - Skipping benchmark 25:A0 as result already exists
2022-08-06 08:20:49.858 | DEBUG    | __main__:run:356 - Running benchmark 26
2022-08-06 08:20:49.858 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.858 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.858 | DEBUG    | __main__:run:370 - Skipping benchmark 26:A0 as result already exists
2022-08-06 08:20:49.858 | DEBUG    | __main__:run:356 - Running benchmark 27
2022-08-06 08:20:49.858 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.858 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.858 | DEBUG    | __main__:run:370 - Skipping benchmark 27:A0 as result already exists
2022-08-06 08:20:49.859 | DEBUG    | __main__:run:356 - Running benchmark 28
2022-08-06 08:20:49.859 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.859 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.859 | DEBUG    | __main__:run:370 - Skipping benchmark 28:A0 as result already exists
2022-08-06 08:20:49.859 | DEBUG    | __main__:run:356 - Running benchmark 29
2022-08-06 08:20:49.859 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.859 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.859 | DEBUG    | __main__:run:370 - Skipping benchmark 29:A0 as result already exists
2022-08-06 08:20:49.859 | DEBUG    | __main__:run:356 - Running benchmark 30
2022-08-06 08:20:49.860 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.860 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.860 | DEBUG    | __main__:run:370 - Skipping benchmark 30:A0 as result already exists
2022-08-06 08:20:49.860 | DEBUG    | __main__:run:356 - Running benchmark 31
2022-08-06 08:20:49.860 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.860 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.860 | DEBUG    | __main__:run:370 - Skipping benchmark 31:A0 as result already exists
2022-08-06 08:20:49.860 | DEBUG    | __main__:run:356 - Running benchmark 32
2022-08-06 08:20:49.861 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.861 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.861 | DEBUG    | __main__:run:370 - Skipping benchmark 32:A0 as result already exists
2022-08-06 08:20:49.861 | DEBUG    | __main__:run:356 - Running benchmark 33
2022-08-06 08:20:49.861 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.861 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.861 | DEBUG    | __main__:run:370 - Skipping benchmark 33:A0 as result already exists
2022-08-06 08:20:49.862 | DEBUG    | __main__:run:356 - Running benchmark 34
2022-08-06 08:20:49.862 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.862 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.862 | DEBUG    | __main__:run:370 - Skipping benchmark 34:A0 as result already exists
2022-08-06 08:20:49.862 | DEBUG    | __main__:run:356 - Running benchmark 35
2022-08-06 08:20:49.862 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.862 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.862 | DEBUG    | __main__:run:370 - Skipping benchmark 35:A0 as result already exists
2022-08-06 08:20:49.863 | DEBUG    | __main__:run:356 - Running benchmark 36
2022-08-06 08:20:49.863 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.863 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.863 | DEBUG    | __main__:run:370 - Skipping benchmark 36:A0 as result already exists
2022-08-06 08:20:49.863 | DEBUG    | __main__:run:356 - Running benchmark 37
2022-08-06 08:20:49.863 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.863 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.863 | DEBUG    | __main__:run:370 - Skipping benchmark 37:A0 as result already exists
2022-08-06 08:20:49.864 | DEBUG    | __main__:run:356 - Running benchmark 38
2022-08-06 08:20:49.864 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.864 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.864 | DEBUG    | __main__:run:370 - Skipping benchmark 38:A0 as result already exists
2022-08-06 08:20:49.864 | DEBUG    | __main__:run:356 - Running benchmark 39
2022-08-06 08:20:49.864 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.864 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.864 | DEBUG    | __main__:run:370 - Skipping benchmark 39:A0 as result already exists
2022-08-06 08:20:49.865 | DEBUG    | __main__:run:356 - Running benchmark 40
2022-08-06 08:20:49.865 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.865 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.865 | DEBUG    | __main__:run:370 - Skipping benchmark 40:A0 as result already exists
2022-08-06 08:20:49.865 | DEBUG    | __main__:run:356 - Running benchmark 41
2022-08-06 08:20:49.865 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.865 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.865 | DEBUG    | __main__:run:370 - Skipping benchmark 41:A0 as result already exists
2022-08-06 08:20:49.866 | DEBUG    | __main__:run:356 - Running benchmark 42
2022-08-06 08:20:49.866 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.866 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.866 | DEBUG    | __main__:run:370 - Skipping benchmark 42:A0 as result already exists
2022-08-06 08:20:49.866 | DEBUG    | __main__:run:356 - Running benchmark 43
2022-08-06 08:20:49.866 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.866 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.866 | DEBUG    | __main__:run:370 - Skipping benchmark 43:A0 as result already exists
2022-08-06 08:20:49.866 | DEBUG    | __main__:run:356 - Running benchmark 44
2022-08-06 08:20:49.867 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.867 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.867 | DEBUG    | __main__:run:370 - Skipping benchmark 44:A0 as result already exists
2022-08-06 08:20:49.867 | DEBUG    | __main__:run:356 - Running benchmark 45
2022-08-06 08:20:49.867 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.867 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.867 | DEBUG    | __main__:run:370 - Skipping benchmark 45:A0 as result already exists
2022-08-06 08:20:49.868 | DEBUG    | __main__:run:356 - Running benchmark 46
2022-08-06 08:20:49.868 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.868 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.868 | DEBUG    | __main__:run:370 - Skipping benchmark 46:A0 as result already exists
2022-08-06 08:20:49.868 | DEBUG    | __main__:run:356 - Running benchmark 47
2022-08-06 08:20:49.868 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.868 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.868 | DEBUG    | __main__:run:370 - Skipping benchmark 47:A0 as result already exists
2022-08-06 08:20:49.869 | DEBUG    | __main__:run:356 - Running benchmark 48
2022-08-06 08:20:49.869 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.869 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.869 | DEBUG    | __main__:run:370 - Skipping benchmark 48:A0 as result already exists
2022-08-06 08:20:49.869 | DEBUG    | __main__:run:356 - Running benchmark 49
2022-08-06 08:20:49.869 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.869 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.870 | DEBUG    | __main__:run:370 - Skipping benchmark 49:A0 as result already exists
2022-08-06 08:20:49.870 | DEBUG    | __main__:run:356 - Running benchmark 50
2022-08-06 08:20:49.870 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.870 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.870 | DEBUG    | __main__:run:370 - Skipping benchmark 50:A0 as result already exists
2022-08-06 08:20:49.870 | DEBUG    | __main__:run:356 - Running benchmark 51
2022-08-06 08:20:49.870 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.870 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.870 | DEBUG    | __main__:run:370 - Skipping benchmark 51:A0 as result already exists
2022-08-06 08:20:49.871 | DEBUG    | __main__:run:356 - Running benchmark 52
2022-08-06 08:20:49.871 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.871 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.871 | DEBUG    | __main__:run:370 - Skipping benchmark 52:A0 as result already exists
2022-08-06 08:20:49.871 | DEBUG    | __main__:run:356 - Running benchmark 53
2022-08-06 08:20:49.871 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.871 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.871 | DEBUG    | __main__:run:370 - Skipping benchmark 53:A0 as result already exists
2022-08-06 08:20:49.872 | DEBUG    | __main__:run:356 - Running benchmark 54
2022-08-06 08:20:49.872 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.872 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.872 | DEBUG    | __main__:run:370 - Skipping benchmark 54:A0 as result already exists
2022-08-06 08:20:49.872 | DEBUG    | __main__:run:356 - Running benchmark 55
2022-08-06 08:20:49.872 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.872 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.872 | DEBUG    | __main__:run:370 - Skipping benchmark 55:A0 as result already exists
2022-08-06 08:20:49.873 | DEBUG    | __main__:run:356 - Running benchmark 56
2022-08-06 08:20:49.873 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.873 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.873 | DEBUG    | __main__:run:370 - Skipping benchmark 56:A0 as result already exists
2022-08-06 08:20:49.873 | DEBUG    | __main__:run:356 - Running benchmark 57
2022-08-06 08:20:49.873 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.874 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.874 | DEBUG    | __main__:run:370 - Skipping benchmark 57:A0 as result already exists
2022-08-06 08:20:49.874 | DEBUG    | __main__:run:356 - Running benchmark 58
2022-08-06 08:20:49.874 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.874 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.874 | DEBUG    | __main__:run:370 - Skipping benchmark 58:A0 as result already exists
2022-08-06 08:20:49.874 | DEBUG    | __main__:run:356 - Running benchmark 59
2022-08-06 08:20:49.874 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.875 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.875 | DEBUG    | __main__:run:370 - Skipping benchmark 59:A0 as result already exists
2022-08-06 08:20:49.875 | DEBUG    | __main__:run:356 - Running benchmark 60
2022-08-06 08:20:49.875 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.875 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.875 | DEBUG    | __main__:run:370 - Skipping benchmark 60:A0 as result already exists
2022-08-06 08:20:49.875 | DEBUG    | __main__:run:356 - Running benchmark 62
2022-08-06 08:20:49.875 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.876 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.876 | DEBUG    | __main__:run:370 - Skipping benchmark 62:A0 as result already exists
2022-08-06 08:20:49.876 | DEBUG    | __main__:run:356 - Running benchmark 63
2022-08-06 08:20:49.876 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.876 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.876 | DEBUG    | __main__:run:370 - Skipping benchmark 63:A0 as result already exists
2022-08-06 08:20:49.876 | DEBUG    | __main__:run:356 - Running benchmark 64
2022-08-06 08:20:49.876 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.877 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.877 | DEBUG    | __main__:run:370 - Skipping benchmark 64:A0 as result already exists
2022-08-06 08:20:49.877 | DEBUG    | __main__:run:356 - Running benchmark 65
2022-08-06 08:20:49.877 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.877 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.877 | DEBUG    | __main__:run:370 - Skipping benchmark 65:A0 as result already exists
2022-08-06 08:20:49.877 | DEBUG    | __main__:run:356 - Running benchmark 66
2022-08-06 08:20:49.877 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.878 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.878 | DEBUG    | __main__:run:370 - Skipping benchmark 66:A0 as result already exists
2022-08-06 08:20:49.878 | DEBUG    | __main__:run:356 - Running benchmark 67
2022-08-06 08:20:49.878 | DEBUG    | __main__:run:357 - Number of Sets: 1
2022-08-06 08:20:49.878 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.878 | DEBUG    | __main__:run:370 - Skipping benchmark 67:A0 as result already exists
2022-08-06 08:20:49.878 | DEBUG    | __main__:run:345 - Running benchmark set PandasEval2
2022-08-06 08:20:49.879 | DEBUG    | __main__:run:346 - Found 21 benchmarks in PandasEval2
2022-08-06 08:20:49.879 | DEBUG    | __main__:run:356 - Running benchmark 0
2022-08-06 08:20:49.879 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 08:20:49.879 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 08:20:49.879 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A0 as result already exists
2022-08-06 08:20:49.879 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A1 as result already exists
2022-08-06 08:20:49.879 | DEBUG    | __main__:run:370 - Skipping benchmark 0:A2 as result already exists
2022-08-06 08:20:49.880 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 08:20:49.880 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D0 as result already exists
2022-08-06 08:20:49.880 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D1 as result already exists
2022-08-06 08:20:49.880 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D2 as result already exists
2022-08-06 08:20:49.880 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D3 as result already exists
2022-08-06 08:20:49.880 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D4 as result already exists
2022-08-06 08:20:49.880 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D5 as result already exists
2022-08-06 08:20:49.880 | DEBUG    | __main__:run:370 - Skipping benchmark 0:D6 as result already exists
2022-08-06 08:20:49.881 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.881 | DEBUG    | __main__:run:370 - Skipping benchmark 0:B0 as result already exists
2022-08-06 08:20:49.881 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 08:20:49.881 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C0 as result already exists
2022-08-06 08:20:49.881 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C1 as result already exists
2022-08-06 08:20:49.881 | DEBUG    | __main__:run:370 - Skipping benchmark 0:C2 as result already exists
2022-08-06 08:20:49.881 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 08:20:49.881 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E0 as result already exists
2022-08-06 08:20:49.881 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E1 as result already exists
2022-08-06 08:20:49.882 | DEBUG    | __main__:run:370 - Skipping benchmark 0:E2 as result already exists
2022-08-06 08:20:49.882 | DEBUG    | __main__:run:356 - Running benchmark 1
2022-08-06 08:20:49.882 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 08:20:49.882 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 08:20:49.882 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A0 as result already exists
2022-08-06 08:20:49.882 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A1 as result already exists
2022-08-06 08:20:49.882 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A2 as result already exists
2022-08-06 08:20:49.882 | DEBUG    | __main__:run:370 - Skipping benchmark 1:A3 as result already exists
2022-08-06 08:20:49.882 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 08:20:49.883 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D0 as result already exists
2022-08-06 08:20:49.883 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D1 as result already exists
2022-08-06 08:20:49.883 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D2 as result already exists
2022-08-06 08:20:49.883 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D3 as result already exists
2022-08-06 08:20:49.883 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D4 as result already exists
2022-08-06 08:20:49.883 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D5 as result already exists
2022-08-06 08:20:49.883 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D6 as result already exists
2022-08-06 08:20:49.883 | DEBUG    | __main__:run:370 - Skipping benchmark 1:D7 as result already exists
2022-08-06 08:20:49.883 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 08:20:49.884 | DEBUG    | __main__:run:370 - Skipping benchmark 1:B0 as result already exists
2022-08-06 08:20:49.884 | DEBUG    | __main__:run:370 - Skipping benchmark 1:B1 as result already exists
2022-08-06 08:20:49.884 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 08:20:49.884 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C0 as result already exists
2022-08-06 08:20:49.884 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C1 as result already exists
2022-08-06 08:20:49.884 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C2 as result already exists
2022-08-06 08:20:49.884 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C3 as result already exists
2022-08-06 08:20:49.884 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C4 as result already exists
2022-08-06 08:20:49.884 | DEBUG    | __main__:run:370 - Skipping benchmark 1:C5 as result already exists
2022-08-06 08:20:49.885 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 08:20:49.885 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E0 as result already exists
2022-08-06 08:20:49.885 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E1 as result already exists
2022-08-06 08:20:49.885 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E2 as result already exists
2022-08-06 08:20:49.885 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E3 as result already exists
2022-08-06 08:20:49.885 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E4 as result already exists
2022-08-06 08:20:49.885 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E5 as result already exists
2022-08-06 08:20:49.885 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E6 as result already exists
2022-08-06 08:20:49.885 | DEBUG    | __main__:run:370 - Skipping benchmark 1:E7 as result already exists
2022-08-06 08:20:49.886 | DEBUG    | __main__:run:356 - Running benchmark 2
2022-08-06 08:20:49.886 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 08:20:49.886 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 08:20:49.886 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A0 as result already exists
2022-08-06 08:20:49.886 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A1 as result already exists
2022-08-06 08:20:49.886 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A2 as result already exists
2022-08-06 08:20:49.886 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A3 as result already exists
2022-08-06 08:20:49.886 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A4 as result already exists
2022-08-06 08:20:49.886 | DEBUG    | __main__:run:370 - Skipping benchmark 2:A5 as result already exists
2022-08-06 08:20:49.887 | DEBUG    | __main__:run:363 - Number of queries: 12
2022-08-06 08:20:49.887 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D0 as result already exists
2022-08-06 08:20:49.887 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D1 as result already exists
2022-08-06 08:20:49.887 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D2 as result already exists
2022-08-06 08:20:49.887 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D3 as result already exists
2022-08-06 08:20:49.887 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D4 as result already exists
2022-08-06 08:20:49.887 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D5 as result already exists
2022-08-06 08:20:49.887 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D6 as result already exists
2022-08-06 08:20:49.888 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D7 as result already exists
2022-08-06 08:20:49.888 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D8 as result already exists
2022-08-06 08:20:49.888 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D9 as result already exists
2022-08-06 08:20:49.888 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D10 as result already exists
2022-08-06 08:20:49.888 | DEBUG    | __main__:run:370 - Skipping benchmark 2:D11 as result already exists
2022-08-06 08:20:49.888 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 08:20:49.888 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B0 as result already exists
2022-08-06 08:20:49.888 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B1 as result already exists
2022-08-06 08:20:49.889 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B2 as result already exists
2022-08-06 08:20:49.889 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B3 as result already exists
2022-08-06 08:20:49.889 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B4 as result already exists
2022-08-06 08:20:49.889 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B5 as result already exists
2022-08-06 08:20:49.889 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B6 as result already exists
2022-08-06 08:20:49.889 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B7 as result already exists
2022-08-06 08:20:49.889 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B8 as result already exists
2022-08-06 08:20:49.889 | DEBUG    | __main__:run:370 - Skipping benchmark 2:B9 as result already exists
2022-08-06 08:20:49.889 | DEBUG    | __main__:run:363 - Number of queries: 11
2022-08-06 08:20:49.890 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C0 as result already exists
2022-08-06 08:20:49.890 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C1 as result already exists
2022-08-06 08:20:49.890 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C2 as result already exists
2022-08-06 08:20:49.890 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C3 as result already exists
2022-08-06 08:20:49.890 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C4 as result already exists
2022-08-06 08:20:49.890 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C5 as result already exists
2022-08-06 08:20:49.890 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C6 as result already exists
2022-08-06 08:20:49.890 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C7 as result already exists
2022-08-06 08:20:49.890 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C8 as result already exists
2022-08-06 08:20:49.891 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C9 as result already exists
2022-08-06 08:20:49.891 | DEBUG    | __main__:run:370 - Skipping benchmark 2:C10 as result already exists
2022-08-06 08:20:49.891 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 08:20:49.891 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E0 as result already exists
2022-08-06 08:20:49.891 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E1 as result already exists
2022-08-06 08:20:49.891 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E2 as result already exists
2022-08-06 08:20:49.891 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E3 as result already exists
2022-08-06 08:20:49.891 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E4 as result already exists
2022-08-06 08:20:49.892 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E5 as result already exists
2022-08-06 08:20:49.892 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E6 as result already exists
2022-08-06 08:20:49.892 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E7 as result already exists
2022-08-06 08:20:49.892 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E8 as result already exists
2022-08-06 08:20:49.892 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E9 as result already exists
2022-08-06 08:20:49.892 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E10 as result already exists
2022-08-06 08:20:49.892 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E11 as result already exists
2022-08-06 08:20:49.893 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E12 as result already exists
2022-08-06 08:20:49.893 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E13 as result already exists
2022-08-06 08:20:49.893 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E14 as result already exists
2022-08-06 08:20:49.893 | DEBUG    | __main__:run:370 - Skipping benchmark 2:E15 as result already exists
2022-08-06 08:20:49.893 | DEBUG    | __main__:run:356 - Running benchmark 3
2022-08-06 08:20:49.893 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 08:20:49.893 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 08:20:49.893 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A0 as result already exists
2022-08-06 08:20:49.894 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A1 as result already exists
2022-08-06 08:20:49.894 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A2 as result already exists
2022-08-06 08:20:49.894 | DEBUG    | __main__:run:370 - Skipping benchmark 3:A3 as result already exists
2022-08-06 08:20:49.894 | DEBUG    | __main__:run:363 - Number of queries: 11
2022-08-06 08:20:49.894 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D0 as result already exists
2022-08-06 08:20:49.894 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D1 as result already exists
2022-08-06 08:20:49.894 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D2 as result already exists
2022-08-06 08:20:49.894 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D3 as result already exists
2022-08-06 08:20:49.894 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D4 as result already exists
2022-08-06 08:20:49.895 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D5 as result already exists
2022-08-06 08:20:49.895 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D6 as result already exists
2022-08-06 08:20:49.895 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D7 as result already exists
2022-08-06 08:20:49.895 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D8 as result already exists
2022-08-06 08:20:49.895 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D9 as result already exists
2022-08-06 08:20:49.895 | DEBUG    | __main__:run:370 - Skipping benchmark 3:D10 as result already exists
2022-08-06 08:20:49.895 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 08:20:49.895 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B0 as result already exists
2022-08-06 08:20:49.896 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B1 as result already exists
2022-08-06 08:20:49.896 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B2 as result already exists
2022-08-06 08:20:49.896 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B3 as result already exists
2022-08-06 08:20:49.896 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B4 as result already exists
2022-08-06 08:20:49.896 | DEBUG    | __main__:run:370 - Skipping benchmark 3:B5 as result already exists
2022-08-06 08:20:49.896 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-06 08:20:49.896 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C0 as result already exists
2022-08-06 08:20:49.896 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C1 as result already exists
2022-08-06 08:20:49.897 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C2 as result already exists
2022-08-06 08:20:49.897 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C3 as result already exists
2022-08-06 08:20:49.897 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C4 as result already exists
2022-08-06 08:20:49.897 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C5 as result already exists
2022-08-06 08:20:49.897 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C6 as result already exists
2022-08-06 08:20:49.897 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C7 as result already exists
2022-08-06 08:20:49.897 | DEBUG    | __main__:run:370 - Skipping benchmark 3:C8 as result already exists
2022-08-06 08:20:49.897 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 08:20:49.898 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E0 as result already exists
2022-08-06 08:20:49.898 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E1 as result already exists
2022-08-06 08:20:49.898 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E2 as result already exists
2022-08-06 08:20:49.898 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E3 as result already exists
2022-08-06 08:20:49.898 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E4 as result already exists
2022-08-06 08:20:49.898 | DEBUG    | __main__:run:370 - Skipping benchmark 3:E5 as result already exists
2022-08-06 08:20:49.898 | DEBUG    | __main__:run:356 - Running benchmark 4
2022-08-06 08:20:49.898 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 08:20:49.898 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 08:20:49.898 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A0 as result already exists
2022-08-06 08:20:49.899 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A1 as result already exists
2022-08-06 08:20:49.899 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A2 as result already exists
2022-08-06 08:20:49.899 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A3 as result already exists
2022-08-06 08:20:49.899 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A4 as result already exists
2022-08-06 08:20:49.899 | DEBUG    | __main__:run:370 - Skipping benchmark 4:A5 as result already exists
2022-08-06 08:20:49.899 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 08:20:49.899 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D0 as result already exists
2022-08-06 08:20:49.899 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D1 as result already exists
2022-08-06 08:20:49.899 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D2 as result already exists
2022-08-06 08:20:49.900 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D3 as result already exists
2022-08-06 08:20:49.900 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D4 as result already exists
2022-08-06 08:20:49.900 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D5 as result already exists
2022-08-06 08:20:49.900 | DEBUG    | __main__:run:370 - Skipping benchmark 4:D6 as result already exists
2022-08-06 08:20:49.900 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 08:20:49.900 | DEBUG    | __main__:run:370 - Skipping benchmark 4:B0 as result already exists
2022-08-06 08:20:49.900 | DEBUG    | __main__:run:370 - Skipping benchmark 4:B1 as result already exists
2022-08-06 08:20:49.900 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 08:20:49.900 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C0 as result already exists
2022-08-06 08:20:49.901 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C1 as result already exists
2022-08-06 08:20:49.901 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C2 as result already exists
2022-08-06 08:20:49.901 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C3 as result already exists
2022-08-06 08:20:49.901 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C4 as result already exists
2022-08-06 08:20:49.901 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C5 as result already exists
2022-08-06 08:20:49.901 | DEBUG    | __main__:run:370 - Skipping benchmark 4:C6 as result already exists
2022-08-06 08:20:49.901 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 08:20:49.901 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E0 as result already exists
2022-08-06 08:20:49.901 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E1 as result already exists
2022-08-06 08:20:49.902 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E2 as result already exists
2022-08-06 08:20:49.902 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E3 as result already exists
2022-08-06 08:20:49.902 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E4 as result already exists
2022-08-06 08:20:49.902 | DEBUG    | __main__:run:370 - Skipping benchmark 4:E5 as result already exists
2022-08-06 08:20:49.902 | DEBUG    | __main__:run:356 - Running benchmark 5
2022-08-06 08:20:49.902 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 08:20:49.902 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 08:20:49.902 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A0 as result already exists
2022-08-06 08:20:49.902 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A1 as result already exists
2022-08-06 08:20:49.902 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A2 as result already exists
2022-08-06 08:20:49.903 | DEBUG    | __main__:run:370 - Skipping benchmark 5:A3 as result already exists
2022-08-06 08:20:49.903 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 08:20:49.903 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D0 as result already exists
2022-08-06 08:20:49.903 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D1 as result already exists
2022-08-06 08:20:49.903 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D2 as result already exists
2022-08-06 08:20:49.903 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D3 as result already exists
2022-08-06 08:20:49.903 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D4 as result already exists
2022-08-06 08:20:49.903 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D5 as result already exists
2022-08-06 08:20:49.903 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D6 as result already exists
2022-08-06 08:20:49.904 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D7 as result already exists
2022-08-06 08:20:49.904 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D8 as result already exists
2022-08-06 08:20:49.904 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D9 as result already exists
2022-08-06 08:20:49.904 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D10 as result already exists
2022-08-06 08:20:49.904 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D11 as result already exists
2022-08-06 08:20:49.904 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D12 as result already exists
2022-08-06 08:20:49.904 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D13 as result already exists
2022-08-06 08:20:49.904 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D14 as result already exists
2022-08-06 08:20:49.904 | DEBUG    | __main__:run:370 - Skipping benchmark 5:D15 as result already exists
2022-08-06 08:20:49.905 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 08:20:49.905 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B0 as result already exists
2022-08-06 08:20:49.905 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B1 as result already exists
2022-08-06 08:20:49.905 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B2 as result already exists
2022-08-06 08:20:49.905 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B3 as result already exists
2022-08-06 08:20:49.905 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B4 as result already exists
2022-08-06 08:20:49.905 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B5 as result already exists
2022-08-06 08:20:49.905 | DEBUG    | __main__:run:370 - Skipping benchmark 5:B6 as result already exists
2022-08-06 08:20:49.905 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 08:20:49.905 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C0 as result already exists
2022-08-06 08:20:49.906 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C1 as result already exists
2022-08-06 08:20:49.906 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C2 as result already exists
2022-08-06 08:20:49.906 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C3 as result already exists
2022-08-06 08:20:49.906 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C4 as result already exists
2022-08-06 08:20:49.906 | DEBUG    | __main__:run:370 - Skipping benchmark 5:C5 as result already exists
2022-08-06 08:20:49.906 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 08:20:49.906 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E0 as result already exists
2022-08-06 08:20:49.906 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E1 as result already exists
2022-08-06 08:20:49.906 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E2 as result already exists
2022-08-06 08:20:49.907 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E3 as result already exists
2022-08-06 08:20:49.907 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E4 as result already exists
2022-08-06 08:20:49.907 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E5 as result already exists
2022-08-06 08:20:49.907 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E6 as result already exists
2022-08-06 08:20:49.907 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E7 as result already exists
2022-08-06 08:20:49.907 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E8 as result already exists
2022-08-06 08:20:49.907 | DEBUG    | __main__:run:370 - Skipping benchmark 5:E9 as result already exists
2022-08-06 08:20:49.907 | DEBUG    | __main__:run:356 - Running benchmark 6
2022-08-06 08:20:49.907 | DEBUG    | __main__:run:357 - Number of Sets: 4
2022-08-06 08:20:49.908 | DEBUG    | __main__:run:363 - Number of queries: 27
2022-08-06 08:20:49.908 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D0 as result already exists
2022-08-06 08:20:49.908 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D1 as result already exists
2022-08-06 08:20:49.908 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D2 as result already exists
2022-08-06 08:20:49.908 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D3 as result already exists
2022-08-06 08:20:49.908 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D4 as result already exists
2022-08-06 08:20:49.908 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D5 as result already exists
2022-08-06 08:20:49.908 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D6 as result already exists
2022-08-06 08:20:49.908 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D7 as result already exists
2022-08-06 08:20:49.908 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D8 as result already exists
2022-08-06 08:20:49.909 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D9 as result already exists
2022-08-06 08:20:49.909 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D10 as result already exists
2022-08-06 08:20:49.909 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D11 as result already exists
2022-08-06 08:20:49.909 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D12 as result already exists
2022-08-06 08:20:49.909 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D13 as result already exists
2022-08-06 08:20:49.909 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D14 as result already exists
2022-08-06 08:20:49.909 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D15 as result already exists
2022-08-06 08:20:49.909 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D16 as result already exists
2022-08-06 08:20:49.909 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D17 as result already exists
2022-08-06 08:20:49.910 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D18 as result already exists
2022-08-06 08:20:49.910 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D19 as result already exists
2022-08-06 08:20:49.910 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D20 as result already exists
2022-08-06 08:20:49.910 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D21 as result already exists
2022-08-06 08:20:49.910 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D22 as result already exists
2022-08-06 08:20:49.910 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D23 as result already exists
2022-08-06 08:20:49.910 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D24 as result already exists
2022-08-06 08:20:49.910 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D25 as result already exists
2022-08-06 08:20:49.910 | DEBUG    | __main__:run:370 - Skipping benchmark 6:D26 as result already exists
2022-08-06 08:20:49.910 | DEBUG    | __main__:run:363 - Number of queries: 26
2022-08-06 08:20:49.911 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B0 as result already exists
2022-08-06 08:20:49.911 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B1 as result already exists
2022-08-06 08:20:49.911 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B2 as result already exists
2022-08-06 08:20:49.911 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B3 as result already exists
2022-08-06 08:20:49.911 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B4 as result already exists
2022-08-06 08:20:49.911 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B5 as result already exists
2022-08-06 08:20:49.911 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B6 as result already exists
2022-08-06 08:20:49.911 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B7 as result already exists
2022-08-06 08:20:49.911 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B8 as result already exists
2022-08-06 08:20:49.912 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B9 as result already exists
2022-08-06 08:20:49.912 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B10 as result already exists
2022-08-06 08:20:49.912 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B11 as result already exists
2022-08-06 08:20:49.912 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B12 as result already exists
2022-08-06 08:20:49.912 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B13 as result already exists
2022-08-06 08:20:49.912 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B14 as result already exists
2022-08-06 08:20:49.912 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B15 as result already exists
2022-08-06 08:20:49.912 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B16 as result already exists
2022-08-06 08:20:49.912 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B17 as result already exists
2022-08-06 08:20:49.913 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B18 as result already exists
2022-08-06 08:20:49.913 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B19 as result already exists
2022-08-06 08:20:49.913 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B20 as result already exists
2022-08-06 08:20:49.913 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B21 as result already exists
2022-08-06 08:20:49.913 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B22 as result already exists
2022-08-06 08:20:49.913 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B23 as result already exists
2022-08-06 08:20:49.913 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B24 as result already exists
2022-08-06 08:20:49.913 | DEBUG    | __main__:run:370 - Skipping benchmark 6:B25 as result already exists
2022-08-06 08:20:49.913 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 08:20:49.914 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E0 as result already exists
2022-08-06 08:20:49.914 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E1 as result already exists
2022-08-06 08:20:49.914 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E2 as result already exists
2022-08-06 08:20:49.914 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E3 as result already exists
2022-08-06 08:20:49.914 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E4 as result already exists
2022-08-06 08:20:49.914 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E5 as result already exists
2022-08-06 08:20:49.914 | DEBUG    | __main__:run:370 - Skipping benchmark 6:E6 as result already exists
2022-08-06 08:20:49.914 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 08:20:49.914 | DEBUG    | __main__:run:370 - Skipping benchmark 6:C0 as result already exists
2022-08-06 08:20:49.914 | DEBUG    | __main__:run:370 - Skipping benchmark 6:C1 as result already exists
2022-08-06 08:20:49.915 | DEBUG    | __main__:run:356 - Running benchmark 7
2022-08-06 08:20:49.915 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-06 08:20:49.915 | DEBUG    | __main__:run:363 - Number of queries: 21
2022-08-06 08:20:49.915 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D0 as result already exists
2022-08-06 08:20:49.915 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D1 as result already exists
2022-08-06 08:20:49.915 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D2 as result already exists
2022-08-06 08:20:49.915 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D3 as result already exists
2022-08-06 08:20:49.915 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D4 as result already exists
2022-08-06 08:20:49.915 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D5 as result already exists
2022-08-06 08:20:49.916 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D6 as result already exists
2022-08-06 08:20:49.916 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D7 as result already exists
2022-08-06 08:20:49.916 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D8 as result already exists
2022-08-06 08:20:49.916 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D9 as result already exists
2022-08-06 08:20:49.916 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D10 as result already exists
2022-08-06 08:20:49.916 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D11 as result already exists
2022-08-06 08:20:49.916 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D12 as result already exists
2022-08-06 08:20:49.916 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D13 as result already exists
2022-08-06 08:20:49.916 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D14 as result already exists
2022-08-06 08:20:49.917 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D15 as result already exists
2022-08-06 08:20:49.917 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D16 as result already exists
2022-08-06 08:20:49.917 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D17 as result already exists
2022-08-06 08:20:49.917 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D18 as result already exists
2022-08-06 08:20:49.917 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D19 as result already exists
2022-08-06 08:20:49.917 | DEBUG    | __main__:run:370 - Skipping benchmark 7:D20 as result already exists
2022-08-06 08:20:49.917 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 08:20:49.917 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A0 as result already exists
2022-08-06 08:20:49.917 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A1 as result already exists
2022-08-06 08:20:49.917 | DEBUG    | __main__:run:370 - Skipping benchmark 7:A2 as result already exists
2022-08-06 08:20:49.918 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 08:20:49.918 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E0 as result already exists
2022-08-06 08:20:49.918 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E1 as result already exists
2022-08-06 08:20:49.918 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E2 as result already exists
2022-08-06 08:20:49.918 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E3 as result already exists
2022-08-06 08:20:49.918 | DEBUG    | __main__:run:370 - Skipping benchmark 7:E4 as result already exists
2022-08-06 08:20:49.918 | DEBUG    | __main__:run:356 - Running benchmark 8
2022-08-06 08:20:49.918 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-06 08:20:49.918 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 08:20:49.919 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C0 as result already exists
2022-08-06 08:20:49.919 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C1 as result already exists
2022-08-06 08:20:49.919 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C2 as result already exists
2022-08-06 08:20:49.919 | DEBUG    | __main__:run:370 - Skipping benchmark 8:C3 as result already exists
2022-08-06 08:20:49.919 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 08:20:49.919 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A0 as result already exists
2022-08-06 08:20:49.919 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A1 as result already exists
2022-08-06 08:20:49.919 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A2 as result already exists
2022-08-06 08:20:49.919 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A3 as result already exists
2022-08-06 08:20:49.920 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A4 as result already exists
2022-08-06 08:20:49.920 | DEBUG    | __main__:run:370 - Skipping benchmark 8:A5 as result already exists
2022-08-06 08:20:49.920 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-06 08:20:49.920 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D0 as result already exists
2022-08-06 08:20:49.920 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D1 as result already exists
2022-08-06 08:20:49.920 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D2 as result already exists
2022-08-06 08:20:49.920 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D3 as result already exists
2022-08-06 08:20:49.920 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D4 as result already exists
2022-08-06 08:20:49.920 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D5 as result already exists
2022-08-06 08:20:49.920 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D6 as result already exists
2022-08-06 08:20:49.921 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D7 as result already exists
2022-08-06 08:20:49.921 | DEBUG    | __main__:run:370 - Skipping benchmark 8:D8 as result already exists
2022-08-06 08:20:49.921 | DEBUG    | __main__:run:356 - Running benchmark 9
2022-08-06 08:20:49.921 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 08:20:49.921 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 08:20:49.921 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D0 as result already exists
2022-08-06 08:20:49.921 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D1 as result already exists
2022-08-06 08:20:49.921 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D2 as result already exists
2022-08-06 08:20:49.921 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D3 as result already exists
2022-08-06 08:20:49.922 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D4 as result already exists
2022-08-06 08:20:49.922 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D5 as result already exists
2022-08-06 08:20:49.922 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D6 as result already exists
2022-08-06 08:20:49.922 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D7 as result already exists
2022-08-06 08:20:49.922 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D8 as result already exists
2022-08-06 08:20:49.922 | DEBUG    | __main__:run:370 - Skipping benchmark 9:D9 as result already exists
2022-08-06 08:20:49.922 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 08:20:49.922 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B0 as result already exists
2022-08-06 08:20:49.922 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B1 as result already exists
2022-08-06 08:20:49.923 | DEBUG    | __main__:run:370 - Skipping benchmark 9:B2 as result already exists
2022-08-06 08:20:49.923 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 08:20:49.923 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C0 as result already exists
2022-08-06 08:20:49.923 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C1 as result already exists
2022-08-06 08:20:49.923 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C2 as result already exists
2022-08-06 08:20:49.923 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C3 as result already exists
2022-08-06 08:20:49.923 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C4 as result already exists
2022-08-06 08:20:49.923 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C5 as result already exists
2022-08-06 08:20:49.923 | DEBUG    | __main__:run:370 - Skipping benchmark 9:C6 as result already exists
2022-08-06 08:20:49.923 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 08:20:49.924 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A0 as result already exists
2022-08-06 08:20:49.924 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A1 as result already exists
2022-08-06 08:20:49.924 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A2 as result already exists
2022-08-06 08:20:49.924 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A3 as result already exists
2022-08-06 08:20:49.924 | DEBUG    | __main__:run:370 - Skipping benchmark 9:A4 as result already exists
2022-08-06 08:20:49.924 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 08:20:49.924 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E0 as result already exists
2022-08-06 08:20:49.924 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E1 as result already exists
2022-08-06 08:20:49.924 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E2 as result already exists
2022-08-06 08:20:49.925 | DEBUG    | __main__:run:370 - Skipping benchmark 9:E3 as result already exists
2022-08-06 08:20:49.925 | DEBUG    | __main__:run:356 - Running benchmark 10
2022-08-06 08:20:49.925 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 08:20:49.925 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.925 | DEBUG    | __main__:run:370 - Skipping benchmark 10:C0 as result already exists
2022-08-06 08:20:49.925 | DEBUG    | __main__:run:363 - Number of queries: 23
2022-08-06 08:20:49.925 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D0 as result already exists
2022-08-06 08:20:49.925 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D1 as result already exists
2022-08-06 08:20:49.925 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D2 as result already exists
2022-08-06 08:20:49.926 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D3 as result already exists
2022-08-06 08:20:49.926 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D4 as result already exists
2022-08-06 08:20:49.926 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D5 as result already exists
2022-08-06 08:20:49.926 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D6 as result already exists
2022-08-06 08:20:49.926 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D7 as result already exists
2022-08-06 08:20:49.926 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D8 as result already exists
2022-08-06 08:20:49.926 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D9 as result already exists
2022-08-06 08:20:49.926 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D10 as result already exists
2022-08-06 08:20:49.926 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D11 as result already exists
2022-08-06 08:20:49.926 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D12 as result already exists
2022-08-06 08:20:49.927 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D13 as result already exists
2022-08-06 08:20:49.927 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D14 as result already exists
2022-08-06 08:20:49.927 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D15 as result already exists
2022-08-06 08:20:49.927 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D16 as result already exists
2022-08-06 08:20:49.927 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D17 as result already exists
2022-08-06 08:20:49.927 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D18 as result already exists
2022-08-06 08:20:49.927 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D19 as result already exists
2022-08-06 08:20:49.927 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D20 as result already exists
2022-08-06 08:20:49.927 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D21 as result already exists
2022-08-06 08:20:49.928 | DEBUG    | __main__:run:370 - Skipping benchmark 10:D22 as result already exists
2022-08-06 08:20:49.928 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.928 | DEBUG    | __main__:run:370 - Skipping benchmark 10:A0 as result already exists
2022-08-06 08:20:49.928 | DEBUG    | __main__:run:363 - Number of queries: 12
2022-08-06 08:20:49.928 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E0 as result already exists
2022-08-06 08:20:49.928 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E1 as result already exists
2022-08-06 08:20:49.928 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E2 as result already exists
2022-08-06 08:20:49.928 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E3 as result already exists
2022-08-06 08:20:49.928 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E4 as result already exists
2022-08-06 08:20:49.928 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E5 as result already exists
2022-08-06 08:20:49.929 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E6 as result already exists
2022-08-06 08:20:49.929 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E7 as result already exists
2022-08-06 08:20:49.929 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E8 as result already exists
2022-08-06 08:20:49.929 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E9 as result already exists
2022-08-06 08:20:49.929 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E10 as result already exists
2022-08-06 08:20:49.929 | DEBUG    | __main__:run:370 - Skipping benchmark 10:E11 as result already exists
2022-08-06 08:20:49.929 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.929 | DEBUG    | __main__:run:370 - Skipping benchmark 10:B0 as result already exists
2022-08-06 08:20:49.929 | DEBUG    | __main__:run:356 - Running benchmark 11
2022-08-06 08:20:49.930 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 08:20:49.930 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 08:20:49.930 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D0 as result already exists
2022-08-06 08:20:49.930 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D1 as result already exists
2022-08-06 08:20:49.930 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D2 as result already exists
2022-08-06 08:20:49.930 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D3 as result already exists
2022-08-06 08:20:49.930 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D4 as result already exists
2022-08-06 08:20:49.930 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D5 as result already exists
2022-08-06 08:20:49.930 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D6 as result already exists
2022-08-06 08:20:49.930 | DEBUG    | __main__:run:370 - Skipping benchmark 11:D7 as result already exists
2022-08-06 08:20:49.931 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.931 | DEBUG    | __main__:run:370 - Skipping benchmark 11:C0 as result already exists
2022-08-06 08:20:49.931 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 08:20:49.931 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A0 as result already exists
2022-08-06 08:20:49.931 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A1 as result already exists
2022-08-06 08:20:49.931 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A2 as result already exists
2022-08-06 08:20:49.931 | DEBUG    | __main__:run:370 - Skipping benchmark 11:A3 as result already exists
2022-08-06 08:20:49.931 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 08:20:49.931 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E0 as result already exists
2022-08-06 08:20:49.932 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E1 as result already exists
2022-08-06 08:20:49.932 | DEBUG    | __main__:run:370 - Skipping benchmark 11:E2 as result already exists
2022-08-06 08:20:49.932 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 08:20:49.932 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B0 as result already exists
2022-08-06 08:20:49.932 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B1 as result already exists
2022-08-06 08:20:49.932 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B2 as result already exists
2022-08-06 08:20:49.932 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B3 as result already exists
2022-08-06 08:20:49.932 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B4 as result already exists
2022-08-06 08:20:49.932 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B5 as result already exists
2022-08-06 08:20:49.933 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B6 as result already exists
2022-08-06 08:20:49.933 | DEBUG    | __main__:run:370 - Skipping benchmark 11:B7 as result already exists
2022-08-06 08:20:49.933 | DEBUG    | __main__:run:356 - Running benchmark 12
2022-08-06 08:20:49.933 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 08:20:49.933 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 08:20:49.933 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D0 as result already exists
2022-08-06 08:20:49.933 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D1 as result already exists
2022-08-06 08:20:49.933 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D2 as result already exists
2022-08-06 08:20:49.933 | DEBUG    | __main__:run:370 - Skipping benchmark 12:D3 as result already exists
2022-08-06 08:20:49.933 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.934 | DEBUG    | __main__:run:370 - Skipping benchmark 12:B0 as result already exists
2022-08-06 08:20:49.934 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 08:20:49.934 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C0 as result already exists
2022-08-06 08:20:49.934 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C1 as result already exists
2022-08-06 08:20:49.934 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C2 as result already exists
2022-08-06 08:20:49.934 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C3 as result already exists
2022-08-06 08:20:49.934 | DEBUG    | __main__:run:370 - Skipping benchmark 12:C4 as result already exists
2022-08-06 08:20:49.934 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 08:20:49.934 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A0 as result already exists
2022-08-06 08:20:49.934 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A1 as result already exists
2022-08-06 08:20:49.935 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A2 as result already exists
2022-08-06 08:20:49.935 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A3 as result already exists
2022-08-06 08:20:49.935 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A4 as result already exists
2022-08-06 08:20:49.935 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A5 as result already exists
2022-08-06 08:20:49.935 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A6 as result already exists
2022-08-06 08:20:49.935 | DEBUG    | __main__:run:370 - Skipping benchmark 12:A7 as result already exists
2022-08-06 08:20:49.935 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 08:20:49.935 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E0 as result already exists
2022-08-06 08:20:49.935 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E1 as result already exists
2022-08-06 08:20:49.936 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E2 as result already exists
2022-08-06 08:20:49.936 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E3 as result already exists
2022-08-06 08:20:49.936 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E4 as result already exists
2022-08-06 08:20:49.936 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E5 as result already exists
2022-08-06 08:20:49.936 | DEBUG    | __main__:run:370 - Skipping benchmark 12:E6 as result already exists
2022-08-06 08:20:49.936 | DEBUG    | __main__:run:356 - Running benchmark 13
2022-08-06 08:20:49.936 | DEBUG    | __main__:run:357 - Number of Sets: 2
2022-08-06 08:20:49.936 | DEBUG    | __main__:run:363 - Number of queries: 3
2022-08-06 08:20:49.936 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B0 as result already exists
2022-08-06 08:20:49.936 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B1 as result already exists
2022-08-06 08:20:49.937 | DEBUG    | __main__:run:370 - Skipping benchmark 13:B2 as result already exists
2022-08-06 08:20:49.937 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:49.937 | DEBUG    | __main__:run:370 - Skipping benchmark 13:A0 as result already exists
2022-08-06 08:20:49.937 | DEBUG    | __main__:run:356 - Running benchmark 14
2022-08-06 08:20:49.937 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 08:20:49.937 | DEBUG    | __main__:run:363 - Number of queries: 10
2022-08-06 08:20:49.937 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D0 as result already exists
2022-08-06 08:20:49.937 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D1 as result already exists
2022-08-06 08:20:49.937 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D2 as result already exists
2022-08-06 08:20:49.937 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D3 as result already exists
2022-08-06 08:20:49.938 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D4 as result already exists
2022-08-06 08:20:49.938 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D5 as result already exists
2022-08-06 08:20:49.938 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D6 as result already exists
2022-08-06 08:20:49.938 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D7 as result already exists
2022-08-06 08:20:49.938 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D8 as result already exists
2022-08-06 08:20:49.938 | DEBUG    | __main__:run:370 - Skipping benchmark 14:D9 as result already exists
2022-08-06 08:20:49.938 | DEBUG    | __main__:run:363 - Number of queries: 9
2022-08-06 08:20:49.938 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C0 as result already exists
2022-08-06 08:20:49.938 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C1 as result already exists
2022-08-06 08:20:49.938 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C2 as result already exists
2022-08-06 08:20:49.939 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C3 as result already exists
2022-08-06 08:20:49.939 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C4 as result already exists
2022-08-06 08:20:49.939 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C5 as result already exists
2022-08-06 08:20:49.939 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C6 as result already exists
2022-08-06 08:20:49.939 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C7 as result already exists
2022-08-06 08:20:49.939 | DEBUG    | __main__:run:370 - Skipping benchmark 14:C8 as result already exists
2022-08-06 08:20:49.939 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 08:20:49.939 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A0 as result already exists
2022-08-06 08:20:49.939 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A1 as result already exists
2022-08-06 08:20:49.940 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A2 as result already exists
2022-08-06 08:20:49.940 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A3 as result already exists
2022-08-06 08:20:49.940 | DEBUG    | __main__:run:370 - Skipping benchmark 14:A4 as result already exists
2022-08-06 08:20:49.940 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-06 08:20:49.940 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E0 as result already exists
2022-08-06 08:20:49.940 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E1 as result already exists
2022-08-06 08:20:49.940 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E2 as result already exists
2022-08-06 08:20:49.940 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E3 as result already exists
2022-08-06 08:20:49.940 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E4 as result already exists
2022-08-06 08:20:49.940 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E5 as result already exists
2022-08-06 08:20:49.941 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E6 as result already exists
2022-08-06 08:20:49.941 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E7 as result already exists
2022-08-06 08:20:49.941 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E8 as result already exists
2022-08-06 08:20:49.941 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E9 as result already exists
2022-08-06 08:20:49.941 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E10 as result already exists
2022-08-06 08:20:49.941 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E11 as result already exists
2022-08-06 08:20:49.941 | DEBUG    | __main__:run:370 - Skipping benchmark 14:E12 as result already exists
2022-08-06 08:20:49.941 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 08:20:49.941 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B0 as result already exists
2022-08-06 08:20:49.941 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B1 as result already exists
2022-08-06 08:20:49.942 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B2 as result already exists
2022-08-06 08:20:49.942 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B3 as result already exists
2022-08-06 08:20:49.942 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B4 as result already exists
2022-08-06 08:20:49.942 | DEBUG    | __main__:run:370 - Skipping benchmark 14:B5 as result already exists
2022-08-06 08:20:49.942 | DEBUG    | __main__:run:356 - Running benchmark 15
2022-08-06 08:20:49.942 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 08:20:49.942 | DEBUG    | __main__:run:363 - Number of queries: 18
2022-08-06 08:20:49.942 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D0 as result already exists
2022-08-06 08:20:49.942 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D1 as result already exists
2022-08-06 08:20:49.942 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D2 as result already exists
2022-08-06 08:20:49.943 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D3 as result already exists
2022-08-06 08:20:49.943 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D4 as result already exists
2022-08-06 08:20:49.943 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D5 as result already exists
2022-08-06 08:20:49.943 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D6 as result already exists
2022-08-06 08:20:49.943 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D7 as result already exists
2022-08-06 08:20:49.943 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D8 as result already exists
2022-08-06 08:20:49.943 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D9 as result already exists
2022-08-06 08:20:49.943 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D10 as result already exists
2022-08-06 08:20:49.943 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D11 as result already exists
2022-08-06 08:20:49.944 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D12 as result already exists
2022-08-06 08:20:49.944 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D13 as result already exists
2022-08-06 08:20:49.944 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D14 as result already exists
2022-08-06 08:20:49.944 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D15 as result already exists
2022-08-06 08:20:49.944 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D16 as result already exists
2022-08-06 08:20:49.944 | DEBUG    | __main__:run:370 - Skipping benchmark 15:D17 as result already exists
2022-08-06 08:20:49.944 | DEBUG    | __main__:run:363 - Number of queries: 22
2022-08-06 08:20:49.944 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B0 as result already exists
2022-08-06 08:20:49.944 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B1 as result already exists
2022-08-06 08:20:49.944 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B2 as result already exists
2022-08-06 08:20:50.185 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B3 as result already exists
2022-08-06 08:20:50.185 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B4 as result already exists
2022-08-06 08:20:50.186 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B5 as result already exists
2022-08-06 08:20:50.186 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B6 as result already exists
2022-08-06 08:20:50.186 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B7 as result already exists
2022-08-06 08:20:50.186 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B8 as result already exists
2022-08-06 08:20:50.186 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B9 as result already exists
2022-08-06 08:20:50.186 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B10 as result already exists
2022-08-06 08:20:50.187 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B11 as result already exists
2022-08-06 08:20:50.187 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B12 as result already exists
2022-08-06 08:20:50.187 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B13 as result already exists
2022-08-06 08:20:50.187 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B14 as result already exists
2022-08-06 08:20:50.187 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B15 as result already exists
2022-08-06 08:20:50.187 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B16 as result already exists
2022-08-06 08:20:50.187 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B17 as result already exists
2022-08-06 08:20:50.188 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B18 as result already exists
2022-08-06 08:20:50.188 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B19 as result already exists
2022-08-06 08:20:50.188 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B20 as result already exists
2022-08-06 08:20:50.188 | DEBUG    | __main__:run:370 - Skipping benchmark 15:B21 as result already exists
2022-08-06 08:20:50.188 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 08:20:50.188 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C0 as result already exists
2022-08-06 08:20:50.188 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C1 as result already exists
2022-08-06 08:20:50.189 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C2 as result already exists
2022-08-06 08:20:50.189 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C3 as result already exists
2022-08-06 08:20:50.189 | DEBUG    | __main__:run:370 - Skipping benchmark 15:C4 as result already exists
2022-08-06 08:20:50.189 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 08:20:50.189 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A0 as result already exists
2022-08-06 08:20:50.189 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A1 as result already exists
2022-08-06 08:20:50.189 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A2 as result already exists
2022-08-06 08:20:50.189 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A3 as result already exists
2022-08-06 08:20:50.190 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A4 as result already exists
2022-08-06 08:20:50.190 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A5 as result already exists
2022-08-06 08:20:50.190 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A6 as result already exists
2022-08-06 08:20:50.190 | DEBUG    | __main__:run:370 - Skipping benchmark 15:A7 as result already exists
2022-08-06 08:20:50.190 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 08:20:50.190 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E0 as result already exists
2022-08-06 08:20:50.190 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E1 as result already exists
2022-08-06 08:20:50.191 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E2 as result already exists
2022-08-06 08:20:50.191 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E3 as result already exists
2022-08-06 08:20:50.191 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E4 as result already exists
2022-08-06 08:20:50.191 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E5 as result already exists
2022-08-06 08:20:50.191 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E6 as result already exists
2022-08-06 08:20:50.191 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E7 as result already exists
2022-08-06 08:20:50.191 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E8 as result already exists
2022-08-06 08:20:50.191 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E9 as result already exists
2022-08-06 08:20:50.191 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E10 as result already exists
2022-08-06 08:20:50.191 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E11 as result already exists
2022-08-06 08:20:50.192 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E12 as result already exists
2022-08-06 08:20:50.192 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E13 as result already exists
2022-08-06 08:20:50.192 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E14 as result already exists
2022-08-06 08:20:50.192 | DEBUG    | __main__:run:370 - Skipping benchmark 15:E15 as result already exists
2022-08-06 08:20:50.192 | DEBUG    | __main__:run:356 - Running benchmark 16
2022-08-06 08:20:50.192 | DEBUG    | __main__:run:357 - Number of Sets: 4
2022-08-06 08:20:50.192 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 08:20:50.192 | DEBUG    | __main__:run:370 - Skipping benchmark 16:B0 as result already exists
2022-08-06 08:20:50.192 | DEBUG    | __main__:run:370 - Skipping benchmark 16:B1 as result already exists
2022-08-06 08:20:50.193 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:50.193 | DEBUG    | __main__:run:370 - Skipping benchmark 16:A0 as result already exists
2022-08-06 08:20:50.193 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 08:20:50.193 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E0 as result already exists
2022-08-06 08:20:50.193 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E1 as result already exists
2022-08-06 08:20:50.193 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E2 as result already exists
2022-08-06 08:20:50.193 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E3 as result already exists
2022-08-06 08:20:50.193 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E4 as result already exists
2022-08-06 08:20:50.193 | DEBUG    | __main__:run:370 - Skipping benchmark 16:E5 as result already exists
2022-08-06 08:20:50.194 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 08:20:50.194 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D0 as result already exists
2022-08-06 08:20:50.194 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D1 as result already exists
2022-08-06 08:20:50.194 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D2 as result already exists
2022-08-06 08:20:50.194 | DEBUG    | __main__:run:370 - Skipping benchmark 16:D3 as result already exists
2022-08-06 08:20:50.194 | DEBUG    | __main__:run:356 - Running benchmark 17
2022-08-06 08:20:50.194 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 08:20:50.194 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 08:20:50.194 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B0 as result already exists
2022-08-06 08:20:50.194 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B1 as result already exists
2022-08-06 08:20:50.195 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B2 as result already exists
2022-08-06 08:20:50.195 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B3 as result already exists
2022-08-06 08:20:50.195 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B4 as result already exists
2022-08-06 08:20:50.195 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B5 as result already exists
2022-08-06 08:20:50.195 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B6 as result already exists
2022-08-06 08:20:50.195 | DEBUG    | __main__:run:370 - Skipping benchmark 17:B7 as result already exists
2022-08-06 08:20:50.195 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-06 08:20:50.195 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C0 as result already exists
2022-08-06 08:20:50.195 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C1 as result already exists
2022-08-06 08:20:50.196 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C2 as result already exists
2022-08-06 08:20:50.196 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C3 as result already exists
2022-08-06 08:20:50.196 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C4 as result already exists
2022-08-06 08:20:50.196 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C5 as result already exists
2022-08-06 08:20:50.196 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C6 as result already exists
2022-08-06 08:20:50.196 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C7 as result already exists
2022-08-06 08:20:50.196 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C8 as result already exists
2022-08-06 08:20:50.196 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C9 as result already exists
2022-08-06 08:20:50.196 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C10 as result already exists
2022-08-06 08:20:50.197 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C11 as result already exists
2022-08-06 08:20:50.197 | DEBUG    | __main__:run:370 - Skipping benchmark 17:C12 as result already exists
2022-08-06 08:20:50.197 | DEBUG    | __main__:run:363 - Number of queries: 7
2022-08-06 08:20:50.197 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A0 as result already exists
2022-08-06 08:20:50.197 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A1 as result already exists
2022-08-06 08:20:50.197 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A2 as result already exists
2022-08-06 08:20:50.197 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A3 as result already exists
2022-08-06 08:20:50.197 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A4 as result already exists
2022-08-06 08:20:50.197 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A5 as result already exists
2022-08-06 08:20:50.197 | DEBUG    | __main__:run:370 - Skipping benchmark 17:A6 as result already exists
2022-08-06 08:20:50.198 | DEBUG    | __main__:run:363 - Number of queries: 13
2022-08-06 08:20:50.198 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D0 as result already exists
2022-08-06 08:20:50.198 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D1 as result already exists
2022-08-06 08:20:50.198 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D2 as result already exists
2022-08-06 08:20:50.198 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D3 as result already exists
2022-08-06 08:20:50.198 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D4 as result already exists
2022-08-06 08:20:50.198 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D5 as result already exists
2022-08-06 08:20:50.198 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D6 as result already exists
2022-08-06 08:20:50.198 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D7 as result already exists
2022-08-06 08:20:50.199 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D8 as result already exists
2022-08-06 08:20:50.199 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D9 as result already exists
2022-08-06 08:20:50.199 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D10 as result already exists
2022-08-06 08:20:50.199 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D11 as result already exists
2022-08-06 08:20:50.199 | DEBUG    | __main__:run:370 - Skipping benchmark 17:D12 as result already exists
2022-08-06 08:20:50.199 | DEBUG    | __main__:run:363 - Number of queries: 25
2022-08-06 08:20:50.199 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E0 as result already exists
2022-08-06 08:20:50.199 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E1 as result already exists
2022-08-06 08:20:50.199 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E2 as result already exists
2022-08-06 08:20:50.200 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E3 as result already exists
2022-08-06 08:20:50.200 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E4 as result already exists
2022-08-06 08:20:50.200 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E5 as result already exists
2022-08-06 08:20:50.200 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E6 as result already exists
2022-08-06 08:20:50.200 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E7 as result already exists
2022-08-06 08:20:50.200 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E8 as result already exists
2022-08-06 08:20:50.200 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E9 as result already exists
2022-08-06 08:20:50.200 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E10 as result already exists
2022-08-06 08:20:50.200 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E11 as result already exists
2022-08-06 08:20:50.200 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E12 as result already exists
2022-08-06 08:20:50.201 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E13 as result already exists
2022-08-06 08:20:50.201 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E14 as result already exists
2022-08-06 08:20:50.201 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E15 as result already exists
2022-08-06 08:20:50.201 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E16 as result already exists
2022-08-06 08:20:50.201 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E17 as result already exists
2022-08-06 08:20:50.201 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E18 as result already exists
2022-08-06 08:20:50.201 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E19 as result already exists
2022-08-06 08:20:50.201 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E20 as result already exists
2022-08-06 08:20:50.201 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E21 as result already exists
2022-08-06 08:20:50.202 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E22 as result already exists
2022-08-06 08:20:50.202 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E23 as result already exists
2022-08-06 08:20:50.202 | DEBUG    | __main__:run:370 - Skipping benchmark 17:E24 as result already exists
2022-08-06 08:20:50.202 | DEBUG    | __main__:run:356 - Running benchmark 18
2022-08-06 08:20:50.202 | DEBUG    | __main__:run:357 - Number of Sets: 3
2022-08-06 08:20:50.202 | DEBUG    | __main__:run:363 - Number of queries: 6
2022-08-06 08:20:50.202 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A0 as result already exists
2022-08-06 08:20:50.202 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A1 as result already exists
2022-08-06 08:20:50.202 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A2 as result already exists
2022-08-06 08:20:50.203 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A3 as result already exists
2022-08-06 08:20:50.203 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A4 as result already exists
2022-08-06 08:20:50.203 | DEBUG    | __main__:run:370 - Skipping benchmark 18:A5 as result already exists
2022-08-06 08:20:50.203 | DEBUG    | __main__:run:363 - Number of queries: 16
2022-08-06 08:20:50.203 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D0 as result already exists
2022-08-06 08:20:50.203 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D1 as result already exists
2022-08-06 08:20:50.203 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D2 as result already exists
2022-08-06 08:20:50.203 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D3 as result already exists
2022-08-06 08:20:50.203 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D4 as result already exists
2022-08-06 08:20:50.203 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D5 as result already exists
2022-08-06 08:20:50.204 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D6 as result already exists
2022-08-06 08:20:50.204 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D7 as result already exists
2022-08-06 08:20:50.204 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D8 as result already exists
2022-08-06 08:20:50.204 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D9 as result already exists
2022-08-06 08:20:50.204 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D10 as result already exists
2022-08-06 08:20:50.204 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D11 as result already exists
2022-08-06 08:20:50.204 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D12 as result already exists
2022-08-06 08:20:50.204 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D13 as result already exists
2022-08-06 08:20:50.204 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D14 as result already exists
2022-08-06 08:20:50.205 | DEBUG    | __main__:run:370 - Skipping benchmark 18:D15 as result already exists
2022-08-06 08:20:50.205 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 08:20:50.205 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E0 as result already exists
2022-08-06 08:20:50.205 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E1 as result already exists
2022-08-06 08:20:50.205 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E2 as result already exists
2022-08-06 08:20:50.205 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E3 as result already exists
2022-08-06 08:20:50.205 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E4 as result already exists
2022-08-06 08:20:50.205 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E5 as result already exists
2022-08-06 08:20:50.205 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E6 as result already exists
2022-08-06 08:20:50.205 | DEBUG    | __main__:run:370 - Skipping benchmark 18:E7 as result already exists
2022-08-06 08:20:50.206 | DEBUG    | __main__:run:356 - Running benchmark 19
2022-08-06 08:20:50.206 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 08:20:50.206 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 08:20:50.206 | DEBUG    | __main__:run:370 - Skipping benchmark 19:B0 as result already exists
2022-08-06 08:20:50.206 | DEBUG    | __main__:run:370 - Skipping benchmark 19:B1 as result already exists
2022-08-06 08:20:50.206 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 08:20:50.206 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C0 as result already exists
2022-08-06 08:20:50.206 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C1 as result already exists
2022-08-06 08:20:50.206 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C2 as result already exists
2022-08-06 08:20:50.207 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C3 as result already exists
2022-08-06 08:20:50.207 | DEBUG    | __main__:run:370 - Skipping benchmark 19:C4 as result already exists
2022-08-06 08:20:50.207 | DEBUG    | __main__:run:363 - Number of queries: 8
2022-08-06 08:20:50.207 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D0 as result already exists
2022-08-06 08:20:50.207 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D1 as result already exists
2022-08-06 08:20:50.207 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D2 as result already exists
2022-08-06 08:20:50.207 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D3 as result already exists
2022-08-06 08:20:50.207 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D4 as result already exists
2022-08-06 08:20:50.207 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D5 as result already exists
2022-08-06 08:20:50.208 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D6 as result already exists
2022-08-06 08:20:50.208 | DEBUG    | __main__:run:370 - Skipping benchmark 19:D7 as result already exists
2022-08-06 08:20:50.208 | DEBUG    | __main__:run:363 - Number of queries: 18
2022-08-06 08:20:50.208 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A0 as result already exists
2022-08-06 08:20:50.208 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A1 as result already exists
2022-08-06 08:20:50.208 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A2 as result already exists
2022-08-06 08:20:50.208 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A3 as result already exists
2022-08-06 08:20:50.208 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A4 as result already exists
2022-08-06 08:20:50.208 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A5 as result already exists
2022-08-06 08:20:50.208 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A6 as result already exists
2022-08-06 08:20:50.209 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A7 as result already exists
2022-08-06 08:20:50.209 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A8 as result already exists
2022-08-06 08:20:50.209 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A9 as result already exists
2022-08-06 08:20:50.209 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A10 as result already exists
2022-08-06 08:20:50.209 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A11 as result already exists
2022-08-06 08:20:50.209 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A12 as result already exists
2022-08-06 08:20:50.209 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A13 as result already exists
2022-08-06 08:20:50.209 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A14 as result already exists
2022-08-06 08:20:50.209 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A15 as result already exists
2022-08-06 08:20:50.210 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A16 as result already exists
2022-08-06 08:20:50.210 | DEBUG    | __main__:run:370 - Skipping benchmark 19:A17 as result already exists
2022-08-06 08:20:50.210 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 08:20:50.210 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E0 as result already exists
2022-08-06 08:20:50.210 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E1 as result already exists
2022-08-06 08:20:50.210 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E2 as result already exists
2022-08-06 08:20:50.210 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E3 as result already exists
2022-08-06 08:20:50.210 | DEBUG    | __main__:run:370 - Skipping benchmark 19:E4 as result already exists
2022-08-06 08:20:50.210 | DEBUG    | __main__:run:356 - Running benchmark 20
2022-08-06 08:20:50.211 | DEBUG    | __main__:run:357 - Number of Sets: 5
2022-08-06 08:20:50.211 | DEBUG    | __main__:run:363 - Number of queries: 4
2022-08-06 08:20:50.211 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B0 as result already exists
2022-08-06 08:20:50.211 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B1 as result already exists
2022-08-06 08:20:50.211 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B2 as result already exists
2022-08-06 08:20:50.211 | DEBUG    | __main__:run:370 - Skipping benchmark 20:B3 as result already exists
2022-08-06 08:20:50.211 | DEBUG    | __main__:run:363 - Number of queries: 1
2022-08-06 08:20:50.211 | DEBUG    | __main__:run:370 - Skipping benchmark 20:C0 as result already exists
2022-08-06 08:20:50.211 | DEBUG    | __main__:run:363 - Number of queries: 17
2022-08-06 08:20:50.211 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D0 as result already exists
2022-08-06 08:20:50.212 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D1 as result already exists
2022-08-06 08:20:50.212 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D2 as result already exists
2022-08-06 08:20:50.212 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D3 as result already exists
2022-08-06 08:20:50.212 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D4 as result already exists
2022-08-06 08:20:50.212 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D5 as result already exists
2022-08-06 08:20:50.212 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D6 as result already exists
2022-08-06 08:20:50.212 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D7 as result already exists
2022-08-06 08:20:50.212 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D8 as result already exists
2022-08-06 08:20:50.212 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D9 as result already exists
2022-08-06 08:20:50.213 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D10 as result already exists
2022-08-06 08:20:50.213 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D11 as result already exists
2022-08-06 08:20:50.213 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D12 as result already exists
2022-08-06 08:20:50.213 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D13 as result already exists
2022-08-06 08:20:50.213 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D14 as result already exists
2022-08-06 08:20:50.213 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D15 as result already exists
2022-08-06 08:20:50.213 | DEBUG    | __main__:run:370 - Skipping benchmark 20:D16 as result already exists
2022-08-06 08:20:50.213 | DEBUG    | __main__:run:363 - Number of queries: 5
2022-08-06 08:20:50.213 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A0 as result already exists
2022-08-06 08:20:50.214 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A1 as result already exists
2022-08-06 08:20:50.214 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A2 as result already exists
2022-08-06 08:20:50.214 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A3 as result already exists
2022-08-06 08:20:50.214 | DEBUG    | __main__:run:370 - Skipping benchmark 20:A4 as result already exists
2022-08-06 08:20:50.214 | DEBUG    | __main__:run:363 - Number of queries: 2
2022-08-06 08:20:50.214 | DEBUG    | __main__:run:370 - Skipping benchmark 20:E0 as result already exists
2022-08-06 08:20:50.214 | DEBUG    | __main__:run:370 - Skipping benchmark 20:E1 as result already exists
